   1               		.file	"process_unicode.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.hex_to_keycode,"ax",@progbits
  11               		.weak	hex_to_keycode
  13               	hex_to_keycode:
  14               	.LVL0:
  15               	.LFB107:
  16               		.file 1 "quantum/process_keycode/process_unicode.c"
   1:quantum/process_keycode/process_unicode.c **** #include "process_unicode.h"
   2:quantum/process_keycode/process_unicode.c **** 
   3:quantum/process_keycode/process_unicode.c **** static uint8_t input_mode;
   4:quantum/process_keycode/process_unicode.c **** 
   5:quantum/process_keycode/process_unicode.c **** __attribute__((weak))
   6:quantum/process_keycode/process_unicode.c **** uint16_t hex_to_keycode(uint8_t hex)
   7:quantum/process_keycode/process_unicode.c **** {
  17               		.loc 1 7 1 view -0
  18               		.cfi_startproc
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
   8:quantum/process_keycode/process_unicode.c ****   if (hex == 0x0) {
  23               		.loc 1 8 3 view .LVU1
  24               		.loc 1 8 6 is_stmt 0 view .LVU2
  25 0000 8823      		tst r24
  26 0002 01F0      		breq .L4
   9:quantum/process_keycode/process_unicode.c ****     return KC_0;
  10:quantum/process_keycode/process_unicode.c ****   } else if (hex < 0xA) {
  27               		.loc 1 10 10 is_stmt 1 view .LVU3
  28 0004 90E0      		ldi r25,0
  29               		.loc 1 10 13 is_stmt 0 view .LVU4
  30 0006 8A30      		cpi r24,lo8(10)
  31 0008 00F4      		brsh .L3
  11:quantum/process_keycode/process_unicode.c ****     return KC_1 + (hex - 0x1);
  32               		.loc 1 11 5 is_stmt 1 view .LVU5
  33               		.loc 1 11 17 is_stmt 0 view .LVU6
  34 000a 4D96      		adiw r24,29
  35               	.LVL1:
  36               		.loc 1 11 17 view .LVU7
  37 000c 0895      		ret
  38               	.LVL2:
  39               	.L3:
  12:quantum/process_keycode/process_unicode.c ****   } else {
  13:quantum/process_keycode/process_unicode.c ****     return KC_A + (hex - 0xA);
  40               		.loc 1 13 5 is_stmt 1 view .LVU8
  41               		.loc 1 13 17 is_stmt 0 view .LVU9
  42 000e 0697      		sbiw r24,6
  43               	.LVL3:
  44               		.loc 1 13 17 view .LVU10
  45 0010 0895      		ret
  46               	.LVL4:
  47               	.L4:
   9:quantum/process_keycode/process_unicode.c ****   } else if (hex < 0xA) {
  48               		.loc 1 9 12 view .LVU11
  49 0012 87E2      		ldi r24,lo8(39)
  50 0014 90E0      		ldi r25,0
  51               	.LVL5:
  52               	/* epilogue start */
  14:quantum/process_keycode/process_unicode.c ****   }
  15:quantum/process_keycode/process_unicode.c **** }
  53               		.loc 1 15 1 view .LVU12
  54 0016 0895      		ret
  55               		.cfi_endproc
  56               	.LFE107:
  58               		.section	.text.set_unicode_input_mode,"ax",@progbits
  59               	.global	set_unicode_input_mode
  61               	set_unicode_input_mode:
  62               	.LVL6:
  63               	.LFB108:
  16:quantum/process_keycode/process_unicode.c **** 
  17:quantum/process_keycode/process_unicode.c **** void set_unicode_input_mode(uint8_t os_target)
  18:quantum/process_keycode/process_unicode.c **** {
  64               		.loc 1 18 1 is_stmt 1 view -0
  65               		.cfi_startproc
  66               	/* prologue: function */
  67               	/* frame size = 0 */
  68               	/* stack size = 0 */
  69               	.L__stack_usage = 0
  19:quantum/process_keycode/process_unicode.c ****   input_mode = os_target;
  70               		.loc 1 19 3 view .LVU14
  71               		.loc 1 19 14 is_stmt 0 view .LVU15
  72 0000 8093 0000 		sts input_mode,r24
  73               	/* epilogue start */
  20:quantum/process_keycode/process_unicode.c **** }
  74               		.loc 1 20 1 view .LVU16
  75 0004 0895      		ret
  76               		.cfi_endproc
  77               	.LFE108:
  79               		.section	.text.get_unicode_input_mode,"ax",@progbits
  80               	.global	get_unicode_input_mode
  82               	get_unicode_input_mode:
  83               	.LFB109:
  21:quantum/process_keycode/process_unicode.c **** 
  22:quantum/process_keycode/process_unicode.c **** uint8_t get_unicode_input_mode(void) {
  84               		.loc 1 22 38 is_stmt 1 view -0
  85               		.cfi_startproc
  86               	/* prologue: function */
  87               	/* frame size = 0 */
  88               	/* stack size = 0 */
  89               	.L__stack_usage = 0
  23:quantum/process_keycode/process_unicode.c ****   return input_mode;
  90               		.loc 1 23 3 view .LVU18
  24:quantum/process_keycode/process_unicode.c **** }
  91               		.loc 1 24 1 is_stmt 0 view .LVU19
  92 0000 8091 0000 		lds r24,input_mode
  93               	/* epilogue start */
  94 0004 0895      		ret
  95               		.cfi_endproc
  96               	.LFE109:
  98               		.section	.text.unicode_input_start,"ax",@progbits
  99               		.weak	unicode_input_start
 101               	unicode_input_start:
 102               	.LFB110:
  25:quantum/process_keycode/process_unicode.c **** 
  26:quantum/process_keycode/process_unicode.c **** __attribute__((weak))
  27:quantum/process_keycode/process_unicode.c **** void unicode_input_start (void) {
 103               		.loc 1 27 33 is_stmt 1 view -0
 104               		.cfi_startproc
 105               	/* prologue: function */
 106               	/* frame size = 0 */
 107               	/* stack size = 0 */
 108               	.L__stack_usage = 0
  28:quantum/process_keycode/process_unicode.c ****   switch(input_mode) {
 109               		.loc 1 28 3 view .LVU21
 110 0000 8091 0000 		lds r24,input_mode
 111 0004 8130      		cpi r24,lo8(1)
 112 0006 01F0      		breq .L8
 113 0008 8823      		tst r24
 114 000a 01F0      		breq .L9
 115 000c 8230      		cpi r24,lo8(2)
 116 000e 01F0      		breq .L10
 117               	.L11:
  29:quantum/process_keycode/process_unicode.c ****   case UC_OSX:
  30:quantum/process_keycode/process_unicode.c ****     register_code(KC_LALT);
  31:quantum/process_keycode/process_unicode.c ****     break;
  32:quantum/process_keycode/process_unicode.c ****   case UC_LNX:
  33:quantum/process_keycode/process_unicode.c ****     register_code(KC_LCTL);
  34:quantum/process_keycode/process_unicode.c ****     register_code(KC_LSFT);
  35:quantum/process_keycode/process_unicode.c ****     register_code(KC_U);
  36:quantum/process_keycode/process_unicode.c ****     unregister_code(KC_U);
  37:quantum/process_keycode/process_unicode.c ****     unregister_code(KC_LSFT);
  38:quantum/process_keycode/process_unicode.c ****     unregister_code(KC_LCTL);
  39:quantum/process_keycode/process_unicode.c ****     break;
  40:quantum/process_keycode/process_unicode.c ****   case UC_WIN:
  41:quantum/process_keycode/process_unicode.c ****     register_code(KC_LALT);
  42:quantum/process_keycode/process_unicode.c ****     register_code(KC_PPLS);
  43:quantum/process_keycode/process_unicode.c ****     unregister_code(KC_PPLS);
  44:quantum/process_keycode/process_unicode.c ****     break;
  45:quantum/process_keycode/process_unicode.c ****   }
  46:quantum/process_keycode/process_unicode.c ****   wait_ms(UNICODE_TYPE_DELAY);
 118               		.loc 1 46 3 view .LVU22
 119               	.LVL7:
 120               	.LBB4:
 121               	.LBI4:
 122               		.file 2 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** _delay_ms(double __ms)
 123               		.loc 2 166 1 view .LVU23
 124               	.LBB5:
 167:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	double __tmp ;
 125               		.loc 2 168 2 view .LVU24
 169:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 126               		.loc 2 172 2 view .LVU25
 173:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 127               		.loc 2 173 2 view .LVU26
 174:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 128               		.loc 2 174 2 view .LVU27
 175:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 129               		.loc 2 184 3 view .LVU28
 185:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 130               		.loc 2 187 2 view .LVU29
 131 0010 8FE3      		ldi r24,lo8(-25537)
 132 0012 9CE9      		ldi r25,hi8(-25537)
 133 0014 0197      	1:	sbiw r24,1
 134 0016 01F4      		brne 1b
 135 0018 00C0      		rjmp .
 136 001a 0000      		nop
 137               	.LVL8:
 138               	/* epilogue start */
 139               		.loc 2 187 2 is_stmt 0 view .LVU30
 140               	.LBE5:
 141               	.LBE4:
  47:quantum/process_keycode/process_unicode.c **** }
 142               		.loc 1 47 1 view .LVU31
 143 001c 0895      		ret
 144               	.L9:
  30:quantum/process_keycode/process_unicode.c ****     break;
 145               		.loc 1 30 5 is_stmt 1 view .LVU32
 146 001e 82EE      		ldi r24,lo8(-30)
 147 0020 0E94 0000 		call register_code
 148               	.LVL9:
  31:quantum/process_keycode/process_unicode.c ****   case UC_LNX:
 149               		.loc 1 31 5 view .LVU33
 150 0024 00C0      		rjmp .L11
 151               	.L8:
  33:quantum/process_keycode/process_unicode.c ****     register_code(KC_LSFT);
 152               		.loc 1 33 5 view .LVU34
 153 0026 80EE      		ldi r24,lo8(-32)
 154 0028 0E94 0000 		call register_code
 155               	.LVL10:
  34:quantum/process_keycode/process_unicode.c ****     register_code(KC_U);
 156               		.loc 1 34 5 view .LVU35
 157 002c 81EE      		ldi r24,lo8(-31)
 158 002e 0E94 0000 		call register_code
 159               	.LVL11:
  35:quantum/process_keycode/process_unicode.c ****     unregister_code(KC_U);
 160               		.loc 1 35 5 view .LVU36
 161 0032 88E1      		ldi r24,lo8(24)
 162 0034 0E94 0000 		call register_code
 163               	.LVL12:
  36:quantum/process_keycode/process_unicode.c ****     unregister_code(KC_LSFT);
 164               		.loc 1 36 5 view .LVU37
 165 0038 88E1      		ldi r24,lo8(24)
 166 003a 0E94 0000 		call unregister_code
 167               	.LVL13:
  37:quantum/process_keycode/process_unicode.c ****     unregister_code(KC_LCTL);
 168               		.loc 1 37 5 view .LVU38
 169 003e 81EE      		ldi r24,lo8(-31)
 170 0040 0E94 0000 		call unregister_code
 171               	.LVL14:
  38:quantum/process_keycode/process_unicode.c ****     break;
 172               		.loc 1 38 5 view .LVU39
 173 0044 80EE      		ldi r24,lo8(-32)
 174               	.L12:
  43:quantum/process_keycode/process_unicode.c ****     break;
 175               		.loc 1 43 5 is_stmt 0 view .LVU40
 176 0046 0E94 0000 		call unregister_code
 177               	.LVL15:
  44:quantum/process_keycode/process_unicode.c ****   }
 178               		.loc 1 44 5 is_stmt 1 view .LVU41
 179 004a 00C0      		rjmp .L11
 180               	.L10:
  41:quantum/process_keycode/process_unicode.c ****     register_code(KC_PPLS);
 181               		.loc 1 41 5 view .LVU42
 182 004c 82EE      		ldi r24,lo8(-30)
 183 004e 0E94 0000 		call register_code
 184               	.LVL16:
  42:quantum/process_keycode/process_unicode.c ****     unregister_code(KC_PPLS);
 185               		.loc 1 42 5 view .LVU43
 186 0052 87E5      		ldi r24,lo8(87)
 187 0054 0E94 0000 		call register_code
 188               	.LVL17:
  43:quantum/process_keycode/process_unicode.c ****     break;
 189               		.loc 1 43 5 view .LVU44
 190 0058 87E5      		ldi r24,lo8(87)
 191 005a 00C0      		rjmp .L12
 192               		.cfi_endproc
 193               	.LFE110:
 195               		.section	.text.unicode_input_finish,"ax",@progbits
 196               		.weak	unicode_input_finish
 198               	unicode_input_finish:
 199               	.LFB111:
  48:quantum/process_keycode/process_unicode.c **** 
  49:quantum/process_keycode/process_unicode.c **** __attribute__((weak))
  50:quantum/process_keycode/process_unicode.c **** void unicode_input_finish (void) {
 200               		.loc 1 50 34 view -0
 201               		.cfi_startproc
 202               	/* prologue: function */
 203               	/* frame size = 0 */
 204               	/* stack size = 0 */
 205               	.L__stack_usage = 0
  51:quantum/process_keycode/process_unicode.c ****   switch(input_mode) {
 206               		.loc 1 51 3 view .LVU46
 207 0000 8091 0000 		lds r24,input_mode
 208 0004 8130      		cpi r24,lo8(1)
 209 0006 01F0      		breq .L14
 210 0008 8823      		tst r24
 211 000a 01F0      		breq .L15
 212 000c 8230      		cpi r24,lo8(2)
 213 000e 01F4      		brne .L13
 214               	.L15:
  52:quantum/process_keycode/process_unicode.c ****   case UC_OSX:
  53:quantum/process_keycode/process_unicode.c ****   case UC_WIN:
  54:quantum/process_keycode/process_unicode.c ****     unregister_code(KC_LALT);
 215               		.loc 1 54 5 view .LVU47
 216 0010 82EE      		ldi r24,lo8(-30)
 217               	.L20:
  55:quantum/process_keycode/process_unicode.c ****     break;
  56:quantum/process_keycode/process_unicode.c ****   case UC_LNX:
  57:quantum/process_keycode/process_unicode.c ****     register_code(KC_SPC);
  58:quantum/process_keycode/process_unicode.c ****     unregister_code(KC_SPC);
 218               		.loc 1 58 5 is_stmt 0 view .LVU48
 219 0012 0C94 0000 		jmp unregister_code
 220               	.LVL18:
 221               	.L14:
  57:quantum/process_keycode/process_unicode.c ****     unregister_code(KC_SPC);
 222               		.loc 1 57 5 is_stmt 1 view .LVU49
 223 0016 8CE2      		ldi r24,lo8(44)
 224 0018 0E94 0000 		call register_code
 225               	.LVL19:
 226               		.loc 1 58 5 view .LVU50
 227 001c 8CE2      		ldi r24,lo8(44)
 228 001e 00C0      		rjmp .L20
 229               	.L13:
 230               	/* epilogue start */
  59:quantum/process_keycode/process_unicode.c ****     break;
  60:quantum/process_keycode/process_unicode.c ****   }
  61:quantum/process_keycode/process_unicode.c **** }
 231               		.loc 1 61 1 is_stmt 0 view .LVU51
 232 0020 0895      		ret
 233               		.cfi_endproc
 234               	.LFE111:
 236               		.section	.text.register_hex,"ax",@progbits
 237               	.global	register_hex
 239               	register_hex:
 240               	.LVL20:
 241               	.LFB112:
  62:quantum/process_keycode/process_unicode.c **** 
  63:quantum/process_keycode/process_unicode.c **** void register_hex(uint16_t hex) {
 242               		.loc 1 63 33 is_stmt 1 view -0
 243               		.cfi_startproc
 244               		.loc 1 63 33 is_stmt 0 view .LVU53
 245 0000 EF92      		push r14
 246               	.LCFI0:
 247               		.cfi_def_cfa_offset 3
 248               		.cfi_offset 14, -2
 249 0002 FF92      		push r15
 250               	.LCFI1:
 251               		.cfi_def_cfa_offset 4
 252               		.cfi_offset 15, -3
 253 0004 1F93      		push r17
 254               	.LCFI2:
 255               		.cfi_def_cfa_offset 5
 256               		.cfi_offset 17, -4
 257 0006 CF93      		push r28
 258               	.LCFI3:
 259               		.cfi_def_cfa_offset 6
 260               		.cfi_offset 28, -5
 261 0008 DF93      		push r29
 262               	.LCFI4:
 263               		.cfi_def_cfa_offset 7
 264               		.cfi_offset 29, -6
 265               	/* prologue: function */
 266               	/* frame size = 0 */
 267               	/* stack size = 5 */
 268               	.L__stack_usage = 5
 269 000a 7C01      		movw r14,r24
  64:quantum/process_keycode/process_unicode.c ****   for(int i = 3; i >= 0; i--) {
 270               		.loc 1 64 3 is_stmt 1 view .LVU54
 271               	.LBB6:
 272               		.loc 1 64 7 view .LVU55
 273               	.LVL21:
 274               		.loc 1 64 7 is_stmt 0 view .LVU56
 275               	.LBE6:
  63:quantum/process_keycode/process_unicode.c ****   for(int i = 3; i >= 0; i--) {
 276               		.loc 1 63 33 view .LVU57
 277 000c CCE0      		ldi r28,lo8(12)
 278 000e D0E0      		ldi r29,0
 279               	.LVL22:
 280               	.L22:
 281               	.LBB8:
 282               	.LBB7:
  65:quantum/process_keycode/process_unicode.c ****     uint8_t digit = ((hex >> (i*4)) & 0xF);
 283               		.loc 1 65 5 is_stmt 1 discriminator 3 view .LVU58
 284               		.loc 1 65 27 is_stmt 0 discriminator 3 view .LVU59
 285 0010 C701      		movw r24,r14
 286 0012 0C2E      		mov r0,r28
 287 0014 00C0      		rjmp 2f
 288               		1:
 289 0016 9695      		lsr r25
 290 0018 8795      		ror r24
 291               		2:
 292 001a 0A94      		dec r0
 293 001c 02F4      		brpl 1b
 294               		.loc 1 65 13 discriminator 3 view .LVU60
 295 001e 182F      		mov r17,r24
 296 0020 1F70      		andi r17,lo8(15)
 297               	.LVL23:
  66:quantum/process_keycode/process_unicode.c ****     register_code(hex_to_keycode(digit));
 298               		.loc 1 66 5 is_stmt 1 discriminator 3 view .LVU61
 299               		.loc 1 66 19 is_stmt 0 discriminator 3 view .LVU62
 300 0022 812F      		mov r24,r17
 301 0024 0E94 0000 		call hex_to_keycode
 302               	.LVL24:
 303               		.loc 1 66 5 discriminator 3 view .LVU63
 304 0028 0E94 0000 		call register_code
 305               	.LVL25:
  67:quantum/process_keycode/process_unicode.c ****     unregister_code(hex_to_keycode(digit));
 306               		.loc 1 67 5 is_stmt 1 discriminator 3 view .LVU64
 307               		.loc 1 67 21 is_stmt 0 discriminator 3 view .LVU65
 308 002c 812F      		mov r24,r17
 309 002e 0E94 0000 		call hex_to_keycode
 310               	.LVL26:
 311               		.loc 1 67 5 discriminator 3 view .LVU66
 312 0032 0E94 0000 		call unregister_code
 313               	.LVL27:
 314               		.loc 1 67 5 discriminator 3 view .LVU67
 315 0036 2497      		sbiw r28,4
 316               	.LBE7:
  64:quantum/process_keycode/process_unicode.c ****     uint8_t digit = ((hex >> (i*4)) & 0xF);
 317               		.loc 1 64 3 discriminator 3 view .LVU68
 318 0038 CC3F      		cpi r28,-4
 319 003a 8FEF      		ldi r24,-1
 320 003c D807      		cpc r29,r24
 321 003e 01F4      		brne .L22
 322               	/* epilogue start */
 323               	.LBE8:
  68:quantum/process_keycode/process_unicode.c ****   }
  69:quantum/process_keycode/process_unicode.c **** }
 324               		.loc 1 69 1 view .LVU69
 325 0040 DF91      		pop r29
 326 0042 CF91      		pop r28
 327 0044 1F91      		pop r17
 328               	.LVL28:
 329               		.loc 1 69 1 view .LVU70
 330 0046 FF90      		pop r15
 331 0048 EF90      		pop r14
 332               	.LVL29:
 333               		.loc 1 69 1 view .LVU71
 334 004a 0895      		ret
 335               		.cfi_endproc
 336               	.LFE112:
 338               		.section	.text.process_unicode,"ax",@progbits
 339               	.global	process_unicode
 341               	process_unicode:
 342               	.LVL30:
 343               	.LFB113:
  70:quantum/process_keycode/process_unicode.c **** 
  71:quantum/process_keycode/process_unicode.c **** bool process_unicode(uint16_t keycode, keyrecord_t *record) {
 344               		.loc 1 71 61 is_stmt 1 view -0
 345               		.cfi_startproc
 346               		.loc 1 71 61 is_stmt 0 view .LVU73
 347 0000 CF93      		push r28
 348               	.LCFI5:
 349               		.cfi_def_cfa_offset 3
 350               		.cfi_offset 28, -2
 351 0002 DF93      		push r29
 352               	.LCFI6:
 353               		.cfi_def_cfa_offset 4
 354               		.cfi_offset 29, -3
 355               	/* prologue: function */
 356               	/* frame size = 0 */
 357               	/* stack size = 2 */
 358               	.L__stack_usage = 2
 359 0004 EC01      		movw r28,r24
  72:quantum/process_keycode/process_unicode.c ****   if (keycode > QK_UNICODE && record->event.pressed) {
 360               		.loc 1 72 3 is_stmt 1 view .LVU74
 361               		.loc 1 72 6 is_stmt 0 view .LVU75
 362 0006 C130      		cpi r28,1
 363 0008 80E8      		ldi r24,-128
 364 000a D807      		cpc r29,r24
 365               	.LVL31:
 366               		.loc 1 72 6 view .LVU76
 367 000c 00F0      		brlo .L25
 368               		.loc 1 72 28 discriminator 1 view .LVU77
 369 000e FB01      		movw r30,r22
 370 0010 8281      		ldd r24,Z+2
 371 0012 8823      		tst r24
 372 0014 01F0      		breq .L25
 373               	.LBB9:
  73:quantum/process_keycode/process_unicode.c ****     uint16_t unicode = keycode & 0x7FFF;
 374               		.loc 1 73 5 is_stmt 1 view .LVU78
 375               	.LVL32:
  74:quantum/process_keycode/process_unicode.c ****     unicode_input_start();
 376               		.loc 1 74 5 view .LVU79
 377 0016 0E94 0000 		call unicode_input_start
 378               	.LVL33:
  75:quantum/process_keycode/process_unicode.c ****     register_hex(unicode);
 379               		.loc 1 75 5 view .LVU80
 380 001a CE01      		movw r24,r28
 381 001c 9F77      		andi r25,127
 382               	.LVL34:
 383               		.loc 1 75 5 is_stmt 0 view .LVU81
 384 001e 0E94 0000 		call register_hex
 385               	.LVL35:
  76:quantum/process_keycode/process_unicode.c ****     unicode_input_finish();
 386               		.loc 1 76 5 is_stmt 1 view .LVU82
 387 0022 0E94 0000 		call unicode_input_finish
 388               	.LVL36:
 389               	.L25:
 390               		.loc 1 76 5 is_stmt 0 view .LVU83
 391               	.LBE9:
  77:quantum/process_keycode/process_unicode.c ****   }
  78:quantum/process_keycode/process_unicode.c ****   return true;
 392               		.loc 1 78 3 is_stmt 1 view .LVU84
  79:quantum/process_keycode/process_unicode.c **** }
 393               		.loc 1 79 1 is_stmt 0 view .LVU85
 394 0026 81E0      		ldi r24,lo8(1)
 395               	/* epilogue start */
 396 0028 DF91      		pop r29
 397 002a CF91      		pop r28
 398               	.LVL37:
 399               		.loc 1 79 1 view .LVU86
 400 002c 0895      		ret
 401               		.cfi_endproc
 402               	.LFE113:
 404               		.section	.bss.input_mode,"aw",@nobits
 407               	input_mode:
 408 0000 00        		.zero	1
 409               		.text
 410               	.Letext0:
 411               		.file 3 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/stdint.h"
 412               		.file 4 "/usr/local/Cellar/avr-gcc/8.1.0/lib/avr-gcc/8/gcc/avr/8.1.0/include/stddef.h"
 413               		.file 5 "./tmk_core/common/keyboard.h"
 414               		.file 6 "./tmk_core/common/action.h"
 415               		.file 7 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 416               		.file 8 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 417               		.file 9 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 418               		.file 10 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/HostStandardReq.h"
 419               		.file 11 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/stdio.h"
 420               		.file 12 "./tmk_core/common/report.h"
 421               		.file 13 "./tmk_core/common/host.h"
 422               		.file 14 "./tmk_core/common/debug.h"
 423               		.file 15 "./quantum/keycode_config.h"
 424               		.file 16 "./quantum/keymap.h"
 425               		.file 17 "./tmk_core/common/keycode.h"
 426               		.file 18 "./tmk_core/common/action_layer.h"
 427               		.file 19 "./tmk_core/common/timer.h"
 428               		.file 20 "./tmk_core/common/action_util.h"
 429               		.file 21 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/stdlib.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 process_unicode.c
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccOmXb95.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccOmXb95.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccOmXb95.s:4      *ABS*:000000000000003f __SREG__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccOmXb95.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccOmXb95.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccOmXb95.s:13     .text.hex_to_keycode:0000000000000000 hex_to_keycode
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccOmXb95.s:61     .text.set_unicode_input_mode:0000000000000000 set_unicode_input_mode
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccOmXb95.s:407    .bss.input_mode:0000000000000000 input_mode
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccOmXb95.s:82     .text.get_unicode_input_mode:0000000000000000 get_unicode_input_mode
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccOmXb95.s:101    .text.unicode_input_start:0000000000000000 unicode_input_start
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccOmXb95.s:198    .text.unicode_input_finish:0000000000000000 unicode_input_finish
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccOmXb95.s:239    .text.register_hex:0000000000000000 register_hex
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccOmXb95.s:341    .text.process_unicode:0000000000000000 process_unicode

UNDEFINED SYMBOLS
register_code
unregister_code
__do_clear_bss
