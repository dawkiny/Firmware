   1               		.file	"command.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.mousekey_param_inc,"ax",@progbits
  12               	mousekey_param_inc:
  13               	.LVL0:
  14               	.LFB117:
  15               		.file 1 "./tmk_core/common/command.c"
   1:./tmk_core/common/command.c **** /*
   2:./tmk_core/common/command.c **** Copyright 2011 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/command.c **** 
   4:./tmk_core/common/command.c **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/command.c **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/command.c **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/command.c **** (at your option) any later version.
   8:./tmk_core/common/command.c **** 
   9:./tmk_core/common/command.c **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/command.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/command.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/command.c **** GNU General Public License for more details.
  13:./tmk_core/common/command.c **** 
  14:./tmk_core/common/command.c **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/command.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/command.c **** */
  17:./tmk_core/common/command.c **** #include <stdint.h>
  18:./tmk_core/common/command.c **** #include <stdbool.h>
  19:./tmk_core/common/command.c **** #include "wait.h"
  20:./tmk_core/common/command.c **** #include "keycode.h"
  21:./tmk_core/common/command.c **** #include "host.h"
  22:./tmk_core/common/command.c **** #include "keymap.h"
  23:./tmk_core/common/command.c **** #include "print.h"
  24:./tmk_core/common/command.c **** #include "debug.h"
  25:./tmk_core/common/command.c **** #include "util.h"
  26:./tmk_core/common/command.c **** #include "timer.h"
  27:./tmk_core/common/command.c **** #include "keyboard.h"
  28:./tmk_core/common/command.c **** #include "bootloader.h"
  29:./tmk_core/common/command.c **** #include "action_layer.h"
  30:./tmk_core/common/command.c **** #include "action_util.h"
  31:./tmk_core/common/command.c **** #include "eeconfig.h"
  32:./tmk_core/common/command.c **** #include "sleep_led.h"
  33:./tmk_core/common/command.c **** #include "led.h"
  34:./tmk_core/common/command.c **** #include "command.h"
  35:./tmk_core/common/command.c **** #include "backlight.h"
  36:./tmk_core/common/command.c **** #include "quantum.h"
  37:./tmk_core/common/command.c **** #include "version.h"
  38:./tmk_core/common/command.c **** 
  39:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  40:./tmk_core/common/command.c **** #include "mousekey.h"
  41:./tmk_core/common/command.c **** #endif
  42:./tmk_core/common/command.c **** 
  43:./tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
  44:./tmk_core/common/command.c **** 	#include "usb_keyboard.h"
  45:./tmk_core/common/command.c **** 		#ifdef EXTRAKEY_ENABLE
  46:./tmk_core/common/command.c **** 		#include "usb_extra.h"
  47:./tmk_core/common/command.c **** 	#endif
  48:./tmk_core/common/command.c **** #endif
  49:./tmk_core/common/command.c **** 
  50:./tmk_core/common/command.c **** #ifdef PROTOCOL_VUSB
  51:./tmk_core/common/command.c **** 	#include "usbdrv.h"
  52:./tmk_core/common/command.c **** #endif
  53:./tmk_core/common/command.c **** 
  54:./tmk_core/common/command.c **** #ifdef AUDIO_ENABLE
  55:./tmk_core/common/command.c ****     #include "audio.h"
  56:./tmk_core/common/command.c **** #endif /* AUDIO_ENABLE */
  57:./tmk_core/common/command.c **** 
  58:./tmk_core/common/command.c **** 
  59:./tmk_core/common/command.c **** static bool command_common(uint8_t code);
  60:./tmk_core/common/command.c **** static void command_common_help(void);
  61:./tmk_core/common/command.c **** static void print_version(void);
  62:./tmk_core/common/command.c **** static void print_status(void);
  63:./tmk_core/common/command.c **** static bool command_console(uint8_t code);
  64:./tmk_core/common/command.c **** static void command_console_help(void);
  65:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  66:./tmk_core/common/command.c **** static bool mousekey_console(uint8_t code);
  67:./tmk_core/common/command.c **** static void mousekey_console_help(void);
  68:./tmk_core/common/command.c **** #endif
  69:./tmk_core/common/command.c **** 
  70:./tmk_core/common/command.c **** static void switch_default_layer(uint8_t layer);
  71:./tmk_core/common/command.c **** 
  72:./tmk_core/common/command.c **** 
  73:./tmk_core/common/command.c **** command_state_t command_state = ONESHOT;
  74:./tmk_core/common/command.c **** 
  75:./tmk_core/common/command.c **** 
  76:./tmk_core/common/command.c **** bool command_proc(uint8_t code)
  77:./tmk_core/common/command.c **** {
  78:./tmk_core/common/command.c ****     switch (command_state) {
  79:./tmk_core/common/command.c ****         case ONESHOT:
  80:./tmk_core/common/command.c ****             if (!IS_COMMAND())
  81:./tmk_core/common/command.c ****                 return false;
  82:./tmk_core/common/command.c ****             return (command_extra(code) || command_common(code));
  83:./tmk_core/common/command.c ****             break;
  84:./tmk_core/common/command.c ****         case CONSOLE:
  85:./tmk_core/common/command.c ****             if (IS_COMMAND())
  86:./tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
  87:./tmk_core/common/command.c ****             else
  88:./tmk_core/common/command.c ****                 return (command_console_extra(code) || command_console(code));
  89:./tmk_core/common/command.c ****             break;
  90:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  91:./tmk_core/common/command.c ****         case MOUSEKEY:
  92:./tmk_core/common/command.c ****             mousekey_console(code);
  93:./tmk_core/common/command.c ****             break;
  94:./tmk_core/common/command.c **** #endif
  95:./tmk_core/common/command.c ****         default:
  96:./tmk_core/common/command.c ****             command_state = ONESHOT;
  97:./tmk_core/common/command.c ****             return false;
  98:./tmk_core/common/command.c ****     }
  99:./tmk_core/common/command.c ****     return true;
 100:./tmk_core/common/command.c **** }
 101:./tmk_core/common/command.c **** 
 102:./tmk_core/common/command.c **** /* TODO: Refactoring is needed. */
 103:./tmk_core/common/command.c **** /* This allows to define extra commands. return false when not processed. */
 104:./tmk_core/common/command.c **** bool command_extra(uint8_t code) __attribute__ ((weak));
 105:./tmk_core/common/command.c **** bool command_extra(uint8_t code)
 106:./tmk_core/common/command.c **** {
 107:./tmk_core/common/command.c ****     (void)code;
 108:./tmk_core/common/command.c ****     return false;
 109:./tmk_core/common/command.c **** }
 110:./tmk_core/common/command.c **** 
 111:./tmk_core/common/command.c **** bool command_console_extra(uint8_t code) __attribute__ ((weak));
 112:./tmk_core/common/command.c **** bool command_console_extra(uint8_t code)
 113:./tmk_core/common/command.c **** {
 114:./tmk_core/common/command.c ****     (void)code;
 115:./tmk_core/common/command.c ****     return false;
 116:./tmk_core/common/command.c **** }
 117:./tmk_core/common/command.c **** 
 118:./tmk_core/common/command.c **** 
 119:./tmk_core/common/command.c **** /***********************************************************
 120:./tmk_core/common/command.c ****  * Command common
 121:./tmk_core/common/command.c ****  ***********************************************************/
 122:./tmk_core/common/command.c **** static void command_common_help(void)
 123:./tmk_core/common/command.c **** {
 124:./tmk_core/common/command.c **** 	print(                            "\n\t- Magic -\n"
 125:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG       ) ":	Debug Message Toggle\n"
 126:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG_MATRIX) ":	Matrix Debug Mode Toggle - Show keypresses in matrix grid\n"
 127:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG_KBD   ) ":	Keyboard Debug Toggle - Show keypress report\n"
 128:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG_MOUSE ) ":	Debug Mouse Toggle\n"
 129:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_VERSION     ) ":	Version\n"
 130:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_STATUS      ) ":	Status\n"
 131:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_CONSOLE     ) ":	Activate Console Mode\n"
 132:./tmk_core/common/command.c **** 
 133:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_CUSTOM
 134:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER0      ) ":	Switch to Layer 0\n"
 135:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER1      ) ":	Switch to Layer 1\n"
 136:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER2      ) ":	Switch to Layer 2\n"
 137:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER3      ) ":	Switch to Layer 3\n"
 138:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER4      ) ":	Switch to Layer 4\n"
 139:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER5      ) ":	Switch to Layer 5\n"
 140:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER6      ) ":	Switch to Layer 6\n"
 141:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER7      ) ":	Switch to Layer 7\n"
 142:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER8      ) ":	Switch to Layer 8\n"
 143:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER9      ) ":	Switch to Layer 9\n"
 144:./tmk_core/common/command.c **** #endif
 145:./tmk_core/common/command.c **** 
 146:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_FKEYS
 147:./tmk_core/common/command.c **** 		                            "F1-F10:	Switch to Layer 0-9 (F10 = L0)\n"
 148:./tmk_core/common/command.c **** #endif
 149:./tmk_core/common/command.c **** 
 150:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_NKEYS
 151:./tmk_core/common/command.c **** 		                            "0-9:	Switch to Layer 0-9\n"
 152:./tmk_core/common/command.c **** #endif
 153:./tmk_core/common/command.c **** 
 154:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER0_ALT1 ) ":	Switch to Layer 0 (alternate key 1)\n"
 155:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER0_ALT2 ) ":	Switch to Layer 0 (alternate key 2)\n"
 156:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_BOOTLOADER  ) ":	Jump to Bootloader (Reset)\n"
 157:./tmk_core/common/command.c **** 
 158:./tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 159:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LOCK        ) ":	Lock\n"
 160:./tmk_core/common/command.c **** #endif
 161:./tmk_core/common/command.c **** 
 162:./tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 163:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_EEPROM      ) ":	Print EEPROM Settings\n"
 164:./tmk_core/common/command.c **** #endif
 165:./tmk_core/common/command.c **** 
 166:./tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 167:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_NKRO        ) ":	NKRO Toggle\n"
 168:./tmk_core/common/command.c **** #endif
 169:./tmk_core/common/command.c **** 
 170:./tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 171:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_SLEEP_LED   ) ":	Sleep LED Test\n"
 172:./tmk_core/common/command.c **** #endif
 173:./tmk_core/common/command.c ****     );
 174:./tmk_core/common/command.c **** }
 175:./tmk_core/common/command.c **** 
 176:./tmk_core/common/command.c **** static void print_version(void)
 177:./tmk_core/common/command.c **** {
 178:./tmk_core/common/command.c **** 	// print version & information
 179:./tmk_core/common/command.c ****     print("\n\t- Version -\n");
 180:./tmk_core/common/command.c ****     print("DESC: " STR(DESCRIPTION) "\n");
 181:./tmk_core/common/command.c ****     print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
 182:./tmk_core/common/command.c ****           "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
 183:./tmk_core/common/command.c ****           "VER: " STR(DEVICE_VER) "\n");
 184:./tmk_core/common/command.c ****     print("BUILD: " STR(QMK_VERSION) " (" __TIME__ " " __DATE__ ")\n");
 185:./tmk_core/common/command.c **** 
 186:./tmk_core/common/command.c ****     /* build options */
 187:./tmk_core/common/command.c ****     print("OPTIONS:"
 188:./tmk_core/common/command.c **** 
 189:./tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 190:./tmk_core/common/command.c **** 	    " PJRC"
 191:./tmk_core/common/command.c **** #endif
 192:./tmk_core/common/command.c **** #ifdef PROTOCOL_LUFA
 193:./tmk_core/common/command.c **** 	    " LUFA"
 194:./tmk_core/common/command.c **** #endif
 195:./tmk_core/common/command.c **** #ifdef PROTOCOL_VUSB
 196:./tmk_core/common/command.c **** 	    " VUSB"
 197:./tmk_core/common/command.c **** #endif
 198:./tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 199:./tmk_core/common/command.c **** 	    " BOOTMAGIC"
 200:./tmk_core/common/command.c **** #endif
 201:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 202:./tmk_core/common/command.c **** 	    " MOUSEKEY"
 203:./tmk_core/common/command.c **** #endif
 204:./tmk_core/common/command.c **** #ifdef EXTRAKEY_ENABLE
 205:./tmk_core/common/command.c **** 	    " EXTRAKEY"
 206:./tmk_core/common/command.c **** #endif
 207:./tmk_core/common/command.c **** #ifdef CONSOLE_ENABLE
 208:./tmk_core/common/command.c **** 	    " CONSOLE"
 209:./tmk_core/common/command.c **** #endif
 210:./tmk_core/common/command.c **** #ifdef COMMAND_ENABLE
 211:./tmk_core/common/command.c **** 	    " COMMAND"
 212:./tmk_core/common/command.c **** #endif
 213:./tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 214:./tmk_core/common/command.c **** 	    " NKRO"
 215:./tmk_core/common/command.c **** #endif
 216:./tmk_core/common/command.c **** #ifdef KEYMAP_SECTION_ENABLE
 217:./tmk_core/common/command.c **** 	    " KEYMAP_SECTION"
 218:./tmk_core/common/command.c **** #endif
 219:./tmk_core/common/command.c **** 
 220:./tmk_core/common/command.c **** 	    " " STR(BOOTLOADER_SIZE) "\n");
 221:./tmk_core/common/command.c **** 
 222:./tmk_core/common/command.c ****     print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
 223:./tmk_core/common/command.c **** #if defined(__AVR__)
 224:./tmk_core/common/command.c ****           " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__
 225:./tmk_core/common/command.c ****           " AVR_ARCH: avr" STR(__AVR_ARCH__)
 226:./tmk_core/common/command.c **** #endif
 227:./tmk_core/common/command.c **** 		  "\n");
 228:./tmk_core/common/command.c **** 
 229:./tmk_core/common/command.c **** 	return;
 230:./tmk_core/common/command.c **** }
 231:./tmk_core/common/command.c **** 
 232:./tmk_core/common/command.c **** static void print_status(void)
 233:./tmk_core/common/command.c **** {
 234:./tmk_core/common/command.c **** 
 235:./tmk_core/common/command.c ****     print("\n\t- Status -\n");
 236:./tmk_core/common/command.c **** 
 237:./tmk_core/common/command.c ****     print_val_hex8(host_keyboard_leds());
 238:./tmk_core/common/command.c ****     print_val_hex8(keyboard_protocol);
 239:./tmk_core/common/command.c ****     print_val_hex8(keyboard_idle);
 240:./tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 241:./tmk_core/common/command.c ****     print_val_hex8(keymap_config.nkro);
 242:./tmk_core/common/command.c **** #endif
 243:./tmk_core/common/command.c ****     print_val_hex32(timer_read32());
 244:./tmk_core/common/command.c **** 
 245:./tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 246:./tmk_core/common/command.c ****     print_val_hex8(UDCON);
 247:./tmk_core/common/command.c ****     print_val_hex8(UDIEN);
 248:./tmk_core/common/command.c ****     print_val_hex8(UDINT);
 249:./tmk_core/common/command.c ****     print_val_hex8(usb_keyboard_leds);
 250:./tmk_core/common/command.c ****     print_val_hex8(usb_keyboard_idle_count);
 251:./tmk_core/common/command.c **** #endif
 252:./tmk_core/common/command.c **** 
 253:./tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 254:./tmk_core/common/command.c **** #   if USB_COUNT_SOF
 255:./tmk_core/common/command.c ****     print_val_hex8(usbSofCount);
 256:./tmk_core/common/command.c **** #   endif
 257:./tmk_core/common/command.c **** #endif
 258:./tmk_core/common/command.c **** 	return;
 259:./tmk_core/common/command.c **** }
 260:./tmk_core/common/command.c **** 
 261:./tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 262:./tmk_core/common/command.c **** static void print_eeconfig(void)
 263:./tmk_core/common/command.c **** {
 264:./tmk_core/common/command.c **** 
 265:./tmk_core/common/command.c **** // Print these variables if NO_PRINT or USER_PRINT are not defined.
 266:./tmk_core/common/command.c **** #if !defined(NO_PRINT) && !defined(USER_PRINT)
 267:./tmk_core/common/command.c **** 
 268:./tmk_core/common/command.c ****     print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
 269:./tmk_core/common/command.c **** 
 270:./tmk_core/common/command.c ****     debug_config_t dc;
 271:./tmk_core/common/command.c ****     dc.raw = eeconfig_read_debug();
 272:./tmk_core/common/command.c ****     print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
 273:./tmk_core/common/command.c ****     print(".enable: "); print_dec(dc.enable); print("\n");
 274:./tmk_core/common/command.c ****     print(".matrix: "); print_dec(dc.matrix); print("\n");
 275:./tmk_core/common/command.c ****     print(".keyboard: "); print_dec(dc.keyboard); print("\n");
 276:./tmk_core/common/command.c ****     print(".mouse: "); print_dec(dc.mouse); print("\n");
 277:./tmk_core/common/command.c **** 
 278:./tmk_core/common/command.c ****     keymap_config_t kc;
 279:./tmk_core/common/command.c ****     kc.raw = eeconfig_read_keymap();
 280:./tmk_core/common/command.c ****     print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
 281:./tmk_core/common/command.c ****     print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
 282:./tmk_core/common/command.c ****     print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
 283:./tmk_core/common/command.c ****     print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
 284:./tmk_core/common/command.c ****     print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
 285:./tmk_core/common/command.c ****     print(".no_gui: "); print_dec(kc.no_gui); print("\n");
 286:./tmk_core/common/command.c ****     print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
 287:./tmk_core/common/command.c ****     print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
 288:./tmk_core/common/command.c ****     print(".nkro: "); print_dec(kc.nkro); print("\n");
 289:./tmk_core/common/command.c **** 
 290:./tmk_core/common/command.c **** #ifdef BACKLIGHT_ENABLE
 291:./tmk_core/common/command.c ****     backlight_config_t bc;
 292:./tmk_core/common/command.c ****     bc.raw = eeconfig_read_backlight();
 293:./tmk_core/common/command.c ****     print("backlight_config.raw: "); print_hex8(bc.raw); print("\n");
 294:./tmk_core/common/command.c ****     print(".enable: "); print_dec(bc.enable); print("\n");
 295:./tmk_core/common/command.c ****     print(".level: "); print_dec(bc.level); print("\n");
 296:./tmk_core/common/command.c **** #endif /* BACKLIGHT_ENABLE */
 297:./tmk_core/common/command.c **** 
 298:./tmk_core/common/command.c **** #endif /* !NO_PRINT */
 299:./tmk_core/common/command.c **** 
 300:./tmk_core/common/command.c **** }
 301:./tmk_core/common/command.c **** #endif /* BOOTMAGIC_ENABLE */
 302:./tmk_core/common/command.c **** 
 303:./tmk_core/common/command.c **** static bool command_common(uint8_t code)
 304:./tmk_core/common/command.c **** {
 305:./tmk_core/common/command.c **** 
 306:./tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 307:./tmk_core/common/command.c ****     static host_driver_t *host_driver = 0;
 308:./tmk_core/common/command.c **** #endif
 309:./tmk_core/common/command.c **** 
 310:./tmk_core/common/command.c ****     switch (code) {
 311:./tmk_core/common/command.c **** 
 312:./tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 313:./tmk_core/common/command.c **** 
 314:./tmk_core/common/command.c **** 		// test breathing sleep LED
 315:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_SLEEP_LED):
 316:./tmk_core/common/command.c ****             print("Sleep LED Test\n");
 317:./tmk_core/common/command.c ****             sleep_led_toggle();
 318:./tmk_core/common/command.c ****             led_set(host_keyboard_leds());
 319:./tmk_core/common/command.c ****             break;
 320:./tmk_core/common/command.c **** #endif
 321:./tmk_core/common/command.c **** 
 322:./tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 323:./tmk_core/common/command.c **** 
 324:./tmk_core/common/command.c **** 		// print stored eeprom config
 325:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_EEPROM):
 326:./tmk_core/common/command.c ****             print("eeconfig:\n");
 327:./tmk_core/common/command.c ****             print_eeconfig();
 328:./tmk_core/common/command.c ****             break;
 329:./tmk_core/common/command.c **** #endif
 330:./tmk_core/common/command.c **** 
 331:./tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 332:./tmk_core/common/command.c **** 
 333:./tmk_core/common/command.c **** 		// lock/unlock keyboard
 334:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_LOCK):
 335:./tmk_core/common/command.c ****             if (host_get_driver()) {
 336:./tmk_core/common/command.c ****                 host_driver = host_get_driver();
 337:./tmk_core/common/command.c ****                 clear_keyboard();
 338:./tmk_core/common/command.c ****                 host_set_driver(0);
 339:./tmk_core/common/command.c ****                 print("Locked.\n");
 340:./tmk_core/common/command.c ****             } else {
 341:./tmk_core/common/command.c ****                 host_set_driver(host_driver);
 342:./tmk_core/common/command.c ****                 print("Unlocked.\n");
 343:./tmk_core/common/command.c ****             }
 344:./tmk_core/common/command.c ****             break;
 345:./tmk_core/common/command.c **** #endif
 346:./tmk_core/common/command.c **** 
 347:./tmk_core/common/command.c **** 		// print help
 348:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_HELP1):
 349:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_HELP2):
 350:./tmk_core/common/command.c ****             command_common_help();
 351:./tmk_core/common/command.c ****             break;
 352:./tmk_core/common/command.c **** 
 353:./tmk_core/common/command.c **** 		// activate console
 354:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_CONSOLE):
 355:./tmk_core/common/command.c ****             debug_matrix   = false;
 356:./tmk_core/common/command.c ****             debug_keyboard = false;
 357:./tmk_core/common/command.c ****             debug_mouse    = false;
 358:./tmk_core/common/command.c ****             debug_enable   = false;
 359:./tmk_core/common/command.c ****             command_console_help();
 360:./tmk_core/common/command.c ****             print("C> ");
 361:./tmk_core/common/command.c ****             command_state = CONSOLE;
 362:./tmk_core/common/command.c ****             break;
 363:./tmk_core/common/command.c **** 
 364:./tmk_core/common/command.c ****         // jump to bootloader
 365:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_BOOTLOADER):
 366:./tmk_core/common/command.c ****             clear_keyboard(); // clear to prevent stuck keys
 367:./tmk_core/common/command.c ****             print("\n\nJumping to bootloader... ");
 368:./tmk_core/common/command.c ****             #ifdef AUDIO_ENABLE
 369:./tmk_core/common/command.c **** 	            stop_all_notes();
 370:./tmk_core/common/command.c ****                 shutdown_user();
 371:./tmk_core/common/command.c ****             #else
 372:./tmk_core/common/command.c **** 	            wait_ms(1000);
 373:./tmk_core/common/command.c ****             #endif
 374:./tmk_core/common/command.c ****             bootloader_jump(); // not return
 375:./tmk_core/common/command.c ****             break;
 376:./tmk_core/common/command.c **** 
 377:./tmk_core/common/command.c ****         // debug toggle
 378:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG):
 379:./tmk_core/common/command.c ****             debug_enable = !debug_enable;
 380:./tmk_core/common/command.c ****             if (debug_enable) {
 381:./tmk_core/common/command.c ****                 print("\ndebug: on\n");
 382:./tmk_core/common/command.c ****                 debug_matrix   = true;
 383:./tmk_core/common/command.c ****                 debug_keyboard = true;
 384:./tmk_core/common/command.c ****                 debug_mouse    = true;
 385:./tmk_core/common/command.c ****             } else {
 386:./tmk_core/common/command.c ****                 print("\ndebug: off\n");
 387:./tmk_core/common/command.c ****             }
 388:./tmk_core/common/command.c ****             break;
 389:./tmk_core/common/command.c **** 
 390:./tmk_core/common/command.c ****         // debug matrix toggle
 391:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG_MATRIX):
 392:./tmk_core/common/command.c ****             debug_matrix = !debug_matrix;
 393:./tmk_core/common/command.c ****             if (debug_matrix) {
 394:./tmk_core/common/command.c ****                 print("\nmatrix: on\n");
 395:./tmk_core/common/command.c ****                 debug_enable = true;
 396:./tmk_core/common/command.c ****             } else {
 397:./tmk_core/common/command.c ****                 print("\nmatrix: off\n");
 398:./tmk_core/common/command.c ****             }
 399:./tmk_core/common/command.c ****             break;
 400:./tmk_core/common/command.c **** 
 401:./tmk_core/common/command.c ****         // debug keyboard toggle
 402:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG_KBD):
 403:./tmk_core/common/command.c ****             debug_keyboard = !debug_keyboard;
 404:./tmk_core/common/command.c ****             if (debug_keyboard) {
 405:./tmk_core/common/command.c ****                 print("\nkeyboard: on\n");
 406:./tmk_core/common/command.c ****                 debug_enable = true;
 407:./tmk_core/common/command.c ****             } else {
 408:./tmk_core/common/command.c ****                 print("\nkeyboard: off\n");
 409:./tmk_core/common/command.c ****             }
 410:./tmk_core/common/command.c ****             break;
 411:./tmk_core/common/command.c **** 
 412:./tmk_core/common/command.c ****         // debug mouse toggle
 413:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG_MOUSE):
 414:./tmk_core/common/command.c ****             debug_mouse = !debug_mouse;
 415:./tmk_core/common/command.c ****             if (debug_mouse) {
 416:./tmk_core/common/command.c ****                 print("\nmouse: on\n");
 417:./tmk_core/common/command.c ****                 debug_enable = true;
 418:./tmk_core/common/command.c ****             } else {
 419:./tmk_core/common/command.c **** 				print("\nmouse: off\n");
 420:./tmk_core/common/command.c ****             }
 421:./tmk_core/common/command.c ****             break;
 422:./tmk_core/common/command.c **** 
 423:./tmk_core/common/command.c **** 		// print version
 424:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_VERSION):
 425:./tmk_core/common/command.c ****         	print_version();
 426:./tmk_core/common/command.c **** 		    break;
 427:./tmk_core/common/command.c **** 
 428:./tmk_core/common/command.c **** 		// print status
 429:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_STATUS):
 430:./tmk_core/common/command.c **** 			print_status();
 431:./tmk_core/common/command.c ****             break;
 432:./tmk_core/common/command.c **** 
 433:./tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 434:./tmk_core/common/command.c **** 
 435:./tmk_core/common/command.c **** 		// NKRO toggle
 436:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_NKRO):
 437:./tmk_core/common/command.c ****             clear_keyboard(); // clear to prevent stuck keys
 438:./tmk_core/common/command.c ****             keymap_config.nkro = !keymap_config.nkro;
 439:./tmk_core/common/command.c ****             if (keymap_config.nkro) {
 440:./tmk_core/common/command.c ****                 print("NKRO: on\n");
 441:./tmk_core/common/command.c ****             } else {
 442:./tmk_core/common/command.c ****                 print("NKRO: off\n");
 443:./tmk_core/common/command.c ****             }
 444:./tmk_core/common/command.c ****             break;
 445:./tmk_core/common/command.c **** #endif
 446:./tmk_core/common/command.c **** 
 447:./tmk_core/common/command.c **** 		// switch layers
 448:./tmk_core/common/command.c **** 
 449:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER0_ALT1):
 450:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER0_ALT2):
 451:./tmk_core/common/command.c ****             switch_default_layer(0);
 452:./tmk_core/common/command.c ****             break;
 453:./tmk_core/common/command.c **** 
 454:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_CUSTOM
 455:./tmk_core/common/command.c **** 
 456:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER0):
 457:./tmk_core/common/command.c ****             switch_default_layer(0);
 458:./tmk_core/common/command.c ****             break;
 459:./tmk_core/common/command.c **** 
 460:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER1):
 461:./tmk_core/common/command.c ****             switch_default_layer(1);
 462:./tmk_core/common/command.c ****             break;
 463:./tmk_core/common/command.c **** 
 464:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER2):
 465:./tmk_core/common/command.c ****             switch_default_layer(2);
 466:./tmk_core/common/command.c ****             break;
 467:./tmk_core/common/command.c **** 
 468:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER3):
 469:./tmk_core/common/command.c ****             switch_default_layer(3);
 470:./tmk_core/common/command.c ****             break;
 471:./tmk_core/common/command.c **** 
 472:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER4):
 473:./tmk_core/common/command.c ****             switch_default_layer(4);
 474:./tmk_core/common/command.c ****             break;
 475:./tmk_core/common/command.c **** 
 476:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER5):
 477:./tmk_core/common/command.c ****             switch_default_layer(5);
 478:./tmk_core/common/command.c ****             break;
 479:./tmk_core/common/command.c **** 
 480:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER6):
 481:./tmk_core/common/command.c ****             switch_default_layer(6);
 482:./tmk_core/common/command.c ****             break;
 483:./tmk_core/common/command.c **** 
 484:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER7):
 485:./tmk_core/common/command.c ****             switch_default_layer(7);
 486:./tmk_core/common/command.c ****             break;
 487:./tmk_core/common/command.c **** 
 488:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER8):
 489:./tmk_core/common/command.c ****             switch_default_layer(8);
 490:./tmk_core/common/command.c ****             break;
 491:./tmk_core/common/command.c **** 
 492:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER9):
 493:./tmk_core/common/command.c ****             switch_default_layer(9);
 494:./tmk_core/common/command.c ****             break;
 495:./tmk_core/common/command.c **** #endif
 496:./tmk_core/common/command.c **** 
 497:./tmk_core/common/command.c **** 
 498:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_FKEYS
 499:./tmk_core/common/command.c **** 
 500:./tmk_core/common/command.c ****         case KC_F1 ... KC_F9:
 501:./tmk_core/common/command.c ****             switch_default_layer((code - KC_F1) + 1);
 502:./tmk_core/common/command.c ****             break;
 503:./tmk_core/common/command.c ****         case KC_F10:
 504:./tmk_core/common/command.c ****             switch_default_layer(0);
 505:./tmk_core/common/command.c ****             break;
 506:./tmk_core/common/command.c **** #endif
 507:./tmk_core/common/command.c **** 
 508:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_NKEYS
 509:./tmk_core/common/command.c **** 
 510:./tmk_core/common/command.c ****         case KC_1 ... KC_9:
 511:./tmk_core/common/command.c ****             switch_default_layer((code - KC_1) + 1);
 512:./tmk_core/common/command.c ****             break;
 513:./tmk_core/common/command.c ****         case KC_0:
 514:./tmk_core/common/command.c ****             switch_default_layer(0);
 515:./tmk_core/common/command.c ****             break;
 516:./tmk_core/common/command.c **** #endif
 517:./tmk_core/common/command.c **** 
 518:./tmk_core/common/command.c ****         default:
 519:./tmk_core/common/command.c ****             print("?");
 520:./tmk_core/common/command.c ****             return false;
 521:./tmk_core/common/command.c ****     }
 522:./tmk_core/common/command.c ****     return true;
 523:./tmk_core/common/command.c **** }
 524:./tmk_core/common/command.c **** 
 525:./tmk_core/common/command.c **** 
 526:./tmk_core/common/command.c **** /***********************************************************
 527:./tmk_core/common/command.c ****  * Command console
 528:./tmk_core/common/command.c ****  ***********************************************************/
 529:./tmk_core/common/command.c **** static void command_console_help(void)
 530:./tmk_core/common/command.c **** {
 531:./tmk_core/common/command.c ****     print("\n\t- Console -\n"
 532:./tmk_core/common/command.c ****           "ESC/q:	quit\n"
 533:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 534:./tmk_core/common/command.c ****           "m:	mousekey\n"
 535:./tmk_core/common/command.c **** #endif
 536:./tmk_core/common/command.c ****     );
 537:./tmk_core/common/command.c **** }
 538:./tmk_core/common/command.c **** 
 539:./tmk_core/common/command.c **** static bool command_console(uint8_t code)
 540:./tmk_core/common/command.c **** {
 541:./tmk_core/common/command.c ****     switch (code) {
 542:./tmk_core/common/command.c ****         case KC_H:
 543:./tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 544:./tmk_core/common/command.c ****             command_console_help();
 545:./tmk_core/common/command.c ****             break;
 546:./tmk_core/common/command.c ****         case KC_Q:
 547:./tmk_core/common/command.c ****         case KC_ESC:
 548:./tmk_core/common/command.c ****             command_state = ONESHOT;
 549:./tmk_core/common/command.c ****             return false;
 550:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 551:./tmk_core/common/command.c ****         case KC_M:
 552:./tmk_core/common/command.c ****             mousekey_console_help();
 553:./tmk_core/common/command.c ****             print("M> ");
 554:./tmk_core/common/command.c ****             command_state = MOUSEKEY;
 555:./tmk_core/common/command.c ****             return true;
 556:./tmk_core/common/command.c **** #endif
 557:./tmk_core/common/command.c ****         default:
 558:./tmk_core/common/command.c ****             print("?");
 559:./tmk_core/common/command.c ****             return false;
 560:./tmk_core/common/command.c ****     }
 561:./tmk_core/common/command.c ****     print("C> ");
 562:./tmk_core/common/command.c ****     return true;
 563:./tmk_core/common/command.c **** }
 564:./tmk_core/common/command.c **** 
 565:./tmk_core/common/command.c **** 
 566:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 567:./tmk_core/common/command.c **** /***********************************************************
 568:./tmk_core/common/command.c ****  * Mousekey console
 569:./tmk_core/common/command.c ****  ***********************************************************/
 570:./tmk_core/common/command.c **** static uint8_t mousekey_param = 0;
 571:./tmk_core/common/command.c **** 
 572:./tmk_core/common/command.c **** static void mousekey_param_print(void)
 573:./tmk_core/common/command.c **** {
 574:./tmk_core/common/command.c **** // Print these variables if NO_PRINT or USER_PRINT are not defined.
 575:./tmk_core/common/command.c **** #if !defined(NO_PRINT) && !defined(USER_PRINT)
 576:./tmk_core/common/command.c ****     print("\n\t- Values -\n");
 577:./tmk_core/common/command.c ****     print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
 578:./tmk_core/common/command.c ****     print("2: interval(ms): "); pdec(mk_interval); print("\n");
 579:./tmk_core/common/command.c ****     print("3: max_speed: "); pdec(mk_max_speed); print("\n");
 580:./tmk_core/common/command.c ****     print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
 581:./tmk_core/common/command.c ****     print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
 582:./tmk_core/common/command.c ****     print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
 583:./tmk_core/common/command.c **** #endif /* !NO_PRINT */
 584:./tmk_core/common/command.c **** 
 585:./tmk_core/common/command.c **** }
 586:./tmk_core/common/command.c **** 
 587:./tmk_core/common/command.c **** //#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
 588:./tmk_core/common/command.c **** #define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
 589:./tmk_core/common/command.c **** static void mousekey_param_inc(uint8_t param, uint8_t inc)
 590:./tmk_core/common/command.c **** {
  16               		.loc 1 590 1 view -0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
 591:./tmk_core/common/command.c ****     switch (param) {
  22               		.loc 1 591 5 view .LVU1
  23 0000 8330      		cpi r24,lo8(3)
  24 0002 01F0      		breq .L2
  25 0004 00F4      		brsh .L3
  26 0006 8130      		cpi r24,lo8(1)
  27 0008 01F0      		breq .L4
  28 000a 8230      		cpi r24,lo8(2)
  29 000c 01F0      		breq .L5
  30 000e 0895      		ret
  31               	.L3:
  32 0010 8530      		cpi r24,lo8(5)
  33 0012 01F4      		brne .+2
  34 0014 00C0      		rjmp .L7
  35 0016 00F0      		brlo .L8
  36 0018 8630      		cpi r24,lo8(6)
  37 001a 01F4      		brne .+2
  38 001c 00C0      		rjmp .L9
  39 001e 0895      		ret
  40               	.L4:
 592:./tmk_core/common/command.c ****         case 1:
 593:./tmk_core/common/command.c ****             if (mk_delay + inc < UINT8_MAX)
  41               		.loc 1 593 13 view .LVU2
  42               		.loc 1 593 26 is_stmt 0 view .LVU3
  43 0020 8091 0000 		lds r24,mk_delay
  44               	.LVL1:
  45               		.loc 1 593 26 view .LVU4
  46 0024 482F      		mov r20,r24
  47 0026 460F      		add r20,r22
  48 0028 5527      		clr r21
  49 002a 551F      		rol r21
  50               		.loc 1 593 16 view .LVU5
  51 002c 4F3F      		cpi r20,-1
  52 002e 5105      		cpc r21,__zero_reg__
  53 0030 04F4      		brge .L10
 594:./tmk_core/common/command.c ****                 mk_delay += inc;
  54               		.loc 1 594 17 is_stmt 1 view .LVU6
  55               		.loc 1 594 26 is_stmt 0 view .LVU7
  56 0032 680F      		add r22,r24
  57               	.LVL2:
  58               		.loc 1 594 26 view .LVU8
  59 0034 6093 0000 		sts mk_delay,r22
  60 0038 0895      		ret
  61               	.LVL3:
  62               	.L10:
 595:./tmk_core/common/command.c ****             else
 596:./tmk_core/common/command.c ****                 mk_delay = UINT8_MAX;
  63               		.loc 1 596 17 is_stmt 1 view .LVU9
  64               		.loc 1 596 26 is_stmt 0 view .LVU10
  65 003a 8FEF      		ldi r24,lo8(-1)
  66 003c 8093 0000 		sts mk_delay,r24
  67 0040 0895      		ret
  68               	.LVL4:
  69               	.L5:
 597:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 598:./tmk_core/common/command.c ****             break;
 599:./tmk_core/common/command.c ****         case 2:
 600:./tmk_core/common/command.c ****             if (mk_interval + inc < UINT8_MAX)
  70               		.loc 1 600 13 is_stmt 1 view .LVU11
  71               		.loc 1 600 29 is_stmt 0 view .LVU12
  72 0042 8091 0000 		lds r24,mk_interval
  73               	.LVL5:
  74               		.loc 1 600 29 view .LVU13
  75 0046 482F      		mov r20,r24
  76 0048 460F      		add r20,r22
  77 004a 5527      		clr r21
  78 004c 551F      		rol r21
  79               		.loc 1 600 16 view .LVU14
  80 004e 4F3F      		cpi r20,-1
  81 0050 5105      		cpc r21,__zero_reg__
  82 0052 04F4      		brge .L11
 601:./tmk_core/common/command.c ****                 mk_interval += inc;
  83               		.loc 1 601 17 is_stmt 1 view .LVU15
  84               		.loc 1 601 29 is_stmt 0 view .LVU16
  85 0054 680F      		add r22,r24
  86               	.LVL6:
  87               		.loc 1 601 29 view .LVU17
  88 0056 6093 0000 		sts mk_interval,r22
  89 005a 0895      		ret
  90               	.LVL7:
  91               	.L11:
 602:./tmk_core/common/command.c ****             else
 603:./tmk_core/common/command.c ****                 mk_interval = UINT8_MAX;
  92               		.loc 1 603 17 is_stmt 1 view .LVU18
  93               		.loc 1 603 29 is_stmt 0 view .LVU19
  94 005c 8FEF      		ldi r24,lo8(-1)
  95 005e 8093 0000 		sts mk_interval,r24
  96 0062 0895      		ret
  97               	.LVL8:
  98               	.L2:
 604:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 605:./tmk_core/common/command.c ****             break;
 606:./tmk_core/common/command.c ****         case 3:
 607:./tmk_core/common/command.c ****             if (mk_max_speed + inc < UINT8_MAX)
  99               		.loc 1 607 13 is_stmt 1 view .LVU20
 100               		.loc 1 607 30 is_stmt 0 view .LVU21
 101 0064 8091 0000 		lds r24,mk_max_speed
 102               	.LVL9:
 103               		.loc 1 607 30 view .LVU22
 104 0068 482F      		mov r20,r24
 105 006a 460F      		add r20,r22
 106 006c 5527      		clr r21
 107 006e 551F      		rol r21
 108               		.loc 1 607 16 view .LVU23
 109 0070 4F3F      		cpi r20,-1
 110 0072 5105      		cpc r21,__zero_reg__
 111 0074 04F4      		brge .L12
 608:./tmk_core/common/command.c ****                 mk_max_speed += inc;
 112               		.loc 1 608 17 is_stmt 1 view .LVU24
 113               		.loc 1 608 30 is_stmt 0 view .LVU25
 114 0076 680F      		add r22,r24
 115               	.LVL10:
 116               		.loc 1 608 30 view .LVU26
 117 0078 6093 0000 		sts mk_max_speed,r22
 118 007c 0895      		ret
 119               	.LVL11:
 120               	.L12:
 609:./tmk_core/common/command.c ****             else
 610:./tmk_core/common/command.c ****                 mk_max_speed = UINT8_MAX;
 121               		.loc 1 610 17 is_stmt 1 view .LVU27
 122               		.loc 1 610 30 is_stmt 0 view .LVU28
 123 007e 8FEF      		ldi r24,lo8(-1)
 124 0080 8093 0000 		sts mk_max_speed,r24
 125 0084 0895      		ret
 126               	.LVL12:
 127               	.L8:
 611:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 612:./tmk_core/common/command.c ****             break;
 613:./tmk_core/common/command.c ****         case 4:
 614:./tmk_core/common/command.c ****             if (mk_time_to_max + inc < UINT8_MAX)
 128               		.loc 1 614 13 is_stmt 1 view .LVU29
 129               		.loc 1 614 32 is_stmt 0 view .LVU30
 130 0086 8091 0000 		lds r24,mk_time_to_max
 131               	.LVL13:
 132               		.loc 1 614 32 view .LVU31
 133 008a 482F      		mov r20,r24
 134 008c 460F      		add r20,r22
 135 008e 5527      		clr r21
 136 0090 551F      		rol r21
 137               		.loc 1 614 16 view .LVU32
 138 0092 4F3F      		cpi r20,-1
 139 0094 5105      		cpc r21,__zero_reg__
 140 0096 04F4      		brge .L13
 615:./tmk_core/common/command.c ****                 mk_time_to_max += inc;
 141               		.loc 1 615 17 is_stmt 1 view .LVU33
 142               		.loc 1 615 32 is_stmt 0 view .LVU34
 143 0098 680F      		add r22,r24
 144               	.LVL14:
 145               		.loc 1 615 32 view .LVU35
 146 009a 6093 0000 		sts mk_time_to_max,r22
 147 009e 0895      		ret
 148               	.LVL15:
 149               	.L13:
 616:./tmk_core/common/command.c ****             else
 617:./tmk_core/common/command.c ****                 mk_time_to_max = UINT8_MAX;
 150               		.loc 1 617 17 is_stmt 1 view .LVU36
 151               		.loc 1 617 32 is_stmt 0 view .LVU37
 152 00a0 8FEF      		ldi r24,lo8(-1)
 153 00a2 8093 0000 		sts mk_time_to_max,r24
 154 00a6 0895      		ret
 155               	.LVL16:
 156               	.L7:
 618:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 619:./tmk_core/common/command.c ****             break;
 620:./tmk_core/common/command.c ****         case 5:
 621:./tmk_core/common/command.c ****             if (mk_wheel_max_speed + inc < UINT8_MAX)
 157               		.loc 1 621 13 is_stmt 1 view .LVU38
 158               		.loc 1 621 36 is_stmt 0 view .LVU39
 159 00a8 8091 0000 		lds r24,mk_wheel_max_speed
 160               	.LVL17:
 161               		.loc 1 621 36 view .LVU40
 162 00ac 482F      		mov r20,r24
 163 00ae 460F      		add r20,r22
 164 00b0 5527      		clr r21
 165 00b2 551F      		rol r21
 166               		.loc 1 621 16 view .LVU41
 167 00b4 4F3F      		cpi r20,-1
 168 00b6 5105      		cpc r21,__zero_reg__
 169 00b8 04F4      		brge .L14
 622:./tmk_core/common/command.c ****                 mk_wheel_max_speed += inc;
 170               		.loc 1 622 17 is_stmt 1 view .LVU42
 171               		.loc 1 622 36 is_stmt 0 view .LVU43
 172 00ba 680F      		add r22,r24
 173               	.LVL18:
 174               		.loc 1 622 36 view .LVU44
 175 00bc 6093 0000 		sts mk_wheel_max_speed,r22
 176 00c0 0895      		ret
 177               	.LVL19:
 178               	.L14:
 623:./tmk_core/common/command.c ****             else
 624:./tmk_core/common/command.c ****                 mk_wheel_max_speed = UINT8_MAX;
 179               		.loc 1 624 17 is_stmt 1 view .LVU45
 180               		.loc 1 624 36 is_stmt 0 view .LVU46
 181 00c2 8FEF      		ldi r24,lo8(-1)
 182 00c4 8093 0000 		sts mk_wheel_max_speed,r24
 183 00c8 0895      		ret
 184               	.LVL20:
 185               	.L9:
 625:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 626:./tmk_core/common/command.c ****             break;
 627:./tmk_core/common/command.c ****         case 6:
 628:./tmk_core/common/command.c ****             if (mk_wheel_time_to_max + inc < UINT8_MAX)
 186               		.loc 1 628 13 is_stmt 1 view .LVU47
 187               		.loc 1 628 38 is_stmt 0 view .LVU48
 188 00ca 8091 0000 		lds r24,mk_wheel_time_to_max
 189               	.LVL21:
 190               		.loc 1 628 38 view .LVU49
 191 00ce 482F      		mov r20,r24
 192 00d0 460F      		add r20,r22
 193 00d2 5527      		clr r21
 194 00d4 551F      		rol r21
 195               		.loc 1 628 16 view .LVU50
 196 00d6 4F3F      		cpi r20,-1
 197 00d8 5105      		cpc r21,__zero_reg__
 198 00da 04F4      		brge .L15
 629:./tmk_core/common/command.c ****                 mk_wheel_time_to_max += inc;
 199               		.loc 1 629 17 is_stmt 1 view .LVU51
 200               		.loc 1 629 38 is_stmt 0 view .LVU52
 201 00dc 680F      		add r22,r24
 202               	.LVL22:
 203               		.loc 1 629 38 view .LVU53
 204 00de 6093 0000 		sts mk_wheel_time_to_max,r22
 205 00e2 0895      		ret
 206               	.LVL23:
 207               	.L15:
 630:./tmk_core/common/command.c ****             else
 631:./tmk_core/common/command.c ****                 mk_wheel_time_to_max = UINT8_MAX;
 208               		.loc 1 631 17 is_stmt 1 view .LVU54
 209               		.loc 1 631 38 is_stmt 0 view .LVU55
 210 00e4 8FEF      		ldi r24,lo8(-1)
 211 00e6 8093 0000 		sts mk_wheel_time_to_max,r24
 212               	/* epilogue start */
 632:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 633:./tmk_core/common/command.c ****             break;
 634:./tmk_core/common/command.c ****     }
 635:./tmk_core/common/command.c **** }
 213               		.loc 1 635 1 view .LVU56
 214 00ea 0895      		ret
 215               		.cfi_endproc
 216               	.LFE117:
 218               		.section	.text.mousekey_param_dec,"ax",@progbits
 220               	mousekey_param_dec:
 221               	.LVL24:
 222               	.LFB118:
 636:./tmk_core/common/command.c **** 
 637:./tmk_core/common/command.c **** static void mousekey_param_dec(uint8_t param, uint8_t dec)
 638:./tmk_core/common/command.c **** {
 223               		.loc 1 638 1 is_stmt 1 view -0
 224               		.cfi_startproc
 225               	/* prologue: function */
 226               	/* frame size = 0 */
 227               	/* stack size = 0 */
 228               	.L__stack_usage = 0
 639:./tmk_core/common/command.c ****     switch (param) {
 229               		.loc 1 639 5 view .LVU58
 230 0000 8330      		cpi r24,lo8(3)
 231 0002 01F0      		breq .L17
 232 0004 00F4      		brsh .L18
 233 0006 8130      		cpi r24,lo8(1)
 234 0008 01F0      		breq .L19
 235 000a 8230      		cpi r24,lo8(2)
 236 000c 01F0      		breq .L20
 237 000e 0895      		ret
 238               	.L18:
 239 0010 8530      		cpi r24,lo8(5)
 240 0012 01F0      		breq .L22
 241 0014 00F0      		brlo .L23
 242 0016 8630      		cpi r24,lo8(6)
 243 0018 01F0      		breq .L24
 244 001a 0895      		ret
 245               	.L19:
 640:./tmk_core/common/command.c ****         case 1:
 641:./tmk_core/common/command.c ****             if (mk_delay > dec)
 246               		.loc 1 641 13 view .LVU59
 247               		.loc 1 641 26 is_stmt 0 view .LVU60
 248 001c 8091 0000 		lds r24,mk_delay
 249               	.LVL25:
 250               		.loc 1 641 16 view .LVU61
 251 0020 6817      		cp r22,r24
 252 0022 00F4      		brsh .L25
 642:./tmk_core/common/command.c ****                 mk_delay -= dec;
 253               		.loc 1 642 17 is_stmt 1 view .LVU62
 254               		.loc 1 642 26 is_stmt 0 view .LVU63
 255 0024 861B      		sub r24,r22
 256 0026 8093 0000 		sts mk_delay,r24
 257 002a 0895      		ret
 258               	.L25:
 643:./tmk_core/common/command.c ****             else
 644:./tmk_core/common/command.c ****                 mk_delay = 0;
 259               		.loc 1 644 17 is_stmt 1 view .LVU64
 260               		.loc 1 644 26 is_stmt 0 view .LVU65
 261 002c 1092 0000 		sts mk_delay,__zero_reg__
 262 0030 0895      		ret
 263               	.LVL26:
 264               	.L20:
 645:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 646:./tmk_core/common/command.c ****             break;
 647:./tmk_core/common/command.c ****         case 2:
 648:./tmk_core/common/command.c ****             if (mk_interval > dec)
 265               		.loc 1 648 13 is_stmt 1 view .LVU66
 266               		.loc 1 648 29 is_stmt 0 view .LVU67
 267 0032 8091 0000 		lds r24,mk_interval
 268               	.LVL27:
 269               		.loc 1 648 16 view .LVU68
 270 0036 6817      		cp r22,r24
 271 0038 00F4      		brsh .L26
 649:./tmk_core/common/command.c ****                 mk_interval -= dec;
 272               		.loc 1 649 17 is_stmt 1 view .LVU69
 273               		.loc 1 649 29 is_stmt 0 view .LVU70
 274 003a 861B      		sub r24,r22
 275 003c 8093 0000 		sts mk_interval,r24
 276 0040 0895      		ret
 277               	.L26:
 650:./tmk_core/common/command.c ****             else
 651:./tmk_core/common/command.c ****                 mk_interval = 0;
 278               		.loc 1 651 17 is_stmt 1 view .LVU71
 279               		.loc 1 651 29 is_stmt 0 view .LVU72
 280 0042 1092 0000 		sts mk_interval,__zero_reg__
 281 0046 0895      		ret
 282               	.LVL28:
 283               	.L17:
 652:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 653:./tmk_core/common/command.c ****             break;
 654:./tmk_core/common/command.c ****         case 3:
 655:./tmk_core/common/command.c ****             if (mk_max_speed > dec)
 284               		.loc 1 655 13 is_stmt 1 view .LVU73
 285               		.loc 1 655 30 is_stmt 0 view .LVU74
 286 0048 8091 0000 		lds r24,mk_max_speed
 287               	.LVL29:
 288               		.loc 1 655 16 view .LVU75
 289 004c 6817      		cp r22,r24
 290 004e 00F4      		brsh .L27
 656:./tmk_core/common/command.c ****                 mk_max_speed -= dec;
 291               		.loc 1 656 17 is_stmt 1 view .LVU76
 292               		.loc 1 656 30 is_stmt 0 view .LVU77
 293 0050 861B      		sub r24,r22
 294 0052 8093 0000 		sts mk_max_speed,r24
 295 0056 0895      		ret
 296               	.L27:
 657:./tmk_core/common/command.c ****             else
 658:./tmk_core/common/command.c ****                 mk_max_speed = 0;
 297               		.loc 1 658 17 is_stmt 1 view .LVU78
 298               		.loc 1 658 30 is_stmt 0 view .LVU79
 299 0058 1092 0000 		sts mk_max_speed,__zero_reg__
 300 005c 0895      		ret
 301               	.LVL30:
 302               	.L23:
 659:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 660:./tmk_core/common/command.c ****             break;
 661:./tmk_core/common/command.c ****         case 4:
 662:./tmk_core/common/command.c ****             if (mk_time_to_max > dec)
 303               		.loc 1 662 13 is_stmt 1 view .LVU80
 304               		.loc 1 662 32 is_stmt 0 view .LVU81
 305 005e 8091 0000 		lds r24,mk_time_to_max
 306               	.LVL31:
 307               		.loc 1 662 16 view .LVU82
 308 0062 6817      		cp r22,r24
 309 0064 00F4      		brsh .L28
 663:./tmk_core/common/command.c ****                 mk_time_to_max -= dec;
 310               		.loc 1 663 17 is_stmt 1 view .LVU83
 311               		.loc 1 663 32 is_stmt 0 view .LVU84
 312 0066 861B      		sub r24,r22
 313 0068 8093 0000 		sts mk_time_to_max,r24
 314 006c 0895      		ret
 315               	.L28:
 664:./tmk_core/common/command.c ****             else
 665:./tmk_core/common/command.c ****                 mk_time_to_max = 0;
 316               		.loc 1 665 17 is_stmt 1 view .LVU85
 317               		.loc 1 665 32 is_stmt 0 view .LVU86
 318 006e 1092 0000 		sts mk_time_to_max,__zero_reg__
 319 0072 0895      		ret
 320               	.LVL32:
 321               	.L22:
 666:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 667:./tmk_core/common/command.c ****             break;
 668:./tmk_core/common/command.c ****         case 5:
 669:./tmk_core/common/command.c ****             if (mk_wheel_max_speed > dec)
 322               		.loc 1 669 13 is_stmt 1 view .LVU87
 323               		.loc 1 669 36 is_stmt 0 view .LVU88
 324 0074 8091 0000 		lds r24,mk_wheel_max_speed
 325               	.LVL33:
 326               		.loc 1 669 16 view .LVU89
 327 0078 6817      		cp r22,r24
 328 007a 00F4      		brsh .L29
 670:./tmk_core/common/command.c ****                 mk_wheel_max_speed -= dec;
 329               		.loc 1 670 17 is_stmt 1 view .LVU90
 330               		.loc 1 670 36 is_stmt 0 view .LVU91
 331 007c 861B      		sub r24,r22
 332 007e 8093 0000 		sts mk_wheel_max_speed,r24
 333 0082 0895      		ret
 334               	.L29:
 671:./tmk_core/common/command.c ****             else
 672:./tmk_core/common/command.c ****                 mk_wheel_max_speed = 0;
 335               		.loc 1 672 17 is_stmt 1 view .LVU92
 336               		.loc 1 672 36 is_stmt 0 view .LVU93
 337 0084 1092 0000 		sts mk_wheel_max_speed,__zero_reg__
 338 0088 0895      		ret
 339               	.LVL34:
 340               	.L24:
 673:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 674:./tmk_core/common/command.c ****             break;
 675:./tmk_core/common/command.c ****         case 6:
 676:./tmk_core/common/command.c ****             if (mk_wheel_time_to_max > dec)
 341               		.loc 1 676 13 is_stmt 1 view .LVU94
 342               		.loc 1 676 38 is_stmt 0 view .LVU95
 343 008a 8091 0000 		lds r24,mk_wheel_time_to_max
 344               	.LVL35:
 345               		.loc 1 676 16 view .LVU96
 346 008e 6817      		cp r22,r24
 347 0090 00F4      		brsh .L30
 677:./tmk_core/common/command.c ****                 mk_wheel_time_to_max -= dec;
 348               		.loc 1 677 17 is_stmt 1 view .LVU97
 349               		.loc 1 677 38 is_stmt 0 view .LVU98
 350 0092 861B      		sub r24,r22
 351 0094 8093 0000 		sts mk_wheel_time_to_max,r24
 352 0098 0895      		ret
 353               	.L30:
 678:./tmk_core/common/command.c ****             else
 679:./tmk_core/common/command.c ****                 mk_wheel_time_to_max = 0;
 354               		.loc 1 679 17 is_stmt 1 view .LVU99
 355               		.loc 1 679 38 is_stmt 0 view .LVU100
 356 009a 1092 0000 		sts mk_wheel_time_to_max,__zero_reg__
 357               	/* epilogue start */
 680:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 681:./tmk_core/common/command.c ****             break;
 682:./tmk_core/common/command.c ****     }
 683:./tmk_core/common/command.c **** }
 358               		.loc 1 683 1 view .LVU101
 359 009e 0895      		ret
 360               		.cfi_endproc
 361               	.LFE118:
 363               		.section	.text.switch_default_layer,"ax",@progbits
 365               	switch_default_layer:
 366               	.LVL36:
 367               	.LFB122:
 684:./tmk_core/common/command.c **** 
 685:./tmk_core/common/command.c **** static void mousekey_console_help(void)
 686:./tmk_core/common/command.c **** {
 687:./tmk_core/common/command.c ****     print("\n\t- Mousekey -\n"
 688:./tmk_core/common/command.c ****           "ESC/q:	quit\n"
 689:./tmk_core/common/command.c ****           "1:	delay(*10ms)\n"
 690:./tmk_core/common/command.c ****           "2:	interval(ms)\n"
 691:./tmk_core/common/command.c ****           "3:	max_speed\n"
 692:./tmk_core/common/command.c ****           "4:	time_to_max\n"
 693:./tmk_core/common/command.c ****           "5:	wheel_max_speed\n"
 694:./tmk_core/common/command.c ****           "6:	wheel_time_to_max\n"
 695:./tmk_core/common/command.c ****           "\n"
 696:./tmk_core/common/command.c ****           "p:	print values\n"
 697:./tmk_core/common/command.c ****           "d:	set defaults\n"
 698:./tmk_core/common/command.c ****           "up:	+1\n"
 699:./tmk_core/common/command.c ****           "down:	-1\n"
 700:./tmk_core/common/command.c ****           "pgup:	+10\n"
 701:./tmk_core/common/command.c ****           "pgdown:	-10\n"
 702:./tmk_core/common/command.c ****           "\n"
 703:./tmk_core/common/command.c ****           "speed = delta * max_speed * (repeat / time_to_max)\n");
 704:./tmk_core/common/command.c ****     xprintf("where delta: cursor=%d, wheel=%d\n"
 705:./tmk_core/common/command.c ****             "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_D
 706:./tmk_core/common/command.c **** }
 707:./tmk_core/common/command.c **** 
 708:./tmk_core/common/command.c **** static bool mousekey_console(uint8_t code)
 709:./tmk_core/common/command.c **** {
 710:./tmk_core/common/command.c ****     switch (code) {
 711:./tmk_core/common/command.c ****         case KC_H:
 712:./tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 713:./tmk_core/common/command.c ****             mousekey_console_help();
 714:./tmk_core/common/command.c ****             break;
 715:./tmk_core/common/command.c ****         case KC_Q:
 716:./tmk_core/common/command.c ****         case KC_ESC:
 717:./tmk_core/common/command.c ****             if (mousekey_param) {
 718:./tmk_core/common/command.c ****                 mousekey_param = 0;
 719:./tmk_core/common/command.c ****             } else {
 720:./tmk_core/common/command.c ****                 print("C> ");
 721:./tmk_core/common/command.c ****                 command_state = CONSOLE;
 722:./tmk_core/common/command.c ****                 return false;
 723:./tmk_core/common/command.c ****             }
 724:./tmk_core/common/command.c ****             break;
 725:./tmk_core/common/command.c ****         case KC_P:
 726:./tmk_core/common/command.c ****             mousekey_param_print();
 727:./tmk_core/common/command.c ****             break;
 728:./tmk_core/common/command.c ****         case KC_1:
 729:./tmk_core/common/command.c ****         case KC_2:
 730:./tmk_core/common/command.c ****         case KC_3:
 731:./tmk_core/common/command.c ****         case KC_4:
 732:./tmk_core/common/command.c ****         case KC_5:
 733:./tmk_core/common/command.c ****         case KC_6:
 734:./tmk_core/common/command.c ****             mousekey_param = numkey2num(code);
 735:./tmk_core/common/command.c ****             break;
 736:./tmk_core/common/command.c ****         case KC_UP:
 737:./tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 1);
 738:./tmk_core/common/command.c ****             break;
 739:./tmk_core/common/command.c ****         case KC_DOWN:
 740:./tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 1);
 741:./tmk_core/common/command.c ****             break;
 742:./tmk_core/common/command.c ****         case KC_PGUP:
 743:./tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 10);
 744:./tmk_core/common/command.c ****             break;
 745:./tmk_core/common/command.c ****         case KC_PGDN:
 746:./tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 10);
 747:./tmk_core/common/command.c ****             break;
 748:./tmk_core/common/command.c ****         case KC_D:
 749:./tmk_core/common/command.c ****             mk_delay = MOUSEKEY_DELAY/10;
 750:./tmk_core/common/command.c ****             mk_interval = MOUSEKEY_INTERVAL;
 751:./tmk_core/common/command.c ****             mk_max_speed = MOUSEKEY_MAX_SPEED;
 752:./tmk_core/common/command.c ****             mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
 753:./tmk_core/common/command.c ****             mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
 754:./tmk_core/common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 755:./tmk_core/common/command.c ****             print("set default\n");
 756:./tmk_core/common/command.c ****             break;
 757:./tmk_core/common/command.c ****         default:
 758:./tmk_core/common/command.c ****             print("?");
 759:./tmk_core/common/command.c ****             return false;
 760:./tmk_core/common/command.c ****     }
 761:./tmk_core/common/command.c ****     if (mousekey_param) {
 762:./tmk_core/common/command.c ****         xprintf("M%d> ", mousekey_param);
 763:./tmk_core/common/command.c ****     } else {
 764:./tmk_core/common/command.c ****         print("M>" );
 765:./tmk_core/common/command.c ****     }
 766:./tmk_core/common/command.c ****     return true;
 767:./tmk_core/common/command.c **** }
 768:./tmk_core/common/command.c **** #endif
 769:./tmk_core/common/command.c **** 
 770:./tmk_core/common/command.c **** 
 771:./tmk_core/common/command.c **** /***********************************************************
 772:./tmk_core/common/command.c ****  * Utilities
 773:./tmk_core/common/command.c ****  ***********************************************************/
 774:./tmk_core/common/command.c **** uint8_t numkey2num(uint8_t code)
 775:./tmk_core/common/command.c **** {
 776:./tmk_core/common/command.c ****     switch (code) {
 777:./tmk_core/common/command.c ****         case KC_1: return 1;
 778:./tmk_core/common/command.c ****         case KC_2: return 2;
 779:./tmk_core/common/command.c ****         case KC_3: return 3;
 780:./tmk_core/common/command.c ****         case KC_4: return 4;
 781:./tmk_core/common/command.c ****         case KC_5: return 5;
 782:./tmk_core/common/command.c ****         case KC_6: return 6;
 783:./tmk_core/common/command.c ****         case KC_7: return 7;
 784:./tmk_core/common/command.c ****         case KC_8: return 8;
 785:./tmk_core/common/command.c ****         case KC_9: return 9;
 786:./tmk_core/common/command.c ****         case KC_0: return 0;
 787:./tmk_core/common/command.c ****     }
 788:./tmk_core/common/command.c ****     return 0;
 789:./tmk_core/common/command.c **** }
 790:./tmk_core/common/command.c **** 
 791:./tmk_core/common/command.c **** static void switch_default_layer(uint8_t layer)
 792:./tmk_core/common/command.c **** {
 368               		.loc 1 792 1 is_stmt 1 view -0
 369               		.cfi_startproc
 370               		.loc 1 792 1 is_stmt 0 view .LVU103
 371 0000 0F93      		push r16
 372               	.LCFI0:
 373               		.cfi_def_cfa_offset 3
 374               		.cfi_offset 16, -2
 375 0002 1F93      		push r17
 376               	.LCFI1:
 377               		.cfi_def_cfa_offset 4
 378               		.cfi_offset 17, -3
 379               	/* prologue: function */
 380               	/* frame size = 0 */
 381               	/* stack size = 2 */
 382               	.L__stack_usage = 2
 793:./tmk_core/common/command.c ****     xprintf("L%d\n", layer);
 383               		.loc 1 793 28 is_stmt 1 view .LVU104
 794:./tmk_core/common/command.c ****     default_layer_set(1UL<<layer);
 384               		.loc 1 794 5 view .LVU105
 385 0004 41E0      		ldi r20,lo8(1)
 386 0006 50E0      		ldi r21,0
 387 0008 60E0      		ldi r22,0
 388 000a 70E0      		ldi r23,0
 389 000c 8A01      		movw r16,r20
 390 000e 9B01      		movw r18,r22
 391 0010 00C0      		rjmp 2f
 392               		1:
 393 0012 000F      		lsl r16
 394 0014 111F      		rol r17
 395 0016 221F      		rol r18
 396 0018 331F      		rol r19
 397               		2:
 398 001a 8A95      		dec r24
 399 001c 02F4      		brpl 1b
 400 001e C901      		movw r24,r18
 401               	.LVL37:
 402               		.loc 1 794 5 is_stmt 0 view .LVU106
 403 0020 B801      		movw r22,r16
 404 0022 0E94 0000 		call default_layer_set
 405               	.LVL38:
 795:./tmk_core/common/command.c ****     clear_keyboard();
 406               		.loc 1 795 5 is_stmt 1 view .LVU107
 407               	/* epilogue start */
 796:./tmk_core/common/command.c **** }
 408               		.loc 1 796 1 is_stmt 0 view .LVU108
 409 0026 1F91      		pop r17
 410 0028 0F91      		pop r16
 795:./tmk_core/common/command.c ****     clear_keyboard();
 411               		.loc 1 795 5 view .LVU109
 412 002a 0C94 0000 		jmp clear_keyboard
 413               	.LVL39:
 414               		.cfi_endproc
 415               	.LFE122:
 417               		.section	.text.command_common,"ax",@progbits
 419               	command_common:
 420               	.LVL40:
 421               	.LFB113:
 304:./tmk_core/common/command.c **** 
 422               		.loc 1 304 1 is_stmt 1 view -0
 423               		.cfi_startproc
 424               	/* prologue: function */
 425               	/* frame size = 0 */
 426               	/* stack size = 0 */
 427               	.L__stack_usage = 0
 310:./tmk_core/common/command.c **** 
 428               		.loc 1 310 5 view .LVU111
 429 0000 8732      		cpi r24,lo8(39)
 430 0002 00F0      		brlo .+2
 431 0004 00C0      		rjmp .L33
 432 0006 8E31      		cpi r24,lo8(30)
 433 0008 00F0      		brlo .+2
 434 000a 00C0      		rjmp .L34
 435 000c 8031      		cpi r24,lo8(16)
 436 000e 01F4      		brne .+2
 437 0010 00C0      		rjmp .L35
 438 0012 00F4      		brsh .L36
 439 0014 8730      		cpi r24,lo8(7)
 440 0016 01F4      		brne .+2
 441 0018 00C0      		rjmp .L37
 442 001a 00F4      		brsh .L38
 443 001c 8630      		cpi r24,lo8(6)
 444 001e 01F4      		brne .+2
 445 0020 00C0      		rjmp .L39
 446               	.L57:
 520:./tmk_core/common/command.c ****     }
 447               		.loc 1 520 20 is_stmt 0 view .LVU112
 448 0022 80E0      		ldi r24,0
 449               	.LVL41:
 450               	/* epilogue start */
 523:./tmk_core/common/command.c **** 
 451               		.loc 1 523 1 view .LVU113
 452 0024 0895      		ret
 453               	.LVL42:
 454               	.L38:
 523:./tmk_core/common/command.c **** 
 455               		.loc 1 523 1 view .LVU114
 456 0026 8B30      		cpi r24,lo8(11)
 457 0028 01F4      		brne .+2
 458 002a 00C0      		rjmp .L56
 459 002c 8E30      		cpi r24,lo8(14)
 460 002e 01F4      		brne .L57
 403:./tmk_core/common/command.c ****             if (debug_keyboard) {
 461               		.loc 1 403 13 is_stmt 1 view .LVU115
 403:./tmk_core/common/command.c ****             if (debug_keyboard) {
 462               		.loc 1 403 31 is_stmt 0 view .LVU116
 463 0030 9091 0000 		lds r25,debug_config
 403:./tmk_core/common/command.c ****             if (debug_keyboard) {
 464               		.loc 1 403 28 view .LVU117
 465 0034 892F      		mov r24,r25
 466               	.LVL43:
 403:./tmk_core/common/command.c ****             if (debug_keyboard) {
 467               		.loc 1 403 28 view .LVU118
 468 0036 8B7F      		andi r24,~(1<<2)
 469 0038 92FF      		sbrs r25,2
 470 003a 8460      		ori r24,1<<2
 471 003c 8093 0000 		sts debug_config,r24
 404:./tmk_core/common/command.c ****                 print("\nkeyboard: on\n");
 472               		.loc 1 404 13 is_stmt 1 view .LVU119
 404:./tmk_core/common/command.c ****                 print("\nkeyboard: on\n");
 473               		.loc 1 404 16 is_stmt 0 view .LVU120
 474 0040 82FD      		sbrc r24,2
 475 0042 00C0      		rjmp .L52
 476 0044 00C0      		rjmp .L56
 477               	.LVL44:
 478               	.L36:
 404:./tmk_core/common/command.c ****                 print("\nkeyboard: on\n");
 479               		.loc 1 404 16 view .LVU121
 480 0046 8631      		cpi r24,lo8(22)
 481 0048 01F4      		brne .+2
 482 004a 00C0      		rjmp .L56
 483 004c 00F4      		brsh .L42
 484 004e 8131      		cpi r24,lo8(17)
 485 0050 01F4      		brne .L57
 437:./tmk_core/common/command.c ****             keymap_config.nkro = !keymap_config.nkro;
 486               		.loc 1 437 13 is_stmt 1 view .LVU122
 487 0052 0E94 0000 		call clear_keyboard
 488               	.LVL45:
 438:./tmk_core/common/command.c ****             if (keymap_config.nkro) {
 489               		.loc 1 438 13 view .LVU123
 438:./tmk_core/common/command.c ****             if (keymap_config.nkro) {
 490               		.loc 1 438 48 is_stmt 0 view .LVU124
 491 0056 9091 0000 		lds r25,keymap_config
 438:./tmk_core/common/command.c ****             if (keymap_config.nkro) {
 492               		.loc 1 438 32 view .LVU125
 493 005a 892F      		mov r24,r25
 494 005c 97FB      		bst r25,7
 495 005e 87F9      		bld r24,7
 496 0060 8058      		subi r24,0x80
 497 0062 8093 0000 		sts keymap_config,r24
 439:./tmk_core/common/command.c ****                 print("NKRO: on\n");
 498               		.loc 1 439 13 is_stmt 1 view .LVU126
 499 0066 00C0      		rjmp .L56
 500               	.LVL46:
 501               	.L42:
 439:./tmk_core/common/command.c ****                 print("NKRO: on\n");
 502               		.loc 1 439 13 is_stmt 0 view .LVU127
 503 0068 8931      		cpi r24,lo8(25)
 504 006a 01F0      		breq .L56
 505 006c 8B31      		cpi r24,lo8(27)
 506 006e 01F4      		brne .L57
 392:./tmk_core/common/command.c ****             if (debug_matrix) {
 507               		.loc 1 392 13 is_stmt 1 view .LVU128
 392:./tmk_core/common/command.c ****             if (debug_matrix) {
 508               		.loc 1 392 29 is_stmt 0 view .LVU129
 509 0070 9091 0000 		lds r25,debug_config
 392:./tmk_core/common/command.c ****             if (debug_matrix) {
 510               		.loc 1 392 26 view .LVU130
 511 0074 892F      		mov r24,r25
 512               	.LVL47:
 392:./tmk_core/common/command.c ****             if (debug_matrix) {
 513               		.loc 1 392 26 view .LVU131
 514 0076 8D7F      		andi r24,~(1<<1)
 515 0078 91FF      		sbrs r25,1
 516 007a 8260      		ori r24,1<<1
 517 007c 8093 0000 		sts debug_config,r24
 393:./tmk_core/common/command.c ****                 print("\nmatrix: on\n");
 518               		.loc 1 393 13 is_stmt 1 view .LVU132
 393:./tmk_core/common/command.c ****                 print("\nmatrix: on\n");
 519               		.loc 1 393 16 is_stmt 0 view .LVU133
 520 0080 81FF      		sbrs r24,1
 521 0082 00C0      		rjmp .L56
 522               	.L52:
 394:./tmk_core/common/command.c ****                 debug_enable = true;
 523               		.loc 1 394 40 is_stmt 1 view .LVU134
 395:./tmk_core/common/command.c ****             } else {
 524               		.loc 1 395 17 view .LVU135
 395:./tmk_core/common/command.c ****             } else {
 525               		.loc 1 395 30 is_stmt 0 view .LVU136
 526 0084 8091 0000 		lds r24,debug_config
 527 0088 8160      		ori r24,lo8(1<<0)
 528 008a 00C0      		rjmp .L75
 529               	.LVL48:
 530               	.L33:
 395:./tmk_core/common/command.c ****             } else {
 531               		.loc 1 395 30 view .LVU137
 532 008c 8833      		cpi r24,lo8(56)
 533 008e 01F0      		breq .L56
 534 0090 00F4      		brsh .L45
 535 0092 8932      		cpi r24,lo8(41)
 536 0094 01F0      		breq .L46
 537 0096 8533      		cpi r24,lo8(53)
 538 0098 01F0      		breq .L46
 539 009a 8732      		cpi r24,lo8(39)
 540 009c 01F4      		brne .L57
 541               	.L46:
 451:./tmk_core/common/command.c ****             break;
 542               		.loc 1 451 13 is_stmt 1 view .LVU138
 543 009e 80E0      		ldi r24,0
 544               	.LVL49:
 545               	.L74:
 511:./tmk_core/common/command.c ****             break;
 546               		.loc 1 511 13 is_stmt 0 view .LVU139
 547 00a0 0E94 0000 		call switch_default_layer
 548               	.LVL50:
 512:./tmk_core/common/command.c ****         case KC_0:
 549               		.loc 1 512 13 is_stmt 1 view .LVU140
 550 00a4 00C0      		rjmp .L56
 551               	.LVL51:
 552               	.L45:
 512:./tmk_core/common/command.c ****         case KC_0:
 553               		.loc 1 512 13 is_stmt 0 view .LVU141
 554 00a6 8334      		cpi r24,lo8(67)
 555 00a8 01F0      		breq .L46
 556 00aa 00F4      		brsh .L47
 557 00ac 8A33      		cpi r24,lo8(58)
 558 00ae 00F4      		brsh .+2
 559 00b0 00C0      		rjmp .L57
 501:./tmk_core/common/command.c ****             break;
 560               		.loc 1 501 13 is_stmt 1 view .LVU142
 561 00b2 8953      		subi r24,lo8(-(-57))
 562               	.LVL52:
 501:./tmk_core/common/command.c ****             break;
 563               		.loc 1 501 13 is_stmt 0 view .LVU143
 564 00b4 00C0      		rjmp .L74
 565               	.LVL53:
 566               	.L47:
 501:./tmk_core/common/command.c ****             break;
 567               		.loc 1 501 13 view .LVU144
 568 00b6 8834      		cpi r24,lo8(72)
 569 00b8 01F0      		breq .+2
 570 00ba 00C0      		rjmp .L57
 366:./tmk_core/common/command.c ****             print("\n\nJumping to bootloader... ");
 571               		.loc 1 366 13 is_stmt 1 view .LVU145
 572 00bc 0E94 0000 		call clear_keyboard
 573               	.LVL54:
 367:./tmk_core/common/command.c ****             #ifdef AUDIO_ENABLE
 574               		.loc 1 367 51 view .LVU146
 372:./tmk_core/common/command.c ****             #endif
 575               		.loc 1 372 14 view .LVU147
 576               	.LBB4:
 577               	.LBI4:
 578               		.file 2 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** _delay_ms(double __ms)
 579               		.loc 2 166 1 view .LVU148
 580               	.LBB5:
 167:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	double __tmp ;
 581               		.loc 2 168 2 view .LVU149
 169:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 582               		.loc 2 172 2 view .LVU150
 173:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 583               		.loc 2 173 2 view .LVU151
 174:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 584               		.loc 2 174 2 view .LVU152
 175:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 585               		.loc 2 184 3 view .LVU153
 185:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 586               		.loc 2 187 2 view .LVU154
 587 00c0 2FEF      		ldi r18,lo8(3199999)
 588 00c2 83ED      		ldi r24,hi8(3199999)
 589 00c4 90E3      		ldi r25,hlo8(3199999)
 590 00c6 2150      	1:	subi r18,1
 591 00c8 8040      		sbci r24,0
 592 00ca 9040      		sbci r25,0
 593 00cc 01F4      		brne 1b
 594 00ce 00C0      		rjmp .
 595 00d0 0000      		nop
 596               	.LVL55:
 597               		.loc 2 187 2 is_stmt 0 view .LVU155
 598               	.LBE5:
 599               	.LBE4:
 374:./tmk_core/common/command.c ****             break;
 600               		.loc 1 374 13 is_stmt 1 view .LVU156
 601 00d2 0E94 0000 		call bootloader_jump
 602               	.LVL56:
 375:./tmk_core/common/command.c **** 
 603               		.loc 1 375 13 view .LVU157
 604               	.L56:
 522:./tmk_core/common/command.c **** }
 605               		.loc 1 522 12 is_stmt 0 view .LVU158
 606 00d6 81E0      		ldi r24,lo8(1)
 607 00d8 0895      		ret
 608               	.LVL57:
 609               	.L39:
 355:./tmk_core/common/command.c ****             debug_keyboard = false;
 610               		.loc 1 355 13 is_stmt 1 view .LVU159
 356:./tmk_core/common/command.c ****             debug_mouse    = false;
 611               		.loc 1 356 13 view .LVU160
 357:./tmk_core/common/command.c ****             debug_enable   = false;
 612               		.loc 1 357 13 view .LVU161
 358:./tmk_core/common/command.c ****             command_console_help();
 613               		.loc 1 358 13 view .LVU162
 358:./tmk_core/common/command.c ****             command_console_help();
 614               		.loc 1 358 28 is_stmt 0 view .LVU163
 615 00da 8091 0000 		lds r24,debug_config
 616               	.LVL58:
 358:./tmk_core/common/command.c ****             command_console_help();
 617               		.loc 1 358 28 view .LVU164
 618 00de 807F      		andi r24,lo8(-16)
 619 00e0 8093 0000 		sts debug_config,r24
 359:./tmk_core/common/command.c ****             print("C> ");
 620               		.loc 1 359 13 is_stmt 1 view .LVU165
 360:./tmk_core/common/command.c ****             command_state = CONSOLE;
 621               		.loc 1 360 25 view .LVU166
 361:./tmk_core/common/command.c ****             break;
 622               		.loc 1 361 13 view .LVU167
 361:./tmk_core/common/command.c ****             break;
 623               		.loc 1 361 27 is_stmt 0 view .LVU168
 624 00e4 81E0      		ldi r24,lo8(1)
 625 00e6 8093 0000 		sts command_state,r24
 362:./tmk_core/common/command.c **** 
 626               		.loc 1 362 13 is_stmt 1 view .LVU169
 627 00ea 0895      		ret
 628               	.LVL59:
 629               	.L37:
 379:./tmk_core/common/command.c ****             if (debug_enable) {
 630               		.loc 1 379 13 view .LVU170
 379:./tmk_core/common/command.c ****             if (debug_enable) {
 631               		.loc 1 379 29 is_stmt 0 view .LVU171
 632 00ec 9091 0000 		lds r25,debug_config
 379:./tmk_core/common/command.c ****             if (debug_enable) {
 633               		.loc 1 379 26 view .LVU172
 634 00f0 892F      		mov r24,r25
 635               	.LVL60:
 379:./tmk_core/common/command.c ****             if (debug_enable) {
 636               		.loc 1 379 26 view .LVU173
 637 00f2 8E7F      		andi r24,~(1<<0)
 638 00f4 90FF      		sbrs r25,0
 639 00f6 8160      		ori r24,1<<0
 640 00f8 8093 0000 		sts debug_config,r24
 380:./tmk_core/common/command.c ****                 print("\ndebug: on\n");
 641               		.loc 1 380 13 is_stmt 1 view .LVU174
 380:./tmk_core/common/command.c ****                 print("\ndebug: on\n");
 642               		.loc 1 380 16 is_stmt 0 view .LVU175
 643 00fc 80FF      		sbrs r24,0
 644 00fe 00C0      		rjmp .L56
 381:./tmk_core/common/command.c ****                 debug_matrix   = true;
 645               		.loc 1 381 39 is_stmt 1 view .LVU176
 382:./tmk_core/common/command.c ****                 debug_keyboard = true;
 646               		.loc 1 382 17 view .LVU177
 383:./tmk_core/common/command.c ****                 debug_mouse    = true;
 647               		.loc 1 383 17 view .LVU178
 384:./tmk_core/common/command.c ****             } else {
 648               		.loc 1 384 17 view .LVU179
 382:./tmk_core/common/command.c ****                 debug_keyboard = true;
 649               		.loc 1 382 32 is_stmt 0 view .LVU180
 650 0100 8E60      		ori r24,lo8(14)
 651               	.L75:
 395:./tmk_core/common/command.c ****             } else {
 652               		.loc 1 395 30 view .LVU181
 653 0102 8093 0000 		sts debug_config,r24
 654 0106 00C0      		rjmp .L56
 655               	.LVL61:
 656               	.L35:
 414:./tmk_core/common/command.c ****             if (debug_mouse) {
 657               		.loc 1 414 13 is_stmt 1 view .LVU182
 414:./tmk_core/common/command.c ****             if (debug_mouse) {
 658               		.loc 1 414 28 is_stmt 0 view .LVU183
 659 0108 9091 0000 		lds r25,debug_config
 414:./tmk_core/common/command.c ****             if (debug_mouse) {
 660               		.loc 1 414 25 view .LVU184
 661 010c 892F      		mov r24,r25
 662               	.LVL62:
 414:./tmk_core/common/command.c ****             if (debug_mouse) {
 663               		.loc 1 414 25 view .LVU185
 664 010e 877F      		andi r24,~(1<<3)
 665 0110 93FF      		sbrs r25,3
 666 0112 8860      		ori r24,1<<3
 667 0114 8093 0000 		sts debug_config,r24
 415:./tmk_core/common/command.c ****                 print("\nmouse: on\n");
 668               		.loc 1 415 13 is_stmt 1 view .LVU186
 415:./tmk_core/common/command.c ****                 print("\nmouse: on\n");
 669               		.loc 1 415 16 is_stmt 0 view .LVU187
 670 0118 83FD      		sbrc r24,3
 671 011a 00C0      		rjmp .L52
 672 011c 00C0      		rjmp .L56
 673               	.LVL63:
 674               	.L34:
 511:./tmk_core/common/command.c ****             break;
 675               		.loc 1 511 13 is_stmt 1 view .LVU188
 676 011e 8D51      		subi r24,lo8(-(-29))
 677               	.LVL64:
 511:./tmk_core/common/command.c ****             break;
 678               		.loc 1 511 13 is_stmt 0 view .LVU189
 679 0120 00C0      		rjmp .L74
 680               		.cfi_endproc
 681               	.LFE113:
 683               		.section	.text.command_extra,"ax",@progbits
 684               		.weak	command_extra
 686               	command_extra:
 687               	.LVL65:
 688               	.LFB108:
 106:./tmk_core/common/command.c ****     (void)code;
 689               		.loc 1 106 1 is_stmt 1 view -0
 690               		.cfi_startproc
 691               	/* prologue: function */
 692               	/* frame size = 0 */
 693               	/* stack size = 0 */
 694               	.L__stack_usage = 0
 107:./tmk_core/common/command.c ****     return false;
 695               		.loc 1 107 5 view .LVU191
 108:./tmk_core/common/command.c **** }
 696               		.loc 1 108 5 view .LVU192
 109:./tmk_core/common/command.c **** 
 697               		.loc 1 109 1 is_stmt 0 view .LVU193
 698 0000 80E0      		ldi r24,0
 699               	.LVL66:
 700               	/* epilogue start */
 109:./tmk_core/common/command.c **** 
 701               		.loc 1 109 1 view .LVU194
 702 0002 0895      		ret
 703               		.cfi_endproc
 704               	.LFE108:
 706               		.set	command_extra.localalias.0,command_extra
 707               		.section	.text.command_console_extra,"ax",@progbits
 708               		.weak	command_console_extra
 710               	command_console_extra:
 711               	.LFB124:
 712               		.cfi_startproc
 713               	/* prologue: function */
 714               	/* frame size = 0 */
 715               	/* stack size = 0 */
 716               	.L__stack_usage = 0
 717 0000 0C94 0000 		jmp command_extra.localalias.0
 718               		.cfi_endproc
 719               	.LFE124:
 721               		.section	.text.numkey2num,"ax",@progbits
 722               	.global	numkey2num
 724               	numkey2num:
 725               	.LVL67:
 726               	.LFB121:
 775:./tmk_core/common/command.c ****     switch (code) {
 727               		.loc 1 775 1 is_stmt 1 view -0
 728               		.cfi_startproc
 729               	/* prologue: function */
 730               	/* frame size = 0 */
 731               	/* stack size = 0 */
 732               	.L__stack_usage = 0
 776:./tmk_core/common/command.c ****         case KC_1: return 1;
 733               		.loc 1 776 5 view .LVU196
 734 0000 8E51      		subi r24,lo8(-(-30))
 735               	.LVL68:
 776:./tmk_core/common/command.c ****         case KC_1: return 1;
 736               		.loc 1 776 5 is_stmt 0 view .LVU197
 737 0002 8A30      		cpi r24,lo8(10)
 738 0004 00F4      		brsh .L80
 739 0006 E82F      		mov r30,r24
 740 0008 F0E0      		ldi r31,0
 741 000a E050      		subi r30,lo8(-(CSWTCH.38))
 742 000c F040      		sbci r31,hi8(-(CSWTCH.38))
 743 000e 8081      		ld r24,Z
 744               	.LVL69:
 776:./tmk_core/common/command.c ****         case KC_1: return 1;
 745               		.loc 1 776 5 view .LVU198
 746 0010 0895      		ret
 747               	.L80:
 775:./tmk_core/common/command.c ****     switch (code) {
 748               		.loc 1 775 1 view .LVU199
 749 0012 80E0      		ldi r24,0
 750               	/* epilogue start */
 789:./tmk_core/common/command.c **** 
 751               		.loc 1 789 1 view .LVU200
 752 0014 0895      		ret
 753               		.cfi_endproc
 754               	.LFE121:
 756               		.section	.text.command_proc,"ax",@progbits
 757               	.global	command_proc
 759               	command_proc:
 760               	.LVL70:
 761               	.LFB107:
  77:./tmk_core/common/command.c ****     switch (command_state) {
 762               		.loc 1 77 1 is_stmt 1 view -0
 763               		.cfi_startproc
  77:./tmk_core/common/command.c ****     switch (command_state) {
 764               		.loc 1 77 1 is_stmt 0 view .LVU202
 765 0000 CF93      		push r28
 766               	.LCFI2:
 767               		.cfi_def_cfa_offset 3
 768               		.cfi_offset 28, -2
 769               	/* prologue: function */
 770               	/* frame size = 0 */
 771               	/* stack size = 1 */
 772               	.L__stack_usage = 1
 773 0002 C82F      		mov r28,r24
  78:./tmk_core/common/command.c ****         case ONESHOT:
 774               		.loc 1 78 5 is_stmt 1 view .LVU203
 775 0004 8091 0000 		lds r24,command_state
 776               	.LVL71:
  78:./tmk_core/common/command.c ****         case ONESHOT:
 777               		.loc 1 78 5 is_stmt 0 view .LVU204
 778 0008 8130      		cpi r24,lo8(1)
 779 000a 01F0      		breq .L82
 780 000c 8823      		tst r24
 781 000e 01F0      		breq .L83
 782 0010 8230      		cpi r24,lo8(2)
 783 0012 01F0      		breq .L84
  96:./tmk_core/common/command.c ****             return false;
 784               		.loc 1 96 13 is_stmt 1 view .LVU205
  96:./tmk_core/common/command.c ****             return false;
 785               		.loc 1 96 27 is_stmt 0 view .LVU206
 786 0014 1092 0000 		sts command_state,__zero_reg__
  97:./tmk_core/common/command.c ****     }
 787               		.loc 1 97 13 is_stmt 1 view .LVU207
 788               	.L107:
  81:./tmk_core/common/command.c ****             return (command_extra(code) || command_common(code));
 789               		.loc 1 81 24 is_stmt 0 view .LVU208
 790 0018 80E0      		ldi r24,0
 791 001a 00C0      		rjmp .L81
 792               	.L83:
  80:./tmk_core/common/command.c ****                 return false;
 793               		.loc 1 80 13 is_stmt 1 view .LVU209
  80:./tmk_core/common/command.c ****                 return false;
 794               		.loc 1 80 18 is_stmt 0 view .LVU210
 795 001c E091 0000 		lds r30,keyboard_report
 796 0020 F091 0000 		lds r31,keyboard_report+1
 797 0024 8081      		ld r24,Z
  80:./tmk_core/common/command.c ****                 return false;
 798               		.loc 1 80 16 view .LVU211
 799 0026 8131      		cpi r24,lo8(17)
 800 0028 01F0      		breq .L89
  80:./tmk_core/common/command.c ****                 return false;
 801               		.loc 1 80 17 discriminator 1 view .LVU212
 802 002a 8232      		cpi r24,lo8(34)
 803 002c 01F4      		brne .L107
 804               	.L89:
  86:./tmk_core/common/command.c ****             else
 805               		.loc 1 86 17 is_stmt 1 view .LVU213
  86:./tmk_core/common/command.c ****             else
 806               		.loc 1 86 25 is_stmt 0 view .LVU214
 807 002e 8C2F      		mov r24,r28
 808 0030 0E94 0000 		call command_extra
 809               	.LVL72:
  86:./tmk_core/common/command.c ****             else
 810               		.loc 1 86 45 view .LVU215
 811 0034 8111      		cpse r24,__zero_reg__
 812 0036 00C0      		rjmp .L109
  86:./tmk_core/common/command.c ****             else
 813               		.loc 1 86 48 discriminator 2 view .LVU216
 814 0038 8C2F      		mov r24,r28
 815 003a 0E94 0000 		call command_common
 816               	.LVL73:
 817               	.L92:
  88:./tmk_core/common/command.c ****             break;
 818               		.loc 1 88 53 discriminator 6 view .LVU217
 819 003e 8170      		andi r24,lo8(1)
 820               	.L81:
 821               	/* epilogue start */
 100:./tmk_core/common/command.c **** 
 822               		.loc 1 100 1 view .LVU218
 823 0040 CF91      		pop r28
 824               	.LVL74:
 100:./tmk_core/common/command.c **** 
 825               		.loc 1 100 1 view .LVU219
 826 0042 0895      		ret
 827               	.LVL75:
 828               	.L82:
  83:./tmk_core/common/command.c ****         case CONSOLE:
 829               		.loc 1 83 13 is_stmt 1 view .LVU220
  85:./tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
 830               		.loc 1 85 13 view .LVU221
  85:./tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
 831               		.loc 1 85 17 is_stmt 0 view .LVU222
 832 0044 E091 0000 		lds r30,keyboard_report
 833 0048 F091 0000 		lds r31,keyboard_report+1
 834 004c 8081      		ld r24,Z
  85:./tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
 835               		.loc 1 85 16 view .LVU223
 836 004e 8131      		cpi r24,lo8(17)
 837 0050 01F0      		breq .L89
  85:./tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
 838               		.loc 1 85 17 discriminator 1 view .LVU224
 839 0052 8232      		cpi r24,lo8(34)
 840 0054 01F0      		breq .L89
  88:./tmk_core/common/command.c ****             break;
 841               		.loc 1 88 17 is_stmt 1 view .LVU225
  88:./tmk_core/common/command.c ****             break;
 842               		.loc 1 88 25 is_stmt 0 view .LVU226
 843 0056 8C2F      		mov r24,r28
 844 0058 0E94 0000 		call command_console_extra
 845               	.LVL76:
  88:./tmk_core/common/command.c ****             break;
 846               		.loc 1 88 53 view .LVU227
 847 005c 8111      		cpse r24,__zero_reg__
 848 005e 00C0      		rjmp .L112
 849               	.LVL77:
 850               	.LBB10:
 851               	.LBI10:
 539:./tmk_core/common/command.c **** {
 852               		.loc 1 539 13 is_stmt 1 view .LVU228
 853               	.LBB11:
 541:./tmk_core/common/command.c ****         case KC_H:
 854               		.loc 1 541 5 view .LVU229
 855 0060 C431      		cpi r28,lo8(20)
 856 0062 01F0      		breq .L93
 857 0064 00F4      		brsh .L94
 858 0066 CB30      		cpi r28,lo8(11)
 859 0068 01F0      		breq .L112
 860 006a C031      		cpi r28,lo8(16)
 861 006c 01F4      		brne .L92
 552:./tmk_core/common/command.c ****             print("M> ");
 862               		.loc 1 552 13 view .LVU230
 553:./tmk_core/common/command.c ****             command_state = MOUSEKEY;
 863               		.loc 1 553 25 view .LVU231
 554:./tmk_core/common/command.c ****             return true;
 864               		.loc 1 554 13 view .LVU232
 554:./tmk_core/common/command.c ****             return true;
 865               		.loc 1 554 27 is_stmt 0 view .LVU233
 866 006e 82E0      		ldi r24,lo8(2)
 867 0070 8093 0000 		sts command_state,r24
 555:./tmk_core/common/command.c **** #endif
 868               		.loc 1 555 13 is_stmt 1 view .LVU234
 869               	.LVL78:
 870               	.L112:
 555:./tmk_core/common/command.c **** #endif
 871               		.loc 1 555 13 is_stmt 0 view .LVU235
 872               	.LBE11:
 873               	.LBE10:
  88:./tmk_core/common/command.c ****             break;
 874               		.loc 1 88 53 view .LVU236
 875 0074 81E0      		ldi r24,lo8(1)
 876 0076 00C0      		rjmp .L92
 877               	.L109:
  86:./tmk_core/common/command.c ****             else
 878               		.loc 1 86 45 view .LVU237
 879 0078 81E0      		ldi r24,lo8(1)
 880 007a 90E0      		ldi r25,0
 881 007c 00C0      		rjmp .L92
 882               	.LVL79:
 883               	.L94:
  86:./tmk_core/common/command.c ****             else
 884               		.loc 1 86 45 view .LVU238
 885 007e C932      		cpi r28,lo8(41)
 886 0080 01F0      		breq .L93
 887 0082 C833      		cpi r28,lo8(56)
 888 0084 01F0      		breq .L112
 889               	.L134:
 890               	.LBB14:
 891               	.LBB12:
 549:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 892               		.loc 1 549 13 is_stmt 1 view .LVU239
 893               	.LVL80:
 549:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 894               		.loc 1 549 13 is_stmt 0 view .LVU240
 895               	.LBE12:
 896               	.LBE14:
  88:./tmk_core/common/command.c ****             break;
 897               		.loc 1 88 53 view .LVU241
 898 0086 80E0      		ldi r24,0
 899 0088 00C0      		rjmp .L92
 900               	.LVL81:
 901               	.L93:
 902               	.LBB15:
 903               	.LBB13:
 548:./tmk_core/common/command.c ****             return false;
 904               		.loc 1 548 13 is_stmt 1 view .LVU242
 548:./tmk_core/common/command.c ****             return false;
 905               		.loc 1 548 27 is_stmt 0 view .LVU243
 906 008a 1092 0000 		sts command_state,__zero_reg__
 907 008e 00C0      		rjmp .L134
 908               	.LVL82:
 909               	.L84:
 548:./tmk_core/common/command.c ****             return false;
 910               		.loc 1 548 27 view .LVU244
 911               	.LBE13:
 912               	.LBE15:
  89:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 913               		.loc 1 89 13 is_stmt 1 view .LVU245
  92:./tmk_core/common/command.c ****             break;
 914               		.loc 1 92 13 view .LVU246
 915               	.LBB16:
 916               	.LBI16:
 708:./tmk_core/common/command.c **** {
 917               		.loc 1 708 13 view .LVU247
 918               	.LBB17:
 710:./tmk_core/common/command.c ****         case KC_H:
 919               		.loc 1 710 5 view .LVU248
 920 0090 C932      		cpi r28,lo8(41)
 921 0092 01F0      		breq .L96
 922 0094 00F4      		brsh .L97
 923 0096 C431      		cpi r28,lo8(20)
 924 0098 01F0      		breq .L96
 925 009a 00F4      		brsh .L98
 926 009c C730      		cpi r28,lo8(7)
 927 009e 01F0      		breq .L99
 928               	.L113:
 710:./tmk_core/common/command.c ****         case KC_H:
 929               		.loc 1 710 5 is_stmt 0 view .LVU249
 930               	.LBE17:
 931               	.LBE16:
  99:./tmk_core/common/command.c **** }
 932               		.loc 1 99 12 view .LVU250
 933 00a0 81E0      		ldi r24,lo8(1)
 934 00a2 00C0      		rjmp .L81
 935               	.L98:
  99:./tmk_core/common/command.c **** }
 936               		.loc 1 99 12 view .LVU251
 937 00a4 82EE      		ldi r24,lo8(-30)
 938 00a6 8C0F      		add r24,r28
 939 00a8 8630      		cpi r24,lo8(6)
 940 00aa 00F4      		brsh .L113
 941               	.LBB19:
 942               	.LBB18:
 734:./tmk_core/common/command.c ****             break;
 943               		.loc 1 734 13 is_stmt 1 view .LVU252
 734:./tmk_core/common/command.c ****             break;
 944               		.loc 1 734 30 is_stmt 0 view .LVU253
 945 00ac 8C2F      		mov r24,r28
 946 00ae 0E94 0000 		call numkey2num
 947               	.LVL83:
 734:./tmk_core/common/command.c ****             break;
 948               		.loc 1 734 28 view .LVU254
 949 00b2 8093 0000 		sts mousekey_param,r24
 735:./tmk_core/common/command.c ****         case KC_UP:
 950               		.loc 1 735 13 is_stmt 1 view .LVU255
 951 00b6 00C0      		rjmp .L113
 952               	.L97:
 735:./tmk_core/common/command.c ****         case KC_UP:
 953               		.loc 1 735 13 is_stmt 0 view .LVU256
 954 00b8 CE34      		cpi r28,lo8(78)
 955 00ba 01F0      		breq .L101
 956 00bc 00F4      		brsh .L102
 743:./tmk_core/common/command.c ****             break;
 957               		.loc 1 743 13 view .LVU257
 958 00be 6AE0      		ldi r22,lo8(10)
 959 00c0 CB34      		cpi r28,lo8(75)
 960 00c2 01F4      		brne .L113
 961               	.L137:
 743:./tmk_core/common/command.c ****             break;
 962               		.loc 1 743 13 view .LVU258
 963 00c4 8091 0000 		lds r24,mousekey_param
 964 00c8 0E94 0000 		call mousekey_param_inc
 965               	.LVL84:
 744:./tmk_core/common/command.c ****         case KC_PGDN:
 966               		.loc 1 744 13 is_stmt 1 view .LVU259
 967 00cc 00C0      		rjmp .L113
 968               	.L102:
 744:./tmk_core/common/command.c ****         case KC_PGDN:
 969               		.loc 1 744 13 is_stmt 0 view .LVU260
 970 00ce C135      		cpi r28,lo8(81)
 971 00d0 01F0      		breq .L104
 737:./tmk_core/common/command.c ****             break;
 972               		.loc 1 737 13 view .LVU261
 973 00d2 61E0      		ldi r22,lo8(1)
 974 00d4 C235      		cpi r28,lo8(82)
 975 00d6 01F0      		breq .L137
 976 00d8 00C0      		rjmp .L113
 977               	.L96:
 717:./tmk_core/common/command.c ****                 mousekey_param = 0;
 978               		.loc 1 717 13 is_stmt 1 view .LVU262
 717:./tmk_core/common/command.c ****                 mousekey_param = 0;
 979               		.loc 1 717 16 is_stmt 0 view .LVU263
 980 00da 8091 0000 		lds r24,mousekey_param
 981 00de 8823      		tst r24
 982 00e0 01F0      		breq .L106
 718:./tmk_core/common/command.c ****             } else {
 983               		.loc 1 718 17 is_stmt 1 view .LVU264
 718:./tmk_core/common/command.c ****             } else {
 984               		.loc 1 718 32 is_stmt 0 view .LVU265
 985 00e2 1092 0000 		sts mousekey_param,__zero_reg__
 724:./tmk_core/common/command.c ****         case KC_P:
 986               		.loc 1 724 13 is_stmt 1 view .LVU266
 987 00e6 00C0      		rjmp .L113
 988               	.L106:
 720:./tmk_core/common/command.c ****                 command_state = CONSOLE;
 989               		.loc 1 720 29 view .LVU267
 721:./tmk_core/common/command.c ****                 return false;
 990               		.loc 1 721 17 view .LVU268
 721:./tmk_core/common/command.c ****                 return false;
 991               		.loc 1 721 31 is_stmt 0 view .LVU269
 992 00e8 81E0      		ldi r24,lo8(1)
 993 00ea 8093 0000 		sts command_state,r24
 722:./tmk_core/common/command.c ****             }
 994               		.loc 1 722 17 is_stmt 1 view .LVU270
 995 00ee 00C0      		rjmp .L81
 996               	.L104:
 740:./tmk_core/common/command.c ****             break;
 997               		.loc 1 740 13 view .LVU271
 998 00f0 61E0      		ldi r22,lo8(1)
 999               	.L136:
 746:./tmk_core/common/command.c ****             break;
 1000               		.loc 1 746 13 is_stmt 0 view .LVU272
 1001 00f2 8091 0000 		lds r24,mousekey_param
 1002 00f6 0E94 0000 		call mousekey_param_dec
 1003               	.LVL85:
 747:./tmk_core/common/command.c ****         case KC_D:
 1004               		.loc 1 747 13 is_stmt 1 view .LVU273
 1005 00fa 00C0      		rjmp .L113
 1006               	.L101:
 746:./tmk_core/common/command.c ****             break;
 1007               		.loc 1 746 13 view .LVU274
 1008 00fc 6AE0      		ldi r22,lo8(10)
 1009 00fe 00C0      		rjmp .L136
 1010               	.L99:
 749:./tmk_core/common/command.c ****             mk_interval = MOUSEKEY_INTERVAL;
 1011               		.loc 1 749 13 view .LVU275
 749:./tmk_core/common/command.c ****             mk_interval = MOUSEKEY_INTERVAL;
 1012               		.loc 1 749 22 is_stmt 0 view .LVU276
 1013 0100 8AE0      		ldi r24,lo8(10)
 1014 0102 8093 0000 		sts mk_delay,r24
 750:./tmk_core/common/command.c ****             mk_max_speed = MOUSEKEY_MAX_SPEED;
 1015               		.loc 1 750 13 is_stmt 1 view .LVU277
 750:./tmk_core/common/command.c ****             mk_max_speed = MOUSEKEY_MAX_SPEED;
 1016               		.loc 1 750 25 is_stmt 0 view .LVU278
 1017 0106 94E1      		ldi r25,lo8(20)
 1018 0108 9093 0000 		sts mk_interval,r25
 751:./tmk_core/common/command.c ****             mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
 1019               		.loc 1 751 13 is_stmt 1 view .LVU279
 751:./tmk_core/common/command.c ****             mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
 1020               		.loc 1 751 26 is_stmt 0 view .LVU280
 1021 010c 93E0      		ldi r25,lo8(3)
 1022 010e 9093 0000 		sts mk_max_speed,r25
 752:./tmk_core/common/command.c ****             mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
 1023               		.loc 1 752 13 is_stmt 1 view .LVU281
 752:./tmk_core/common/command.c ****             mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
 1024               		.loc 1 752 28 is_stmt 0 view .LVU282
 1025 0112 8093 0000 		sts mk_time_to_max,r24
 753:./tmk_core/common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 1026               		.loc 1 753 13 is_stmt 1 view .LVU283
 753:./tmk_core/common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 1027               		.loc 1 753 32 is_stmt 0 view .LVU284
 1028 0116 88E0      		ldi r24,lo8(8)
 1029 0118 8093 0000 		sts mk_wheel_max_speed,r24
 754:./tmk_core/common/command.c ****             print("set default\n");
 1030               		.loc 1 754 13 is_stmt 1 view .LVU285
 754:./tmk_core/common/command.c ****             print("set default\n");
 1031               		.loc 1 754 34 is_stmt 0 view .LVU286
 1032 011c 88E2      		ldi r24,lo8(40)
 1033 011e 8093 0000 		sts mk_wheel_time_to_max,r24
 755:./tmk_core/common/command.c ****             break;
 1034               		.loc 1 755 35 is_stmt 1 view .LVU287
 756:./tmk_core/common/command.c ****         default:
 1035               		.loc 1 756 13 view .LVU288
 1036 0122 00C0      		rjmp .L113
 1037               	.LBE18:
 1038               	.LBE19:
 1039               		.cfi_endproc
 1040               	.LFE107:
 1042               		.section	.rodata.CSWTCH.38,"a",@progbits
 1045               	CSWTCH.38:
 1046 0000 01        		.byte	1
 1047 0001 02        		.byte	2
 1048 0002 03        		.byte	3
 1049 0003 04        		.byte	4
 1050 0004 05        		.byte	5
 1051 0005 06        		.byte	6
 1052 0006 07        		.byte	7
 1053 0007 08        		.byte	8
 1054 0008 09        		.byte	9
 1055 0009 00        		.byte	0
 1056               		.section	.bss.mousekey_param,"aw",@nobits
 1059               	mousekey_param:
 1060 0000 00        		.zero	1
 1061               	.global	command_state
 1062               		.section	.bss.command_state,"aw",@nobits
 1065               	command_state:
 1066 0000 00        		.zero	1
 1067               		.text
 1068               	.Letext0:
 1069               		.file 3 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/stdint.h"
 1070               		.file 4 "/usr/local/Cellar/avr-gcc/8.1.0/lib/avr-gcc/8/gcc/avr/8.1.0/include/stddef.h"
 1071               		.file 5 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 1072               		.file 6 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 1073               		.file 7 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 1074               		.file 8 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/HostStandardReq.h"
 1075               		.file 9 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/stdio.h"
 1076               		.file 10 "./tmk_core/common/report.h"
 1077               		.file 11 "./tmk_core/common/host.h"
 1078               		.file 12 "./tmk_core/common/keyboard.h"
 1079               		.file 13 "./tmk_core/common/action.h"
 1080               		.file 14 "./tmk_core/common/debug.h"
 1081               		.file 15 "./quantum/keycode_config.h"
 1082               		.file 16 "./quantum/keymap.h"
 1083               		.file 17 "./tmk_core/common/timer.h"
 1084               		.file 18 "./tmk_core/common/action_layer.h"
 1085               		.file 19 "./tmk_core/common/action_util.h"
 1086               		.file 20 "./tmk_core/common/command.h"
 1087               		.file 21 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/stdlib.h"
 1088               		.file 22 "./tmk_core/common/mousekey.h"
 1089               		.file 23 "./tmk_core/common/bootloader.h"
 1090               		.file 24 "./tmk_core/common/keycode.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 command.c
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc41NMmB.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc41NMmB.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc41NMmB.s:4      *ABS*:000000000000003f __SREG__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc41NMmB.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc41NMmB.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc41NMmB.s:12     .text.mousekey_param_inc:0000000000000000 mousekey_param_inc
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc41NMmB.s:220    .text.mousekey_param_dec:0000000000000000 mousekey_param_dec
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc41NMmB.s:365    .text.switch_default_layer:0000000000000000 switch_default_layer
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc41NMmB.s:419    .text.command_common:0000000000000000 command_common
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc41NMmB.s:1065   .bss.command_state:0000000000000000 command_state
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc41NMmB.s:686    .text.command_extra:0000000000000000 command_extra
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc41NMmB.s:686    .text.command_extra:0000000000000000 command_extra.localalias.0
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc41NMmB.s:710    .text.command_console_extra:0000000000000000 command_console_extra
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc41NMmB.s:724    .text.numkey2num:0000000000000000 numkey2num
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc41NMmB.s:1045   .rodata.CSWTCH.38:0000000000000000 CSWTCH.38
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc41NMmB.s:759    .text.command_proc:0000000000000000 command_proc
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc41NMmB.s:1059   .bss.mousekey_param:0000000000000000 mousekey_param

UNDEFINED SYMBOLS
mk_delay
mk_interval
mk_max_speed
mk_time_to_max
mk_wheel_max_speed
mk_wheel_time_to_max
default_layer_set
clear_keyboard
debug_config
keymap_config
bootloader_jump
keyboard_report
__do_copy_data
__do_clear_bss
