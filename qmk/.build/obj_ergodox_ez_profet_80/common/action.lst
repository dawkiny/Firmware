   1               		.file	"action.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.process_hand_swap,"ax",@progbits
  11               	.global	process_hand_swap
  13               	process_hand_swap:
  14               	.LVL0:
  15               	.LFB104:
  16               		.file 1 "./tmk_core/common/action.c"
   1:./tmk_core/common/action.c **** /*
   2:./tmk_core/common/action.c **** Copyright 2012,2013 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/action.c **** 
   4:./tmk_core/common/action.c **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/action.c **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/action.c **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/action.c **** (at your option) any later version.
   8:./tmk_core/common/action.c **** 
   9:./tmk_core/common/action.c **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/action.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/action.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/action.c **** GNU General Public License for more details.
  13:./tmk_core/common/action.c **** 
  14:./tmk_core/common/action.c **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/action.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/action.c **** */
  17:./tmk_core/common/action.c **** #include "host.h"
  18:./tmk_core/common/action.c **** #include "keycode.h"
  19:./tmk_core/common/action.c **** #include "keyboard.h"
  20:./tmk_core/common/action.c **** #include "mousekey.h"
  21:./tmk_core/common/action.c **** #include "command.h"
  22:./tmk_core/common/action.c **** #include "led.h"
  23:./tmk_core/common/action.c **** #include "backlight.h"
  24:./tmk_core/common/action.c **** #include "action_layer.h"
  25:./tmk_core/common/action.c **** #include "action_tapping.h"
  26:./tmk_core/common/action.c **** #include "action_macro.h"
  27:./tmk_core/common/action.c **** #include "action_util.h"
  28:./tmk_core/common/action.c **** #include "action.h"
  29:./tmk_core/common/action.c **** 
  30:./tmk_core/common/action.c **** #ifdef DEBUG_ACTION
  31:./tmk_core/common/action.c **** #include "debug.h"
  32:./tmk_core/common/action.c **** #else
  33:./tmk_core/common/action.c **** #include "nodebug.h"
  34:./tmk_core/common/action.c **** #endif
  35:./tmk_core/common/action.c **** 
  36:./tmk_core/common/action.c **** 
  37:./tmk_core/common/action.c **** void action_exec(keyevent_t event)
  38:./tmk_core/common/action.c **** {
  39:./tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  40:./tmk_core/common/action.c ****         dprint("\n---- action_exec: start -----\n");
  41:./tmk_core/common/action.c ****         dprint("EVENT: "); debug_event(event); dprintln();
  42:./tmk_core/common/action.c ****     }
  43:./tmk_core/common/action.c **** 
  44:./tmk_core/common/action.c **** #ifdef ONEHAND_ENABLE
  45:./tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  46:./tmk_core/common/action.c ****         process_hand_swap(&event);
  47:./tmk_core/common/action.c ****     }
  48:./tmk_core/common/action.c **** #endif
  49:./tmk_core/common/action.c **** 
  50:./tmk_core/common/action.c ****     keyrecord_t record = { .event = event };
  51:./tmk_core/common/action.c **** 
  52:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
  53:./tmk_core/common/action.c ****     action_tapping_process(record);
  54:./tmk_core/common/action.c **** #else
  55:./tmk_core/common/action.c ****     process_record(&record);
  56:./tmk_core/common/action.c ****     if (!IS_NOEVENT(record.event)) {
  57:./tmk_core/common/action.c ****         dprint("processed: "); debug_record(record); dprintln();
  58:./tmk_core/common/action.c ****     }
  59:./tmk_core/common/action.c **** #endif
  60:./tmk_core/common/action.c **** }
  61:./tmk_core/common/action.c **** 
  62:./tmk_core/common/action.c **** #ifdef ONEHAND_ENABLE
  63:./tmk_core/common/action.c **** bool swap_hands = false;
  64:./tmk_core/common/action.c **** 
  65:./tmk_core/common/action.c **** void process_hand_swap(keyevent_t *event) {
  17               		.loc 1 65 43 view -0
  18               		.cfi_startproc
  19               		.loc 1 65 43 is_stmt 0 view .LVU1
  20 0000 CF93      		push r28
  21               	.LCFI0:
  22               		.cfi_def_cfa_offset 3
  23               		.cfi_offset 28, -2
  24 0002 DF93      		push r29
  25               	.LCFI1:
  26               		.cfi_def_cfa_offset 4
  27               		.cfi_offset 29, -3
  28               	/* prologue: function */
  29               	/* frame size = 0 */
  30               	/* stack size = 2 */
  31               	.L__stack_usage = 2
  32 0004 DC01      		movw r26,r24
  66:./tmk_core/common/action.c ****     static swap_state_row_t swap_state[MATRIX_ROWS];
  33               		.loc 1 66 5 is_stmt 1 view .LVU2
  67:./tmk_core/common/action.c **** 
  68:./tmk_core/common/action.c ****     keypos_t pos = event->key;
  34               		.loc 1 68 5 view .LVU3
  35               	.LVL1:
  69:./tmk_core/common/action.c ****     swap_state_row_t col_bit = (swap_state_row_t)1<<pos.col;
  36               		.loc 1 69 5 view .LVU4
  37               		.loc 1 69 56 is_stmt 0 view .LVU5
  38 0006 8C91      		ld r24,X
  39               	.LVL2:
  40               		.loc 1 69 56 view .LVU6
  41 0008 682F      		mov r22,r24
  42 000a 70E0      		ldi r23,0
  43               		.loc 1 69 51 view .LVU7
  44 000c 21E0      		ldi r18,lo8(1)
  45 000e 30E0      		ldi r19,0
  46 0010 00C0      		rjmp 2f
  47               		1:
  48 0012 220F      		lsl r18
  49               		2:
  50 0014 8A95      		dec r24
  51 0016 02F4      		brpl 1b
  52               	.LVL3:
  70:./tmk_core/common/action.c ****     bool do_swap = event->pressed ? swap_hands :
  53               		.loc 1 70 5 is_stmt 1 view .LVU8
  54 0018 1196      		adiw r26,1
  55 001a 4C91      		ld r20,X
  56 001c 1197      		sbiw r26,1
  57 001e 50E0      		ldi r21,0
  58 0020 EA01      		movw r28,r20
  59 0022 C050      		subi r28,lo8(-(swap_state.4890))
  60 0024 D040      		sbci r29,hi8(-(swap_state.4890))
  61 0026 9881      		ld r25,Y
  62               		.loc 1 70 48 is_stmt 0 view .LVU9
  63 0028 1296      		adiw r26,2
  64 002a 8C91      		ld r24,X
  65 002c 1297      		sbiw r26,2
  66               	.LVL4:
  67               		.loc 1 70 48 view .LVU10
  68 002e 8823      		tst r24
  69 0030 01F0      		breq .L2
  70               		.loc 1 70 48 discriminator 1 view .LVU11
  71 0032 8091 0000 		lds r24,swap_hands
  72               	.LVL5:
  71:./tmk_core/common/action.c ****                                     swap_state[pos.row] & (col_bit);
  72:./tmk_core/common/action.c **** 
  73:./tmk_core/common/action.c ****     if (do_swap) {
  73               		.loc 1 73 5 is_stmt 1 discriminator 1 view .LVU12
  74               	.L11:
  70:./tmk_core/common/action.c ****     bool do_swap = event->pressed ? swap_hands :
  75               		.loc 1 70 48 is_stmt 0 discriminator 2 view .LVU13
  76 0036 8823      		tst r24
  77 0038 01F0      		breq .L5
  74:./tmk_core/common/action.c ****         event->key = hand_swap_config[pos.row][pos.col];
  78               		.loc 1 74 9 is_stmt 1 view .LVU14
  79               		.loc 1 74 20 is_stmt 0 view .LVU15
  80 003a 86E0      		ldi r24,lo8(6)
  81 003c 849F      		mul r24,r20
  82 003e F001      		movw r30,r0
  83 0040 859F      		mul r24,r21
  84 0042 F00D      		add r31,r0
  85 0044 1124      		clr __zero_reg__
  86 0046 E60F      		add r30,r22
  87 0048 F71F      		adc r31,r23
  88 004a EE0F      		lsl r30
  89 004c FF1F      		rol r31
  90 004e E050      		subi r30,lo8(-(hand_swap_config))
  91 0050 F040      		sbci r31,hi8(-(hand_swap_config))
  92 0052 4081      		ld r20,Z
  93 0054 5181      		ldd r21,Z+1
  94 0056 4D93      		st X+,r20
  95 0058 5C93      		st X,r21
  96               	.LVL6:
  75:./tmk_core/common/action.c ****         swap_state[pos.row] |= col_bit;
  97               		.loc 1 75 9 is_stmt 1 view .LVU16
  98               		.loc 1 75 29 is_stmt 0 view .LVU17
  99 005a 292B      		or r18,r25
 100               	.LVL7:
 101               	.L12:
  76:./tmk_core/common/action.c ****     } else {
  77:./tmk_core/common/action.c ****         swap_state[pos.row] &= ~(col_bit);
 102               		.loc 1 77 29 view .LVU18
 103 005c 2883      		st Y,r18
 104               	.LVL8:
 105               	/* epilogue start */
  78:./tmk_core/common/action.c ****     }
  79:./tmk_core/common/action.c **** }
 106               		.loc 1 79 1 view .LVU19
 107 005e DF91      		pop r29
 108 0060 CF91      		pop r28
 109 0062 0895      		ret
 110               	.LVL9:
 111               	.L2:
  70:./tmk_core/common/action.c ****                                     swap_state[pos.row] & (col_bit);
 112               		.loc 1 70 48 discriminator 2 view .LVU20
 113 0064 892F      		mov r24,r25
 114 0066 8223      		and r24,r18
 115 0068 00C0      		rjmp .L11
 116               	.L5:
  77:./tmk_core/common/action.c ****     }
 117               		.loc 1 77 9 is_stmt 1 view .LVU21
  77:./tmk_core/common/action.c ****     }
 118               		.loc 1 77 29 is_stmt 0 view .LVU22
 119 006a 2095      		com r18
 120               	.LVL10:
  77:./tmk_core/common/action.c ****     }
 121               		.loc 1 77 29 view .LVU23
 122 006c 2923      		and r18,r25
 123 006e 00C0      		rjmp .L12
 124               		.cfi_endproc
 125               	.LFE104:
 127               		.section	.text.action_exec,"ax",@progbits
 128               	.global	action_exec
 130               	action_exec:
 131               	.LFB103:
  38:./tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
 132               		.loc 1 38 1 is_stmt 1 view -0
 133               		.cfi_startproc
 134 0000 CF93      		push r28
 135               	.LCFI2:
 136               		.cfi_def_cfa_offset 3
 137               		.cfi_offset 28, -2
 138 0002 DF93      		push r29
 139               	.LCFI3:
 140               		.cfi_def_cfa_offset 4
 141               		.cfi_offset 29, -3
 142 0004 CDB7      		in r28,__SP_L__
 143 0006 DEB7      		in r29,__SP_H__
 144               	.LCFI4:
 145               		.cfi_def_cfa_register 28
 146 0008 2B97      		sbiw r28,11
 147               	.LCFI5:
 148               		.cfi_def_cfa_offset 15
 149 000a 0FB6      		in __tmp_reg__,__SREG__
 150 000c F894      		cli
 151 000e DEBF      		out __SP_H__,r29
 152 0010 0FBE      		out __SREG__,__tmp_reg__
 153 0012 CDBF      		out __SP_L__,r28
 154               	/* prologue: function */
 155               	/* frame size = 11 */
 156               	/* stack size = 13 */
 157               	.L__stack_usage = 13
 158 0014 4F83      		std Y+7,r20
 159 0016 5887      		std Y+8,r21
 160 0018 6987      		std Y+9,r22
 161 001a 7A87      		std Y+10,r23
 162 001c 8B87      		std Y+11,r24
  39:./tmk_core/common/action.c ****         dprint("\n---- action_exec: start -----\n");
 163               		.loc 1 39 5 view .LVU25
 164               	.LBB4:
 165               	.LBI4:
 166               		.file 2 "./tmk_core/common/keyboard.h"
   1:./tmk_core/common/keyboard.h **** /*
   2:./tmk_core/common/keyboard.h **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/keyboard.h **** 
   4:./tmk_core/common/keyboard.h **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/keyboard.h **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/keyboard.h **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/keyboard.h **** (at your option) any later version.
   8:./tmk_core/common/keyboard.h **** 
   9:./tmk_core/common/keyboard.h **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/keyboard.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/keyboard.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/keyboard.h **** GNU General Public License for more details.
  13:./tmk_core/common/keyboard.h **** 
  14:./tmk_core/common/keyboard.h **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/keyboard.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/keyboard.h **** */
  17:./tmk_core/common/keyboard.h **** 
  18:./tmk_core/common/keyboard.h **** #ifndef KEYBOARD_H
  19:./tmk_core/common/keyboard.h **** #define KEYBOARD_H
  20:./tmk_core/common/keyboard.h **** 
  21:./tmk_core/common/keyboard.h **** #include <stdbool.h>
  22:./tmk_core/common/keyboard.h **** #include <stdint.h>
  23:./tmk_core/common/keyboard.h **** 
  24:./tmk_core/common/keyboard.h **** 
  25:./tmk_core/common/keyboard.h **** #ifdef __cplusplus
  26:./tmk_core/common/keyboard.h **** extern "C" {
  27:./tmk_core/common/keyboard.h **** #endif
  28:./tmk_core/common/keyboard.h **** 
  29:./tmk_core/common/keyboard.h **** /* key matrix position */
  30:./tmk_core/common/keyboard.h **** typedef struct {
  31:./tmk_core/common/keyboard.h ****     uint8_t col;
  32:./tmk_core/common/keyboard.h ****     uint8_t row;
  33:./tmk_core/common/keyboard.h **** } keypos_t;
  34:./tmk_core/common/keyboard.h **** 
  35:./tmk_core/common/keyboard.h **** /* key event */
  36:./tmk_core/common/keyboard.h **** typedef struct {
  37:./tmk_core/common/keyboard.h ****     keypos_t key;
  38:./tmk_core/common/keyboard.h ****     bool     pressed;
  39:./tmk_core/common/keyboard.h ****     uint16_t time;
  40:./tmk_core/common/keyboard.h **** } keyevent_t;
  41:./tmk_core/common/keyboard.h **** 
  42:./tmk_core/common/keyboard.h **** /* equivalent test of keypos_t */
  43:./tmk_core/common/keyboard.h **** #define KEYEQ(keya, keyb)       ((keya).row == (keyb).row && (keya).col == (keyb).col)
  44:./tmk_core/common/keyboard.h **** 
  45:./tmk_core/common/keyboard.h **** /* Rules for No Event:
  46:./tmk_core/common/keyboard.h ****  * 1) (time == 0) to handle (keyevent_t){} as empty event
  47:./tmk_core/common/keyboard.h ****  * 2) Matrix(255, 255) to make TICK event available
  48:./tmk_core/common/keyboard.h ****  */
  49:./tmk_core/common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
 167               		.loc 2 49 20 view .LVU26
 168               	.LBB5:
 169               		.loc 2 49 51 view .LVU27
 170               		.loc 2 49 74 is_stmt 0 view .LVU28
 171 001e 8A85      		ldd r24,Y+10
 172 0020 9B85      		ldd r25,Y+11
 173 0022 892B      		or r24,r25
 174 0024 01F0      		breq .L14
 175 0026 CA01      		movw r24,r20
 176 0028 8923      		and r24,r25
 177 002a 8F3F      		cpi r24,lo8(-1)
 178 002c 01F4      		brne .L15
 179               	.L14:
 180               	.LBE5:
 181               	.LBE4:
  50:./tmk_core/common/action.c **** 
 182               		.loc 1 50 5 is_stmt 1 view .LVU29
  50:./tmk_core/common/action.c **** 
 183               		.loc 1 50 17 is_stmt 0 view .LVU30
 184 002e 1E82      		std Y+6,__zero_reg__
 185 0030 1D82      		std Y+5,__zero_reg__
 186 0032 85E0      		ldi r24,lo8(5)
 187 0034 FE01      		movw r30,r28
 188 0036 3796      		adiw r30,7
 189 0038 DE01      		movw r26,r28
 190 003a 1196      		adiw r26,1
 191               		0:
 192 003c 0190      		ld r0,Z+
 193 003e 0D92      		st X+,r0
 194 0040 8A95      		dec r24
 195 0042 01F4      		brne 0b
  53:./tmk_core/common/action.c **** #else
 196               		.loc 1 53 5 is_stmt 1 view .LVU31
 197 0044 4981      		ldd r20,Y+1
 198 0046 5A81      		ldd r21,Y+2
 199 0048 6B81      		ldd r22,Y+3
 200 004a 7C81      		ldd r23,Y+4
 201 004c 8D81      		ldd r24,Y+5
 202 004e 9E81      		ldd r25,Y+6
 203 0050 0E94 0000 		call action_tapping_process
 204               	.LVL11:
 205               	/* epilogue start */
  60:./tmk_core/common/action.c **** 
 206               		.loc 1 60 1 is_stmt 0 view .LVU32
 207 0054 2B96      		adiw r28,11
 208 0056 0FB6      		in __tmp_reg__,__SREG__
 209 0058 F894      		cli
 210 005a DEBF      		out __SP_H__,r29
 211 005c 0FBE      		out __SREG__,__tmp_reg__
 212 005e CDBF      		out __SP_L__,r28
 213 0060 DF91      		pop r29
 214 0062 CF91      		pop r28
 215 0064 0895      		ret
 216               	.L15:
  41:./tmk_core/common/action.c ****     }
 217               		.loc 1 41 58 is_stmt 1 view .LVU33
  45:./tmk_core/common/action.c ****         process_hand_swap(&event);
 218               		.loc 1 45 5 view .LVU34
  46:./tmk_core/common/action.c ****     }
 219               		.loc 1 46 9 view .LVU35
 220 0066 CE01      		movw r24,r28
 221 0068 0796      		adiw r24,7
 222 006a 0E94 0000 		call process_hand_swap
 223               	.LVL12:
 224 006e 00C0      		rjmp .L14
 225               		.cfi_endproc
 226               	.LFE103:
 228               		.section	.text.process_record_quantum,"ax",@progbits
 229               		.weak	process_record_quantum
 231               	process_record_quantum:
 232               	.LVL13:
 233               	.LFB106:
  80:./tmk_core/common/action.c **** #endif
  81:./tmk_core/common/action.c **** 
  82:./tmk_core/common/action.c **** #if !defined(NO_ACTION_LAYER) && defined(PREVENT_STUCK_MODIFIERS)
  83:./tmk_core/common/action.c **** bool disable_action_cache = false;
  84:./tmk_core/common/action.c **** 
  85:./tmk_core/common/action.c **** void process_record_nocache(keyrecord_t *record)
  86:./tmk_core/common/action.c **** {
  87:./tmk_core/common/action.c ****     disable_action_cache = true;
  88:./tmk_core/common/action.c ****     process_record(record);
  89:./tmk_core/common/action.c ****     disable_action_cache = false;
  90:./tmk_core/common/action.c **** }
  91:./tmk_core/common/action.c **** #else
  92:./tmk_core/common/action.c **** void process_record_nocache(keyrecord_t *record)
  93:./tmk_core/common/action.c **** {
  94:./tmk_core/common/action.c ****     process_record(record);
  95:./tmk_core/common/action.c **** }
  96:./tmk_core/common/action.c **** #endif
  97:./tmk_core/common/action.c **** 
  98:./tmk_core/common/action.c **** __attribute__ ((weak))
  99:./tmk_core/common/action.c **** bool process_record_quantum(keyrecord_t *record) {
 234               		.loc 1 99 50 view -0
 235               		.cfi_startproc
 236               	/* prologue: function */
 237               	/* frame size = 0 */
 238               	/* stack size = 0 */
 239               	.L__stack_usage = 0
 100:./tmk_core/common/action.c ****     return true;
 240               		.loc 1 100 5 view .LVU37
 101:./tmk_core/common/action.c **** }
 241               		.loc 1 101 1 is_stmt 0 view .LVU38
 242 0000 81E0      		ldi r24,lo8(1)
 243               	.LVL14:
 244               	/* epilogue start */
 245               		.loc 1 101 1 view .LVU39
 246 0002 0895      		ret
 247               		.cfi_endproc
 248               	.LFE106:
 250               		.section	.text.register_code,"ax",@progbits
 251               	.global	register_code
 253               	register_code:
 254               	.LVL15:
 255               	.LFB109:
 102:./tmk_core/common/action.c **** 
 103:./tmk_core/common/action.c **** void process_record(keyrecord_t *record) 
 104:./tmk_core/common/action.c **** {
 105:./tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) { return; }
 106:./tmk_core/common/action.c **** 
 107:./tmk_core/common/action.c ****     if(!process_record_quantum(record))
 108:./tmk_core/common/action.c ****         return;
 109:./tmk_core/common/action.c **** 
 110:./tmk_core/common/action.c ****     action_t action = store_or_get_action(record->event.pressed, record->event.key);
 111:./tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
 112:./tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 113:./tmk_core/common/action.c ****     dprint(" layer_state: "); layer_debug();
 114:./tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 115:./tmk_core/common/action.c **** #endif
 116:./tmk_core/common/action.c ****     dprintln();
 117:./tmk_core/common/action.c **** 
 118:./tmk_core/common/action.c ****     process_action(record, action);
 119:./tmk_core/common/action.c **** }
 120:./tmk_core/common/action.c **** 
 121:./tmk_core/common/action.c **** void process_action(keyrecord_t *record, action_t action)
 122:./tmk_core/common/action.c **** {
 123:./tmk_core/common/action.c ****     bool do_release_oneshot = false;
 124:./tmk_core/common/action.c ****     keyevent_t event = record->event;
 125:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 126:./tmk_core/common/action.c ****     uint8_t tap_count = record->tap.count;
 127:./tmk_core/common/action.c **** #endif
 128:./tmk_core/common/action.c **** 
 129:./tmk_core/common/action.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 130:./tmk_core/common/action.c ****     if (has_oneshot_layer_timed_out()) {
 131:./tmk_core/common/action.c ****         dprintf("Oneshot layer: timeout\n");
 132:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 133:./tmk_core/common/action.c ****     }
 134:./tmk_core/common/action.c **** #endif
 135:./tmk_core/common/action.c **** 
 136:./tmk_core/common/action.c ****     if (event.pressed) {
 137:./tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 138:./tmk_core/common/action.c ****         clear_weak_mods();
 139:./tmk_core/common/action.c ****     }
 140:./tmk_core/common/action.c **** 
 141:./tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 142:./tmk_core/common/action.c ****     // notice we only clear the one shot layer if the pressed key is not a modifier.
 143:./tmk_core/common/action.c ****     if (is_oneshot_layer_active() && event.pressed && !IS_MOD(action.key.code)) {
 144:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 145:./tmk_core/common/action.c ****         do_release_oneshot = !is_oneshot_layer_active();
 146:./tmk_core/common/action.c ****     }
 147:./tmk_core/common/action.c **** #endif
 148:./tmk_core/common/action.c **** 
 149:./tmk_core/common/action.c ****     switch (action.kind.id) {
 150:./tmk_core/common/action.c ****         /* Key and Mods */
 151:./tmk_core/common/action.c ****         case ACT_LMODS:
 152:./tmk_core/common/action.c ****         case ACT_RMODS:
 153:./tmk_core/common/action.c ****             {
 154:./tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
 155:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 156:./tmk_core/common/action.c ****                 if (event.pressed) {
 157:./tmk_core/common/action.c ****                     if (mods) {
 158:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 159:./tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 160:./tmk_core/common/action.c ****                             // This also makes LSFT(KC_LGUI) behave exactly the same as LGUI(KC_LSF
 161:./tmk_core/common/action.c ****                             // Same applies for some keys like KC_MEH which are declared as MEH(KC_
 162:./tmk_core/common/action.c ****                             add_mods(mods);
 163:./tmk_core/common/action.c ****                         } else {
 164:./tmk_core/common/action.c ****                             add_weak_mods(mods);
 165:./tmk_core/common/action.c ****                         }
 166:./tmk_core/common/action.c ****                         send_keyboard_report();
 167:./tmk_core/common/action.c ****                     }
 168:./tmk_core/common/action.c ****                     register_code(action.key.code);
 169:./tmk_core/common/action.c ****                 } else {
 170:./tmk_core/common/action.c ****                     unregister_code(action.key.code);
 171:./tmk_core/common/action.c ****                     if (mods) {
 172:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 173:./tmk_core/common/action.c ****                             del_mods(mods);
 174:./tmk_core/common/action.c ****                         } else {
 175:./tmk_core/common/action.c ****                             del_weak_mods(mods);
 176:./tmk_core/common/action.c ****                         }
 177:./tmk_core/common/action.c ****                         send_keyboard_report();
 178:./tmk_core/common/action.c ****                     }
 179:./tmk_core/common/action.c ****                 }
 180:./tmk_core/common/action.c ****             }
 181:./tmk_core/common/action.c ****             break;
 182:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 183:./tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 184:./tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 185:./tmk_core/common/action.c ****             {
 186:./tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 187:./tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 188:./tmk_core/common/action.c ****                 switch (action.layer_tap.code) {
 189:./tmk_core/common/action.c ****     #ifndef NO_ACTION_ONESHOT
 190:./tmk_core/common/action.c ****                     case MODS_ONESHOT:
 191:./tmk_core/common/action.c ****                         // Oneshot modifier
 192:./tmk_core/common/action.c ****                         if (event.pressed) {
 193:./tmk_core/common/action.c ****                             if (tap_count == 0) {
 194:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: 0\n");
 195:./tmk_core/common/action.c ****                                 register_mods(mods);
 196:./tmk_core/common/action.c ****                             } else if (tap_count == 1) {
 197:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 198:./tmk_core/common/action.c ****                                 set_oneshot_mods(mods);
 199:./tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 200:./tmk_core/common/action.c ****                             } else if (tap_count == ONESHOT_TAP_TOGGLE) {
 201:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Toggling oneshot");
 202:./tmk_core/common/action.c ****                                 clear_oneshot_mods();
 203:./tmk_core/common/action.c ****                                 set_oneshot_locked_mods(mods);
 204:./tmk_core/common/action.c ****                                 register_mods(mods);
 205:./tmk_core/common/action.c ****                     #endif
 206:./tmk_core/common/action.c ****                             } else {
 207:./tmk_core/common/action.c ****                                 register_mods(mods);
 208:./tmk_core/common/action.c ****                             }
 209:./tmk_core/common/action.c ****                         } else {
 210:./tmk_core/common/action.c ****                             if (tap_count == 0) {
 211:./tmk_core/common/action.c ****                                 clear_oneshot_mods();
 212:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 213:./tmk_core/common/action.c ****                             } else if (tap_count == 1) {
 214:./tmk_core/common/action.c ****                                 // Retain Oneshot mods
 215:./tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 216:./tmk_core/common/action.c ****                                 if (mods & get_mods()) {
 217:./tmk_core/common/action.c ****                                     clear_oneshot_locked_mods();
 218:./tmk_core/common/action.c ****                                     clear_oneshot_mods();
 219:./tmk_core/common/action.c ****                                     unregister_mods(mods);
 220:./tmk_core/common/action.c ****                                 }
 221:./tmk_core/common/action.c ****                             } else if (tap_count == ONESHOT_TAP_TOGGLE) {
 222:./tmk_core/common/action.c ****                                 // Toggle Oneshot Layer
 223:./tmk_core/common/action.c ****                     #endif
 224:./tmk_core/common/action.c ****                             } else {
 225:./tmk_core/common/action.c ****                                 clear_oneshot_mods();
 226:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 227:./tmk_core/common/action.c ****                             }
 228:./tmk_core/common/action.c ****                         }
 229:./tmk_core/common/action.c ****                         break;
 230:./tmk_core/common/action.c ****     #endif
 231:./tmk_core/common/action.c ****                     case MODS_TAP_TOGGLE:
 232:./tmk_core/common/action.c ****                         if (event.pressed) {
 233:./tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 234:./tmk_core/common/action.c ****                                 register_mods(mods);
 235:./tmk_core/common/action.c ****                             }
 236:./tmk_core/common/action.c ****                         } else {
 237:./tmk_core/common/action.c ****                             if (tap_count < TAPPING_TOGGLE) {
 238:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 239:./tmk_core/common/action.c ****                             }
 240:./tmk_core/common/action.c ****                         }
 241:./tmk_core/common/action.c ****                         break;
 242:./tmk_core/common/action.c ****                     default:
 243:./tmk_core/common/action.c ****                         if (event.pressed) {
 244:./tmk_core/common/action.c ****                             if (tap_count > 0) {
 245:./tmk_core/common/action.c **** #ifndef IGNORE_MOD_TAP_INTERRUPT
 246:./tmk_core/common/action.c ****                                 if (record->tap.interrupted) {
 247:./tmk_core/common/action.c ****                                     dprint("mods_tap: tap: cancel: add_mods\n");
 248:./tmk_core/common/action.c ****                                     // ad hoc: set 0 to cancel tap
 249:./tmk_core/common/action.c ****                                     record->tap.count = 0;
 250:./tmk_core/common/action.c ****                                     register_mods(mods);
 251:./tmk_core/common/action.c ****                                 } else
 252:./tmk_core/common/action.c **** #endif
 253:./tmk_core/common/action.c ****                                 {
 254:./tmk_core/common/action.c ****                                     dprint("MODS_TAP: Tap: register_code\n");
 255:./tmk_core/common/action.c ****                                     register_code(action.key.code);
 256:./tmk_core/common/action.c ****                                 }
 257:./tmk_core/common/action.c ****                             } else {
 258:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 259:./tmk_core/common/action.c ****                                 register_mods(mods);
 260:./tmk_core/common/action.c ****                             }
 261:./tmk_core/common/action.c ****                         } else {
 262:./tmk_core/common/action.c ****                             if (tap_count > 0) {
 263:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 264:./tmk_core/common/action.c ****                                 unregister_code(action.key.code);
 265:./tmk_core/common/action.c ****                             } else {
 266:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 267:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 268:./tmk_core/common/action.c ****                             }
 269:./tmk_core/common/action.c ****                         }
 270:./tmk_core/common/action.c ****                         break;
 271:./tmk_core/common/action.c ****                 }
 272:./tmk_core/common/action.c ****             }
 273:./tmk_core/common/action.c ****             break;
 274:./tmk_core/common/action.c **** #endif
 275:./tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 276:./tmk_core/common/action.c ****         /* other HID usage */
 277:./tmk_core/common/action.c ****         case ACT_USAGE:
 278:./tmk_core/common/action.c ****             switch (action.usage.page) {
 279:./tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 280:./tmk_core/common/action.c ****                     if (event.pressed) {
 281:./tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 282:./tmk_core/common/action.c ****                     } else {
 283:./tmk_core/common/action.c ****                         host_system_send(0);
 284:./tmk_core/common/action.c ****                     }
 285:./tmk_core/common/action.c ****                     break;
 286:./tmk_core/common/action.c ****                 case PAGE_CONSUMER:
 287:./tmk_core/common/action.c ****                     if (event.pressed) {
 288:./tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 289:./tmk_core/common/action.c ****                     } else {
 290:./tmk_core/common/action.c ****                         host_consumer_send(0);
 291:./tmk_core/common/action.c ****                     }
 292:./tmk_core/common/action.c ****                     break;
 293:./tmk_core/common/action.c ****             }
 294:./tmk_core/common/action.c ****             break;
 295:./tmk_core/common/action.c **** #endif
 296:./tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 297:./tmk_core/common/action.c ****         /* Mouse key */
 298:./tmk_core/common/action.c ****         case ACT_MOUSEKEY:
 299:./tmk_core/common/action.c ****             if (event.pressed) {
 300:./tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 301:./tmk_core/common/action.c ****                 mousekey_send();
 302:./tmk_core/common/action.c ****             } else {
 303:./tmk_core/common/action.c ****                 mousekey_off(action.key.code);
 304:./tmk_core/common/action.c ****                 mousekey_send();
 305:./tmk_core/common/action.c ****             }
 306:./tmk_core/common/action.c ****             break;
 307:./tmk_core/common/action.c **** #endif
 308:./tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 309:./tmk_core/common/action.c ****         case ACT_LAYER:
 310:./tmk_core/common/action.c ****             if (action.layer_bitop.on == 0) {
 311:./tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 312:./tmk_core/common/action.c ****                 if (!event.pressed) {
 313:./tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 314:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 315:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 316:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 317:./tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 318:./tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 319:./tmk_core/common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 320:./tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 321:./tmk_core/common/action.c ****                     }
 322:./tmk_core/common/action.c ****                 }
 323:./tmk_core/common/action.c ****             } else {
 324:./tmk_core/common/action.c ****                 /* Layer Bitwise Operation */
 325:./tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 326:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 327:./tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 328:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 329:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 330:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 331:./tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 332:./tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 333:./tmk_core/common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 334:./tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 335:./tmk_core/common/action.c ****                     }
 336:./tmk_core/common/action.c ****                 }
 337:./tmk_core/common/action.c ****             }
 338:./tmk_core/common/action.c ****             break;
 339:./tmk_core/common/action.c ****     #ifndef NO_ACTION_TAPPING
 340:./tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 341:./tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 342:./tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 343:./tmk_core/common/action.c ****                 case 0xe0 ... 0xef:
 344:./tmk_core/common/action.c ****                     /* layer On/Off with modifiers(left only) */
 345:./tmk_core/common/action.c ****                     if (event.pressed) {
 346:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 347:./tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 348:./tmk_core/common/action.c ****                     } else {
 349:./tmk_core/common/action.c ****                         layer_off(action.layer_tap.val);
 350:./tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 351:./tmk_core/common/action.c ****                     }
 352:./tmk_core/common/action.c ****                     break;
 353:./tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 354:./tmk_core/common/action.c ****                     /* tap toggle */
 355:./tmk_core/common/action.c ****                     if (event.pressed) {
 356:./tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 357:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 358:./tmk_core/common/action.c ****                         }
 359:./tmk_core/common/action.c ****                     } else {
 360:./tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 361:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 362:./tmk_core/common/action.c ****                         }
 363:./tmk_core/common/action.c ****                     }
 364:./tmk_core/common/action.c ****                     break;
 365:./tmk_core/common/action.c ****                 case OP_ON_OFF:
 366:./tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 367:./tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 368:./tmk_core/common/action.c ****                     break;
 369:./tmk_core/common/action.c ****                 case OP_OFF_ON:
 370:./tmk_core/common/action.c ****                     event.pressed ? layer_off(action.layer_tap.val) :
 371:./tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 372:./tmk_core/common/action.c ****                     break;
 373:./tmk_core/common/action.c ****                 case OP_SET_CLEAR:
 374:./tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 375:./tmk_core/common/action.c ****                                     layer_clear();
 376:./tmk_core/common/action.c ****                     break;
 377:./tmk_core/common/action.c ****             #ifndef NO_ACTION_ONESHOT
 378:./tmk_core/common/action.c ****                 case OP_ONESHOT:
 379:./tmk_core/common/action.c ****                     // Oneshot modifier
 380:./tmk_core/common/action.c ****                 #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 381:./tmk_core/common/action.c ****                     do_release_oneshot = false;
 382:./tmk_core/common/action.c ****                     if (event.pressed) {
 383:./tmk_core/common/action.c ****                         del_mods(get_oneshot_locked_mods());
 384:./tmk_core/common/action.c ****                         if (get_oneshot_layer_state() == ONESHOT_TOGGLED) {
 385:./tmk_core/common/action.c ****                             reset_oneshot_layer();
 386:./tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 387:./tmk_core/common/action.c ****                             break;
 388:./tmk_core/common/action.c ****                         } else if (tap_count < ONESHOT_TAP_TOGGLE) {
 389:./tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 390:./tmk_core/common/action.c ****                             set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 391:./tmk_core/common/action.c ****                         }
 392:./tmk_core/common/action.c ****                     } else {
 393:./tmk_core/common/action.c ****                         add_mods(get_oneshot_locked_mods());
 394:./tmk_core/common/action.c ****                         if (tap_count >= ONESHOT_TAP_TOGGLE) {
 395:./tmk_core/common/action.c ****                             reset_oneshot_layer();
 396:./tmk_core/common/action.c ****                             clear_oneshot_locked_mods();
 397:./tmk_core/common/action.c ****                             set_oneshot_layer(action.layer_tap.val, ONESHOT_TOGGLED);
 398:./tmk_core/common/action.c ****                         } else {
 399:./tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_PRESSED);
 400:./tmk_core/common/action.c ****                         }
 401:./tmk_core/common/action.c ****                     }
 402:./tmk_core/common/action.c ****                 #else
 403:./tmk_core/common/action.c ****                     if (event.pressed) {
 404:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 405:./tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 406:./tmk_core/common/action.c ****                     } else {
 407:./tmk_core/common/action.c ****                         clear_oneshot_layer_state(ONESHOT_PRESSED);
 408:./tmk_core/common/action.c ****                         if (tap_count > 1) {
 409:./tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 410:./tmk_core/common/action.c ****                         }
 411:./tmk_core/common/action.c ****                     }
 412:./tmk_core/common/action.c ****                 #endif
 413:./tmk_core/common/action.c ****                     break;
 414:./tmk_core/common/action.c ****             #endif
 415:./tmk_core/common/action.c ****                 default:
 416:./tmk_core/common/action.c ****                     /* tap key */
 417:./tmk_core/common/action.c ****                     if (event.pressed) {
 418:./tmk_core/common/action.c ****                         if (tap_count > 0) {
 419:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 420:./tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 421:./tmk_core/common/action.c ****                         } else {
 422:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
 423:./tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 424:./tmk_core/common/action.c ****                         }
 425:./tmk_core/common/action.c ****                     } else {
 426:./tmk_core/common/action.c ****                         if (tap_count > 0) {
 427:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 428:./tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 429:./tmk_core/common/action.c ****                         } else {
 430:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: Off on release\n");
 431:./tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 432:./tmk_core/common/action.c ****                         }
 433:./tmk_core/common/action.c ****                     }
 434:./tmk_core/common/action.c ****                     break;
 435:./tmk_core/common/action.c ****             }
 436:./tmk_core/common/action.c ****             break;
 437:./tmk_core/common/action.c ****     #endif
 438:./tmk_core/common/action.c **** #endif
 439:./tmk_core/common/action.c ****         /* Extentions */
 440:./tmk_core/common/action.c **** #ifndef NO_ACTION_MACRO
 441:./tmk_core/common/action.c ****         case ACT_MACRO:
 442:./tmk_core/common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 443:./tmk_core/common/action.c ****             break;
 444:./tmk_core/common/action.c **** #endif
 445:./tmk_core/common/action.c **** #ifdef BACKLIGHT_ENABLE
 446:./tmk_core/common/action.c ****         case ACT_BACKLIGHT:
 447:./tmk_core/common/action.c ****             if (!event.pressed) {
 448:./tmk_core/common/action.c ****                 switch (action.backlight.opt) {
 449:./tmk_core/common/action.c ****                     case BACKLIGHT_INCREASE:
 450:./tmk_core/common/action.c ****                         backlight_increase();
 451:./tmk_core/common/action.c ****                         break;
 452:./tmk_core/common/action.c ****                     case BACKLIGHT_DECREASE:
 453:./tmk_core/common/action.c ****                         backlight_decrease();
 454:./tmk_core/common/action.c ****                         break;
 455:./tmk_core/common/action.c ****                     case BACKLIGHT_TOGGLE:
 456:./tmk_core/common/action.c ****                         backlight_toggle();
 457:./tmk_core/common/action.c ****                         break;
 458:./tmk_core/common/action.c ****                     case BACKLIGHT_STEP:
 459:./tmk_core/common/action.c ****                         backlight_step();
 460:./tmk_core/common/action.c ****                         break;
 461:./tmk_core/common/action.c ****                     case BACKLIGHT_LEVEL:
 462:./tmk_core/common/action.c ****                         backlight_level(action.backlight.level);
 463:./tmk_core/common/action.c ****                         break;
 464:./tmk_core/common/action.c ****                 }
 465:./tmk_core/common/action.c ****             }
 466:./tmk_core/common/action.c ****             break;
 467:./tmk_core/common/action.c **** #endif
 468:./tmk_core/common/action.c ****         case ACT_COMMAND:
 469:./tmk_core/common/action.c ****             break;
 470:./tmk_core/common/action.c **** #ifdef ONEHAND_ENABLE
 471:./tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 472:./tmk_core/common/action.c ****             switch (action.swap.code) {
 473:./tmk_core/common/action.c ****                 case OP_SH_TOGGLE:
 474:./tmk_core/common/action.c ****                     if (event.pressed) {
 475:./tmk_core/common/action.c ****                         swap_hands = !swap_hands;
 476:./tmk_core/common/action.c ****                     }
 477:./tmk_core/common/action.c ****                     break;
 478:./tmk_core/common/action.c ****                 case OP_SH_ON_OFF:
 479:./tmk_core/common/action.c ****                     swap_hands = event.pressed;
 480:./tmk_core/common/action.c ****                     break;
 481:./tmk_core/common/action.c ****                 case OP_SH_OFF_ON:
 482:./tmk_core/common/action.c ****                     swap_hands = !event.pressed;
 483:./tmk_core/common/action.c ****                     break;
 484:./tmk_core/common/action.c ****                 case OP_SH_ON:
 485:./tmk_core/common/action.c ****                     if (!event.pressed) {
 486:./tmk_core/common/action.c ****                         swap_hands = true;
 487:./tmk_core/common/action.c ****                     }
 488:./tmk_core/common/action.c ****                     break;
 489:./tmk_core/common/action.c ****                 case OP_SH_OFF:
 490:./tmk_core/common/action.c ****                     if (!event.pressed) {
 491:./tmk_core/common/action.c ****                         swap_hands = false;
 492:./tmk_core/common/action.c ****                     }
 493:./tmk_core/common/action.c ****                     break;
 494:./tmk_core/common/action.c ****     #ifndef NO_ACTION_TAPPING
 495:./tmk_core/common/action.c ****                 case OP_SH_TAP_TOGGLE:
 496:./tmk_core/common/action.c ****                     /* tap toggle */
 497:./tmk_core/common/action.c ****                     if (tap_count > 0) {
 498:./tmk_core/common/action.c ****                         if (!event.pressed) {
 499:./tmk_core/common/action.c ****                             swap_hands = !swap_hands;
 500:./tmk_core/common/action.c ****                         }
 501:./tmk_core/common/action.c ****                     } else {
 502:./tmk_core/common/action.c ****                         swap_hands = event.pressed;
 503:./tmk_core/common/action.c ****                     }
 504:./tmk_core/common/action.c ****                     break;
 505:./tmk_core/common/action.c ****                 default:
 506:./tmk_core/common/action.c ****                     if (tap_count > 0) {
 507:./tmk_core/common/action.c ****                         if (event.pressed) {
 508:./tmk_core/common/action.c ****                             register_code(action.swap.code);
 509:./tmk_core/common/action.c ****                         } else {
 510:./tmk_core/common/action.c ****                             unregister_code(action.swap.code);
 511:./tmk_core/common/action.c ****                         }
 512:./tmk_core/common/action.c ****                     } else {
 513:./tmk_core/common/action.c ****                         swap_hands = event.pressed;
 514:./tmk_core/common/action.c ****                     }
 515:./tmk_core/common/action.c ****     #endif
 516:./tmk_core/common/action.c ****             }
 517:./tmk_core/common/action.c **** #endif
 518:./tmk_core/common/action.c **** #ifndef NO_ACTION_FUNCTION
 519:./tmk_core/common/action.c ****         case ACT_FUNCTION:
 520:./tmk_core/common/action.c ****             action_function(record, action.func.id, action.func.opt);
 521:./tmk_core/common/action.c ****             break;
 522:./tmk_core/common/action.c **** #endif
 523:./tmk_core/common/action.c ****         default:
 524:./tmk_core/common/action.c ****             break;
 525:./tmk_core/common/action.c ****     }
 526:./tmk_core/common/action.c **** 
 527:./tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 528:./tmk_core/common/action.c ****     /* Because we switch layers after a oneshot event, we need to release the
 529:./tmk_core/common/action.c ****      * key before we leave the layer or no key up event will be generated.
 530:./tmk_core/common/action.c ****      */
 531:./tmk_core/common/action.c ****     if (do_release_oneshot && !(get_oneshot_layer_state() & ONESHOT_PRESSED )   ) {
 532:./tmk_core/common/action.c ****         record->event.pressed = false;
 533:./tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 534:./tmk_core/common/action.c ****         process_record(record);
 535:./tmk_core/common/action.c ****         layer_off(get_oneshot_layer());
 536:./tmk_core/common/action.c ****     }
 537:./tmk_core/common/action.c **** #endif
 538:./tmk_core/common/action.c **** }
 539:./tmk_core/common/action.c **** 
 540:./tmk_core/common/action.c **** 
 541:./tmk_core/common/action.c **** 
 542:./tmk_core/common/action.c **** 
 543:./tmk_core/common/action.c **** /*
 544:./tmk_core/common/action.c ****  * Utilities for actions.
 545:./tmk_core/common/action.c ****  */
 546:./tmk_core/common/action.c **** void register_code(uint8_t code)
 547:./tmk_core/common/action.c **** {
 256               		.loc 1 547 1 is_stmt 1 view -0
 257               		.cfi_startproc
 258               		.loc 1 547 1 is_stmt 0 view .LVU41
 259 0000 CF93      		push r28
 260               	.LCFI6:
 261               		.cfi_def_cfa_offset 3
 262               		.cfi_offset 28, -2
 263               	/* prologue: function */
 264               	/* frame size = 0 */
 265               	/* stack size = 1 */
 266               	.L__stack_usage = 1
 267 0002 C82F      		mov r28,r24
 548:./tmk_core/common/action.c ****     if (code == KC_NO) {
 268               		.loc 1 548 5 is_stmt 1 view .LVU42
 269               		.loc 1 548 8 is_stmt 0 view .LVU43
 270 0004 8823      		tst r24
 271 0006 01F4      		brne .+2
 272 0008 00C0      		rjmp .L21
 549:./tmk_core/common/action.c ****         return;
 550:./tmk_core/common/action.c ****     }
 551:./tmk_core/common/action.c **** 
 552:./tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 553:./tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 273               		.loc 1 553 10 is_stmt 1 view .LVU44
 274               		.loc 1 553 13 is_stmt 0 view .LVU45
 275 000a 8238      		cpi r24,lo8(-126)
 276 000c 01F4      		brne .L24
 554:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 555:./tmk_core/common/action.c ****         // Resync: ignore if caps lock already is on
 556:./tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
 277               		.loc 1 556 9 is_stmt 1 view .LVU46
 278               		.loc 1 556 13 is_stmt 0 view .LVU47
 279 000e 0E94 0000 		call host_keyboard_leds
 280               	.LVL16:
 281               		.loc 1 556 12 view .LVU48
 282 0012 81FD      		sbrc r24,1
 283 0014 00C0      		rjmp .L21
 557:./tmk_core/common/action.c **** #endif
 558:./tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 284               		.loc 1 558 9 is_stmt 1 view .LVU49
 285 0016 89E3      		ldi r24,lo8(57)
 286 0018 0E94 0000 		call add_key
 287               	.LVL17:
 559:./tmk_core/common/action.c ****         send_keyboard_report();
 288               		.loc 1 559 9 view .LVU50
 289 001c 0E94 0000 		call send_keyboard_report
 290               	.LVL18:
 560:./tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 291               		.loc 1 560 9 view .LVU51
 292 0020 89E3      		ldi r24,lo8(57)
 293               	.L56:
 561:./tmk_core/common/action.c ****         send_keyboard_report();
 562:./tmk_core/common/action.c ****     }
 563:./tmk_core/common/action.c **** 
 564:./tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 565:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 566:./tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
 567:./tmk_core/common/action.c **** #endif
 568:./tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 569:./tmk_core/common/action.c ****         send_keyboard_report();
 570:./tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 294               		.loc 1 570 9 is_stmt 0 view .LVU52
 295 0022 0E94 0000 		call del_key
 296               	.LVL19:
 297               	.L57:
 571:./tmk_core/common/action.c ****         send_keyboard_report();
 298               		.loc 1 571 9 is_stmt 1 view .LVU53
 299               	/* epilogue start */
 572:./tmk_core/common/action.c ****     }
 573:./tmk_core/common/action.c **** 
 574:./tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 575:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 576:./tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
 577:./tmk_core/common/action.c **** #endif
 578:./tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 579:./tmk_core/common/action.c ****         send_keyboard_report();
 580:./tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 581:./tmk_core/common/action.c ****         send_keyboard_report();
 582:./tmk_core/common/action.c ****     }
 583:./tmk_core/common/action.c **** #endif
 584:./tmk_core/common/action.c **** 
 585:./tmk_core/common/action.c ****     else if IS_KEY(code) {
 586:./tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 587:./tmk_core/common/action.c ****         if (command_proc(code)) return;
 588:./tmk_core/common/action.c **** 
 589:./tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 590:./tmk_core/common/action.c **** /* TODO: remove
 591:./tmk_core/common/action.c ****         if (oneshot_state.mods && !oneshot_state.disabled) {
 592:./tmk_core/common/action.c ****             uint8_t tmp_mods = get_mods();
 593:./tmk_core/common/action.c ****             add_mods(oneshot_state.mods);
 594:./tmk_core/common/action.c **** 
 595:./tmk_core/common/action.c ****             add_key(code);
 596:./tmk_core/common/action.c ****             send_keyboard_report();
 597:./tmk_core/common/action.c **** 
 598:./tmk_core/common/action.c ****             set_mods(tmp_mods);
 599:./tmk_core/common/action.c ****             send_keyboard_report();
 600:./tmk_core/common/action.c ****             oneshot_cancel();
 601:./tmk_core/common/action.c ****         } else
 602:./tmk_core/common/action.c **** */
 603:./tmk_core/common/action.c **** #endif
 604:./tmk_core/common/action.c ****         {
 605:./tmk_core/common/action.c ****             add_key(code);
 606:./tmk_core/common/action.c ****             send_keyboard_report();
 607:./tmk_core/common/action.c ****         }
 608:./tmk_core/common/action.c ****     }
 609:./tmk_core/common/action.c ****     else if IS_MOD(code) {
 610:./tmk_core/common/action.c ****         add_mods(MOD_BIT(code));
 611:./tmk_core/common/action.c ****         send_keyboard_report();
 612:./tmk_core/common/action.c ****     }
 613:./tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 614:./tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 615:./tmk_core/common/action.c ****     }
 616:./tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 617:./tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 618:./tmk_core/common/action.c ****     }
 619:./tmk_core/common/action.c **** }
 300               		.loc 1 619 1 is_stmt 0 view .LVU54
 301 0026 CF91      		pop r28
 571:./tmk_core/common/action.c ****         send_keyboard_report();
 302               		.loc 1 571 9 view .LVU55
 303 0028 0C94 0000 		jmp send_keyboard_report
 304               	.LVL20:
 305               	.L24:
 564:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 306               		.loc 1 564 10 is_stmt 1 view .LVU56
 564:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 307               		.loc 1 564 13 is_stmt 0 view .LVU57
 308 002c 8338      		cpi r24,lo8(-125)
 309 002e 01F4      		brne .L26
 566:./tmk_core/common/action.c **** #endif
 310               		.loc 1 566 9 is_stmt 1 view .LVU58
 566:./tmk_core/common/action.c **** #endif
 311               		.loc 1 566 13 is_stmt 0 view .LVU59
 312 0030 0E94 0000 		call host_keyboard_leds
 313               	.LVL21:
 566:./tmk_core/common/action.c **** #endif
 314               		.loc 1 566 12 view .LVU60
 315 0034 80FD      		sbrc r24,0
 316 0036 00C0      		rjmp .L21
 568:./tmk_core/common/action.c ****         send_keyboard_report();
 317               		.loc 1 568 9 is_stmt 1 view .LVU61
 318 0038 83E5      		ldi r24,lo8(83)
 319 003a 0E94 0000 		call add_key
 320               	.LVL22:
 569:./tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 321               		.loc 1 569 9 view .LVU62
 322 003e 0E94 0000 		call send_keyboard_report
 323               	.LVL23:
 570:./tmk_core/common/action.c ****         send_keyboard_report();
 324               		.loc 1 570 9 view .LVU63
 325 0042 83E5      		ldi r24,lo8(83)
 326 0044 00C0      		rjmp .L56
 327               	.LVL24:
 328               	.L26:
 574:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 329               		.loc 1 574 10 view .LVU64
 574:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 330               		.loc 1 574 13 is_stmt 0 view .LVU65
 331 0046 8438      		cpi r24,lo8(-124)
 332 0048 01F4      		brne .L27
 576:./tmk_core/common/action.c **** #endif
 333               		.loc 1 576 9 is_stmt 1 view .LVU66
 576:./tmk_core/common/action.c **** #endif
 334               		.loc 1 576 13 is_stmt 0 view .LVU67
 335 004a 0E94 0000 		call host_keyboard_leds
 336               	.LVL25:
 576:./tmk_core/common/action.c **** #endif
 337               		.loc 1 576 12 view .LVU68
 338 004e 82FD      		sbrc r24,2
 339 0050 00C0      		rjmp .L21
 578:./tmk_core/common/action.c ****         send_keyboard_report();
 340               		.loc 1 578 9 is_stmt 1 view .LVU69
 341 0052 87E4      		ldi r24,lo8(71)
 342 0054 0E94 0000 		call add_key
 343               	.LVL26:
 579:./tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 344               		.loc 1 579 9 view .LVU70
 345 0058 0E94 0000 		call send_keyboard_report
 346               	.LVL27:
 580:./tmk_core/common/action.c ****         send_keyboard_report();
 347               		.loc 1 580 9 view .LVU71
 348 005c 87E4      		ldi r24,lo8(71)
 349 005e 00C0      		rjmp .L56
 350               	.LVL28:
 351               	.L27:
 585:./tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 352               		.loc 1 585 10 view .LVU72
 585:./tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 353               		.loc 1 585 13 is_stmt 0 view .LVU73
 354 0060 8CEF      		ldi r24,lo8(-4)
 355               	.LVL29:
 585:./tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 356               		.loc 1 585 13 view .LVU74
 357 0062 8C0F      		add r24,r28
 358 0064 813A      		cpi r24,lo8(-95)
 359 0066 00F4      		brsh .L28
 587:./tmk_core/common/action.c **** 
 360               		.loc 1 587 9 is_stmt 1 view .LVU75
 587:./tmk_core/common/action.c **** 
 361               		.loc 1 587 13 is_stmt 0 view .LVU76
 362 0068 8C2F      		mov r24,r28
 363 006a 0E94 0000 		call command_proc
 364               	.LVL30:
 587:./tmk_core/common/action.c **** 
 365               		.loc 1 587 12 view .LVU77
 366 006e 8111      		cpse r24,__zero_reg__
 367 0070 00C0      		rjmp .L21
 605:./tmk_core/common/action.c ****             send_keyboard_report();
 368               		.loc 1 605 13 is_stmt 1 view .LVU78
 369 0072 8C2F      		mov r24,r28
 370 0074 0E94 0000 		call add_key
 371               	.LVL31:
 606:./tmk_core/common/action.c ****         }
 372               		.loc 1 606 13 view .LVU79
 373 0078 00C0      		rjmp .L57
 374               	.L28:
 609:./tmk_core/common/action.c ****         add_mods(MOD_BIT(code));
 375               		.loc 1 609 10 view .LVU80
 609:./tmk_core/common/action.c ****         add_mods(MOD_BIT(code));
 376               		.loc 1 609 13 is_stmt 0 view .LVU81
 377 007a 80E2      		ldi r24,lo8(32)
 378 007c 8C0F      		add r24,r28
 379 007e 8830      		cpi r24,lo8(8)
 380 0080 00F4      		brsh .L29
 610:./tmk_core/common/action.c ****         send_keyboard_report();
 381               		.loc 1 610 9 is_stmt 1 view .LVU82
 610:./tmk_core/common/action.c ****         send_keyboard_report();
 382               		.loc 1 610 18 is_stmt 0 view .LVU83
 383 0082 C770      		andi r28,lo8(7)
 384               	.LVL32:
 610:./tmk_core/common/action.c ****         send_keyboard_report();
 385               		.loc 1 610 9 view .LVU84
 386 0084 81E0      		ldi r24,lo8(1)
 387 0086 00C0      		rjmp 2f
 388               		1:
 389 0088 880F      		lsl r24
 390               		2:
 391 008a CA95      		dec r28
 392 008c 02F4      		brpl 1b
 393 008e 0E94 0000 		call add_mods
 394               	.LVL33:
 611:./tmk_core/common/action.c ****     }
 395               		.loc 1 611 9 is_stmt 1 view .LVU85
 396 0092 00C0      		rjmp .L57
 397               	.LVL34:
 398               	.L29:
 613:./tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 399               		.loc 1 613 10 view .LVU86
 613:./tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 400               		.loc 1 613 13 is_stmt 0 view .LVU87
 401 0094 8BE5      		ldi r24,lo8(91)
 402 0096 8C0F      		add r24,r28
 403 0098 8330      		cpi r24,lo8(3)
 404 009a 00F4      		brsh .L30
 614:./tmk_core/common/action.c ****     }
 405               		.loc 1 614 9 is_stmt 1 view .LVU88
 406 009c 81E8      		ldi r24,lo8(-127)
 407 009e 90E0      		ldi r25,0
 408 00a0 C53A      		cpi r28,lo8(-91)
 409 00a2 01F0      		breq .L31
 614:./tmk_core/common/action.c ****     }
 410               		.loc 1 614 26 is_stmt 0 discriminator 1 view .LVU89
 411 00a4 83E8      		ldi r24,lo8(-125)
 412 00a6 90E0      		ldi r25,0
 413 00a8 C63A      		cpi r28,lo8(-90)
 414 00aa 01F4      		brne .L31
 614:./tmk_core/common/action.c ****     }
 415               		.loc 1 614 26 view .LVU90
 416 00ac 82E8      		ldi r24,lo8(-126)
 417 00ae 90E0      		ldi r25,0
 418               	.L31:
 419               	/* epilogue start */
 420               		.loc 1 619 1 discriminator 12 view .LVU91
 421 00b0 CF91      		pop r28
 422               	.LVL35:
 614:./tmk_core/common/action.c ****     }
 423               		.loc 1 614 9 discriminator 12 view .LVU92
 424 00b2 0C94 0000 		jmp host_system_send
 425               	.LVL36:
 426               	.L30:
 616:./tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 427               		.loc 1 616 10 is_stmt 1 view .LVU93
 616:./tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 428               		.loc 1 616 13 is_stmt 0 view .LVU94
 429 00b6 88E5      		ldi r24,lo8(88)
 430 00b8 8C0F      		add r24,r28
 431 00ba 8531      		cpi r24,lo8(21)
 432 00bc 00F0      		brlo .+2
 433 00be 00C0      		rjmp .L21
 617:./tmk_core/common/action.c ****     }
 434               		.loc 1 617 9 is_stmt 1 view .LVU95
 435 00c0 82EE      		ldi r24,lo8(-30)
 436 00c2 90E0      		ldi r25,0
 437 00c4 C83A      		cpi r28,lo8(-88)
 438 00c6 01F4      		brne .+2
 439 00c8 00C0      		rjmp .L32
 617:./tmk_core/common/action.c ****     }
 440               		.loc 1 617 28 is_stmt 0 discriminator 1 view .LVU96
 441 00ca 89EE      		ldi r24,lo8(-23)
 442 00cc 90E0      		ldi r25,0
 443 00ce C93A      		cpi r28,lo8(-87)
 444 00d0 01F4      		brne .+2
 445 00d2 00C0      		rjmp .L32
 617:./tmk_core/common/action.c ****     }
 446               		.loc 1 617 28 discriminator 3 view .LVU97
 447 00d4 8AEE      		ldi r24,lo8(-22)
 448 00d6 90E0      		ldi r25,0
 449 00d8 CA3A      		cpi r28,lo8(-86)
 450 00da 01F4      		brne .+2
 451 00dc 00C0      		rjmp .L32
 617:./tmk_core/common/action.c ****     }
 452               		.loc 1 617 28 discriminator 5 view .LVU98
 453 00de 85EB      		ldi r24,lo8(-75)
 454 00e0 90E0      		ldi r25,0
 455 00e2 CB3A      		cpi r28,lo8(-85)
 456 00e4 01F4      		brne .+2
 457 00e6 00C0      		rjmp .L32
 617:./tmk_core/common/action.c ****     }
 458               		.loc 1 617 28 discriminator 7 view .LVU99
 459 00e8 86EB      		ldi r24,lo8(-74)
 460 00ea 90E0      		ldi r25,0
 461 00ec CC3A      		cpi r28,lo8(-84)
 462 00ee 01F4      		brne .+2
 463 00f0 00C0      		rjmp .L32
 617:./tmk_core/common/action.c ****     }
 464               		.loc 1 617 28 discriminator 9 view .LVU100
 465 00f2 83EB      		ldi r24,lo8(-77)
 466 00f4 90E0      		ldi r25,0
 467 00f6 CB3B      		cpi r28,lo8(-69)
 468 00f8 01F0      		breq .L32
 617:./tmk_core/common/action.c ****     }
 469               		.loc 1 617 28 discriminator 11 view .LVU101
 470 00fa 84EB      		ldi r24,lo8(-76)
 471 00fc 90E0      		ldi r25,0
 472 00fe CC3B      		cpi r28,lo8(-68)
 473 0100 01F0      		breq .L32
 617:./tmk_core/common/action.c ****     }
 474               		.loc 1 617 28 discriminator 13 view .LVU102
 475 0102 87EB      		ldi r24,lo8(-73)
 476 0104 90E0      		ldi r25,0
 477 0106 CD3A      		cpi r28,lo8(-83)
 478 0108 01F0      		breq .L32
 617:./tmk_core/common/action.c ****     }
 479               		.loc 1 617 28 discriminator 15 view .LVU103
 480 010a 8CEC      		ldi r24,lo8(-52)
 481 010c 90E0      		ldi r25,0
 482 010e C03B      		cpi r28,lo8(-80)
 483 0110 01F0      		breq .L32
 617:./tmk_core/common/action.c ****     }
 484               		.loc 1 617 28 discriminator 17 view .LVU104
 485 0112 8DEC      		ldi r24,lo8(-51)
 486 0114 90E0      		ldi r25,0
 487 0116 CE3A      		cpi r28,lo8(-82)
 488 0118 01F0      		breq .L32
 617:./tmk_core/common/action.c ****     }
 489               		.loc 1 617 28 discriminator 19 view .LVU105
 490 011a 83E8      		ldi r24,lo8(-125)
 491 011c 91E0      		ldi r25,lo8(1)
 492 011e CF3A      		cpi r28,lo8(-81)
 493 0120 01F0      		breq .L32
 617:./tmk_core/common/action.c ****     }
 494               		.loc 1 617 28 discriminator 21 view .LVU106
 495 0122 8AE8      		ldi r24,lo8(-118)
 496 0124 91E0      		ldi r25,lo8(1)
 497 0126 C13B      		cpi r28,lo8(-79)
 498 0128 01F0      		breq .L32
 617:./tmk_core/common/action.c ****     }
 499               		.loc 1 617 28 discriminator 23 view .LVU107
 500 012a 82E9      		ldi r24,lo8(-110)
 501 012c 91E0      		ldi r25,lo8(1)
 502 012e C23B      		cpi r28,lo8(-78)
 503 0130 01F0      		breq .L32
 617:./tmk_core/common/action.c ****     }
 504               		.loc 1 617 28 discriminator 25 view .LVU108
 505 0132 84E9      		ldi r24,lo8(-108)
 506 0134 91E0      		ldi r25,lo8(1)
 507 0136 C33B      		cpi r28,lo8(-77)
 508 0138 01F0      		breq .L32
 617:./tmk_core/common/action.c ****     }
 509               		.loc 1 617 28 discriminator 27 view .LVU109
 510 013a 81E2      		ldi r24,lo8(33)
 511 013c 92E0      		ldi r25,lo8(2)
 512 013e C43B      		cpi r28,lo8(-76)
 513 0140 01F0      		breq .L32
 617:./tmk_core/common/action.c ****     }
 514               		.loc 1 617 28 discriminator 29 view .LVU110
 515 0142 83E2      		ldi r24,lo8(35)
 516 0144 92E0      		ldi r25,lo8(2)
 517 0146 C53B      		cpi r28,lo8(-75)
 518 0148 01F0      		breq .L32
 617:./tmk_core/common/action.c ****     }
 519               		.loc 1 617 28 discriminator 31 view .LVU111
 520 014a 84E2      		ldi r24,lo8(36)
 521 014c 92E0      		ldi r25,lo8(2)
 522 014e C63B      		cpi r28,lo8(-74)
 523 0150 01F0      		breq .L32
 617:./tmk_core/common/action.c ****     }
 524               		.loc 1 617 28 discriminator 33 view .LVU112
 525 0152 85E2      		ldi r24,lo8(37)
 526 0154 92E0      		ldi r25,lo8(2)
 527 0156 C73B      		cpi r28,lo8(-73)
 528 0158 01F0      		breq .L32
 617:./tmk_core/common/action.c ****     }
 529               		.loc 1 617 28 discriminator 35 view .LVU113
 530 015a 86E2      		ldi r24,lo8(38)
 531 015c 92E0      		ldi r25,lo8(2)
 532 015e C83B      		cpi r28,lo8(-72)
 533 0160 01F0      		breq .L32
 617:./tmk_core/common/action.c ****     }
 534               		.loc 1 617 28 discriminator 37 view .LVU114
 535 0162 87E2      		ldi r24,lo8(39)
 536 0164 92E0      		ldi r25,lo8(2)
 537 0166 C93B      		cpi r28,lo8(-71)
 538 0168 01F0      		breq .L32
 617:./tmk_core/common/action.c ****     }
 539               		.loc 1 617 28 discriminator 39 view .LVU115
 540 016a 90E0      		ldi r25,0
 541 016c 80E0      		ldi r24,0
 542 016e CA3B      		cpi r28,lo8(-70)
 543 0170 01F4      		brne .L32
 617:./tmk_core/common/action.c ****     }
 544               		.loc 1 617 28 view .LVU116
 545 0172 8AE2      		ldi r24,lo8(42)
 546 0174 92E0      		ldi r25,lo8(2)
 547               	.L32:
 548               	/* epilogue start */
 549               		.loc 1 619 1 discriminator 84 view .LVU117
 550 0176 CF91      		pop r28
 551               	.LVL37:
 617:./tmk_core/common/action.c ****     }
 552               		.loc 1 617 9 discriminator 84 view .LVU118
 553 0178 0C94 0000 		jmp host_consumer_send
 554               	.LVL38:
 555               	.L21:
 556               	/* epilogue start */
 557               		.loc 1 619 1 view .LVU119
 558 017c CF91      		pop r28
 559               	.LVL39:
 560               		.loc 1 619 1 view .LVU120
 561 017e 0895      		ret
 562               		.cfi_endproc
 563               	.LFE109:
 565               		.section	.text.unregister_code,"ax",@progbits
 566               	.global	unregister_code
 568               	unregister_code:
 569               	.LVL40:
 570               	.LFB110:
 620:./tmk_core/common/action.c **** 
 621:./tmk_core/common/action.c **** void unregister_code(uint8_t code)
 622:./tmk_core/common/action.c **** {
 571               		.loc 1 622 1 is_stmt 1 view -0
 572               		.cfi_startproc
 573               	/* prologue: function */
 574               	/* frame size = 0 */
 575               	/* stack size = 0 */
 576               	.L__stack_usage = 0
 623:./tmk_core/common/action.c ****     if (code == KC_NO) {
 577               		.loc 1 623 5 view .LVU122
 578               		.loc 1 623 8 is_stmt 0 view .LVU123
 579 0000 8823      		tst r24
 580 0002 01F4      		brne .+2
 581 0004 00C0      		rjmp .L58
 624:./tmk_core/common/action.c ****         return;
 625:./tmk_core/common/action.c ****     }
 626:./tmk_core/common/action.c **** 
 627:./tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 628:./tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 582               		.loc 1 628 10 is_stmt 1 view .LVU124
 583               		.loc 1 628 13 is_stmt 0 view .LVU125
 584 0006 8238      		cpi r24,lo8(-126)
 585 0008 01F4      		brne .L61
 629:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 630:./tmk_core/common/action.c ****         // Resync: ignore if caps lock already is off
 631:./tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
 586               		.loc 1 631 9 is_stmt 1 view .LVU126
 587               		.loc 1 631 15 is_stmt 0 view .LVU127
 588 000a 0E94 0000 		call host_keyboard_leds
 589               	.LVL41:
 590               		.loc 1 631 12 view .LVU128
 591 000e 81FF      		sbrs r24,1
 592 0010 00C0      		rjmp .L58
 632:./tmk_core/common/action.c **** #endif
 633:./tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 593               		.loc 1 633 9 is_stmt 1 view .LVU129
 594 0012 89E3      		ldi r24,lo8(57)
 595 0014 0E94 0000 		call add_key
 596               	.LVL42:
 634:./tmk_core/common/action.c ****         send_keyboard_report();
 597               		.loc 1 634 9 view .LVU130
 598 0018 0E94 0000 		call send_keyboard_report
 599               	.LVL43:
 635:./tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 600               		.loc 1 635 9 view .LVU131
 601 001c 89E3      		ldi r24,lo8(57)
 602               	.L77:
 636:./tmk_core/common/action.c ****         send_keyboard_report();
 637:./tmk_core/common/action.c ****     }
 638:./tmk_core/common/action.c **** 
 639:./tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 640:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 641:./tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
 642:./tmk_core/common/action.c **** #endif
 643:./tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 644:./tmk_core/common/action.c ****         send_keyboard_report();
 645:./tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 603               		.loc 1 645 9 is_stmt 0 view .LVU132
 604 001e 0E94 0000 		call del_key
 605               	.LVL44:
 606               	.L78:
 646:./tmk_core/common/action.c ****         send_keyboard_report();
 607               		.loc 1 646 9 is_stmt 1 view .LVU133
 608 0022 0C94 0000 		jmp send_keyboard_report
 609               	.LVL45:
 610               	.L61:
 639:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 611               		.loc 1 639 10 view .LVU134
 639:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 612               		.loc 1 639 13 is_stmt 0 view .LVU135
 613 0026 8338      		cpi r24,lo8(-125)
 614 0028 01F4      		brne .L63
 641:./tmk_core/common/action.c **** #endif
 615               		.loc 1 641 9 is_stmt 1 view .LVU136
 641:./tmk_core/common/action.c **** #endif
 616               		.loc 1 641 15 is_stmt 0 view .LVU137
 617 002a 0E94 0000 		call host_keyboard_leds
 618               	.LVL46:
 641:./tmk_core/common/action.c **** #endif
 619               		.loc 1 641 12 view .LVU138
 620 002e 80FF      		sbrs r24,0
 621 0030 00C0      		rjmp .L58
 643:./tmk_core/common/action.c ****         send_keyboard_report();
 622               		.loc 1 643 9 is_stmt 1 view .LVU139
 623 0032 83E5      		ldi r24,lo8(83)
 624 0034 0E94 0000 		call add_key
 625               	.LVL47:
 644:./tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 626               		.loc 1 644 9 view .LVU140
 627 0038 0E94 0000 		call send_keyboard_report
 628               	.LVL48:
 645:./tmk_core/common/action.c ****         send_keyboard_report();
 629               		.loc 1 645 9 view .LVU141
 630 003c 83E5      		ldi r24,lo8(83)
 631 003e 00C0      		rjmp .L77
 632               	.LVL49:
 633               	.L63:
 647:./tmk_core/common/action.c ****     }
 648:./tmk_core/common/action.c **** 
 649:./tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 634               		.loc 1 649 10 view .LVU142
 635               		.loc 1 649 13 is_stmt 0 view .LVU143
 636 0040 8438      		cpi r24,lo8(-124)
 637 0042 01F4      		brne .L64
 650:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 651:./tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
 638               		.loc 1 651 9 is_stmt 1 view .LVU144
 639               		.loc 1 651 15 is_stmt 0 view .LVU145
 640 0044 0E94 0000 		call host_keyboard_leds
 641               	.LVL50:
 642               		.loc 1 651 12 view .LVU146
 643 0048 82FF      		sbrs r24,2
 644 004a 00C0      		rjmp .L58
 652:./tmk_core/common/action.c **** #endif
 653:./tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 645               		.loc 1 653 9 is_stmt 1 view .LVU147
 646 004c 87E4      		ldi r24,lo8(71)
 647 004e 0E94 0000 		call add_key
 648               	.LVL51:
 654:./tmk_core/common/action.c ****         send_keyboard_report();
 649               		.loc 1 654 9 view .LVU148
 650 0052 0E94 0000 		call send_keyboard_report
 651               	.LVL52:
 655:./tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 652               		.loc 1 655 9 view .LVU149
 653 0056 87E4      		ldi r24,lo8(71)
 654 0058 00C0      		rjmp .L77
 655               	.LVL53:
 656               	.L64:
 656:./tmk_core/common/action.c ****         send_keyboard_report();
 657:./tmk_core/common/action.c ****     }
 658:./tmk_core/common/action.c **** #endif
 659:./tmk_core/common/action.c **** 
 660:./tmk_core/common/action.c ****     else if IS_KEY(code) {
 657               		.loc 1 660 10 view .LVU150
 658               		.loc 1 660 13 is_stmt 0 view .LVU151
 659 005a 9CEF      		ldi r25,lo8(-4)
 660 005c 980F      		add r25,r24
 661 005e 913A      		cpi r25,lo8(-95)
 662 0060 00F0      		brlo .L77
 661:./tmk_core/common/action.c ****         del_key(code);
 662:./tmk_core/common/action.c ****         send_keyboard_report();
 663:./tmk_core/common/action.c ****     }
 664:./tmk_core/common/action.c ****     else if IS_MOD(code) {
 663               		.loc 1 664 10 is_stmt 1 view .LVU152
 664               		.loc 1 664 13 is_stmt 0 view .LVU153
 665 0062 90E2      		ldi r25,lo8(32)
 666 0064 980F      		add r25,r24
 667 0066 9830      		cpi r25,lo8(8)
 668 0068 00F4      		brsh .L66
 665:./tmk_core/common/action.c ****         del_mods(MOD_BIT(code));
 669               		.loc 1 665 9 is_stmt 1 view .LVU154
 670               		.loc 1 665 18 is_stmt 0 view .LVU155
 671 006a 8770      		andi r24,lo8(7)
 672               	.LVL54:
 673               		.loc 1 665 9 view .LVU156
 674 006c 91E0      		ldi r25,lo8(1)
 675 006e 00C0      		rjmp 2f
 676               		1:
 677 0070 990F      		lsl r25
 678               		2:
 679 0072 8A95      		dec r24
 680 0074 02F4      		brpl 1b
 681 0076 892F      		mov r24,r25
 682 0078 0E94 0000 		call del_mods
 683               	.LVL55:
 666:./tmk_core/common/action.c ****         send_keyboard_report();
 684               		.loc 1 666 9 is_stmt 1 view .LVU157
 685 007c 00C0      		rjmp .L78
 686               	.LVL56:
 687               	.L66:
 667:./tmk_core/common/action.c ****     }
 668:./tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 688               		.loc 1 668 10 view .LVU158
 689               		.loc 1 668 13 is_stmt 0 view .LVU159
 690 007e 9BE5      		ldi r25,lo8(91)
 691 0080 980F      		add r25,r24
 692 0082 9330      		cpi r25,lo8(3)
 693 0084 00F4      		brsh .L67
 669:./tmk_core/common/action.c ****         host_system_send(0);
 694               		.loc 1 669 9 is_stmt 1 view .LVU160
 695 0086 90E0      		ldi r25,0
 696 0088 80E0      		ldi r24,0
 697               	.LVL57:
 698               		.loc 1 669 9 is_stmt 0 view .LVU161
 699 008a 0C94 0000 		jmp host_system_send
 700               	.LVL58:
 701               	.L67:
 670:./tmk_core/common/action.c ****     }
 671:./tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 702               		.loc 1 671 10 is_stmt 1 view .LVU162
 703               		.loc 1 671 13 is_stmt 0 view .LVU163
 704 008e 885A      		subi r24,lo8(-(88))
 705               	.LVL59:
 706               		.loc 1 671 13 view .LVU164
 707 0090 8531      		cpi r24,lo8(21)
 708 0092 00F4      		brsh .L58
 672:./tmk_core/common/action.c ****         host_consumer_send(0);
 709               		.loc 1 672 9 is_stmt 1 view .LVU165
 710 0094 90E0      		ldi r25,0
 711 0096 80E0      		ldi r24,0
 712               	.LVL60:
 713               		.loc 1 672 9 is_stmt 0 view .LVU166
 714 0098 0C94 0000 		jmp host_consumer_send
 715               	.LVL61:
 716               	.L58:
 717               	/* epilogue start */
 673:./tmk_core/common/action.c ****     }
 674:./tmk_core/common/action.c **** }
 718               		.loc 1 674 1 view .LVU167
 719 009c 0895      		ret
 720               		.cfi_endproc
 721               	.LFE110:
 723               		.section	.text.register_mods,"ax",@progbits
 724               	.global	register_mods
 726               	register_mods:
 727               	.LVL62:
 728               	.LFB111:
 675:./tmk_core/common/action.c **** 
 676:./tmk_core/common/action.c **** void register_mods(uint8_t mods)
 677:./tmk_core/common/action.c **** {
 729               		.loc 1 677 1 is_stmt 1 view -0
 730               		.cfi_startproc
 731               	/* prologue: function */
 732               	/* frame size = 0 */
 733               	/* stack size = 0 */
 734               	.L__stack_usage = 0
 678:./tmk_core/common/action.c ****     if (mods) {
 735               		.loc 1 678 5 view .LVU169
 736               		.loc 1 678 8 is_stmt 0 view .LVU170
 737 0000 8823      		tst r24
 738 0002 01F0      		breq .L79
 679:./tmk_core/common/action.c ****         add_mods(mods);
 739               		.loc 1 679 9 is_stmt 1 view .LVU171
 740 0004 0E94 0000 		call add_mods
 741               	.LVL63:
 680:./tmk_core/common/action.c ****         send_keyboard_report();
 742               		.loc 1 680 9 view .LVU172
 743 0008 0C94 0000 		jmp send_keyboard_report
 744               	.LVL64:
 745               	.L79:
 746               	/* epilogue start */
 681:./tmk_core/common/action.c ****     }
 682:./tmk_core/common/action.c **** }
 747               		.loc 1 682 1 is_stmt 0 view .LVU173
 748 000c 0895      		ret
 749               		.cfi_endproc
 750               	.LFE111:
 752               		.section	.text.unregister_mods,"ax",@progbits
 753               	.global	unregister_mods
 755               	unregister_mods:
 756               	.LVL65:
 757               	.LFB112:
 683:./tmk_core/common/action.c **** 
 684:./tmk_core/common/action.c **** void unregister_mods(uint8_t mods)
 685:./tmk_core/common/action.c **** {
 758               		.loc 1 685 1 is_stmt 1 view -0
 759               		.cfi_startproc
 760               	/* prologue: function */
 761               	/* frame size = 0 */
 762               	/* stack size = 0 */
 763               	.L__stack_usage = 0
 686:./tmk_core/common/action.c ****     if (mods) {
 764               		.loc 1 686 5 view .LVU175
 765               		.loc 1 686 8 is_stmt 0 view .LVU176
 766 0000 8823      		tst r24
 767 0002 01F0      		breq .L81
 687:./tmk_core/common/action.c ****         del_mods(mods);
 768               		.loc 1 687 9 is_stmt 1 view .LVU177
 769 0004 0E94 0000 		call del_mods
 770               	.LVL66:
 688:./tmk_core/common/action.c ****         send_keyboard_report();
 771               		.loc 1 688 9 view .LVU178
 772 0008 0C94 0000 		jmp send_keyboard_report
 773               	.LVL67:
 774               	.L81:
 775               	/* epilogue start */
 689:./tmk_core/common/action.c ****     }
 690:./tmk_core/common/action.c **** }
 776               		.loc 1 690 1 is_stmt 0 view .LVU179
 777 000c 0895      		ret
 778               		.cfi_endproc
 779               	.LFE112:
 781               		.section	.text.process_action,"ax",@progbits
 782               	.global	process_action
 784               	process_action:
 785               	.LVL68:
 786               	.LFB108:
 122:./tmk_core/common/action.c ****     bool do_release_oneshot = false;
 787               		.loc 1 122 1 is_stmt 1 view -0
 788               		.cfi_startproc
 122:./tmk_core/common/action.c ****     bool do_release_oneshot = false;
 789               		.loc 1 122 1 is_stmt 0 view .LVU181
 790 0000 8F92      		push r8
 791               	.LCFI7:
 792               		.cfi_def_cfa_offset 3
 793               		.cfi_offset 8, -2
 794 0002 9F92      		push r9
 795               	.LCFI8:
 796               		.cfi_def_cfa_offset 4
 797               		.cfi_offset 9, -3
 798 0004 AF92      		push r10
 799               	.LCFI9:
 800               		.cfi_def_cfa_offset 5
 801               		.cfi_offset 10, -4
 802 0006 BF92      		push r11
 803               	.LCFI10:
 804               		.cfi_def_cfa_offset 6
 805               		.cfi_offset 11, -5
 806 0008 DF92      		push r13
 807               	.LCFI11:
 808               		.cfi_def_cfa_offset 7
 809               		.cfi_offset 13, -6
 810 000a EF92      		push r14
 811               	.LCFI12:
 812               		.cfi_def_cfa_offset 8
 813               		.cfi_offset 14, -7
 814 000c FF92      		push r15
 815               	.LCFI13:
 816               		.cfi_def_cfa_offset 9
 817               		.cfi_offset 15, -8
 818 000e 0F93      		push r16
 819               	.LCFI14:
 820               		.cfi_def_cfa_offset 10
 821               		.cfi_offset 16, -9
 822 0010 1F93      		push r17
 823               	.LCFI15:
 824               		.cfi_def_cfa_offset 11
 825               		.cfi_offset 17, -10
 826 0012 CF93      		push r28
 827               	.LCFI16:
 828               		.cfi_def_cfa_offset 12
 829               		.cfi_offset 28, -11
 830 0014 DF93      		push r29
 831               	.LCFI17:
 832               		.cfi_def_cfa_offset 13
 833               		.cfi_offset 29, -12
 834               	/* prologue: function */
 835               	/* frame size = 0 */
 836               	/* stack size = 11 */
 837               	.L__stack_usage = 11
 838 0016 7C01      		movw r14,r24
 839 0018 D62F      		mov r29,r22
 122:./tmk_core/common/action.c ****     bool do_release_oneshot = false;
 840               		.loc 1 122 1 view .LVU182
 841 001a C72F      		mov r28,r23
 123:./tmk_core/common/action.c ****     keyevent_t event = record->event;
 842               		.loc 1 123 5 is_stmt 1 view .LVU183
 843               	.LVL69:
 124:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 844               		.loc 1 124 5 view .LVU184
 126:./tmk_core/common/action.c **** #endif
 845               		.loc 1 126 5 view .LVU185
 126:./tmk_core/common/action.c **** #endif
 846               		.loc 1 126 36 is_stmt 0 view .LVU186
 847 001c FC01      		movw r30,r24
 848 001e 0581      		ldd r16,Z+5
 849 0020 0295      		swap r16
 850 0022 0F70      		andi r16,lo8(15)
 851               	.LVL70:
 136:./tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 852               		.loc 1 136 5 is_stmt 1 view .LVU187
 136:./tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 853               		.loc 1 136 14 is_stmt 0 view .LVU188
 854 0024 1281      		ldd r17,Z+2
 136:./tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 855               		.loc 1 136 8 view .LVU189
 856 0026 1111      		cpse r17,__zero_reg__
 138:./tmk_core/common/action.c ****     }
 857               		.loc 1 138 9 is_stmt 1 view .LVU190
 858 0028 0E94 0000 		call clear_weak_mods
 859               	.LVL71:
 860               	.L84:
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 861               		.loc 1 143 5 view .LVU191
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 862               		.loc 1 143 9 is_stmt 0 view .LVU192
 863 002c 0E94 0000 		call is_oneshot_layer_active
 864               	.LVL72:
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 865               		.loc 1 143 9 view .LVU193
 866 0030 D82E      		mov r13,r24
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 867               		.loc 1 143 8 view .LVU194
 868 0032 8823      		tst r24
 869 0034 01F0      		breq .L85
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 870               		.loc 1 143 35 discriminator 1 view .LVU195
 871 0036 1123      		tst r17
 872 0038 01F0      		breq .L170
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 873               		.loc 1 143 55 discriminator 2 view .LVU196
 874 003a 80E2      		ldi r24,lo8(32)
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 875               		.loc 1 143 55 discriminator 2 view .LVU197
 876 003c 8D0F      		add r24,r29
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 877               		.loc 1 143 52 discriminator 2 view .LVU198
 878 003e 8830      		cpi r24,lo8(8)
 879 0040 00F0      		brlo .L170
 144:./tmk_core/common/action.c ****         do_release_oneshot = !is_oneshot_layer_active();
 880               		.loc 1 144 9 is_stmt 1 view .LVU199
 881 0042 82E0      		ldi r24,lo8(2)
 882 0044 0E94 0000 		call clear_oneshot_layer_state
 883               	.LVL73:
 145:./tmk_core/common/action.c ****     }
 884               		.loc 1 145 9 view .LVU200
 145:./tmk_core/common/action.c ****     }
 885               		.loc 1 145 31 is_stmt 0 view .LVU201
 886 0048 0E94 0000 		call is_oneshot_layer_active
 887               	.LVL74:
 145:./tmk_core/common/action.c ****     }
 888               		.loc 1 145 9 view .LVU202
 889 004c 91E0      		ldi r25,lo8(1)
 890 004e D82E      		mov r13,r24
 891 0050 D926      		eor r13,r25
 892               	.LVL75:
 893               	.L85:
 149:./tmk_core/common/action.c ****         /* Key and Mods */
 894               		.loc 1 149 5 is_stmt 1 view .LVU203
 149:./tmk_core/common/action.c ****         /* Key and Mods */
 895               		.loc 1 149 24 is_stmt 0 view .LVU204
 896 0052 EC2F      		mov r30,r28
 897 0054 E295      		swap r30
 898 0056 EF70      		andi r30,lo8(15)
 149:./tmk_core/common/action.c ****         /* Key and Mods */
 899               		.loc 1 149 5 view .LVU205
 900 0058 F0E0      		ldi r31,0
 901 005a E050      		subi r30,lo8(-(gs(.L88)))
 902 005c F040      		sbci r31,hi8(-(gs(.L88)))
 903 005e 0C94 0000 		jmp __tablejump2__
 904               		.section	.jumptables.gcc.process_action,"a",@progbits
 905               		.p2align	1
 906               	.L88:
 907 0000 0000      		.word gs(.L96)
 908 0002 0000      		.word gs(.L96)
 909 0004 0000      		.word gs(.L95)
 910 0006 0000      		.word gs(.L95)
 911 0008 0000      		.word gs(.L94)
 912 000a 0000      		.word gs(.L93)
 913 000c 0000      		.word gs(.L92)
 914 000e 0000      		.word gs(.L86)
 915 0010 0000      		.word gs(.L91)
 916 0012 0000      		.word gs(.L86)
 917 0014 0000      		.word gs(.L90)
 918 0016 0000      		.word gs(.L90)
 919 0018 0000      		.word gs(.L89)
 920 001a 0000      		.word gs(.L86)
 921 001c 0000      		.word gs(.L86)
 922 001e 0000      		.word gs(.L87)
 923               		.section	.text.process_action
 924               	.LVL76:
 925               	.L170:
 123:./tmk_core/common/action.c ****     keyevent_t event = record->event;
 926               		.loc 1 123 10 view .LVU206
 927 0062 D12C      		mov r13,__zero_reg__
 928 0064 00C0      		rjmp .L85
 929               	.LVL77:
 930               	.L96:
 931               	.LBB6:
 154:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 932               		.loc 1 154 17 is_stmt 1 view .LVU207
 933 0066 0C2F      		mov r16,r28
 934               	.LVL78:
 154:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 935               		.loc 1 154 17 is_stmt 0 view .LVU208
 936 0068 0F70      		andi r16,lo8(15)
 154:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 937               		.loc 1 154 48 view .LVU209
 938 006a C07F      		andi r28,lo8(-16)
 939               	.LVL79:
 154:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 940               		.loc 1 154 25 view .LVU210
 941 006c 01F0      		breq .L97
 154:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 942               		.loc 1 154 25 discriminator 2 view .LVU211
 943 006e 0295      		swap r16
 944 0070 007F      		andi r16,lo8(-16)
 945               	.L97:
 946               	.LVL80:
 156:./tmk_core/common/action.c ****                     if (mods) {
 947               		.loc 1 156 17 is_stmt 1 discriminator 4 view .LVU212
 156:./tmk_core/common/action.c ****                     if (mods) {
 948               		.loc 1 156 20 is_stmt 0 discriminator 4 view .LVU213
 949 0072 1123      		tst r17
 950 0074 01F0      		breq .L98
 157:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 951               		.loc 1 157 21 is_stmt 1 view .LVU214
 157:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 952               		.loc 1 157 24 is_stmt 0 view .LVU215
 953 0076 0023      		tst r16
 954 0078 01F0      		breq .L207
 158:./tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 955               		.loc 1 158 25 is_stmt 1 view .LVU216
 158:./tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 956               		.loc 1 158 29 is_stmt 0 view .LVU217
 957 007a 80E2      		ldi r24,lo8(32)
 958 007c 8D0F      		add r24,r29
 158:./tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 959               		.loc 1 158 28 view .LVU218
 960 007e 8830      		cpi r24,lo8(8)
 961 0080 00F0      		brlo .L100
 158:./tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 962               		.loc 1 158 53 discriminator 1 view .LVU219
 963 0082 D111      		cpse r29,__zero_reg__
 964 0084 00C0      		rjmp .L101
 965               	.L100:
 162:./tmk_core/common/action.c ****                         } else {
 966               		.loc 1 162 29 is_stmt 1 view .LVU220
 967 0086 802F      		mov r24,r16
 968 0088 0E94 0000 		call add_mods
 969               	.LVL81:
 970               	.L102:
 166:./tmk_core/common/action.c ****                     }
 971               		.loc 1 166 25 view .LVU221
 972 008c 0E94 0000 		call send_keyboard_report
 973               	.LVL82:
 168:./tmk_core/common/action.c ****                 } else {
 974               		.loc 1 168 21 view .LVU222
 975               	.L207:
 168:./tmk_core/common/action.c ****                 } else {
 976               		.loc 1 168 21 is_stmt 0 view .LVU223
 977               	.LBE6:
 419:./tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 978               		.loc 1 419 75 is_stmt 1 view .LVU224
 420:./tmk_core/common/action.c ****                         } else {
 979               		.loc 1 420 29 view .LVU225
 980 0090 8D2F      		mov r24,r29
 981 0092 0E94 0000 		call register_code
 982               	.LVL83:
 983 0096 00C0      		rjmp .L86
 984               	.LVL84:
 985               	.L101:
 986               	.LBB7:
 164:./tmk_core/common/action.c ****                         }
 987               		.loc 1 164 29 view .LVU226
 988 0098 802F      		mov r24,r16
 989 009a 0E94 0000 		call add_weak_mods
 990               	.LVL85:
 991 009e 00C0      		rjmp .L102
 992               	.L98:
 170:./tmk_core/common/action.c ****                     if (mods) {
 993               		.loc 1 170 21 view .LVU227
 994 00a0 8D2F      		mov r24,r29
 995 00a2 0E94 0000 		call unregister_code
 996               	.LVL86:
 171:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 997               		.loc 1 171 21 view .LVU228
 171:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 998               		.loc 1 171 24 is_stmt 0 view .LVU229
 999 00a6 0023      		tst r16
 1000 00a8 01F0      		breq .L86
 172:./tmk_core/common/action.c ****                             del_mods(mods);
 1001               		.loc 1 172 25 is_stmt 1 view .LVU230
 172:./tmk_core/common/action.c ****                             del_mods(mods);
 1002               		.loc 1 172 29 is_stmt 0 view .LVU231
 1003 00aa 80E2      		ldi r24,lo8(32)
 1004 00ac 8D0F      		add r24,r29
 172:./tmk_core/common/action.c ****                             del_mods(mods);
 1005               		.loc 1 172 28 view .LVU232
 1006 00ae 8830      		cpi r24,lo8(8)
 1007 00b0 00F0      		brlo .L104
 172:./tmk_core/common/action.c ****                             del_mods(mods);
 1008               		.loc 1 172 53 discriminator 1 view .LVU233
 1009 00b2 D111      		cpse r29,__zero_reg__
 1010 00b4 00C0      		rjmp .L105
 1011               	.L104:
 173:./tmk_core/common/action.c ****                         } else {
 1012               		.loc 1 173 29 is_stmt 1 view .LVU234
 1013 00b6 802F      		mov r24,r16
 1014 00b8 0E94 0000 		call del_mods
 1015               	.LVL87:
 1016               	.L106:
 177:./tmk_core/common/action.c ****                     }
 1017               		.loc 1 177 25 view .LVU235
 1018 00bc 0E94 0000 		call send_keyboard_report
 1019               	.LVL88:
 1020               	.L86:
 177:./tmk_core/common/action.c ****                     }
 1021               		.loc 1 177 25 is_stmt 0 view .LVU236
 1022               	.LBE7:
 531:./tmk_core/common/action.c ****         record->event.pressed = false;
 1023               		.loc 1 531 5 is_stmt 1 view .LVU237
 531:./tmk_core/common/action.c ****         record->event.pressed = false;
 1024               		.loc 1 531 8 is_stmt 0 view .LVU238
 1025 00c0 DD20      		tst r13
 1026 00c2 01F4      		brne .+2
 1027 00c4 00C0      		rjmp .L83
 531:./tmk_core/common/action.c ****         record->event.pressed = false;
 1028               		.loc 1 531 33 discriminator 1 view .LVU239
 1029 00c6 0E94 0000 		call get_oneshot_layer_state
 1030               	.LVL89:
 531:./tmk_core/common/action.c ****         record->event.pressed = false;
 1031               		.loc 1 531 28 discriminator 1 view .LVU240
 1032 00ca 80FD      		sbrc r24,0
 1033 00cc 00C0      		rjmp .L83
 532:./tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 1034               		.loc 1 532 9 is_stmt 1 view .LVU241
 532:./tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 1035               		.loc 1 532 31 is_stmt 0 view .LVU242
 1036 00ce F701      		movw r30,r14
 1037 00d0 1282      		std Z+2,__zero_reg__
 533:./tmk_core/common/action.c ****         process_record(record);
 1038               		.loc 1 533 9 is_stmt 1 view .LVU243
 1039 00d2 0E94 0000 		call get_oneshot_layer
 1040               	.LVL90:
 1041 00d6 0E94 0000 		call layer_on
 1042               	.LVL91:
 534:./tmk_core/common/action.c ****         layer_off(get_oneshot_layer());
 1043               		.loc 1 534 9 view .LVU244
 1044 00da C701      		movw r24,r14
 1045 00dc 0E94 0000 		call process_record
 1046               	.LVL92:
 535:./tmk_core/common/action.c ****     }
 1047               		.loc 1 535 9 view .LVU245
 1048 00e0 0E94 0000 		call get_oneshot_layer
 1049               	.LVL93:
 1050               	/* epilogue start */
 538:./tmk_core/common/action.c **** 
 1051               		.loc 1 538 1 is_stmt 0 view .LVU246
 1052 00e4 DF91      		pop r29
 1053               	.LVL94:
 538:./tmk_core/common/action.c **** 
 1054               		.loc 1 538 1 view .LVU247
 1055 00e6 CF91      		pop r28
 538:./tmk_core/common/action.c **** 
 1056               		.loc 1 538 1 view .LVU248
 1057 00e8 1F91      		pop r17
 1058 00ea 0F91      		pop r16
 1059 00ec FF90      		pop r15
 1060 00ee EF90      		pop r14
 1061               	.LVL95:
 538:./tmk_core/common/action.c **** 
 1062               		.loc 1 538 1 view .LVU249
 1063 00f0 DF90      		pop r13
 1064               	.LVL96:
 538:./tmk_core/common/action.c **** 
 1065               		.loc 1 538 1 view .LVU250
 1066 00f2 BF90      		pop r11
 1067 00f4 AF90      		pop r10
 1068 00f6 9F90      		pop r9
 1069 00f8 8F90      		pop r8
 535:./tmk_core/common/action.c ****     }
 1070               		.loc 1 535 9 view .LVU251
 1071 00fa 0C94 0000 		jmp layer_off
 1072               	.LVL97:
 1073               	.L105:
 1074               	.LBB8:
 175:./tmk_core/common/action.c ****                         }
 1075               		.loc 1 175 29 is_stmt 1 view .LVU252
 1076 00fe 802F      		mov r24,r16
 1077 0100 0E94 0000 		call del_weak_mods
 1078               	.LVL98:
 1079 0104 00C0      		rjmp .L106
 1080               	.LVL99:
 1081               	.L95:
 175:./tmk_core/common/action.c ****                         }
 1082               		.loc 1 175 29 is_stmt 0 view .LVU253
 1083               	.LBE8:
 1084               	.LBB9:
 186:./tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 1085               		.loc 1 186 17 is_stmt 1 view .LVU254
 1086 0106 FC2F      		mov r31,r28
 1087 0108 FF70      		andi r31,lo8(15)
 1088 010a BF2E      		mov r11,r31
 186:./tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 1089               		.loc 1 186 48 is_stmt 0 view .LVU255
 1090 010c C07F      		andi r28,lo8(-16)
 1091               	.LVL100:
 186:./tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 1092               		.loc 1 186 25 view .LVU256
 1093 010e C032      		cpi r28,lo8(32)
 1094 0110 01F0      		breq .L107
 186:./tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 1095               		.loc 1 186 25 discriminator 2 view .LVU257
 1096 0112 B294      		swap r11
 1097 0114 80EF      		ldi r24,lo8(-16)
 1098 0116 B822      		and r11,r24
 1099               	.L107:
 1100               	.LVL101:
 188:./tmk_core/common/action.c ****     #ifndef NO_ACTION_ONESHOT
 1101               		.loc 1 188 17 is_stmt 1 discriminator 4 view .LVU258
 1102 0118 DD23      		tst r29
 1103 011a 01F0      		breq .L108
 1104 011c D130      		cpi r29,lo8(1)
 1105 011e 01F0      		breq .L109
 243:./tmk_core/common/action.c ****                             if (tap_count > 0) {
 1106               		.loc 1 243 25 view .LVU259
 243:./tmk_core/common/action.c ****                             if (tap_count > 0) {
 1107               		.loc 1 243 28 is_stmt 0 view .LVU260
 1108 0120 1123      		tst r17
 1109 0122 01F0      		breq .L117
 244:./tmk_core/common/action.c **** #ifndef IGNORE_MOD_TAP_INTERRUPT
 1110               		.loc 1 244 29 is_stmt 1 view .LVU261
 244:./tmk_core/common/action.c **** #ifndef IGNORE_MOD_TAP_INTERRUPT
 1111               		.loc 1 244 32 is_stmt 0 view .LVU262
 1112 0124 0023      		tst r16
 1113 0126 01F0      		breq .L208
 1114 0128 00C0      		rjmp .L207
 1115               	.L108:
 192:./tmk_core/common/action.c ****                             if (tap_count == 0) {
 1116               		.loc 1 192 25 is_stmt 1 view .LVU263
 192:./tmk_core/common/action.c ****                             if (tap_count == 0) {
 1117               		.loc 1 192 28 is_stmt 0 view .LVU264
 1118 012a 1123      		tst r17
 1119 012c 01F0      		breq .L111
 193:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: 0\n");
 1120               		.loc 1 193 29 is_stmt 1 view .LVU265
 193:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: 0\n");
 1121               		.loc 1 193 32 is_stmt 0 view .LVU266
 1122 012e 0111      		cpse r16,__zero_reg__
 1123 0130 00C0      		rjmp .L112
 1124               	.L208:
 234:./tmk_core/common/action.c ****                             }
 1125               		.loc 1 234 33 is_stmt 1 view .LVU267
 1126 0132 8B2D      		mov r24,r11
 1127               	.LVL102:
 1128               	.L204:
 234:./tmk_core/common/action.c ****                             }
 1129               		.loc 1 234 33 is_stmt 0 view .LVU268
 1130 0134 0E94 0000 		call register_mods
 1131               	.LVL103:
 1132 0138 00C0      		rjmp .L86
 1133               	.LVL104:
 1134               	.L112:
 196:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 1135               		.loc 1 196 36 is_stmt 1 view .LVU269
 198:./tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 1136               		.loc 1 198 33 is_stmt 0 view .LVU270
 1137 013a 8B2D      		mov r24,r11
 196:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 1138               		.loc 1 196 39 view .LVU271
 1139 013c 0130      		cpi r16,lo8(1)
 1140 013e 01F4      		brne .L204
 197:./tmk_core/common/action.c ****                                 set_oneshot_mods(mods);
 1141               		.loc 1 197 69 is_stmt 1 view .LVU272
 198:./tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 1142               		.loc 1 198 33 view .LVU273
 1143 0140 0E94 0000 		call set_oneshot_mods
 1144               	.LVL105:
 1145 0144 00C0      		rjmp .L86
 1146               	.L111:
 210:./tmk_core/common/action.c ****                                 clear_oneshot_mods();
 1147               		.loc 1 210 29 view .LVU274
 210:./tmk_core/common/action.c ****                                 clear_oneshot_mods();
 1148               		.loc 1 210 32 is_stmt 0 view .LVU275
 1149 0146 0111      		cpse r16,__zero_reg__
 1150 0148 00C0      		rjmp .L114
 1151               	.L212:
 225:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 1152               		.loc 1 225 33 is_stmt 1 view .LVU276
 1153 014a 0E94 0000 		call clear_oneshot_mods
 1154               	.LVL106:
 226:./tmk_core/common/action.c ****                             }
 1155               		.loc 1 226 33 view .LVU277
 1156               	.L119:
 266:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 1157               		.loc 1 266 71 view .LVU278
 267:./tmk_core/common/action.c ****                             }
 1158               		.loc 1 267 33 view .LVU279
 1159 014e 8B2D      		mov r24,r11
 1160               	.LVL107:
 1161               	.L206:
 267:./tmk_core/common/action.c ****                             }
 1162               		.loc 1 267 33 is_stmt 0 view .LVU280
 1163               	.LBE9:
 350:./tmk_core/common/action.c ****                     }
 1164               		.loc 1 350 25 view .LVU281
 1165 0150 0E94 0000 		call unregister_mods
 1166               	.LVL108:
 1167 0154 00C0      		rjmp .L86
 1168               	.LVL109:
 1169               	.L114:
 1170               	.LBB10:
 213:./tmk_core/common/action.c ****                                 // Retain Oneshot mods
 1171               		.loc 1 213 36 is_stmt 1 view .LVU282
 213:./tmk_core/common/action.c ****                                 // Retain Oneshot mods
 1172               		.loc 1 213 39 is_stmt 0 view .LVU283
 1173 0156 0130      		cpi r16,lo8(1)
 1174 0158 01F4      		brne .+2
 1175 015a 00C0      		rjmp .L86
 1176 015c 00C0      		rjmp .L212
 1177               	.L109:
 232:./tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 1178               		.loc 1 232 25 is_stmt 1 view .LVU284
 232:./tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 1179               		.loc 1 232 28 is_stmt 0 view .LVU285
 1180 015e 1123      		tst r17
 1181 0160 01F0      		breq .L116
 233:./tmk_core/common/action.c ****                                 register_mods(mods);
 1182               		.loc 1 233 29 is_stmt 1 view .LVU286
 233:./tmk_core/common/action.c ****                                 register_mods(mods);
 1183               		.loc 1 233 32 is_stmt 0 view .LVU287
 1184 0162 0230      		cpi r16,lo8(2)
 1185 0164 00F0      		brlo .+2
 1186 0166 00C0      		rjmp .L86
 1187 0168 00C0      		rjmp .L208
 1188               	.L116:
 237:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 1189               		.loc 1 237 29 is_stmt 1 view .LVU288
 237:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 1190               		.loc 1 237 32 is_stmt 0 view .LVU289
 1191 016a 0111      		cpse r16,__zero_reg__
 1192 016c 00C0      		rjmp .L86
 1193 016e 00C0      		rjmp .L119
 1194               	.L117:
 262:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 1195               		.loc 1 262 29 is_stmt 1 view .LVU290
 262:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 1196               		.loc 1 262 32 is_stmt 0 view .LVU291
 1197 0170 0023      		tst r16
 1198 0172 01F0      		breq .L119
 1199               	.LVL110:
 1200               	.L205:
 262:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 1201               		.loc 1 262 32 view .LVU292
 1202               	.LBE10:
 427:./tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 1203               		.loc 1 427 77 is_stmt 1 view .LVU293
 428:./tmk_core/common/action.c ****                         } else {
 1204               		.loc 1 428 29 view .LVU294
 1205 0174 8D2F      		mov r24,r29
 1206 0176 0E94 0000 		call unregister_code
 1207               	.LVL111:
 1208 017a 00C0      		rjmp .L86
 1209               	.L94:
 278:./tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 1210               		.loc 1 278 13 view .LVU295
 278:./tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 1211               		.loc 1 278 33 is_stmt 0 view .LVU296
 1212 017c 8C2F      		mov r24,r28
 1213 017e 8695      		lsr r24
 1214 0180 8695      		lsr r24
 1215 0182 8370      		andi r24,lo8(3)
 1216 0184 01F0      		breq .L120
 1217 0186 8130      		cpi r24,lo8(1)
 1218 0188 01F0      		breq .+2
 1219 018a 00C0      		rjmp .L86
 287:./tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 1220               		.loc 1 287 21 is_stmt 1 view .LVU297
 288:./tmk_core/common/action.c ****                     } else {
 1221               		.loc 1 288 25 is_stmt 0 view .LVU298
 1222 018c 8D2F      		mov r24,r29
 1223 018e 9C2F      		mov r25,r28
 1224 0190 9370      		andi r25,lo8(3)
 287:./tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 1225               		.loc 1 287 24 view .LVU299
 1226 0192 1111      		cpse r17,__zero_reg__
 1227 0194 00C0      		rjmp .L209
 290:./tmk_core/common/action.c ****                     }
 1228               		.loc 1 290 25 is_stmt 1 view .LVU300
 1229 0196 90E0      		ldi r25,0
 1230 0198 80E0      		ldi r24,0
 1231               	.L209:
 1232 019a 0E94 0000 		call host_consumer_send
 1233               	.LVL112:
 1234 019e 00C0      		rjmp .L86
 1235               	.L120:
 280:./tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 1236               		.loc 1 280 21 view .LVU301
 281:./tmk_core/common/action.c ****                     } else {
 1237               		.loc 1 281 25 is_stmt 0 view .LVU302
 1238 01a0 8D2F      		mov r24,r29
 1239 01a2 9C2F      		mov r25,r28
 1240 01a4 9370      		andi r25,lo8(3)
 280:./tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 1241               		.loc 1 280 24 view .LVU303
 1242 01a6 1111      		cpse r17,__zero_reg__
 1243 01a8 00C0      		rjmp .L200
 283:./tmk_core/common/action.c ****                     }
 1244               		.loc 1 283 25 is_stmt 1 view .LVU304
 1245 01aa 90E0      		ldi r25,0
 1246 01ac 80E0      		ldi r24,0
 1247               	.L200:
 1248 01ae 0E94 0000 		call host_system_send
 1249               	.LVL113:
 1250 01b2 00C0      		rjmp .L86
 1251               	.L93:
 299:./tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 1252               		.loc 1 299 13 view .LVU305
 300:./tmk_core/common/action.c ****                 mousekey_send();
 1253               		.loc 1 300 17 is_stmt 0 view .LVU306
 1254 01b4 8D2F      		mov r24,r29
 299:./tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 1255               		.loc 1 299 16 view .LVU307
 1256 01b6 1123      		tst r17
 1257 01b8 01F0      		breq .L124
 300:./tmk_core/common/action.c ****                 mousekey_send();
 1258               		.loc 1 300 17 is_stmt 1 view .LVU308
 1259 01ba 0E94 0000 		call mousekey_on
 1260               	.LVL114:
 301:./tmk_core/common/action.c ****             } else {
 1261               		.loc 1 301 17 view .LVU309
 1262               	.L201:
 304:./tmk_core/common/action.c ****             }
 1263               		.loc 1 304 17 view .LVU310
 1264 01be 0E94 0000 		call mousekey_send
 1265               	.LVL115:
 1266 01c2 00C0      		rjmp .L86
 1267               	.L124:
 303:./tmk_core/common/action.c ****                 mousekey_send();
 1268               		.loc 1 303 17 view .LVU311
 1269 01c4 0E94 0000 		call mousekey_off
 1270               	.LVL116:
 1271 01c8 00C0      		rjmp .L201
 1272               	.L91:
 310:./tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1273               		.loc 1 310 13 view .LVU312
 310:./tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1274               		.loc 1 310 39 is_stmt 0 view .LVU313
 1275 01ca 8C2F      		mov r24,r28
 1276 01cc 8370      		andi r24,lo8(3)
 310:./tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1277               		.loc 1 310 16 view .LVU314
 1278 01ce 01F0      		breq .+2
 1279 01d0 00C0      		rjmp .L125
 312:./tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 1280               		.loc 1 312 17 is_stmt 1 view .LVU315
 312:./tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 1281               		.loc 1 312 20 is_stmt 0 view .LVU316
 1282 01d2 1111      		cpse r17,__zero_reg__
 1283 01d4 00C0      		rjmp .L86
 1284               	.LBB11:
 313:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1285               		.loc 1 313 21 is_stmt 1 view .LVU317
 1286               	.LVL117:
 314:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1287               		.loc 1 314 21 view .LVU318
 313:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1288               		.loc 1 313 55 is_stmt 0 view .LVU319
 1289 01d6 2D2F      		mov r18,r29
 1290 01d8 2295      		swap r18
 1291 01da 2695      		lsr r18
 1292 01dc 2770      		andi r18,lo8(7)
 313:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1293               		.loc 1 313 29 view .LVU320
 1294 01de 220F      		lsl r18
 1295 01e0 220F      		lsl r18
 314:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1296               		.loc 1 314 66 view .LVU321
 1297 01e2 6D2F      		mov r22,r29
 1298 01e4 6F70      		andi r22,lo8(15)
 314:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1299               		.loc 1 314 38 view .LVU322
 1300 01e6 862E      		mov r8,r22
 1301 01e8 912C      		mov r9,__zero_reg__
 1302 01ea B12C      		mov r11,__zero_reg__
 1303 01ec A12C      		mov r10,__zero_reg__
 314:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1304               		.loc 1 314 30 view .LVU323
 1305 01ee 022E      		mov r0,r18
 1306 01f0 00C0      		rjmp 2f
 1307               		1:
 1308 01f2 880C      		lsl r8
 1309 01f4 991C      		rol r9
 1310 01f6 AA1C      		rol r10
 1311 01f8 BB1C      		rol r11
 1312               		2:
 1313 01fa 0A94      		dec r0
 1314 01fc 02F4      		brpl 1b
 1315               	.LVL118:
 315:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1316               		.loc 1 315 21 is_stmt 1 view .LVU324
 315:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1317               		.loc 1 315 91 is_stmt 0 view .LVU325
 1318 01fe 60E0      		ldi r22,0
 1319 0200 70E0      		ldi r23,0
 1320 0202 CB01      		movw r24,r22
 1321 0204 D4FF      		sbrs r29,4
 1322 0206 00C0      		rjmp .L126
 315:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1323               		.loc 1 315 82 discriminator 1 view .LVU326
 1324 0208 6FE0      		ldi r22,lo8(15)
 1325 020a 70E0      		ldi r23,0
 1326 020c 80E0      		ldi r24,0
 1327 020e 90E0      		ldi r25,0
 1328 0210 00C0      		rjmp 2f
 1329               		1:
 1330 0212 660F      		lsl r22
 1331 0214 771F      		rol r23
 1332 0216 881F      		rol r24
 1333 0218 991F      		rol r25
 1334               		2:
 1335 021a 2A95      		dec r18
 1336 021c 02F4      		brpl 1b
 315:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1337               		.loc 1 315 91 discriminator 1 view .LVU327
 1338 021e 6095      		com r22
 1339 0220 7095      		com r23
 1340 0222 8095      		com r24
 1341 0224 9095      		com r25
 1342               	.L126:
 1343               	.LVL119:
 316:./tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1344               		.loc 1 316 21 is_stmt 1 discriminator 4 view .LVU328
 316:./tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1345               		.loc 1 316 47 is_stmt 0 discriminator 4 view .LVU329
 1346 0226 C695      		lsr r28
 1347 0228 C695      		lsr r28
 1348               	.LVL120:
 316:./tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1349               		.loc 1 316 47 discriminator 4 view .LVU330
 1350 022a C370      		andi r28,lo8(3)
 1351 022c C230      		cpi r28,lo8(2)
 1352 022e 01F0      		breq .L127
 1353 0230 00F4      		brsh .L128
 1354 0232 6829      		or r22,r8
 1355               	.LVL121:
 316:./tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1356               		.loc 1 316 47 discriminator 4 view .LVU331
 1357 0234 7929      		or r23,r9
 1358 0236 8A29      		or r24,r10
 1359 0238 9B29      		or r25,r11
 1360 023a C130      		cpi r28,lo8(1)
 1361 023c 01F0      		breq .L210
 317:./tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 1362               		.loc 1 317 42 is_stmt 1 view .LVU332
 1363 023e 0E94 0000 		call default_layer_and
 1364               	.LVL122:
 317:./tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 1365               		.loc 1 317 74 view .LVU333
 317:./tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 1366               		.loc 1 317 25 is_stmt 0 view .LVU334
 1367 0242 00C0      		rjmp .L86
 1368               	.LVL123:
 1369               	.L127:
 319:./tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1370               		.loc 1 319 42 is_stmt 1 view .LVU335
 1371 0244 6829      		or r22,r8
 1372               	.LVL124:
 319:./tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1373               		.loc 1 319 42 is_stmt 0 view .LVU336
 1374 0246 7929      		or r23,r9
 1375 0248 8A29      		or r24,r10
 1376 024a 9B29      		or r25,r11
 1377 024c 0E94 0000 		call default_layer_xor
 1378               	.LVL125:
 319:./tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1379               		.loc 1 319 74 is_stmt 1 view .LVU337
 319:./tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1380               		.loc 1 319 25 is_stmt 0 view .LVU338
 1381 0250 00C0      		rjmp .L86
 1382               	.LVL126:
 1383               	.L128:
 320:./tmk_core/common/action.c ****                     }
 1384               		.loc 1 320 42 is_stmt 1 view .LVU339
 1385 0252 0E94 0000 		call default_layer_and
 1386               	.LVL127:
 320:./tmk_core/common/action.c ****                     }
 1387               		.loc 1 320 67 view .LVU340
 1388 0256 C501      		movw r24,r10
 1389 0258 B401      		movw r22,r8
 1390               	.L210:
 1391 025a 0E94 0000 		call default_layer_or
 1392               	.LVL128:
 320:./tmk_core/common/action.c ****                     }
 1393               		.loc 1 320 91 view .LVU341
 320:./tmk_core/common/action.c ****                     }
 1394               		.loc 1 320 25 is_stmt 0 view .LVU342
 1395 025e 00C0      		rjmp .L86
 1396               	.LVL129:
 1397               	.L125:
 320:./tmk_core/common/action.c ****                     }
 1398               		.loc 1 320 25 view .LVU343
 1399               	.LBE11:
 325:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1400               		.loc 1 325 17 is_stmt 1 view .LVU344
 325:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1401               		.loc 1 325 21 is_stmt 0 view .LVU345
 1402 0260 8695      		lsr r24
 1403 0262 1123      		tst r17
 1404 0264 01F0      		breq .L131
 325:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1405               		.loc 1 325 21 discriminator 1 view .LVU346
 1406 0266 8C2F      		mov r24,r28
 1407 0268 8170      		andi r24,lo8(1)
 1408               	.L131:
 325:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1409               		.loc 1 325 20 discriminator 4 view .LVU347
 1410 026a 8823      		tst r24
 1411 026c 01F4      		brne .+2
 1412 026e 00C0      		rjmp .L86
 1413               	.LBB12:
 327:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1414               		.loc 1 327 21 is_stmt 1 view .LVU348
 1415               	.LVL130:
 328:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1416               		.loc 1 328 21 view .LVU349
 327:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1417               		.loc 1 327 55 is_stmt 0 view .LVU350
 1418 0270 2D2F      		mov r18,r29
 1419 0272 2295      		swap r18
 1420 0274 2695      		lsr r18
 1421 0276 2770      		andi r18,lo8(7)
 327:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1422               		.loc 1 327 29 view .LVU351
 1423 0278 220F      		lsl r18
 1424 027a 220F      		lsl r18
 328:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1425               		.loc 1 328 66 view .LVU352
 1426 027c 6D2F      		mov r22,r29
 1427 027e 6F70      		andi r22,lo8(15)
 328:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1428               		.loc 1 328 38 view .LVU353
 1429 0280 862E      		mov r8,r22
 1430 0282 912C      		mov r9,__zero_reg__
 1431 0284 B12C      		mov r11,__zero_reg__
 1432 0286 A12C      		mov r10,__zero_reg__
 328:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1433               		.loc 1 328 30 view .LVU354
 1434 0288 022E      		mov r0,r18
 1435 028a 00C0      		rjmp 2f
 1436               		1:
 1437 028c 880C      		lsl r8
 1438 028e 991C      		rol r9
 1439 0290 AA1C      		rol r10
 1440 0292 BB1C      		rol r11
 1441               		2:
 1442 0294 0A94      		dec r0
 1443 0296 02F4      		brpl 1b
 1444               	.LVL131:
 329:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1445               		.loc 1 329 21 is_stmt 1 view .LVU355
 329:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1446               		.loc 1 329 91 is_stmt 0 view .LVU356
 1447 0298 60E0      		ldi r22,0
 1448 029a 70E0      		ldi r23,0
 1449 029c CB01      		movw r24,r22
 1450 029e D4FF      		sbrs r29,4
 1451 02a0 00C0      		rjmp .L132
 329:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1452               		.loc 1 329 82 discriminator 1 view .LVU357
 1453 02a2 6FE0      		ldi r22,lo8(15)
 1454 02a4 70E0      		ldi r23,0
 1455 02a6 80E0      		ldi r24,0
 1456 02a8 90E0      		ldi r25,0
 1457 02aa 00C0      		rjmp 2f
 1458               		1:
 1459 02ac 660F      		lsl r22
 1460 02ae 771F      		rol r23
 1461 02b0 881F      		rol r24
 1462 02b2 991F      		rol r25
 1463               		2:
 1464 02b4 2A95      		dec r18
 1465 02b6 02F4      		brpl 1b
 329:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1466               		.loc 1 329 91 discriminator 1 view .LVU358
 1467 02b8 6095      		com r22
 1468 02ba 7095      		com r23
 1469 02bc 8095      		com r24
 1470 02be 9095      		com r25
 1471               	.L132:
 1472               	.LVL132:
 330:./tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1473               		.loc 1 330 21 is_stmt 1 discriminator 4 view .LVU359
 330:./tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1474               		.loc 1 330 47 is_stmt 0 discriminator 4 view .LVU360
 1475 02c0 C695      		lsr r28
 1476 02c2 C695      		lsr r28
 1477               	.LVL133:
 330:./tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1478               		.loc 1 330 47 discriminator 4 view .LVU361
 1479 02c4 C370      		andi r28,lo8(3)
 1480 02c6 C230      		cpi r28,lo8(2)
 1481 02c8 01F0      		breq .L133
 1482 02ca 00F4      		brsh .L134
 1483 02cc 6829      		or r22,r8
 1484               	.LVL134:
 330:./tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1485               		.loc 1 330 47 discriminator 4 view .LVU362
 1486 02ce 7929      		or r23,r9
 1487 02d0 8A29      		or r24,r10
 1488 02d2 9B29      		or r25,r11
 1489 02d4 C130      		cpi r28,lo8(1)
 1490 02d6 01F0      		breq .L211
 331:./tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 1491               		.loc 1 331 42 is_stmt 1 view .LVU363
 1492 02d8 0E94 0000 		call layer_and
 1493               	.LVL135:
 331:./tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 1494               		.loc 1 331 66 view .LVU364
 331:./tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 1495               		.loc 1 331 25 is_stmt 0 view .LVU365
 1496 02dc 00C0      		rjmp .L86
 1497               	.LVL136:
 1498               	.L133:
 333:./tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1499               		.loc 1 333 42 is_stmt 1 view .LVU366
 1500 02de 6829      		or r22,r8
 1501               	.LVL137:
 333:./tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1502               		.loc 1 333 42 is_stmt 0 view .LVU367
 1503 02e0 7929      		or r23,r9
 1504 02e2 8A29      		or r24,r10
 1505 02e4 9B29      		or r25,r11
 1506 02e6 0E94 0000 		call layer_xor
 1507               	.LVL138:
 333:./tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1508               		.loc 1 333 66 is_stmt 1 view .LVU368
 333:./tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1509               		.loc 1 333 25 is_stmt 0 view .LVU369
 1510 02ea 00C0      		rjmp .L86
 1511               	.LVL139:
 1512               	.L134:
 334:./tmk_core/common/action.c ****                     }
 1513               		.loc 1 334 42 is_stmt 1 view .LVU370
 1514 02ec 0E94 0000 		call layer_and
 1515               	.LVL140:
 334:./tmk_core/common/action.c ****                     }
 1516               		.loc 1 334 59 view .LVU371
 1517 02f0 C501      		movw r24,r10
 1518 02f2 B401      		movw r22,r8
 1519               	.L211:
 1520 02f4 0E94 0000 		call layer_or
 1521               	.LVL141:
 334:./tmk_core/common/action.c ****                     }
 1522               		.loc 1 334 75 view .LVU372
 334:./tmk_core/common/action.c ****                     }
 1523               		.loc 1 334 25 is_stmt 0 view .LVU373
 1524 02f8 00C0      		rjmp .L86
 1525               	.LVL142:
 1526               	.L90:
 334:./tmk_core/common/action.c ****                     }
 1527               		.loc 1 334 25 view .LVU374
 1528               	.LBE12:
 342:./tmk_core/common/action.c ****                 case 0xe0 ... 0xef:
 1529               		.loc 1 342 13 is_stmt 1 view .LVU375
 1530 02fa E0E2      		ldi r30,lo8(32)
 1531 02fc ED0F      		add r30,r29
 1532 02fe E531      		cpi r30,lo8(21)
 1533 0300 00F0      		brlo .+2
 1534 0302 00C0      		rjmp .L136
 1535 0304 F0E0      		ldi r31,0
 1536 0306 E050      		subi r30,lo8(-(gs(.L138)))
 1537 0308 F040      		sbci r31,hi8(-(gs(.L138)))
 1538 030a 0C94 0000 		jmp __tablejump2__
 1539               		.section	.jumptables.gcc.process_action,"a",@progbits
 1540               		.p2align	1
 1541               	.L138:
 1542 0020 0000      		.word gs(.L143)
 1543 0022 0000      		.word gs(.L143)
 1544 0024 0000      		.word gs(.L143)
 1545 0026 0000      		.word gs(.L143)
 1546 0028 0000      		.word gs(.L143)
 1547 002a 0000      		.word gs(.L143)
 1548 002c 0000      		.word gs(.L143)
 1549 002e 0000      		.word gs(.L143)
 1550 0030 0000      		.word gs(.L143)
 1551 0032 0000      		.word gs(.L143)
 1552 0034 0000      		.word gs(.L143)
 1553 0036 0000      		.word gs(.L143)
 1554 0038 0000      		.word gs(.L143)
 1555 003a 0000      		.word gs(.L143)
 1556 003c 0000      		.word gs(.L143)
 1557 003e 0000      		.word gs(.L143)
 1558 0040 0000      		.word gs(.L142)
 1559 0042 0000      		.word gs(.L141)
 1560 0044 0000      		.word gs(.L140)
 1561 0046 0000      		.word gs(.L139)
 1562 0048 0000      		.word gs(.L137)
 1563               		.section	.text.process_action
 1564               	.L143:
 345:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1565               		.loc 1 345 21 view .LVU376
 1566 030e DF70      		andi r29,lo8(15)
 1567               	.LVL143:
 345:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1568               		.loc 1 345 21 is_stmt 0 view .LVU377
 1569 0310 8C2F      		mov r24,r28
 1570 0312 8F71      		andi r24,lo8(31)
 345:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1571               		.loc 1 345 24 view .LVU378
 1572 0314 1123      		tst r17
 1573 0316 01F0      		breq .L144
 346:./tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 1574               		.loc 1 346 25 is_stmt 1 view .LVU379
 1575 0318 0E94 0000 		call layer_on
 1576               	.LVL144:
 347:./tmk_core/common/action.c ****                     } else {
 1577               		.loc 1 347 25 view .LVU380
 1578 031c 8D2F      		mov r24,r29
 1579 031e 00C0      		rjmp .L204
 1580               	.L144:
 349:./tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 1581               		.loc 1 349 25 view .LVU381
 1582 0320 0E94 0000 		call layer_off
 1583               	.LVL145:
 350:./tmk_core/common/action.c ****                     }
 1584               		.loc 1 350 25 view .LVU382
 1585 0324 8D2F      		mov r24,r29
 1586 0326 00C0      		rjmp .L206
 1587               	.LVL146:
 1588               	.L142:
 355:./tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1589               		.loc 1 355 21 view .LVU383
 355:./tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1590               		.loc 1 355 24 is_stmt 0 view .LVU384
 1591 0328 1123      		tst r17
 1592 032a 01F0      		breq .L145
 356:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1593               		.loc 1 356 25 is_stmt 1 view .LVU385
 356:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1594               		.loc 1 356 28 is_stmt 0 view .LVU386
 1595 032c 0111      		cpse r16,__zero_reg__
 1596 032e 00C0      		rjmp .L86
 1597               	.L146:
 357:./tmk_core/common/action.c ****                         }
 1598               		.loc 1 357 29 is_stmt 1 view .LVU387
 1599 0330 8C2F      		mov r24,r28
 1600 0332 8F71      		andi r24,lo8(31)
 1601 0334 0E94 0000 		call layer_invert
 1602               	.LVL147:
 1603 0338 00C0      		rjmp .L86
 1604               	.L145:
 360:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1605               		.loc 1 360 25 view .LVU388
 360:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1606               		.loc 1 360 28 is_stmt 0 view .LVU389
 1607 033a 0230      		cpi r16,lo8(2)
 1608 033c 00F0      		brlo .+2
 1609 033e 00C0      		rjmp .L86
 1610 0340 00C0      		rjmp .L146
 1611               	.L141:
 366:./tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1612               		.loc 1 366 21 is_stmt 1 view .LVU390
 1613 0342 8C2F      		mov r24,r28
 1614 0344 8F71      		andi r24,lo8(31)
 366:./tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1615               		.loc 1 366 68 is_stmt 0 view .LVU391
 1616 0346 1123      		tst r17
 1617 0348 01F0      		breq .L199
 1618               	.L202:
 423:./tmk_core/common/action.c ****                         }
 1619               		.loc 1 423 29 view .LVU392
 1620 034a 0E94 0000 		call layer_on
 1621               	.LVL148:
 1622 034e 00C0      		rjmp .L86
 1623               	.L140:
 370:./tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 1624               		.loc 1 370 21 is_stmt 1 view .LVU393
 1625 0350 8C2F      		mov r24,r28
 1626 0352 8F71      		andi r24,lo8(31)
 370:./tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 1627               		.loc 1 370 69 is_stmt 0 view .LVU394
 1628 0354 1123      		tst r17
 1629 0356 01F0      		breq .L202
 1630               	.L199:
 431:./tmk_core/common/action.c ****                         }
 1631               		.loc 1 431 29 view .LVU395
 1632 0358 0E94 0000 		call layer_off
 1633               	.LVL149:
 1634 035c 00C0      		rjmp .L86
 1635               	.L139:
 374:./tmk_core/common/action.c ****                                     layer_clear();
 1636               		.loc 1 374 21 is_stmt 1 view .LVU396
 374:./tmk_core/common/action.c ****                                     layer_clear();
 1637               		.loc 1 374 70 is_stmt 0 view .LVU397
 1638 035e 1123      		tst r17
 1639 0360 01F0      		breq .L149
 374:./tmk_core/common/action.c ****                                     layer_clear();
 1640               		.loc 1 374 37 discriminator 1 view .LVU398
 1641 0362 8C2F      		mov r24,r28
 1642 0364 8F71      		andi r24,lo8(31)
 1643 0366 0E94 0000 		call layer_move
 1644               	.LVL150:
 1645 036a 00C0      		rjmp .L86
 1646               	.L149:
 375:./tmk_core/common/action.c ****                     break;
 1647               		.loc 1 375 37 view .LVU399
 1648 036c 0E94 0000 		call layer_clear
 1649               	.LVL151:
 1650 0370 00C0      		rjmp .L86
 1651               	.L137:
 403:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1652               		.loc 1 403 21 is_stmt 1 view .LVU400
 403:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1653               		.loc 1 403 24 is_stmt 0 view .LVU401
 1654 0372 1123      		tst r17
 1655 0374 01F0      		breq .L150
 404:./tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 1656               		.loc 1 404 25 is_stmt 1 view .LVU402
 404:./tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 1657               		.loc 1 404 50 is_stmt 0 view .LVU403
 1658 0376 CF71      		andi r28,lo8(31)
 1659               	.LVL152:
 404:./tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 1660               		.loc 1 404 25 view .LVU404
 1661 0378 8C2F      		mov r24,r28
 1662 037a 0E94 0000 		call layer_on
 1663               	.LVL153:
 405:./tmk_core/common/action.c ****                     } else {
 1664               		.loc 1 405 25 is_stmt 1 view .LVU405
 1665 037e 63E0      		ldi r22,lo8(3)
 1666 0380 8C2F      		mov r24,r28
 1667 0382 0E94 0000 		call set_oneshot_layer
 1668               	.LVL154:
 1669 0386 00C0      		rjmp .L86
 1670               	.LVL155:
 1671               	.L150:
 407:./tmk_core/common/action.c ****                         if (tap_count > 1) {
 1672               		.loc 1 407 25 view .LVU406
 1673 0388 81E0      		ldi r24,lo8(1)
 1674 038a 0E94 0000 		call clear_oneshot_layer_state
 1675               	.LVL156:
 408:./tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1676               		.loc 1 408 25 view .LVU407
 408:./tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1677               		.loc 1 408 28 is_stmt 0 view .LVU408
 1678 038e 0230      		cpi r16,lo8(2)
 1679 0390 00F4      		brsh .+2
 1680 0392 00C0      		rjmp .L86
 409:./tmk_core/common/action.c ****                         }
 1681               		.loc 1 409 29 is_stmt 1 view .LVU409
 1682 0394 82E0      		ldi r24,lo8(2)
 1683 0396 0E94 0000 		call clear_oneshot_layer_state
 1684               	.LVL157:
 1685 039a 00C0      		rjmp .L86
 1686               	.L136:
 417:./tmk_core/common/action.c ****                         if (tap_count > 0) {
 1687               		.loc 1 417 21 view .LVU410
 417:./tmk_core/common/action.c ****                         if (tap_count > 0) {
 1688               		.loc 1 417 24 is_stmt 0 view .LVU411
 1689 039c 1123      		tst r17
 1690 039e 01F0      		breq .L151
 418:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 1691               		.loc 1 418 25 is_stmt 1 view .LVU412
 418:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 1692               		.loc 1 418 28 is_stmt 0 view .LVU413
 1693 03a0 0111      		cpse r16,__zero_reg__
 1694 03a2 00C0      		rjmp .L207
 422:./tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 1695               		.loc 1 422 76 is_stmt 1 view .LVU414
 423:./tmk_core/common/action.c ****                         }
 1696               		.loc 1 423 29 view .LVU415
 1697 03a4 8C2F      		mov r24,r28
 1698 03a6 8F71      		andi r24,lo8(31)
 1699 03a8 00C0      		rjmp .L202
 1700               	.L151:
 426:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 1701               		.loc 1 426 25 view .LVU416
 426:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 1702               		.loc 1 426 28 is_stmt 0 view .LVU417
 1703 03aa 0111      		cpse r16,__zero_reg__
 1704 03ac 00C0      		rjmp .L205
 430:./tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 1705               		.loc 1 430 79 is_stmt 1 view .LVU418
 431:./tmk_core/common/action.c ****                         }
 1706               		.loc 1 431 29 view .LVU419
 1707 03ae 8C2F      		mov r24,r28
 1708 03b0 8F71      		andi r24,lo8(31)
 1709 03b2 00C0      		rjmp .L199
 1710               	.L89:
 442:./tmk_core/common/action.c ****             break;
 1711               		.loc 1 442 13 view .LVU420
 442:./tmk_core/common/action.c ****             break;
 1712               		.loc 1 442 83 is_stmt 0 view .LVU421
 1713 03b4 4C2F      		mov r20,r28
 1714 03b6 4F70      		andi r20,lo8(15)
 442:./tmk_core/common/action.c ****             break;
 1715               		.loc 1 442 13 view .LVU422
 1716 03b8 6D2F      		mov r22,r29
 1717 03ba C701      		movw r24,r14
 1718 03bc 0E94 0000 		call action_get_macro
 1719               	.LVL158:
 1720 03c0 0E94 0000 		call action_macro_play
 1721               	.LVL159:
 443:./tmk_core/common/action.c **** #endif
 1722               		.loc 1 443 13 is_stmt 1 view .LVU423
 1723 03c4 00C0      		rjmp .L86
 1724               	.L92:
 472:./tmk_core/common/action.c ****                 case OP_SH_TOGGLE:
 1725               		.loc 1 472 13 view .LVU424
 1726 03c6 D23F      		cpi r29,lo8(-14)
 1727 03c8 01F0      		breq .L164
 1728 03ca 00F4      		brsh .L155
 1729 03cc D03F      		cpi r29,lo8(-16)
 1730 03ce 01F0      		breq .L156
 1731 03d0 D13F      		cpi r29,lo8(-15)
 1732 03d2 01F0      		breq .L157
 1733               	.L158:
 506:./tmk_core/common/action.c ****                         if (event.pressed) {
 1734               		.loc 1 506 21 view .LVU425
 506:./tmk_core/common/action.c ****                         if (event.pressed) {
 1735               		.loc 1 506 24 is_stmt 0 view .LVU426
 1736 03d4 0023      		tst r16
 1737 03d6 01F0      		breq .L164
 507:./tmk_core/common/action.c ****                             register_code(action.swap.code);
 1738               		.loc 1 507 25 is_stmt 1 view .LVU427
 508:./tmk_core/common/action.c ****                         } else {
 1739               		.loc 1 508 29 is_stmt 0 view .LVU428
 1740 03d8 8D2F      		mov r24,r29
 507:./tmk_core/common/action.c ****                             register_code(action.swap.code);
 1741               		.loc 1 507 28 view .LVU429
 1742 03da 1123      		tst r17
 1743 03dc 01F0      		breq .L165
 508:./tmk_core/common/action.c ****                         } else {
 1744               		.loc 1 508 29 is_stmt 1 view .LVU430
 1745 03de 0E94 0000 		call register_code
 1746               	.LVL160:
 1747 03e2 00C0      		rjmp .L87
 1748               	.L155:
 1749 03e4 D43F      		cpi r29,lo8(-12)
 1750 03e6 01F0      		breq .L159
 1751 03e8 00F0      		brlo .L160
 1752 03ea D53F      		cpi r29,lo8(-11)
 1753 03ec 01F4      		brne .L158
 485:./tmk_core/common/action.c ****                         swap_hands = true;
 1754               		.loc 1 485 21 view .LVU431
 485:./tmk_core/common/action.c ****                         swap_hands = true;
 1755               		.loc 1 485 24 is_stmt 0 view .LVU432
 1756 03ee 1111      		cpse r17,__zero_reg__
 1757 03f0 00C0      		rjmp .L87
 486:./tmk_core/common/action.c ****                     }
 1758               		.loc 1 486 25 is_stmt 1 view .LVU433
 486:./tmk_core/common/action.c ****                     }
 1759               		.loc 1 486 36 is_stmt 0 view .LVU434
 1760 03f2 81E0      		ldi r24,lo8(1)
 1761 03f4 00C0      		rjmp .L198
 1762               	.L156:
 474:./tmk_core/common/action.c ****                         swap_hands = !swap_hands;
 1763               		.loc 1 474 21 is_stmt 1 view .LVU435
 474:./tmk_core/common/action.c ****                         swap_hands = !swap_hands;
 1764               		.loc 1 474 24 is_stmt 0 view .LVU436
 1765 03f6 1123      		tst r17
 1766 03f8 01F0      		breq .L87
 1767               	.L163:
 475:./tmk_core/common/action.c ****                     }
 1768               		.loc 1 475 25 is_stmt 1 view .LVU437
 1769 03fa 8091 0000 		lds r24,swap_hands
 1770 03fe 91E0      		ldi r25,lo8(1)
 1771 0400 8927      		eor r24,r25
 1772               	.L198:
 486:./tmk_core/common/action.c ****                     }
 1773               		.loc 1 486 36 is_stmt 0 view .LVU438
 1774 0402 8093 0000 		sts swap_hands,r24
 1775               	.LVL161:
 1776               	.L87:
 520:./tmk_core/common/action.c ****             break;
 1777               		.loc 1 520 13 is_stmt 1 view .LVU439
 520:./tmk_core/common/action.c ****             break;
 1778               		.loc 1 520 64 is_stmt 0 view .LVU440
 1779 0406 4C2F      		mov r20,r28
 1780 0408 4F70      		andi r20,lo8(15)
 520:./tmk_core/common/action.c ****             break;
 1781               		.loc 1 520 13 view .LVU441
 1782 040a 6D2F      		mov r22,r29
 1783 040c C701      		movw r24,r14
 1784 040e 0E94 0000 		call action_function
 1785               	.LVL162:
 521:./tmk_core/common/action.c **** #endif
 1786               		.loc 1 521 13 is_stmt 1 view .LVU442
 1787 0412 00C0      		rjmp .L86
 1788               	.LVL163:
 1789               	.L160:
 482:./tmk_core/common/action.c ****                     break;
 1790               		.loc 1 482 21 view .LVU443
 1791 0414 81E0      		ldi r24,lo8(1)
 1792 0416 1827      		eor r17,r24
 1793               	.LVL164:
 1794               	.L164:
 513:./tmk_core/common/action.c ****                     }
 1795               		.loc 1 513 25 view .LVU444
 513:./tmk_core/common/action.c ****                     }
 1796               		.loc 1 513 36 is_stmt 0 view .LVU445
 1797 0418 1093 0000 		sts swap_hands,r17
 1798 041c 00C0      		rjmp .L87
 1799               	.LVL165:
 1800               	.L159:
 490:./tmk_core/common/action.c ****                         swap_hands = false;
 1801               		.loc 1 490 21 is_stmt 1 view .LVU446
 490:./tmk_core/common/action.c ****                         swap_hands = false;
 1802               		.loc 1 490 24 is_stmt 0 view .LVU447
 1803 041e 1111      		cpse r17,__zero_reg__
 1804 0420 00C0      		rjmp .L87
 491:./tmk_core/common/action.c ****                     }
 1805               		.loc 1 491 25 is_stmt 1 view .LVU448
 491:./tmk_core/common/action.c ****                     }
 1806               		.loc 1 491 36 is_stmt 0 view .LVU449
 1807 0422 1092 0000 		sts swap_hands,__zero_reg__
 1808 0426 00C0      		rjmp .L87
 1809               	.L157:
 497:./tmk_core/common/action.c ****                         if (!event.pressed) {
 1810               		.loc 1 497 21 is_stmt 1 view .LVU450
 497:./tmk_core/common/action.c ****                         if (!event.pressed) {
 1811               		.loc 1 497 24 is_stmt 0 view .LVU451
 1812 0428 0023      		tst r16
 1813 042a 01F0      		breq .L164
 498:./tmk_core/common/action.c ****                             swap_hands = !swap_hands;
 1814               		.loc 1 498 25 is_stmt 1 view .LVU452
 498:./tmk_core/common/action.c ****                             swap_hands = !swap_hands;
 1815               		.loc 1 498 28 is_stmt 0 view .LVU453
 1816 042c 1111      		cpse r17,__zero_reg__
 1817 042e 00C0      		rjmp .L87
 1818 0430 00C0      		rjmp .L163
 1819               	.L165:
 510:./tmk_core/common/action.c ****                         }
 1820               		.loc 1 510 29 is_stmt 1 view .LVU454
 1821 0432 0E94 0000 		call unregister_code
 1822               	.LVL166:
 1823 0436 00C0      		rjmp .L87
 1824               	.LVL167:
 1825               	.L83:
 1826               	/* epilogue start */
 538:./tmk_core/common/action.c **** 
 1827               		.loc 1 538 1 is_stmt 0 view .LVU455
 1828 0438 DF91      		pop r29
 1829               	.LVL168:
 538:./tmk_core/common/action.c **** 
 1830               		.loc 1 538 1 view .LVU456
 1831 043a CF91      		pop r28
 538:./tmk_core/common/action.c **** 
 1832               		.loc 1 538 1 view .LVU457
 1833 043c 1F91      		pop r17
 1834 043e 0F91      		pop r16
 1835 0440 FF90      		pop r15
 1836 0442 EF90      		pop r14
 1837               	.LVL169:
 538:./tmk_core/common/action.c **** 
 1838               		.loc 1 538 1 view .LVU458
 1839 0444 DF90      		pop r13
 1840               	.LVL170:
 538:./tmk_core/common/action.c **** 
 1841               		.loc 1 538 1 view .LVU459
 1842 0446 BF90      		pop r11
 1843 0448 AF90      		pop r10
 1844 044a 9F90      		pop r9
 1845 044c 8F90      		pop r8
 1846 044e 0895      		ret
 1847               		.cfi_endproc
 1848               	.LFE108:
 1850               		.section	.text.process_record,"ax",@progbits
 1851               	.global	process_record
 1853               	process_record:
 1854               	.LVL171:
 1855               	.LFB107:
 104:./tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) { return; }
 1856               		.loc 1 104 1 is_stmt 1 view -0
 1857               		.cfi_startproc
 104:./tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) { return; }
 1858               		.loc 1 104 1 is_stmt 0 view .LVU461
 1859 0000 0F93      		push r16
 1860               	.LCFI18:
 1861               		.cfi_def_cfa_offset 3
 1862               		.cfi_offset 16, -2
 1863 0002 1F93      		push r17
 1864               	.LCFI19:
 1865               		.cfi_def_cfa_offset 4
 1866               		.cfi_offset 17, -3
 1867 0004 CF93      		push r28
 1868               	.LCFI20:
 1869               		.cfi_def_cfa_offset 5
 1870               		.cfi_offset 28, -4
 1871 0006 DF93      		push r29
 1872               	.LCFI21:
 1873               		.cfi_def_cfa_offset 6
 1874               		.cfi_offset 29, -5
 1875               	/* prologue: function */
 1876               	/* frame size = 0 */
 1877               	/* stack size = 4 */
 1878               	.L__stack_usage = 4
 1879 0008 EC01      		movw r28,r24
 105:./tmk_core/common/action.c **** 
 1880               		.loc 1 105 5 is_stmt 1 view .LVU462
 1881               	.LBB15:
 1882               	.LBI15:
 1883               		.loc 2 49 20 view .LVU463
 1884               	.LBB16:
 1885               		.loc 2 49 51 view .LVU464
 1886               		.loc 2 49 74 is_stmt 0 view .LVU465
 1887 000a 8B81      		ldd r24,Y+3
 1888 000c 9C81      		ldd r25,Y+4
 1889               	.LVL172:
 1890               		.loc 2 49 74 view .LVU466
 1891 000e 892B      		or r24,r25
 1892 0010 01F0      		breq .L213
 1893 0012 8881      		ld r24,Y
 1894 0014 9981      		ldd r25,Y+1
 1895 0016 8923      		and r24,r25
 1896 0018 8F3F      		cpi r24,lo8(-1)
 1897 001a 01F4      		brne .L223
 1898               	.L213:
 1899               	/* epilogue start */
 1900               	.LBE16:
 1901               	.LBE15:
 119:./tmk_core/common/action.c **** 
 1902               		.loc 1 119 1 view .LVU467
 1903 001c DF91      		pop r29
 1904 001e CF91      		pop r28
 1905               	.LVL173:
 119:./tmk_core/common/action.c **** 
 1906               		.loc 1 119 1 view .LVU468
 1907 0020 1F91      		pop r17
 1908 0022 0F91      		pop r16
 1909 0024 0895      		ret
 1910               	.LVL174:
 1911               	.L223:
 107:./tmk_core/common/action.c ****         return;
 1912               		.loc 1 107 5 is_stmt 1 view .LVU469
 107:./tmk_core/common/action.c ****         return;
 1913               		.loc 1 107 9 is_stmt 0 view .LVU470
 1914 0026 CE01      		movw r24,r28
 1915 0028 0E94 0000 		call process_record_quantum
 1916               	.LVL175:
 107:./tmk_core/common/action.c ****         return;
 1917               		.loc 1 107 7 view .LVU471
 1918 002c 8823      		tst r24
 1919 002e 01F0      		breq .L213
 110:./tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
 1920               		.loc 1 110 5 is_stmt 1 view .LVU472
 110:./tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
 1921               		.loc 1 110 23 is_stmt 0 view .LVU473
 1922 0030 6881      		ld r22,Y
 1923 0032 7981      		ldd r23,Y+1
 1924 0034 8A81      		ldd r24,Y+2
 1925 0036 0E94 0000 		call store_or_get_action
 1926               	.LVL176:
 1927 003a 8C01      		movw r16,r24
 1928               	.LVL177:
 111:./tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 1929               		.loc 1 111 23 is_stmt 1 view .LVU474
 111:./tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 1930               		.loc 1 111 25 view .LVU475
 113:./tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 1931               		.loc 1 113 29 view .LVU476
 113:./tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 1932               		.loc 1 113 31 view .LVU477
 1933 003c 0E94 0000 		call layer_debug
 1934               	.LVL178:
 114:./tmk_core/common/action.c **** #endif
 1935               		.loc 1 114 37 view .LVU478
 114:./tmk_core/common/action.c **** #endif
 1936               		.loc 1 114 39 view .LVU479
 1937 0040 0E94 0000 		call default_layer_debug
 1938               	.LVL179:
 116:./tmk_core/common/action.c **** 
 1939               		.loc 1 116 15 view .LVU480
 118:./tmk_core/common/action.c **** }
 1940               		.loc 1 118 5 view .LVU481
 118:./tmk_core/common/action.c **** }
 1941               		.loc 1 118 5 is_stmt 0 view .LVU482
 1942 0044 B801      		movw r22,r16
 1943 0046 CE01      		movw r24,r28
 1944               	/* epilogue start */
 119:./tmk_core/common/action.c **** 
 1945               		.loc 1 119 1 view .LVU483
 1946 0048 DF91      		pop r29
 1947 004a CF91      		pop r28
 1948               	.LVL180:
 119:./tmk_core/common/action.c **** 
 1949               		.loc 1 119 1 view .LVU484
 1950 004c 1F91      		pop r17
 1951 004e 0F91      		pop r16
 1952               	.LVL181:
 118:./tmk_core/common/action.c **** }
 1953               		.loc 1 118 5 view .LVU485
 1954 0050 0C94 0000 		jmp process_action
 1955               	.LVL182:
 118:./tmk_core/common/action.c **** }
 1956               		.loc 1 118 5 view .LVU486
 1957               		.cfi_endproc
 1958               	.LFE107:
 1960               		.section	.text.process_record_nocache,"ax",@progbits
 1961               	.global	process_record_nocache
 1963               	process_record_nocache:
 1964               	.LVL183:
 1965               	.LFB105:
  93:./tmk_core/common/action.c ****     process_record(record);
 1966               		.loc 1 93 1 is_stmt 1 view -0
 1967               		.cfi_startproc
 1968               	/* prologue: function */
 1969               	/* frame size = 0 */
 1970               	/* stack size = 0 */
 1971               	.L__stack_usage = 0
  94:./tmk_core/common/action.c **** }
 1972               		.loc 1 94 5 view .LVU488
 1973 0000 0C94 0000 		jmp process_record
 1974               	.LVL184:
  94:./tmk_core/common/action.c **** }
 1975               		.loc 1 94 5 is_stmt 0 view .LVU489
 1976               		.cfi_endproc
 1977               	.LFE105:
 1979               		.section	.text.clear_keyboard_but_mods,"ax",@progbits
 1980               	.global	clear_keyboard_but_mods
 1982               	clear_keyboard_but_mods:
 1983               	.LFB114:
 691:./tmk_core/common/action.c **** 
 692:./tmk_core/common/action.c **** void clear_keyboard(void)
 693:./tmk_core/common/action.c **** {
 694:./tmk_core/common/action.c ****     clear_mods();
 695:./tmk_core/common/action.c ****     clear_keyboard_but_mods();
 696:./tmk_core/common/action.c **** }
 697:./tmk_core/common/action.c **** 
 698:./tmk_core/common/action.c **** void clear_keyboard_but_mods(void)
 699:./tmk_core/common/action.c **** {
 1984               		.loc 1 699 1 is_stmt 1 view -0
 1985               		.cfi_startproc
 1986               	/* prologue: function */
 1987               	/* frame size = 0 */
 1988               	/* stack size = 0 */
 1989               	.L__stack_usage = 0
 700:./tmk_core/common/action.c ****     clear_weak_mods();
 1990               		.loc 1 700 5 view .LVU491
 1991 0000 0E94 0000 		call clear_weak_mods
 1992               	.LVL185:
 701:./tmk_core/common/action.c ****     clear_macro_mods();
 1993               		.loc 1 701 5 view .LVU492
 1994 0004 0E94 0000 		call clear_macro_mods
 1995               	.LVL186:
 702:./tmk_core/common/action.c ****     clear_keys();
 1996               		.loc 1 702 5 view .LVU493
 1997 0008 0E94 0000 		call clear_keys
 1998               	.LVL187:
 703:./tmk_core/common/action.c ****     send_keyboard_report();
 1999               		.loc 1 703 5 view .LVU494
 2000 000c 0E94 0000 		call send_keyboard_report
 2001               	.LVL188:
 704:./tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 705:./tmk_core/common/action.c ****     mousekey_clear();
 2002               		.loc 1 705 5 view .LVU495
 2003 0010 0E94 0000 		call mousekey_clear
 2004               	.LVL189:
 706:./tmk_core/common/action.c ****     mousekey_send();
 2005               		.loc 1 706 5 view .LVU496
 2006 0014 0E94 0000 		call mousekey_send
 2007               	.LVL190:
 707:./tmk_core/common/action.c **** #endif
 708:./tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 709:./tmk_core/common/action.c ****     host_system_send(0);
 2008               		.loc 1 709 5 view .LVU497
 2009 0018 90E0      		ldi r25,0
 2010 001a 80E0      		ldi r24,0
 2011 001c 0E94 0000 		call host_system_send
 2012               	.LVL191:
 710:./tmk_core/common/action.c ****     host_consumer_send(0);
 2013               		.loc 1 710 5 view .LVU498
 2014 0020 90E0      		ldi r25,0
 2015 0022 80E0      		ldi r24,0
 2016 0024 0C94 0000 		jmp host_consumer_send
 2017               	.LVL192:
 2018               		.cfi_endproc
 2019               	.LFE114:
 2021               		.section	.text.clear_keyboard,"ax",@progbits
 2022               	.global	clear_keyboard
 2024               	clear_keyboard:
 2025               	.LFB113:
 693:./tmk_core/common/action.c ****     clear_mods();
 2026               		.loc 1 693 1 view -0
 2027               		.cfi_startproc
 2028               	/* prologue: function */
 2029               	/* frame size = 0 */
 2030               	/* stack size = 0 */
 2031               	.L__stack_usage = 0
 694:./tmk_core/common/action.c ****     clear_keyboard_but_mods();
 2032               		.loc 1 694 5 view .LVU500
 2033 0000 0E94 0000 		call clear_mods
 2034               	.LVL193:
 695:./tmk_core/common/action.c **** }
 2035               		.loc 1 695 5 view .LVU501
 2036 0004 0C94 0000 		jmp clear_keyboard_but_mods
 2037               	.LVL194:
 2038               		.cfi_endproc
 2039               	.LFE113:
 2041               		.section	.text.is_tap_key,"ax",@progbits
 2042               	.global	is_tap_key
 2044               	is_tap_key:
 2045               	.LVL195:
 2046               	.LFB115:
 711:./tmk_core/common/action.c **** #endif
 712:./tmk_core/common/action.c **** }
 713:./tmk_core/common/action.c **** 
 714:./tmk_core/common/action.c **** bool is_tap_key(keypos_t key)
 715:./tmk_core/common/action.c **** {
 2047               		.loc 1 715 1 view -0
 2048               		.cfi_startproc
 2049               	/* prologue: function */
 2050               	/* frame size = 0 */
 2051               	/* stack size = 0 */
 2052               	.L__stack_usage = 0
 716:./tmk_core/common/action.c ****     action_t action = layer_switch_get_action(key);
 2053               		.loc 1 716 5 view .LVU503
 2054               		.loc 1 716 23 is_stmt 0 view .LVU504
 2055 0000 0E94 0000 		call layer_switch_get_action
 2056               	.LVL196:
 717:./tmk_core/common/action.c **** 
 718:./tmk_core/common/action.c ****     switch (action.kind.id) {
 2057               		.loc 1 718 5 is_stmt 1 view .LVU505
 2058               		.loc 1 718 24 is_stmt 0 view .LVU506
 2059 0004 E92F      		mov r30,r25
 2060 0006 E295      		swap r30
 2061 0008 EF70      		andi r30,lo8(15)
 2062               		.loc 1 718 5 view .LVU507
 2063 000a E250      		subi r30,lo8(-(-2))
 2064 000c EE30      		cpi r30,lo8(14)
 2065 000e 00F4      		brsh .L236
 2066 0010 F0E0      		ldi r31,0
 2067 0012 E050      		subi r30,lo8(-(gs(.L230)))
 2068 0014 F040      		sbci r31,hi8(-(gs(.L230)))
 2069 0016 0C94 0000 		jmp __tablejump2__
 2070               		.section	.jumptables.gcc.is_tap_key,"a",@progbits
 2071               		.p2align	1
 2072               	.L230:
 2073 0000 0000      		.word gs(.L231)
 2074 0002 0000      		.word gs(.L231)
 2075 0004 0000      		.word gs(.L236)
 2076 0006 0000      		.word gs(.L236)
 2077 0008 0000      		.word gs(.L232)
 2078 000a 0000      		.word gs(.L236)
 2079 000c 0000      		.word gs(.L236)
 2080 000e 0000      		.word gs(.L236)
 2081 0010 0000      		.word gs(.L231)
 2082 0012 0000      		.word gs(.L231)
 2083 0014 0000      		.word gs(.L229)
 2084 0016 0000      		.word gs(.L236)
 2085 0018 0000      		.word gs(.L236)
 2086 001a 0000      		.word gs(.L229)
 2087               		.section	.text.is_tap_key
 2088               	.L231:
 719:./tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 720:./tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 721:./tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 722:./tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 723:./tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 2089               		.loc 1 723 13 is_stmt 1 view .LVU508
 2090 001a 803F      		cpi r24,lo8(-16)
 2091 001c 01F0      		breq .L239
 2092 001e 00F4      		brsh .L233
 2093 0020 803E      		cpi r24,lo8(-32)
 2094 0022 00F4      		brsh .L236
 2095               	.L239:
 724:./tmk_core/common/action.c ****                 case 0x00 ... 0xdf:
 725:./tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 726:./tmk_core/common/action.c ****                 case OP_ONESHOT:
 727:./tmk_core/common/action.c ****                     return true;
 2096               		.loc 1 727 28 is_stmt 0 view .LVU509
 2097 0024 81E0      		ldi r24,lo8(1)
 2098               	.LVL197:
 2099               	/* epilogue start */
 728:./tmk_core/common/action.c ****             }
 729:./tmk_core/common/action.c ****             return false;
 730:./tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 731:./tmk_core/common/action.c ****             switch (action.swap.code) {
 732:./tmk_core/common/action.c ****                 case 0x00 ... 0xdf:
 733:./tmk_core/common/action.c ****                 case OP_SH_TAP_TOGGLE:
 734:./tmk_core/common/action.c ****                     return true;
 735:./tmk_core/common/action.c ****             }
 736:./tmk_core/common/action.c ****             return false;
 737:./tmk_core/common/action.c ****         case ACT_MACRO:
 738:./tmk_core/common/action.c ****         case ACT_FUNCTION:
 739:./tmk_core/common/action.c ****             if (action.func.opt & FUNC_TAP) { return true; }
 740:./tmk_core/common/action.c ****             return false;
 741:./tmk_core/common/action.c ****     }
 742:./tmk_core/common/action.c ****     return false;
 743:./tmk_core/common/action.c **** }
 2100               		.loc 1 743 1 view .LVU510
 2101 0026 0895      		ret
 2102               	.LVL198:
 2103               	.L233:
 2104               		.loc 1 743 1 view .LVU511
 2105 0028 843F      		cpi r24,lo8(-12)
 2106 002a 01F0      		breq .L239
 2107               	.L236:
 729:./tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 2108               		.loc 1 729 20 view .LVU512
 2109 002c 80E0      		ldi r24,0
 2110               	.LVL199:
 729:./tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 2111               		.loc 1 729 20 view .LVU513
 2112 002e 0895      		ret
 2113               	.LVL200:
 2114               	.L232:
 731:./tmk_core/common/action.c ****                 case 0x00 ... 0xdf:
 2115               		.loc 1 731 13 is_stmt 1 view .LVU514
 2116 0030 803E      		cpi r24,lo8(-32)
 2117 0032 00F0      		brlo .L239
 2118 0034 813F      		cpi r24,lo8(-15)
 2119 0036 01F4      		brne .L236
 2120 0038 00C0      		rjmp .L239
 2121               	.L229:
 739:./tmk_core/common/action.c ****             return false;
 2122               		.loc 1 739 13 view .LVU515
 739:./tmk_core/common/action.c ****             return false;
 2123               		.loc 1 739 16 is_stmt 0 view .LVU516
 2124 003a 93FB      		bst r25,3
 2125 003c 8827      		clr r24
 2126 003e 80F9      		bld r24,0
 2127               	.LVL201:
 739:./tmk_core/common/action.c ****             return false;
 2128               		.loc 1 739 16 view .LVU517
 2129 0040 0895      		ret
 2130               		.cfi_endproc
 2131               	.LFE115:
 2133               		.section	.text.debug_event,"ax",@progbits
 2134               	.global	debug_event
 2136               	debug_event:
 2137               	.LFB116:
 744:./tmk_core/common/action.c **** 
 745:./tmk_core/common/action.c **** 
 746:./tmk_core/common/action.c **** /*
 747:./tmk_core/common/action.c ****  * debug print
 748:./tmk_core/common/action.c ****  */
 749:./tmk_core/common/action.c **** void debug_event(keyevent_t event)
 750:./tmk_core/common/action.c **** {
 2138               		.loc 1 750 1 is_stmt 1 view -0
 2139               		.cfi_startproc
 2140 0000 CF93      		push r28
 2141               	.LCFI22:
 2142               		.cfi_def_cfa_offset 3
 2143               		.cfi_offset 28, -2
 2144 0002 DF93      		push r29
 2145               	.LCFI23:
 2146               		.cfi_def_cfa_offset 4
 2147               		.cfi_offset 29, -3
 2148 0004 00D0      		rcall .
 2149 0006 00D0      		rcall .
 2150 0008 0F92      		push __tmp_reg__
 2151               	.LCFI24:
 2152               		.cfi_def_cfa_offset 9
 2153 000a CDB7      		in r28,__SP_L__
 2154 000c DEB7      		in r29,__SP_H__
 2155               	.LCFI25:
 2156               		.cfi_def_cfa_register 28
 2157               	/* prologue: function */
 2158               	/* frame size = 5 */
 2159               	/* stack size = 7 */
 2160               	.L__stack_usage = 7
 751:./tmk_core/common/action.c ****     dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.ti
 2161               		.loc 1 751 103 view .LVU519
 2162               	/* epilogue start */
 752:./tmk_core/common/action.c **** }
 2163               		.loc 1 752 1 is_stmt 0 view .LVU520
 2164 000e 0F90      		pop __tmp_reg__
 2165 0010 0F90      		pop __tmp_reg__
 2166 0012 0F90      		pop __tmp_reg__
 2167 0014 0F90      		pop __tmp_reg__
 2168 0016 0F90      		pop __tmp_reg__
 2169 0018 DF91      		pop r29
 2170 001a CF91      		pop r28
 2171 001c 0895      		ret
 2172               		.cfi_endproc
 2173               	.LFE116:
 2175               		.section	.text.debug_record,"ax",@progbits
 2176               	.global	debug_record
 2178               	debug_record:
 2179               	.LFB117:
 753:./tmk_core/common/action.c **** 
 754:./tmk_core/common/action.c **** void debug_record(keyrecord_t record)
 755:./tmk_core/common/action.c **** {
 2180               		.loc 1 755 1 is_stmt 1 view -0
 2181               		.cfi_startproc
 2182 0000 CF93      		push r28
 2183               	.LCFI26:
 2184               		.cfi_def_cfa_offset 3
 2185               		.cfi_offset 28, -2
 2186 0002 DF93      		push r29
 2187               	.LCFI27:
 2188               		.cfi_def_cfa_offset 4
 2189               		.cfi_offset 29, -3
 2190 0004 00D0      		rcall .
 2191 0006 00D0      		rcall .
 2192 0008 00D0      		rcall .
 2193               	.LCFI28:
 2194               		.cfi_def_cfa_offset 10
 2195 000a CDB7      		in r28,__SP_L__
 2196 000c DEB7      		in r29,__SP_H__
 2197               	.LCFI29:
 2198               		.cfi_def_cfa_register 28
 2199               	/* prologue: function */
 2200               	/* frame size = 6 */
 2201               	/* stack size = 8 */
 2202               	.L__stack_usage = 8
 756:./tmk_core/common/action.c ****     debug_event(record.event);
 2203               		.loc 1 756 5 view .LVU522
 757:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 758:./tmk_core/common/action.c ****     dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
 2204               		.loc 1 758 77 view .LVU523
 2205               	/* epilogue start */
 759:./tmk_core/common/action.c **** #endif
 760:./tmk_core/common/action.c **** }
 2206               		.loc 1 760 1 is_stmt 0 view .LVU524
 2207 000e 2696      		adiw r28,6
 2208 0010 0FB6      		in __tmp_reg__,__SREG__
 2209 0012 F894      		cli
 2210 0014 DEBF      		out __SP_H__,r29
 2211 0016 0FBE      		out __SREG__,__tmp_reg__
 2212 0018 CDBF      		out __SP_L__,r28
 2213 001a DF91      		pop r29
 2214 001c CF91      		pop r28
 2215 001e 0895      		ret
 2216               		.cfi_endproc
 2217               	.LFE117:
 2219               		.section	.text.debug_action,"ax",@progbits
 2220               	.global	debug_action
 2222               	debug_action:
 2223               	.LVL202:
 2224               	.LFB118:
 761:./tmk_core/common/action.c **** 
 762:./tmk_core/common/action.c **** void debug_action(action_t action)
 763:./tmk_core/common/action.c **** {
 2225               		.loc 1 763 1 is_stmt 1 view -0
 2226               		.cfi_startproc
 2227               	/* prologue: function */
 2228               	/* frame size = 0 */
 2229               	/* stack size = 0 */
 2230               	.L__stack_usage = 0
 764:./tmk_core/common/action.c ****     switch (action.kind.id) {
 2231               		.loc 1 764 5 view .LVU526
 765:./tmk_core/common/action.c ****         case ACT_LMODS:             dprint("ACT_LMODS");             break;
 766:./tmk_core/common/action.c ****         case ACT_RMODS:             dprint("ACT_RMODS");             break;
 767:./tmk_core/common/action.c ****         case ACT_LMODS_TAP:         dprint("ACT_LMODS_TAP");         break;
 768:./tmk_core/common/action.c ****         case ACT_RMODS_TAP:         dprint("ACT_RMODS_TAP");         break;
 769:./tmk_core/common/action.c ****         case ACT_USAGE:             dprint("ACT_USAGE");             break;
 770:./tmk_core/common/action.c ****         case ACT_MOUSEKEY:          dprint("ACT_MOUSEKEY");          break;
 771:./tmk_core/common/action.c ****         case ACT_LAYER:             dprint("ACT_LAYER");             break;
 772:./tmk_core/common/action.c ****         case ACT_LAYER_TAP:         dprint("ACT_LAYER_TAP");         break;
 773:./tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:     dprint("ACT_LAYER_TAP_EXT");     break;
 774:./tmk_core/common/action.c ****         case ACT_MACRO:             dprint("ACT_MACRO");             break;
 775:./tmk_core/common/action.c ****         case ACT_COMMAND:           dprint("ACT_COMMAND");           break;
 776:./tmk_core/common/action.c ****         case ACT_FUNCTION:          dprint("ACT_FUNCTION");          break;
 777:./tmk_core/common/action.c ****         case ACT_SWAP_HANDS:        dprint("ACT_SWAP_HANDS");        break;
 778:./tmk_core/common/action.c ****         default:                    dprint("UNKNOWN");               break;
 779:./tmk_core/common/action.c ****     }
 780:./tmk_core/common/action.c ****     dprintf("[%X:%02X]", action.kind.param>>8, action.kind.param&0xff);
 2232               		.loc 1 780 71 view .LVU527
 2233               	/* epilogue start */
 781:./tmk_core/common/action.c **** }
 2234               		.loc 1 781 1 is_stmt 0 view .LVU528
 2235 0000 0895      		ret
 2236               		.cfi_endproc
 2237               	.LFE118:
 2239               		.section	.bss.swap_state.4890,"aw",@nobits
 2242               	swap_state.4890:
 2243 0000 0000 0000 		.zero	14
 2243      0000 0000 
 2243      0000 0000 
 2243      0000 
 2244               	.global	swap_hands
 2245               		.section	.bss.swap_hands,"aw",@nobits
 2248               	swap_hands:
 2249 0000 00        		.zero	1
 2250               		.text
 2251               	.Letext0:
 2252               		.file 3 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/stdint.h"
 2253               		.file 4 "./tmk_core/common/keycode.h"
 2254               		.file 5 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 2255               		.file 6 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 2256               		.file 7 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 2257               		.file 8 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/HostStandardReq.h"
 2258               		.file 9 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/stdio.h"
 2259               		.file 10 "./tmk_core/common/report.h"
 2260               		.file 11 "./tmk_core/common/host.h"
 2261               		.file 12 "./tmk_core/common/mousekey.h"
 2262               		.file 13 "./tmk_core/common/command.h"
 2263               		.file 14 "./tmk_core/common/action_code.h"
 2264               		.file 15 "./tmk_core/common/action.h"
 2265               		.file 16 "./tmk_core/common/action_layer.h"
 2266               		.file 17 "./tmk_core/common/action_util.h"
 2267               		.file 18 "./tmk_core/common/debug.h"
 2268               		.file 19 "./tmk_core/common/action_macro.h"
 2269               		.file 20 "./tmk_core/common/action_tapping.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action.c
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczLsznC.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczLsznC.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczLsznC.s:4      *ABS*:000000000000003f __SREG__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczLsznC.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczLsznC.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczLsznC.s:13     .text.process_hand_swap:0000000000000000 process_hand_swap
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczLsznC.s:2242   .bss.swap_state.4890:0000000000000000 swap_state.4890
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczLsznC.s:2248   .bss.swap_hands:0000000000000000 swap_hands
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczLsznC.s:130    .text.action_exec:0000000000000000 action_exec
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczLsznC.s:231    .text.process_record_quantum:0000000000000000 process_record_quantum
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczLsznC.s:253    .text.register_code:0000000000000000 register_code
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczLsznC.s:568    .text.unregister_code:0000000000000000 unregister_code
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczLsznC.s:726    .text.register_mods:0000000000000000 register_mods
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczLsznC.s:755    .text.unregister_mods:0000000000000000 unregister_mods
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczLsznC.s:784    .text.process_action:0000000000000000 process_action
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczLsznC.s:1853   .text.process_record:0000000000000000 process_record
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczLsznC.s:1963   .text.process_record_nocache:0000000000000000 process_record_nocache
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczLsznC.s:1982   .text.clear_keyboard_but_mods:0000000000000000 clear_keyboard_but_mods
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczLsznC.s:2024   .text.clear_keyboard:0000000000000000 clear_keyboard
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczLsznC.s:2044   .text.is_tap_key:0000000000000000 is_tap_key
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczLsznC.s:2136   .text.debug_event:0000000000000000 debug_event
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczLsznC.s:2178   .text.debug_record:0000000000000000 debug_record
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczLsznC.s:2222   .text.debug_action:0000000000000000 debug_action

UNDEFINED SYMBOLS
hand_swap_config
action_tapping_process
host_keyboard_leds
add_key
send_keyboard_report
del_key
command_proc
add_mods
host_system_send
host_consumer_send
del_mods
clear_weak_mods
is_oneshot_layer_active
clear_oneshot_layer_state
__tablejump2__
add_weak_mods
get_oneshot_layer_state
get_oneshot_layer
layer_on
layer_off
del_weak_mods
set_oneshot_mods
clear_oneshot_mods
mousekey_on
mousekey_send
mousekey_off
default_layer_and
default_layer_xor
default_layer_or
layer_and
layer_xor
layer_or
layer_invert
layer_move
layer_clear
set_oneshot_layer
action_get_macro
action_macro_play
action_function
store_or_get_action
layer_debug
default_layer_debug
clear_macro_mods
clear_keys
mousekey_clear
clear_mods
layer_switch_get_action
__do_clear_bss
