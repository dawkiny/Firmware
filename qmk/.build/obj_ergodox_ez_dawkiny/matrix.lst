   1               		.file	"matrix.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.init_cols,"ax",@progbits
  12               	init_cols:
  13               	.LFB138:
  14               		.file 1 "keyboards/ergodox/ez/matrix.c"
   1:keyboards/ergodox/ez/matrix.c **** /*
   2:keyboards/ergodox/ez/matrix.c **** 
   3:keyboards/ergodox/ez/matrix.c **** Note for ErgoDox EZ customizers: Here be dragons!
   4:keyboards/ergodox/ez/matrix.c **** This is not a file you want to be messing with.
   5:keyboards/ergodox/ez/matrix.c **** All of the interesting stuff for you is under keymaps/ :)
   6:keyboards/ergodox/ez/matrix.c **** Love, Erez
   7:keyboards/ergodox/ez/matrix.c **** 
   8:keyboards/ergodox/ez/matrix.c **** Copyright 2013 Oleg Kostyuk <cub.uanic@gmail.com>
   9:keyboards/ergodox/ez/matrix.c **** 
  10:keyboards/ergodox/ez/matrix.c **** This program is free software: you can redistribute it and/or modify
  11:keyboards/ergodox/ez/matrix.c **** it under the terms of the GNU General Public License as published by
  12:keyboards/ergodox/ez/matrix.c **** the Free Software Foundation, either version 2 of the License, or
  13:keyboards/ergodox/ez/matrix.c **** (at your option) any later version.
  14:keyboards/ergodox/ez/matrix.c **** 
  15:keyboards/ergodox/ez/matrix.c **** This program is distributed in the hope that it will be useful,
  16:keyboards/ergodox/ez/matrix.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  17:keyboards/ergodox/ez/matrix.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  18:keyboards/ergodox/ez/matrix.c **** GNU General Public License for more details.
  19:keyboards/ergodox/ez/matrix.c **** 
  20:keyboards/ergodox/ez/matrix.c **** You should have received a copy of the GNU General Public License
  21:keyboards/ergodox/ez/matrix.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  22:keyboards/ergodox/ez/matrix.c **** */
  23:keyboards/ergodox/ez/matrix.c **** 
  24:keyboards/ergodox/ez/matrix.c **** /*
  25:keyboards/ergodox/ez/matrix.c ****  * scan matrix
  26:keyboards/ergodox/ez/matrix.c ****  */
  27:keyboards/ergodox/ez/matrix.c **** #include <stdint.h>
  28:keyboards/ergodox/ez/matrix.c **** #include <stdbool.h>
  29:keyboards/ergodox/ez/matrix.c **** #include <avr/io.h>
  30:keyboards/ergodox/ez/matrix.c **** #include "wait.h"
  31:keyboards/ergodox/ez/matrix.c **** #include "action_layer.h"
  32:keyboards/ergodox/ez/matrix.c **** #include "print.h"
  33:keyboards/ergodox/ez/matrix.c **** #include "debug.h"
  34:keyboards/ergodox/ez/matrix.c **** #include "util.h"
  35:keyboards/ergodox/ez/matrix.c **** #include "matrix.h"
  36:keyboards/ergodox/ez/matrix.c **** #include "ez.h"
  37:keyboards/ergodox/ez/matrix.c **** #include "i2cmaster.h"
  38:keyboards/ergodox/ez/matrix.c **** #ifdef DEBUG_MATRIX_SCAN_RATE
  39:keyboards/ergodox/ez/matrix.c **** #include  "timer.h"
  40:keyboards/ergodox/ez/matrix.c **** #endif
  41:keyboards/ergodox/ez/matrix.c **** 
  42:keyboards/ergodox/ez/matrix.c **** /*
  43:keyboards/ergodox/ez/matrix.c ****  * This constant define not debouncing time in msecs, but amount of matrix
  44:keyboards/ergodox/ez/matrix.c ****  * scan loops which should be made to get stable debounced results.
  45:keyboards/ergodox/ez/matrix.c ****  *
  46:keyboards/ergodox/ez/matrix.c ****  * On Ergodox matrix scan rate is relatively low, because of slow I2C.
  47:keyboards/ergodox/ez/matrix.c ****  * Now it's only 317 scans/second, or about 3.15 msec/scan.
  48:keyboards/ergodox/ez/matrix.c ****  * According to Cherry specs, debouncing time is 5 msec.
  49:keyboards/ergodox/ez/matrix.c ****  *
  50:keyboards/ergodox/ez/matrix.c ****  * And so, there is no sense to have DEBOUNCE higher than 2.
  51:keyboards/ergodox/ez/matrix.c ****  */
  52:keyboards/ergodox/ez/matrix.c **** 
  53:keyboards/ergodox/ez/matrix.c **** #ifndef DEBOUNCE
  54:keyboards/ergodox/ez/matrix.c **** #   define DEBOUNCE	5
  55:keyboards/ergodox/ez/matrix.c **** #endif
  56:keyboards/ergodox/ez/matrix.c **** static uint8_t debouncing = DEBOUNCE;
  57:keyboards/ergodox/ez/matrix.c **** 
  58:keyboards/ergodox/ez/matrix.c **** /* matrix state(1:on, 0:off) */
  59:keyboards/ergodox/ez/matrix.c **** static matrix_row_t matrix[MATRIX_ROWS];
  60:keyboards/ergodox/ez/matrix.c **** static matrix_row_t matrix_debouncing[MATRIX_ROWS];
  61:keyboards/ergodox/ez/matrix.c **** 
  62:keyboards/ergodox/ez/matrix.c **** static matrix_row_t read_cols(uint8_t row);
  63:keyboards/ergodox/ez/matrix.c **** static void init_cols(void);
  64:keyboards/ergodox/ez/matrix.c **** static void unselect_rows(void);
  65:keyboards/ergodox/ez/matrix.c **** static void select_row(uint8_t row);
  66:keyboards/ergodox/ez/matrix.c **** 
  67:keyboards/ergodox/ez/matrix.c **** static uint8_t mcp23018_reset_loop;
  68:keyboards/ergodox/ez/matrix.c **** 
  69:keyboards/ergodox/ez/matrix.c **** #ifdef DEBUG_MATRIX_SCAN_RATE
  70:keyboards/ergodox/ez/matrix.c **** uint32_t matrix_timer;
  71:keyboards/ergodox/ez/matrix.c **** uint32_t matrix_scan_count;
  72:keyboards/ergodox/ez/matrix.c **** #endif
  73:keyboards/ergodox/ez/matrix.c **** 
  74:keyboards/ergodox/ez/matrix.c **** 
  75:keyboards/ergodox/ez/matrix.c **** __attribute__ ((weak))
  76:keyboards/ergodox/ez/matrix.c **** void matrix_init_user(void) {}
  77:keyboards/ergodox/ez/matrix.c **** 
  78:keyboards/ergodox/ez/matrix.c **** __attribute__ ((weak))
  79:keyboards/ergodox/ez/matrix.c **** void matrix_scan_user(void) {}
  80:keyboards/ergodox/ez/matrix.c **** 
  81:keyboards/ergodox/ez/matrix.c **** __attribute__ ((weak))
  82:keyboards/ergodox/ez/matrix.c **** void matrix_init_kb(void) {
  83:keyboards/ergodox/ez/matrix.c ****   matrix_init_user();
  84:keyboards/ergodox/ez/matrix.c **** }
  85:keyboards/ergodox/ez/matrix.c **** 
  86:keyboards/ergodox/ez/matrix.c **** __attribute__ ((weak))
  87:keyboards/ergodox/ez/matrix.c **** void matrix_scan_kb(void) {
  88:keyboards/ergodox/ez/matrix.c ****   matrix_scan_user();
  89:keyboards/ergodox/ez/matrix.c **** }
  90:keyboards/ergodox/ez/matrix.c **** 
  91:keyboards/ergodox/ez/matrix.c **** inline
  92:keyboards/ergodox/ez/matrix.c **** uint8_t matrix_rows(void)
  93:keyboards/ergodox/ez/matrix.c **** {
  94:keyboards/ergodox/ez/matrix.c ****     return MATRIX_ROWS;
  95:keyboards/ergodox/ez/matrix.c **** }
  96:keyboards/ergodox/ez/matrix.c **** 
  97:keyboards/ergodox/ez/matrix.c **** inline
  98:keyboards/ergodox/ez/matrix.c **** uint8_t matrix_cols(void)
  99:keyboards/ergodox/ez/matrix.c **** {
 100:keyboards/ergodox/ez/matrix.c ****     return MATRIX_COLS;
 101:keyboards/ergodox/ez/matrix.c **** }
 102:keyboards/ergodox/ez/matrix.c **** 
 103:keyboards/ergodox/ez/matrix.c **** void matrix_init(void)
 104:keyboards/ergodox/ez/matrix.c **** {
 105:keyboards/ergodox/ez/matrix.c ****     // initialize row and col
 106:keyboards/ergodox/ez/matrix.c **** 
 107:keyboards/ergodox/ez/matrix.c ****     mcp23018_status = init_mcp23018();
 108:keyboards/ergodox/ez/matrix.c **** 
 109:keyboards/ergodox/ez/matrix.c **** 
 110:keyboards/ergodox/ez/matrix.c ****     unselect_rows();
 111:keyboards/ergodox/ez/matrix.c ****     init_cols();
 112:keyboards/ergodox/ez/matrix.c **** 
 113:keyboards/ergodox/ez/matrix.c ****     // initialize matrix state: all keys off
 114:keyboards/ergodox/ez/matrix.c ****     for (uint8_t i=0; i < MATRIX_ROWS; i++) {
 115:keyboards/ergodox/ez/matrix.c ****         matrix[i] = 0;
 116:keyboards/ergodox/ez/matrix.c ****         matrix_debouncing[i] = 0;
 117:keyboards/ergodox/ez/matrix.c ****     }
 118:keyboards/ergodox/ez/matrix.c **** 
 119:keyboards/ergodox/ez/matrix.c **** #ifdef DEBUG_MATRIX_SCAN_RATE
 120:keyboards/ergodox/ez/matrix.c ****     matrix_timer = timer_read32();
 121:keyboards/ergodox/ez/matrix.c ****     matrix_scan_count = 0;
 122:keyboards/ergodox/ez/matrix.c **** #endif
 123:keyboards/ergodox/ez/matrix.c **** 
 124:keyboards/ergodox/ez/matrix.c ****     matrix_init_kb();
 125:keyboards/ergodox/ez/matrix.c **** 
 126:keyboards/ergodox/ez/matrix.c **** }
 127:keyboards/ergodox/ez/matrix.c **** 
 128:keyboards/ergodox/ez/matrix.c **** void matrix_power_up(void) {
 129:keyboards/ergodox/ez/matrix.c ****     mcp23018_status = init_mcp23018();
 130:keyboards/ergodox/ez/matrix.c **** 
 131:keyboards/ergodox/ez/matrix.c ****     unselect_rows();
 132:keyboards/ergodox/ez/matrix.c ****     init_cols();
 133:keyboards/ergodox/ez/matrix.c **** 
 134:keyboards/ergodox/ez/matrix.c ****     // initialize matrix state: all keys off
 135:keyboards/ergodox/ez/matrix.c ****     for (uint8_t i=0; i < MATRIX_ROWS; i++) {
 136:keyboards/ergodox/ez/matrix.c ****         matrix[i] = 0;
 137:keyboards/ergodox/ez/matrix.c ****         matrix_debouncing[i] = 0;
 138:keyboards/ergodox/ez/matrix.c ****     }
 139:keyboards/ergodox/ez/matrix.c **** 
 140:keyboards/ergodox/ez/matrix.c **** #ifdef DEBUG_MATRIX_SCAN_RATE
 141:keyboards/ergodox/ez/matrix.c ****     matrix_timer = timer_read32();
 142:keyboards/ergodox/ez/matrix.c ****     matrix_scan_count = 0;
 143:keyboards/ergodox/ez/matrix.c **** #endif
 144:keyboards/ergodox/ez/matrix.c **** 
 145:keyboards/ergodox/ez/matrix.c **** }
 146:keyboards/ergodox/ez/matrix.c **** 
 147:keyboards/ergodox/ez/matrix.c **** uint8_t matrix_scan(void)
 148:keyboards/ergodox/ez/matrix.c **** {
 149:keyboards/ergodox/ez/matrix.c ****     if (mcp23018_status) { // if there was an error
 150:keyboards/ergodox/ez/matrix.c ****         if (++mcp23018_reset_loop == 0) {
 151:keyboards/ergodox/ez/matrix.c ****             // since mcp23018_reset_loop is 8 bit - we'll try to reset once in 255 matrix scans
 152:keyboards/ergodox/ez/matrix.c ****             // this will be approx bit more frequent than once per second
 153:keyboards/ergodox/ez/matrix.c ****             print("trying to reset mcp23018\n");
 154:keyboards/ergodox/ez/matrix.c ****             mcp23018_status = init_mcp23018();
 155:keyboards/ergodox/ez/matrix.c ****             if (mcp23018_status) {
 156:keyboards/ergodox/ez/matrix.c ****                 print("left side not responding\n");
 157:keyboards/ergodox/ez/matrix.c ****             } else {
 158:keyboards/ergodox/ez/matrix.c ****                 print("left side attached\n");
 159:keyboards/ergodox/ez/matrix.c ****                 ergodox_blink_all_leds();
 160:keyboards/ergodox/ez/matrix.c ****             }
 161:keyboards/ergodox/ez/matrix.c ****         }
 162:keyboards/ergodox/ez/matrix.c ****     }
 163:keyboards/ergodox/ez/matrix.c **** 
 164:keyboards/ergodox/ez/matrix.c **** #ifdef DEBUG_MATRIX_SCAN_RATE
 165:keyboards/ergodox/ez/matrix.c ****     matrix_scan_count++;
 166:keyboards/ergodox/ez/matrix.c **** 
 167:keyboards/ergodox/ez/matrix.c ****     uint32_t timer_now = timer_read32();
 168:keyboards/ergodox/ez/matrix.c ****     if (TIMER_DIFF_32(timer_now, matrix_timer)>1000) {
 169:keyboards/ergodox/ez/matrix.c ****         print("matrix scan frequency: ");
 170:keyboards/ergodox/ez/matrix.c ****         pdec(matrix_scan_count);
 171:keyboards/ergodox/ez/matrix.c ****         print("\n");
 172:keyboards/ergodox/ez/matrix.c **** 
 173:keyboards/ergodox/ez/matrix.c ****         matrix_timer = timer_now;
 174:keyboards/ergodox/ez/matrix.c ****         matrix_scan_count = 0;
 175:keyboards/ergodox/ez/matrix.c ****     }
 176:keyboards/ergodox/ez/matrix.c **** #endif
 177:keyboards/ergodox/ez/matrix.c **** 
 178:keyboards/ergodox/ez/matrix.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 179:keyboards/ergodox/ez/matrix.c ****         select_row(i);
 180:keyboards/ergodox/ez/matrix.c ****         wait_us(30);  // without this wait read unstable value.
 181:keyboards/ergodox/ez/matrix.c ****         matrix_row_t cols = read_cols(i);
 182:keyboards/ergodox/ez/matrix.c ****         if (matrix_debouncing[i] != cols) {
 183:keyboards/ergodox/ez/matrix.c ****             matrix_debouncing[i] = cols;
 184:keyboards/ergodox/ez/matrix.c ****             if (debouncing) {
 185:keyboards/ergodox/ez/matrix.c ****                 debug("bounce!: "); debug_hex(debouncing); debug("\n");
 186:keyboards/ergodox/ez/matrix.c ****             }
 187:keyboards/ergodox/ez/matrix.c ****             debouncing = DEBOUNCE;
 188:keyboards/ergodox/ez/matrix.c ****         }
 189:keyboards/ergodox/ez/matrix.c ****         unselect_rows();
 190:keyboards/ergodox/ez/matrix.c ****     }
 191:keyboards/ergodox/ez/matrix.c **** 
 192:keyboards/ergodox/ez/matrix.c ****     if (debouncing) {
 193:keyboards/ergodox/ez/matrix.c ****         if (--debouncing) {
 194:keyboards/ergodox/ez/matrix.c ****             wait_us(1);
 195:keyboards/ergodox/ez/matrix.c ****             // this should be wait_ms(1) but has been left as-is at EZ's request
 196:keyboards/ergodox/ez/matrix.c ****         } else {
 197:keyboards/ergodox/ez/matrix.c ****             for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 198:keyboards/ergodox/ez/matrix.c ****                 matrix[i] = matrix_debouncing[i];
 199:keyboards/ergodox/ez/matrix.c ****             }
 200:keyboards/ergodox/ez/matrix.c ****         }
 201:keyboards/ergodox/ez/matrix.c ****     }
 202:keyboards/ergodox/ez/matrix.c **** 
 203:keyboards/ergodox/ez/matrix.c ****     matrix_scan_quantum();
 204:keyboards/ergodox/ez/matrix.c **** 
 205:keyboards/ergodox/ez/matrix.c ****     return 1;
 206:keyboards/ergodox/ez/matrix.c **** }
 207:keyboards/ergodox/ez/matrix.c **** 
 208:keyboards/ergodox/ez/matrix.c **** bool matrix_is_modified(void)
 209:keyboards/ergodox/ez/matrix.c **** {
 210:keyboards/ergodox/ez/matrix.c ****     if (debouncing) return false;
 211:keyboards/ergodox/ez/matrix.c ****     return true;
 212:keyboards/ergodox/ez/matrix.c **** }
 213:keyboards/ergodox/ez/matrix.c **** 
 214:keyboards/ergodox/ez/matrix.c **** inline
 215:keyboards/ergodox/ez/matrix.c **** bool matrix_is_on(uint8_t row, uint8_t col)
 216:keyboards/ergodox/ez/matrix.c **** {
 217:keyboards/ergodox/ez/matrix.c ****     return (matrix[row] & ((matrix_row_t)1<<col));
 218:keyboards/ergodox/ez/matrix.c **** }
 219:keyboards/ergodox/ez/matrix.c **** 
 220:keyboards/ergodox/ez/matrix.c **** inline
 221:keyboards/ergodox/ez/matrix.c **** matrix_row_t matrix_get_row(uint8_t row)
 222:keyboards/ergodox/ez/matrix.c **** {
 223:keyboards/ergodox/ez/matrix.c ****     return matrix[row];
 224:keyboards/ergodox/ez/matrix.c **** }
 225:keyboards/ergodox/ez/matrix.c **** 
 226:keyboards/ergodox/ez/matrix.c **** void matrix_print(void)
 227:keyboards/ergodox/ez/matrix.c **** {
 228:keyboards/ergodox/ez/matrix.c ****     print("\nr/c 0123456789ABCDEF\n");
 229:keyboards/ergodox/ez/matrix.c ****     for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 230:keyboards/ergodox/ez/matrix.c ****         phex(row); print(": ");
 231:keyboards/ergodox/ez/matrix.c ****         pbin_reverse16(matrix_get_row(row));
 232:keyboards/ergodox/ez/matrix.c ****         print("\n");
 233:keyboards/ergodox/ez/matrix.c ****     }
 234:keyboards/ergodox/ez/matrix.c **** }
 235:keyboards/ergodox/ez/matrix.c **** 
 236:keyboards/ergodox/ez/matrix.c **** uint8_t matrix_key_count(void)
 237:keyboards/ergodox/ez/matrix.c **** {
 238:keyboards/ergodox/ez/matrix.c ****     uint8_t count = 0;
 239:keyboards/ergodox/ez/matrix.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 240:keyboards/ergodox/ez/matrix.c ****         count += bitpop16(matrix[i]);
 241:keyboards/ergodox/ez/matrix.c ****     }
 242:keyboards/ergodox/ez/matrix.c ****     return count;
 243:keyboards/ergodox/ez/matrix.c **** }
 244:keyboards/ergodox/ez/matrix.c **** 
 245:keyboards/ergodox/ez/matrix.c **** /* Column pin configuration
 246:keyboards/ergodox/ez/matrix.c ****  *
 247:keyboards/ergodox/ez/matrix.c ****  * Teensy
 248:keyboards/ergodox/ez/matrix.c ****  * col: 0   1   2   3   4   5
 249:keyboards/ergodox/ez/matrix.c ****  * pin: F0  F1  F4  F5  F6  F7
 250:keyboards/ergodox/ez/matrix.c ****  *
 251:keyboards/ergodox/ez/matrix.c ****  * MCP23018
 252:keyboards/ergodox/ez/matrix.c ****  * col: 0   1   2   3   4   5
 253:keyboards/ergodox/ez/matrix.c ****  * pin: B5  B4  B3  B2  B1  B0
 254:keyboards/ergodox/ez/matrix.c ****  */
 255:keyboards/ergodox/ez/matrix.c **** static void  init_cols(void)
 256:keyboards/ergodox/ez/matrix.c **** {
  15               		.loc 1 256 1 view -0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
 257:keyboards/ergodox/ez/matrix.c ****     // init on mcp23018
 258:keyboards/ergodox/ez/matrix.c ****     // not needed, already done as part of init_mcp23018()
 259:keyboards/ergodox/ez/matrix.c **** 
 260:keyboards/ergodox/ez/matrix.c ****     // init on teensy
 261:keyboards/ergodox/ez/matrix.c ****     // Input with pull-up(DDR:0, PORT:1)
 262:keyboards/ergodox/ez/matrix.c ****     DDRF  &= ~(1<<7 | 1<<6 | 1<<5 | 1<<4 | 1<<1 | 1<<0);
  21               		.loc 1 262 5 view .LVU1
  22               		.loc 1 262 11 is_stmt 0 view .LVU2
  23 0000 80B3      		in r24,0x10
  24 0002 8C70      		andi r24,lo8(12)
  25 0004 80BB      		out 0x10,r24
 263:keyboards/ergodox/ez/matrix.c ****     PORTF |=  (1<<7 | 1<<6 | 1<<5 | 1<<4 | 1<<1 | 1<<0);
  26               		.loc 1 263 5 is_stmt 1 view .LVU3
  27               		.loc 1 263 11 is_stmt 0 view .LVU4
  28 0006 81B3      		in r24,0x11
  29 0008 836F      		ori r24,lo8(-13)
  30 000a 81BB      		out 0x11,r24
  31               	/* epilogue start */
 264:keyboards/ergodox/ez/matrix.c **** }
  32               		.loc 1 264 1 view .LVU5
  33 000c 0895      		ret
  34               		.cfi_endproc
  35               	.LFE138:
  37               		.section	.text.unselect_rows,"ax",@progbits
  39               	unselect_rows:
  40               	.LFB140:
 265:keyboards/ergodox/ez/matrix.c **** 
 266:keyboards/ergodox/ez/matrix.c **** static matrix_row_t read_cols(uint8_t row)
 267:keyboards/ergodox/ez/matrix.c **** {
 268:keyboards/ergodox/ez/matrix.c ****     if (row < 7) {
 269:keyboards/ergodox/ez/matrix.c ****         if (mcp23018_status) { // if there was an error
 270:keyboards/ergodox/ez/matrix.c ****             return 0;
 271:keyboards/ergodox/ez/matrix.c ****         } else {
 272:keyboards/ergodox/ez/matrix.c ****             uint8_t data = 0;
 273:keyboards/ergodox/ez/matrix.c ****             mcp23018_status = i2c_start(I2C_ADDR_WRITE);    if (mcp23018_status) goto out;
 274:keyboards/ergodox/ez/matrix.c ****             mcp23018_status = i2c_write(GPIOB);             if (mcp23018_status) goto out;
 275:keyboards/ergodox/ez/matrix.c ****             mcp23018_status = i2c_start(I2C_ADDR_READ);     if (mcp23018_status) goto out;
 276:keyboards/ergodox/ez/matrix.c ****             data = i2c_readNak();
 277:keyboards/ergodox/ez/matrix.c ****             data = ~data;
 278:keyboards/ergodox/ez/matrix.c ****         out:
 279:keyboards/ergodox/ez/matrix.c ****             i2c_stop();
 280:keyboards/ergodox/ez/matrix.c ****             return data;
 281:keyboards/ergodox/ez/matrix.c ****         }
 282:keyboards/ergodox/ez/matrix.c ****     } else {
 283:keyboards/ergodox/ez/matrix.c ****         // read from teensy
 284:keyboards/ergodox/ez/matrix.c ****         return
 285:keyboards/ergodox/ez/matrix.c ****             (PINF&(1<<0) ? 0 : (1<<0)) |
 286:keyboards/ergodox/ez/matrix.c ****             (PINF&(1<<1) ? 0 : (1<<1)) |
 287:keyboards/ergodox/ez/matrix.c ****             (PINF&(1<<4) ? 0 : (1<<2)) |
 288:keyboards/ergodox/ez/matrix.c ****             (PINF&(1<<5) ? 0 : (1<<3)) |
 289:keyboards/ergodox/ez/matrix.c ****             (PINF&(1<<6) ? 0 : (1<<4)) |
 290:keyboards/ergodox/ez/matrix.c ****             (PINF&(1<<7) ? 0 : (1<<5)) ;
 291:keyboards/ergodox/ez/matrix.c ****     }
 292:keyboards/ergodox/ez/matrix.c **** }
 293:keyboards/ergodox/ez/matrix.c **** 
 294:keyboards/ergodox/ez/matrix.c **** /* Row pin configuration
 295:keyboards/ergodox/ez/matrix.c ****  *
 296:keyboards/ergodox/ez/matrix.c ****  * Teensy
 297:keyboards/ergodox/ez/matrix.c ****  * row: 7   8   9   10  11  12  13
 298:keyboards/ergodox/ez/matrix.c ****  * pin: B0  B1  B2  B3  D2  D3  C6
 299:keyboards/ergodox/ez/matrix.c ****  *
 300:keyboards/ergodox/ez/matrix.c ****  * MCP23018
 301:keyboards/ergodox/ez/matrix.c ****  * row: 0   1   2   3   4   5   6
 302:keyboards/ergodox/ez/matrix.c ****  * pin: A0  A1  A2  A3  A4  A5  A6
 303:keyboards/ergodox/ez/matrix.c ****  */
 304:keyboards/ergodox/ez/matrix.c **** static void unselect_rows(void)
 305:keyboards/ergodox/ez/matrix.c **** {
  41               		.loc 1 305 1 is_stmt 1 view -0
  42               		.cfi_startproc
  43               	/* prologue: function */
  44               	/* frame size = 0 */
  45               	/* stack size = 0 */
  46               	.L__stack_usage = 0
 306:keyboards/ergodox/ez/matrix.c ****     // unselect on mcp23018
 307:keyboards/ergodox/ez/matrix.c ****     if (mcp23018_status) { // if there was an error
  47               		.loc 1 307 5 view .LVU7
  48               		.loc 1 307 8 is_stmt 0 view .LVU8
  49 0000 8091 0000 		lds r24,mcp23018_status
  50 0004 8111      		cpse r24,__zero_reg__
  51 0006 00C0      		rjmp .L3
 308:keyboards/ergodox/ez/matrix.c ****         // do nothing
 309:keyboards/ergodox/ez/matrix.c ****     } else {
 310:keyboards/ergodox/ez/matrix.c ****         // set all rows hi-Z : 1
 311:keyboards/ergodox/ez/matrix.c ****         mcp23018_status = i2c_start(I2C_ADDR_WRITE);    if (mcp23018_status) goto out;
  52               		.loc 1 311 9 is_stmt 1 view .LVU9
  53               		.loc 1 311 27 is_stmt 0 view .LVU10
  54 0008 80E4      		ldi r24,lo8(64)
  55 000a 0E94 0000 		call i2c_start
  56               	.LVL0:
  57               		.loc 1 311 25 view .LVU11
  58 000e 8093 0000 		sts mcp23018_status,r24
  59               		.loc 1 311 57 is_stmt 1 view .LVU12
  60               		.loc 1 311 60 is_stmt 0 view .LVU13
  61 0012 8111      		cpse r24,__zero_reg__
  62 0014 00C0      		rjmp .L5
 312:keyboards/ergodox/ez/matrix.c ****         mcp23018_status = i2c_write(GPIOA);             if (mcp23018_status) goto out;
  63               		.loc 1 312 9 is_stmt 1 view .LVU14
  64               		.loc 1 312 27 is_stmt 0 view .LVU15
  65 0016 82E1      		ldi r24,lo8(18)
  66 0018 0E94 0000 		call i2c_write
  67               	.LVL1:
  68               		.loc 1 312 25 view .LVU16
  69 001c 8093 0000 		sts mcp23018_status,r24
  70               		.loc 1 312 57 is_stmt 1 view .LVU17
  71               		.loc 1 312 60 is_stmt 0 view .LVU18
  72 0020 8111      		cpse r24,__zero_reg__
  73 0022 00C0      		rjmp .L5
 313:keyboards/ergodox/ez/matrix.c ****         mcp23018_status = i2c_write( 0xFF
  74               		.loc 1 313 9 is_stmt 1 view .LVU19
  75               		.loc 1 313 27 is_stmt 0 view .LVU20
  76 0024 8FEF      		ldi r24,lo8(-1)
  77 0026 0E94 0000 		call i2c_write
  78               	.LVL2:
  79               		.loc 1 313 25 view .LVU21
  80 002a 8093 0000 		sts mcp23018_status,r24
 314:keyboards/ergodox/ez/matrix.c ****                               & ~(0<<7)
 315:keyboards/ergodox/ez/matrix.c ****                           );                            if (mcp23018_status) goto out;
  81               		.loc 1 315 57 is_stmt 1 view .LVU22
  82               	.L5:
 316:keyboards/ergodox/ez/matrix.c ****     out:
 317:keyboards/ergodox/ez/matrix.c ****         i2c_stop();
  83               		.loc 1 317 9 view .LVU23
  84 002e 0E94 0000 		call i2c_stop
  85               	.LVL3:
  86               	.L3:
 318:keyboards/ergodox/ez/matrix.c ****     }
 319:keyboards/ergodox/ez/matrix.c **** 
 320:keyboards/ergodox/ez/matrix.c ****     // unselect on teensy
 321:keyboards/ergodox/ez/matrix.c ****     // Hi-Z(DDR:0, PORT:0) to unselect
 322:keyboards/ergodox/ez/matrix.c ****     DDRB  &= ~(1<<0 | 1<<1 | 1<<2 | 1<<3);
  87               		.loc 1 322 5 view .LVU24
  88               		.loc 1 322 11 is_stmt 0 view .LVU25
  89 0032 84B1      		in r24,0x4
  90 0034 807F      		andi r24,lo8(-16)
  91 0036 84B9      		out 0x4,r24
 323:keyboards/ergodox/ez/matrix.c ****     PORTB &= ~(1<<0 | 1<<1 | 1<<2 | 1<<3);
  92               		.loc 1 323 5 is_stmt 1 view .LVU26
  93               		.loc 1 323 11 is_stmt 0 view .LVU27
  94 0038 85B1      		in r24,0x5
  95 003a 807F      		andi r24,lo8(-16)
  96 003c 85B9      		out 0x5,r24
 324:keyboards/ergodox/ez/matrix.c ****     DDRD  &= ~(1<<2 | 1<<3);
  97               		.loc 1 324 5 is_stmt 1 view .LVU28
  98               		.loc 1 324 11 is_stmt 0 view .LVU29
  99 003e 8AB1      		in r24,0xa
 100 0040 837F      		andi r24,lo8(-13)
 101 0042 8AB9      		out 0xa,r24
 325:keyboards/ergodox/ez/matrix.c ****     PORTD &= ~(1<<2 | 1<<3);
 102               		.loc 1 325 5 is_stmt 1 view .LVU30
 103               		.loc 1 325 11 is_stmt 0 view .LVU31
 104 0044 8BB1      		in r24,0xb
 105 0046 837F      		andi r24,lo8(-13)
 106 0048 8BB9      		out 0xb,r24
 326:keyboards/ergodox/ez/matrix.c ****     DDRC  &= ~(1<<6);
 107               		.loc 1 326 5 is_stmt 1 view .LVU32
 108               		.loc 1 326 11 is_stmt 0 view .LVU33
 109 004a 3E98      		cbi 0x7,6
 327:keyboards/ergodox/ez/matrix.c ****     PORTC &= ~(1<<6);
 110               		.loc 1 327 5 is_stmt 1 view .LVU34
 111               		.loc 1 327 11 is_stmt 0 view .LVU35
 112 004c 4698      		cbi 0x8,6
 113               	/* epilogue start */
 328:keyboards/ergodox/ez/matrix.c **** }
 114               		.loc 1 328 1 view .LVU36
 115 004e 0895      		ret
 116               		.cfi_endproc
 117               	.LFE140:
 119               		.section	.text.matrix_init_user,"ax",@progbits
 120               		.weak	matrix_init_user
 122               	matrix_init_user:
 123               	.LFB124:
  76:keyboards/ergodox/ez/matrix.c **** 
 124               		.loc 1 76 29 is_stmt 1 view -0
 125               		.cfi_startproc
 126               	/* prologue: function */
 127               	/* frame size = 0 */
 128               	/* stack size = 0 */
 129               	.L__stack_usage = 0
  76:keyboards/ergodox/ez/matrix.c **** 
 130               		.loc 1 76 30 view .LVU38
 131               	/* epilogue start */
  76:keyboards/ergodox/ez/matrix.c **** 
 132               		.loc 1 76 1 is_stmt 0 view .LVU39
 133 0000 0895      		ret
 134               		.cfi_endproc
 135               	.LFE124:
 137               		.set	matrix_init_user.localalias.0,matrix_init_user
 138               		.section	.text.matrix_scan_user,"ax",@progbits
 139               		.weak	matrix_scan_user
 141               	matrix_scan_user:
 142               	.LFB143:
 143               		.cfi_startproc
 144               	/* prologue: function */
 145               	/* frame size = 0 */
 146               	/* stack size = 0 */
 147               	.L__stack_usage = 0
 148               	/* epilogue start */
 149 0000 0895      		ret
 150               		.cfi_endproc
 151               	.LFE143:
 153               		.section	.text.matrix_init_kb,"ax",@progbits
 154               		.weak	matrix_init_kb
 156               	matrix_init_kb:
 157               	.LFB126:
  82:keyboards/ergodox/ez/matrix.c ****   matrix_init_user();
 158               		.loc 1 82 27 is_stmt 1 view -0
 159               		.cfi_startproc
 160               	/* prologue: function */
 161               	/* frame size = 0 */
 162               	/* stack size = 0 */
 163               	.L__stack_usage = 0
  83:keyboards/ergodox/ez/matrix.c **** }
 164               		.loc 1 83 3 view .LVU41
 165 0000 0C94 0000 		jmp matrix_init_user
 166               	.LVL4:
 167               		.cfi_endproc
 168               	.LFE126:
 170               		.section	.text.matrix_scan_kb,"ax",@progbits
 171               		.weak	matrix_scan_kb
 173               	matrix_scan_kb:
 174               	.LFB127:
  87:keyboards/ergodox/ez/matrix.c ****   matrix_scan_user();
 175               		.loc 1 87 27 view -0
 176               		.cfi_startproc
 177               	/* prologue: function */
 178               	/* frame size = 0 */
 179               	/* stack size = 0 */
 180               	.L__stack_usage = 0
  88:keyboards/ergodox/ez/matrix.c **** }
 181               		.loc 1 88 3 view .LVU43
 182 0000 0C94 0000 		jmp matrix_scan_user
 183               	.LVL5:
 184               		.cfi_endproc
 185               	.LFE127:
 187               		.section	.text.matrix_rows,"ax",@progbits
 188               	.global	matrix_rows
 190               	matrix_rows:
 191               	.LFB128:
  93:keyboards/ergodox/ez/matrix.c ****     return MATRIX_ROWS;
 192               		.loc 1 93 1 view -0
 193               		.cfi_startproc
 194               	/* prologue: function */
 195               	/* frame size = 0 */
 196               	/* stack size = 0 */
 197               	.L__stack_usage = 0
  94:keyboards/ergodox/ez/matrix.c **** }
 198               		.loc 1 94 5 view .LVU45
  95:keyboards/ergodox/ez/matrix.c **** 
 199               		.loc 1 95 1 is_stmt 0 view .LVU46
 200 0000 8EE0      		ldi r24,lo8(14)
 201               	/* epilogue start */
 202 0002 0895      		ret
 203               		.cfi_endproc
 204               	.LFE128:
 206               		.section	.text.matrix_cols,"ax",@progbits
 207               	.global	matrix_cols
 209               	matrix_cols:
 210               	.LFB129:
  99:keyboards/ergodox/ez/matrix.c ****     return MATRIX_COLS;
 211               		.loc 1 99 1 is_stmt 1 view -0
 212               		.cfi_startproc
 213               	/* prologue: function */
 214               	/* frame size = 0 */
 215               	/* stack size = 0 */
 216               	.L__stack_usage = 0
 100:keyboards/ergodox/ez/matrix.c **** }
 217               		.loc 1 100 5 view .LVU48
 101:keyboards/ergodox/ez/matrix.c **** 
 218               		.loc 1 101 1 is_stmt 0 view .LVU49
 219 0000 86E0      		ldi r24,lo8(6)
 220               	/* epilogue start */
 221 0002 0895      		ret
 222               		.cfi_endproc
 223               	.LFE129:
 225               		.section	.text.matrix_init,"ax",@progbits
 226               	.global	matrix_init
 228               	matrix_init:
 229               	.LFB130:
 104:keyboards/ergodox/ez/matrix.c ****     // initialize row and col
 230               		.loc 1 104 1 is_stmt 1 view -0
 231               		.cfi_startproc
 232               	/* prologue: function */
 233               	/* frame size = 0 */
 234               	/* stack size = 0 */
 235               	.L__stack_usage = 0
 107:keyboards/ergodox/ez/matrix.c **** 
 236               		.loc 1 107 5 view .LVU51
 107:keyboards/ergodox/ez/matrix.c **** 
 237               		.loc 1 107 23 is_stmt 0 view .LVU52
 238 0000 0E94 0000 		call init_mcp23018
 239               	.LVL6:
 107:keyboards/ergodox/ez/matrix.c **** 
 240               		.loc 1 107 21 view .LVU53
 241 0004 8093 0000 		sts mcp23018_status,r24
 110:keyboards/ergodox/ez/matrix.c ****     init_cols();
 242               		.loc 1 110 5 is_stmt 1 view .LVU54
 243 0008 0E94 0000 		call unselect_rows
 244               	.LVL7:
 111:keyboards/ergodox/ez/matrix.c **** 
 245               		.loc 1 111 5 view .LVU55
 246 000c 0E94 0000 		call init_cols
 247               	.LVL8:
 114:keyboards/ergodox/ez/matrix.c ****         matrix[i] = 0;
 248               		.loc 1 114 5 view .LVU56
 249               	.LBB9:
 114:keyboards/ergodox/ez/matrix.c ****         matrix[i] = 0;
 250               		.loc 1 114 10 view .LVU57
 114:keyboards/ergodox/ez/matrix.c ****         matrix[i] = 0;
 251               		.loc 1 114 10 is_stmt 0 view .LVU58
 252 0010 E0E0      		ldi r30,lo8(matrix)
 253 0012 F0E0      		ldi r31,hi8(matrix)
 254 0014 A0E0      		ldi r26,lo8(matrix_debouncing)
 255 0016 B0E0      		ldi r27,hi8(matrix_debouncing)
 256               	.LVL9:
 257               	.L14:
 115:keyboards/ergodox/ez/matrix.c ****         matrix_debouncing[i] = 0;
 258               		.loc 1 115 9 is_stmt 1 discriminator 3 view .LVU59
 115:keyboards/ergodox/ez/matrix.c ****         matrix_debouncing[i] = 0;
 259               		.loc 1 115 19 is_stmt 0 discriminator 3 view .LVU60
 260 0018 1192      		st Z+,__zero_reg__
 261               	.LVL10:
 116:keyboards/ergodox/ez/matrix.c ****     }
 262               		.loc 1 116 9 is_stmt 1 discriminator 3 view .LVU61
 116:keyboards/ergodox/ez/matrix.c ****     }
 263               		.loc 1 116 30 is_stmt 0 discriminator 3 view .LVU62
 264 001a 1D92      		st X+,__zero_reg__
 265               	.LVL11:
 114:keyboards/ergodox/ez/matrix.c ****         matrix[i] = 0;
 266               		.loc 1 114 5 discriminator 3 view .LVU63
 267 001c 80E0      		ldi r24,hi8(matrix+14)
 268 001e E030      		cpi r30,lo8(matrix+14)
 269 0020 F807      		cpc r31,r24
 270 0022 01F4      		brne .L14
 271               	.LBE9:
 124:keyboards/ergodox/ez/matrix.c **** 
 272               		.loc 1 124 5 is_stmt 1 view .LVU64
 273 0024 0C94 0000 		jmp matrix_init_kb
 274               	.LVL12:
 124:keyboards/ergodox/ez/matrix.c **** 
 275               		.loc 1 124 5 is_stmt 0 view .LVU65
 276               		.cfi_endproc
 277               	.LFE130:
 279               		.section	.text.matrix_power_up,"ax",@progbits
 280               	.global	matrix_power_up
 282               	matrix_power_up:
 283               	.LFB131:
 128:keyboards/ergodox/ez/matrix.c ****     mcp23018_status = init_mcp23018();
 284               		.loc 1 128 28 is_stmt 1 view -0
 285               		.cfi_startproc
 286               	/* prologue: function */
 287               	/* frame size = 0 */
 288               	/* stack size = 0 */
 289               	.L__stack_usage = 0
 129:keyboards/ergodox/ez/matrix.c **** 
 290               		.loc 1 129 5 view .LVU67
 129:keyboards/ergodox/ez/matrix.c **** 
 291               		.loc 1 129 23 is_stmt 0 view .LVU68
 292 0000 0E94 0000 		call init_mcp23018
 293               	.LVL13:
 129:keyboards/ergodox/ez/matrix.c **** 
 294               		.loc 1 129 21 view .LVU69
 295 0004 8093 0000 		sts mcp23018_status,r24
 131:keyboards/ergodox/ez/matrix.c ****     init_cols();
 296               		.loc 1 131 5 is_stmt 1 view .LVU70
 297 0008 0E94 0000 		call unselect_rows
 298               	.LVL14:
 132:keyboards/ergodox/ez/matrix.c **** 
 299               		.loc 1 132 5 view .LVU71
 300 000c 0E94 0000 		call init_cols
 301               	.LVL15:
 135:keyboards/ergodox/ez/matrix.c ****         matrix[i] = 0;
 302               		.loc 1 135 5 view .LVU72
 303               	.LBB10:
 135:keyboards/ergodox/ez/matrix.c ****         matrix[i] = 0;
 304               		.loc 1 135 10 view .LVU73
 135:keyboards/ergodox/ez/matrix.c ****         matrix[i] = 0;
 305               		.loc 1 135 10 is_stmt 0 view .LVU74
 306 0010 E0E0      		ldi r30,lo8(matrix)
 307 0012 F0E0      		ldi r31,hi8(matrix)
 308 0014 A0E0      		ldi r26,lo8(matrix_debouncing)
 309 0016 B0E0      		ldi r27,hi8(matrix_debouncing)
 310               	.LVL16:
 311               	.L17:
 136:keyboards/ergodox/ez/matrix.c ****         matrix_debouncing[i] = 0;
 312               		.loc 1 136 9 is_stmt 1 discriminator 3 view .LVU75
 136:keyboards/ergodox/ez/matrix.c ****         matrix_debouncing[i] = 0;
 313               		.loc 1 136 19 is_stmt 0 discriminator 3 view .LVU76
 314 0018 1192      		st Z+,__zero_reg__
 315               	.LVL17:
 137:keyboards/ergodox/ez/matrix.c ****     }
 316               		.loc 1 137 9 is_stmt 1 discriminator 3 view .LVU77
 137:keyboards/ergodox/ez/matrix.c ****     }
 317               		.loc 1 137 30 is_stmt 0 discriminator 3 view .LVU78
 318 001a 1D92      		st X+,__zero_reg__
 319               	.LVL18:
 135:keyboards/ergodox/ez/matrix.c ****         matrix[i] = 0;
 320               		.loc 1 135 5 discriminator 3 view .LVU79
 321 001c 80E0      		ldi r24,hi8(matrix+14)
 322 001e E030      		cpi r30,lo8(matrix+14)
 323 0020 F807      		cpc r31,r24
 324 0022 01F4      		brne .L17
 325               	/* epilogue start */
 326               	.LBE10:
 145:keyboards/ergodox/ez/matrix.c **** 
 327               		.loc 1 145 1 view .LVU80
 328 0024 0895      		ret
 329               		.cfi_endproc
 330               	.LFE131:
 332               		.section	.text.matrix_scan,"ax",@progbits
 333               	.global	matrix_scan
 335               	matrix_scan:
 336               	.LFB132:
 148:keyboards/ergodox/ez/matrix.c ****     if (mcp23018_status) { // if there was an error
 337               		.loc 1 148 1 is_stmt 1 view -0
 338               		.cfi_startproc
 339 0000 AF92      		push r10
 340               	.LCFI0:
 341               		.cfi_def_cfa_offset 3
 342               		.cfi_offset 10, -2
 343 0002 BF92      		push r11
 344               	.LCFI1:
 345               		.cfi_def_cfa_offset 4
 346               		.cfi_offset 11, -3
 347 0004 CF92      		push r12
 348               	.LCFI2:
 349               		.cfi_def_cfa_offset 5
 350               		.cfi_offset 12, -4
 351 0006 DF92      		push r13
 352               	.LCFI3:
 353               		.cfi_def_cfa_offset 6
 354               		.cfi_offset 13, -5
 355 0008 EF92      		push r14
 356               	.LCFI4:
 357               		.cfi_def_cfa_offset 7
 358               		.cfi_offset 14, -6
 359 000a FF92      		push r15
 360               	.LCFI5:
 361               		.cfi_def_cfa_offset 8
 362               		.cfi_offset 15, -7
 363 000c 0F93      		push r16
 364               	.LCFI6:
 365               		.cfi_def_cfa_offset 9
 366               		.cfi_offset 16, -8
 367 000e 1F93      		push r17
 368               	.LCFI7:
 369               		.cfi_def_cfa_offset 10
 370               		.cfi_offset 17, -9
 371 0010 CF93      		push r28
 372               	.LCFI8:
 373               		.cfi_def_cfa_offset 11
 374               		.cfi_offset 28, -10
 375 0012 DF93      		push r29
 376               	.LCFI9:
 377               		.cfi_def_cfa_offset 12
 378               		.cfi_offset 29, -11
 379               	/* prologue: function */
 380               	/* frame size = 0 */
 381               	/* stack size = 10 */
 382               	.L__stack_usage = 10
 149:keyboards/ergodox/ez/matrix.c ****         if (++mcp23018_reset_loop == 0) {
 383               		.loc 1 149 5 view .LVU82
 149:keyboards/ergodox/ez/matrix.c ****         if (++mcp23018_reset_loop == 0) {
 384               		.loc 1 149 8 is_stmt 0 view .LVU83
 385 0014 8091 0000 		lds r24,mcp23018_status
 386 0018 8823      		tst r24
 387 001a 01F0      		breq .L21
 150:keyboards/ergodox/ez/matrix.c ****             // since mcp23018_reset_loop is 8 bit - we'll try to reset once in 255 matrix scans
 388               		.loc 1 150 9 is_stmt 1 view .LVU84
 150:keyboards/ergodox/ez/matrix.c ****             // since mcp23018_reset_loop is 8 bit - we'll try to reset once in 255 matrix scans
 389               		.loc 1 150 13 is_stmt 0 view .LVU85
 390 001c 8091 0000 		lds r24,mcp23018_reset_loop
 391 0020 8F5F      		subi r24,lo8(-(1))
 150:keyboards/ergodox/ez/matrix.c ****             // since mcp23018_reset_loop is 8 bit - we'll try to reset once in 255 matrix scans
 392               		.loc 1 150 12 view .LVU86
 393 0022 8093 0000 		sts mcp23018_reset_loop,r24
 394 0026 8111      		cpse r24,__zero_reg__
 395 0028 00C0      		rjmp .L21
 153:keyboards/ergodox/ez/matrix.c ****             mcp23018_status = init_mcp23018();
 396               		.loc 1 153 48 is_stmt 1 view .LVU87
 154:keyboards/ergodox/ez/matrix.c ****             if (mcp23018_status) {
 397               		.loc 1 154 13 view .LVU88
 154:keyboards/ergodox/ez/matrix.c ****             if (mcp23018_status) {
 398               		.loc 1 154 31 is_stmt 0 view .LVU89
 399 002a 0E94 0000 		call init_mcp23018
 400               	.LVL19:
 154:keyboards/ergodox/ez/matrix.c ****             if (mcp23018_status) {
 401               		.loc 1 154 29 view .LVU90
 402 002e 8093 0000 		sts mcp23018_status,r24
 155:keyboards/ergodox/ez/matrix.c ****                 print("left side not responding\n");
 403               		.loc 1 155 13 is_stmt 1 view .LVU91
 155:keyboards/ergodox/ez/matrix.c ****                 print("left side not responding\n");
 404               		.loc 1 155 16 is_stmt 0 view .LVU92
 405 0032 8111      		cpse r24,__zero_reg__
 406 0034 00C0      		rjmp .L21
 158:keyboards/ergodox/ez/matrix.c ****                 ergodox_blink_all_leds();
 407               		.loc 1 158 46 is_stmt 1 view .LVU93
 159:keyboards/ergodox/ez/matrix.c ****             }
 408               		.loc 1 159 17 view .LVU94
 409 0036 0E94 0000 		call ergodox_blink_all_leds
 410               	.LVL20:
 411               	.L21:
 412 003a 80E0      		ldi r24,lo8(matrix_debouncing)
 413 003c C82E      		mov r12,r24
 414 003e 80E0      		ldi r24,hi8(matrix_debouncing)
 415 0040 D82E      		mov r13,r24
 148:keyboards/ergodox/ez/matrix.c ****     if (mcp23018_status) { // if there was an error
 416               		.loc 1 148 1 is_stmt 0 view .LVU95
 417 0042 7601      		movw r14,r12
 418 0044 10E0      		ldi r17,0
 419 0046 00E0      		ldi r16,0
 420               	.LBB23:
 421               	.LBB24:
 422               	.LBB25:
 423               	.LBB26:
 329:keyboards/ergodox/ez/matrix.c **** 
 330:keyboards/ergodox/ez/matrix.c **** static void select_row(uint8_t row)
 331:keyboards/ergodox/ez/matrix.c **** {
 332:keyboards/ergodox/ez/matrix.c ****     if (row < 7) {
 333:keyboards/ergodox/ez/matrix.c ****         // select on mcp23018
 334:keyboards/ergodox/ez/matrix.c ****         if (mcp23018_status) { // if there was an error
 335:keyboards/ergodox/ez/matrix.c ****             // do nothing
 336:keyboards/ergodox/ez/matrix.c ****         } else {
 337:keyboards/ergodox/ez/matrix.c ****             // set active row low  : 0
 338:keyboards/ergodox/ez/matrix.c ****             // set other rows hi-Z : 1
 339:keyboards/ergodox/ez/matrix.c ****             mcp23018_status = i2c_start(I2C_ADDR_WRITE);        if (mcp23018_status) goto out;
 340:keyboards/ergodox/ez/matrix.c ****             mcp23018_status = i2c_write(GPIOA);                 if (mcp23018_status) goto out;
 341:keyboards/ergodox/ez/matrix.c ****             mcp23018_status = i2c_write( 0xFF & ~(1<<row)
 424               		.loc 1 341 52 view .LVU96
 425 0048 AA24      		clr r10
 426 004a A394      		inc r10
 427 004c B12C      		mov r11,__zero_reg__
 428               	.LBE26:
 429               	.LBE25:
 187:keyboards/ergodox/ez/matrix.c ****         }
 430               		.loc 1 187 24 view .LVU97
 431 004e D5E0      		ldi r29,lo8(5)
 432               	.L47:
 433 0050 C02F      		mov r28,r16
 434               	.LVL21:
 179:keyboards/ergodox/ez/matrix.c ****         wait_us(30);  // without this wait read unstable value.
 435               		.loc 1 179 9 is_stmt 1 view .LVU98
 436               	.LBB29:
 437               	.LBI25:
 330:keyboards/ergodox/ez/matrix.c **** {
 438               		.loc 1 330 13 view .LVU99
 439               	.LBB27:
 332:keyboards/ergodox/ez/matrix.c ****         // select on mcp23018
 440               		.loc 1 332 5 view .LVU100
 332:keyboards/ergodox/ez/matrix.c ****         // select on mcp23018
 441               		.loc 1 332 8 is_stmt 0 view .LVU101
 442 0052 0730      		cpi r16,lo8(7)
 443 0054 00F0      		brlo .+2
 444 0056 00C0      		rjmp .L23
 334:keyboards/ergodox/ez/matrix.c ****             // do nothing
 445               		.loc 1 334 9 is_stmt 1 view .LVU102
 334:keyboards/ergodox/ez/matrix.c ****             // do nothing
 446               		.loc 1 334 12 is_stmt 0 view .LVU103
 447 0058 8091 0000 		lds r24,mcp23018_status
 448 005c 8111      		cpse r24,__zero_reg__
 449 005e 00C0      		rjmp .L24
 339:keyboards/ergodox/ez/matrix.c ****             mcp23018_status = i2c_write(GPIOA);                 if (mcp23018_status) goto out;
 450               		.loc 1 339 13 is_stmt 1 view .LVU104
 339:keyboards/ergodox/ez/matrix.c ****             mcp23018_status = i2c_write(GPIOA);                 if (mcp23018_status) goto out;
 451               		.loc 1 339 31 is_stmt 0 view .LVU105
 452 0060 80E4      		ldi r24,lo8(64)
 453 0062 0E94 0000 		call i2c_start
 454               	.LVL22:
 339:keyboards/ergodox/ez/matrix.c ****             mcp23018_status = i2c_write(GPIOA);                 if (mcp23018_status) goto out;
 455               		.loc 1 339 29 view .LVU106
 456 0066 8093 0000 		sts mcp23018_status,r24
 339:keyboards/ergodox/ez/matrix.c ****             mcp23018_status = i2c_write(GPIOA);                 if (mcp23018_status) goto out;
 457               		.loc 1 339 65 is_stmt 1 view .LVU107
 339:keyboards/ergodox/ez/matrix.c ****             mcp23018_status = i2c_write(GPIOA);                 if (mcp23018_status) goto out;
 458               		.loc 1 339 68 is_stmt 0 view .LVU108
 459 006a 8111      		cpse r24,__zero_reg__
 460 006c 00C0      		rjmp .L26
 340:keyboards/ergodox/ez/matrix.c ****             mcp23018_status = i2c_write( 0xFF & ~(1<<row)
 461               		.loc 1 340 13 is_stmt 1 view .LVU109
 340:keyboards/ergodox/ez/matrix.c ****             mcp23018_status = i2c_write( 0xFF & ~(1<<row)
 462               		.loc 1 340 31 is_stmt 0 view .LVU110
 463 006e 82E1      		ldi r24,lo8(18)
 464 0070 0E94 0000 		call i2c_write
 465               	.LVL23:
 340:keyboards/ergodox/ez/matrix.c ****             mcp23018_status = i2c_write( 0xFF & ~(1<<row)
 466               		.loc 1 340 29 view .LVU111
 467 0074 8093 0000 		sts mcp23018_status,r24
 340:keyboards/ergodox/ez/matrix.c ****             mcp23018_status = i2c_write( 0xFF & ~(1<<row)
 468               		.loc 1 340 65 is_stmt 1 view .LVU112
 340:keyboards/ergodox/ez/matrix.c ****             mcp23018_status = i2c_write( 0xFF & ~(1<<row)
 469               		.loc 1 340 68 is_stmt 0 view .LVU113
 470 0078 8111      		cpse r24,__zero_reg__
 471 007a 00C0      		rjmp .L26
 472               		.loc 1 341 13 is_stmt 1 view .LVU114
 473               		.loc 1 341 52 is_stmt 0 view .LVU115
 474 007c C501      		movw r24,r10
 475 007e 002E      		mov r0,r16
 476 0080 00C0      		rjmp 2f
 477               		1:
 478 0082 880F      		lsl r24
 479               		2:
 480 0084 0A94      		dec r0
 481 0086 02F4      		brpl 1b
 482               		.loc 1 341 31 view .LVU116
 483 0088 8095      		com r24
 484 008a 0E94 0000 		call i2c_write
 485               	.LVL24:
 486               		.loc 1 341 29 view .LVU117
 487 008e 8093 0000 		sts mcp23018_status,r24
 342:keyboards/ergodox/ez/matrix.c ****                                   & ~(0<<7)
 343:keyboards/ergodox/ez/matrix.c ****                               );                                if (mcp23018_status) goto out;
 488               		.loc 1 343 65 is_stmt 1 view .LVU118
 489               	.L26:
 344:keyboards/ergodox/ez/matrix.c ****         out:
 345:keyboards/ergodox/ez/matrix.c ****             i2c_stop();
 490               		.loc 1 345 13 view .LVU119
 491 0092 0E94 0000 		call i2c_stop
 492               	.LVL25:
 493               	.L24:
 494               		.loc 1 345 13 is_stmt 0 view .LVU120
 495               	.LBE27:
 496               	.LBE29:
 180:keyboards/ergodox/ez/matrix.c ****         matrix_row_t cols = read_cols(i);
 497               		.loc 1 180 9 is_stmt 1 view .LVU121
 498               	.LBB30:
 499               	.LBI30:
 500               		.file 2 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 189:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #else
 190:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	uint16_t __ticks;
 191:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 193:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 195:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	{
 196:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		{
 200:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		}
 204:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		return;
 205:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	}
 206:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	else
 207:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 208:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 209:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
 210:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** }
 211:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 212:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /**
 213:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \ingroup util_delay
 214:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 215:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 217:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 218:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 220:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 222:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    will not be informed about this case.
 225:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 226:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 229:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    no delay i.e., 0us.
 230:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 231:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __us
 234:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    microseconds of delay.
 235:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 236:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    respectively.
 240:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 241:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \note
 242:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 243:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 244:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 246:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 248:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 249:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    not available to the compiler then.
 252:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 253:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****  */
 254:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** void
 255:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** _delay_us(double __us)
 501               		.loc 2 255 1 view .LVU122
 502               	.LBB31:
 256:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** {
 257:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	double __tmp ;
 503               		.loc 2 257 2 view .LVU123
 258:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 261:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 504               		.loc 2 261 2 view .LVU124
 262:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 505               		.loc 2 262 2 view .LVU125
 263:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 506               		.loc 2 263 2 view .LVU126
 264:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 265:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 268:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 271:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#else
 272:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		//round up by default
 273:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 507               		.loc 2 273 3 view .LVU127
 274:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#endif
 275:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 276:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 508               		.loc 2 276 2 view .LVU128
 509 0096 80EA      		ldi r24,lo8(-96)
 510 0098 8A95      	1:	dec r24
 511 009a 01F4      		brne 1b
 512               	.LVL26:
 513               		.loc 2 276 2 is_stmt 0 view .LVU129
 514               	.LBE31:
 515               	.LBE30:
 181:keyboards/ergodox/ez/matrix.c ****         if (matrix_debouncing[i] != cols) {
 516               		.loc 1 181 9 is_stmt 1 view .LVU130
 517               	.LBB32:
 518               	.LBI32:
 266:keyboards/ergodox/ez/matrix.c **** {
 519               		.loc 1 266 21 view .LVU131
 520               	.LBB33:
 268:keyboards/ergodox/ez/matrix.c ****         if (mcp23018_status) { // if there was an error
 521               		.loc 1 268 5 view .LVU132
 268:keyboards/ergodox/ez/matrix.c ****         if (mcp23018_status) { // if there was an error
 522               		.loc 1 268 8 is_stmt 0 view .LVU133
 523 009c C730      		cpi r28,lo8(7)
 524 009e 00F0      		brlo .+2
 525 00a0 00C0      		rjmp .L36
 269:keyboards/ergodox/ez/matrix.c ****             return 0;
 526               		.loc 1 269 9 is_stmt 1 view .LVU134
 269:keyboards/ergodox/ez/matrix.c ****             return 0;
 527               		.loc 1 269 13 is_stmt 0 view .LVU135
 528 00a2 C091 0000 		lds r28,mcp23018_status
 269:keyboards/ergodox/ez/matrix.c ****             return 0;
 529               		.loc 1 269 12 view .LVU136
 530 00a6 C111      		cpse r28,__zero_reg__
 531 00a8 00C0      		rjmp .L53
 532               	.LBB34:
 272:keyboards/ergodox/ez/matrix.c ****             mcp23018_status = i2c_start(I2C_ADDR_WRITE);    if (mcp23018_status) goto out;
 533               		.loc 1 272 13 is_stmt 1 view .LVU137
 534               	.LVL27:
 273:keyboards/ergodox/ez/matrix.c ****             mcp23018_status = i2c_write(GPIOB);             if (mcp23018_status) goto out;
 535               		.loc 1 273 13 view .LVU138
 273:keyboards/ergodox/ez/matrix.c ****             mcp23018_status = i2c_write(GPIOB);             if (mcp23018_status) goto out;
 536               		.loc 1 273 31 is_stmt 0 view .LVU139
 537 00aa 80E4      		ldi r24,lo8(64)
 538 00ac 0E94 0000 		call i2c_start
 539               	.LVL28:
 273:keyboards/ergodox/ez/matrix.c ****             mcp23018_status = i2c_write(GPIOB);             if (mcp23018_status) goto out;
 540               		.loc 1 273 29 view .LVU140
 541 00b0 8093 0000 		sts mcp23018_status,r24
 273:keyboards/ergodox/ez/matrix.c ****             mcp23018_status = i2c_write(GPIOB);             if (mcp23018_status) goto out;
 542               		.loc 1 273 61 is_stmt 1 view .LVU141
 273:keyboards/ergodox/ez/matrix.c ****             mcp23018_status = i2c_write(GPIOB);             if (mcp23018_status) goto out;
 543               		.loc 1 273 64 is_stmt 0 view .LVU142
 544 00b4 8111      		cpse r24,__zero_reg__
 545 00b6 00C0      		rjmp .L39
 274:keyboards/ergodox/ez/matrix.c ****             mcp23018_status = i2c_start(I2C_ADDR_READ);     if (mcp23018_status) goto out;
 546               		.loc 1 274 13 is_stmt 1 view .LVU143
 274:keyboards/ergodox/ez/matrix.c ****             mcp23018_status = i2c_start(I2C_ADDR_READ);     if (mcp23018_status) goto out;
 547               		.loc 1 274 31 is_stmt 0 view .LVU144
 548 00b8 83E1      		ldi r24,lo8(19)
 549 00ba 0E94 0000 		call i2c_write
 550               	.LVL29:
 274:keyboards/ergodox/ez/matrix.c ****             mcp23018_status = i2c_start(I2C_ADDR_READ);     if (mcp23018_status) goto out;
 551               		.loc 1 274 29 view .LVU145
 552 00be 8093 0000 		sts mcp23018_status,r24
 274:keyboards/ergodox/ez/matrix.c ****             mcp23018_status = i2c_start(I2C_ADDR_READ);     if (mcp23018_status) goto out;
 553               		.loc 1 274 61 is_stmt 1 view .LVU146
 274:keyboards/ergodox/ez/matrix.c ****             mcp23018_status = i2c_start(I2C_ADDR_READ);     if (mcp23018_status) goto out;
 554               		.loc 1 274 64 is_stmt 0 view .LVU147
 555 00c2 8111      		cpse r24,__zero_reg__
 556 00c4 00C0      		rjmp .L39
 275:keyboards/ergodox/ez/matrix.c ****             data = i2c_readNak();
 557               		.loc 1 275 13 is_stmt 1 view .LVU148
 275:keyboards/ergodox/ez/matrix.c ****             data = i2c_readNak();
 558               		.loc 1 275 31 is_stmt 0 view .LVU149
 559 00c6 81E4      		ldi r24,lo8(65)
 560 00c8 0E94 0000 		call i2c_start
 561               	.LVL30:
 275:keyboards/ergodox/ez/matrix.c ****             data = i2c_readNak();
 562               		.loc 1 275 29 view .LVU150
 563 00cc 8093 0000 		sts mcp23018_status,r24
 275:keyboards/ergodox/ez/matrix.c ****             data = i2c_readNak();
 564               		.loc 1 275 61 is_stmt 1 view .LVU151
 275:keyboards/ergodox/ez/matrix.c ****             data = i2c_readNak();
 565               		.loc 1 275 64 is_stmt 0 view .LVU152
 566 00d0 8111      		cpse r24,__zero_reg__
 567 00d2 00C0      		rjmp .L39
 276:keyboards/ergodox/ez/matrix.c ****             data = ~data;
 568               		.loc 1 276 13 is_stmt 1 view .LVU153
 276:keyboards/ergodox/ez/matrix.c ****             data = ~data;
 569               		.loc 1 276 20 is_stmt 0 view .LVU154
 570 00d4 0E94 0000 		call i2c_readNak
 571               	.LVL31:
 277:keyboards/ergodox/ez/matrix.c ****         out:
 572               		.loc 1 277 13 is_stmt 1 view .LVU155
 277:keyboards/ergodox/ez/matrix.c ****         out:
 573               		.loc 1 277 18 is_stmt 0 view .LVU156
 574 00d8 C82F      		mov r28,r24
 575 00da C095      		com r28
 576               	.LVL32:
 577               	.L39:
 279:keyboards/ergodox/ez/matrix.c ****             return data;
 578               		.loc 1 279 13 is_stmt 1 view .LVU157
 579 00dc 0E94 0000 		call i2c_stop
 580               	.LVL33:
 280:keyboards/ergodox/ez/matrix.c ****         }
 581               		.loc 1 280 13 view .LVU158
 582               	.L37:
 280:keyboards/ergodox/ez/matrix.c ****         }
 583               		.loc 1 280 13 is_stmt 0 view .LVU159
 584               	.LBE34:
 585               	.LBE33:
 586               	.LBE32:
 182:keyboards/ergodox/ez/matrix.c ****             matrix_debouncing[i] = cols;
 587               		.loc 1 182 9 is_stmt 1 view .LVU160
 182:keyboards/ergodox/ez/matrix.c ****             matrix_debouncing[i] = cols;
 588               		.loc 1 182 12 is_stmt 0 view .LVU161
 589 00e0 D701      		movw r26,r14
 590 00e2 8C91      		ld r24,X
 591 00e4 8C17      		cp r24,r28
 592 00e6 01F0      		breq .L46
 183:keyboards/ergodox/ez/matrix.c ****             if (debouncing) {
 593               		.loc 1 183 13 is_stmt 1 view .LVU162
 183:keyboards/ergodox/ez/matrix.c ****             if (debouncing) {
 594               		.loc 1 183 34 is_stmt 0 view .LVU163
 595 00e8 CC93      		st X,r28
 184:keyboards/ergodox/ez/matrix.c ****                 debug("bounce!: "); debug_hex(debouncing); debug("\n");
 596               		.loc 1 184 13 is_stmt 1 view .LVU164
 185:keyboards/ergodox/ez/matrix.c ****             }
 597               		.loc 1 185 35 view .LVU165
 185:keyboards/ergodox/ez/matrix.c ****             }
 598               		.loc 1 185 58 view .LVU166
 185:keyboards/ergodox/ez/matrix.c ****             }
 599               		.loc 1 185 71 view .LVU167
 187:keyboards/ergodox/ez/matrix.c ****         }
 600               		.loc 1 187 13 view .LVU168
 187:keyboards/ergodox/ez/matrix.c ****         }
 601               		.loc 1 187 24 is_stmt 0 view .LVU169
 602 00ea D093 0000 		sts debouncing,r29
 603               	.L46:
 189:keyboards/ergodox/ez/matrix.c ****     }
 604               		.loc 1 189 9 is_stmt 1 discriminator 2 view .LVU170
 605 00ee 0E94 0000 		call unselect_rows
 606               	.LVL34:
 189:keyboards/ergodox/ez/matrix.c ****     }
 607               		.loc 1 189 9 is_stmt 0 discriminator 2 view .LVU171
 608 00f2 0F5F      		subi r16,-1
 609 00f4 1F4F      		sbci r17,-1
 610               	.LVL35:
 189:keyboards/ergodox/ez/matrix.c ****     }
 611               		.loc 1 189 9 discriminator 2 view .LVU172
 612 00f6 BFEF      		ldi r27,-1
 613 00f8 EB1A      		sub r14,r27
 614 00fa FB0A      		sbc r15,r27
 615               	.LBE24:
 178:keyboards/ergodox/ez/matrix.c ****         select_row(i);
 616               		.loc 1 178 5 discriminator 2 view .LVU173
 617 00fc 0E30      		cpi r16,14
 618 00fe 1105      		cpc r17,__zero_reg__
 619 0100 01F0      		breq .+2
 620 0102 00C0      		rjmp .L47
 621               	.LBE23:
 192:keyboards/ergodox/ez/matrix.c ****         if (--debouncing) {
 622               		.loc 1 192 5 is_stmt 1 view .LVU174
 192:keyboards/ergodox/ez/matrix.c ****         if (--debouncing) {
 623               		.loc 1 192 9 is_stmt 0 view .LVU175
 624 0104 8091 0000 		lds r24,debouncing
 192:keyboards/ergodox/ez/matrix.c ****         if (--debouncing) {
 625               		.loc 1 192 8 view .LVU176
 626 0108 8823      		tst r24
 627 010a 01F0      		breq .L49
 193:keyboards/ergodox/ez/matrix.c ****             wait_us(1);
 628               		.loc 1 193 9 is_stmt 1 view .LVU177
 193:keyboards/ergodox/ez/matrix.c ****             wait_us(1);
 629               		.loc 1 193 13 is_stmt 0 view .LVU178
 630 010c 8150      		subi r24,lo8(-(-1))
 193:keyboards/ergodox/ez/matrix.c ****             wait_us(1);
 631               		.loc 1 193 12 view .LVU179
 632 010e 8093 0000 		sts debouncing,r24
 633 0112 8823      		tst r24
 634 0114 01F4      		brne .+2
 635 0116 00C0      		rjmp .L50
 194:keyboards/ergodox/ez/matrix.c ****             // this should be wait_ms(1) but has been left as-is at EZ's request
 636               		.loc 1 194 13 is_stmt 1 view .LVU180
 637               	.LVL36:
 638               	.LBB39:
 639               	.LBI39:
 255:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** {
 640               		.loc 2 255 1 view .LVU181
 641               	.LBB40:
 257:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 642               		.loc 2 257 2 view .LVU182
 261:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 643               		.loc 2 261 2 view .LVU183
 262:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 644               		.loc 2 262 2 view .LVU184
 263:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 645               		.loc 2 263 2 view .LVU185
 273:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#endif
 646               		.loc 2 273 3 view .LVU186
 647               		.loc 2 276 2 view .LVU187
 648 0118 E5E0      		ldi r30,lo8(5)
 649 011a EA95      	1:	dec r30
 650 011c 01F4      		brne 1b
 651 011e 0000      		nop
 652               	.LVL37:
 653               	.L49:
 654               		.loc 2 276 2 is_stmt 0 view .LVU188
 655               	.LBE40:
 656               	.LBE39:
 203:keyboards/ergodox/ez/matrix.c **** 
 657               		.loc 1 203 5 is_stmt 1 view .LVU189
 658 0120 0E94 0000 		call matrix_scan_quantum
 659               	.LVL38:
 205:keyboards/ergodox/ez/matrix.c **** }
 660               		.loc 1 205 5 view .LVU190
 206:keyboards/ergodox/ez/matrix.c **** 
 661               		.loc 1 206 1 is_stmt 0 view .LVU191
 662 0124 81E0      		ldi r24,lo8(1)
 663               	/* epilogue start */
 664 0126 DF91      		pop r29
 665 0128 CF91      		pop r28
 666               	.LVL39:
 206:keyboards/ergodox/ez/matrix.c **** 
 667               		.loc 1 206 1 view .LVU192
 668 012a 1F91      		pop r17
 669 012c 0F91      		pop r16
 670               	.LVL40:
 206:keyboards/ergodox/ez/matrix.c **** 
 671               		.loc 1 206 1 view .LVU193
 672 012e FF90      		pop r15
 673 0130 EF90      		pop r14
 674 0132 DF90      		pop r13
 675 0134 CF90      		pop r12
 676 0136 BF90      		pop r11
 677 0138 AF90      		pop r10
 678 013a 0895      		ret
 679               	.LVL41:
 680               	.L23:
 681               	.LBB41:
 682               	.LBB38:
 683               	.LBB36:
 684               	.LBB28:
 346:keyboards/ergodox/ez/matrix.c ****         }
 347:keyboards/ergodox/ez/matrix.c ****     } else {
 348:keyboards/ergodox/ez/matrix.c ****         // select on teensy
 349:keyboards/ergodox/ez/matrix.c ****         // Output low(DDR:1, PORT:0) to select
 350:keyboards/ergodox/ez/matrix.c ****         switch (row) {
 685               		.loc 1 350 9 is_stmt 1 view .LVU194
 686 013c 0A30      		cpi r16,lo8(10)
 687 013e 01F0      		breq .L28
 688 0140 00F4      		brsh .L29
 689 0142 0830      		cpi r16,lo8(8)
 690 0144 01F0      		breq .L30
 691 0146 0930      		cpi r16,lo8(9)
 692 0148 01F0      		breq .L31
 693               	.L32:
 351:keyboards/ergodox/ez/matrix.c ****             case 7:
 352:keyboards/ergodox/ez/matrix.c ****                 DDRB  |= (1<<0);
 694               		.loc 1 352 17 view .LVU195
 695               		.loc 1 352 23 is_stmt 0 view .LVU196
 696 014a 209A      		sbi 0x4,0
 353:keyboards/ergodox/ez/matrix.c ****                 PORTB &= ~(1<<0);
 697               		.loc 1 353 17 is_stmt 1 view .LVU197
 698               		.loc 1 353 23 is_stmt 0 view .LVU198
 699 014c 2898      		cbi 0x5,0
 354:keyboards/ergodox/ez/matrix.c ****                 break;
 700               		.loc 1 354 17 is_stmt 1 view .LVU199
 701 014e 00C0      		rjmp .L24
 702               	.L29:
 703 0150 0C30      		cpi r16,lo8(12)
 704 0152 01F0      		breq .L33
 705 0154 00F0      		brlo .L34
 706 0156 0D30      		cpi r16,lo8(13)
 707 0158 01F4      		brne .L32
 355:keyboards/ergodox/ez/matrix.c ****             case 8:
 356:keyboards/ergodox/ez/matrix.c ****                 DDRB  |= (1<<1);
 357:keyboards/ergodox/ez/matrix.c ****                 PORTB &= ~(1<<1);
 358:keyboards/ergodox/ez/matrix.c ****                 break;
 359:keyboards/ergodox/ez/matrix.c ****             case 9:
 360:keyboards/ergodox/ez/matrix.c ****                 DDRB  |= (1<<2);
 361:keyboards/ergodox/ez/matrix.c ****                 PORTB &= ~(1<<2);
 362:keyboards/ergodox/ez/matrix.c ****                 break;
 363:keyboards/ergodox/ez/matrix.c ****             case 10:
 364:keyboards/ergodox/ez/matrix.c ****                 DDRB  |= (1<<3);
 365:keyboards/ergodox/ez/matrix.c ****                 PORTB &= ~(1<<3);
 366:keyboards/ergodox/ez/matrix.c ****                 break;
 367:keyboards/ergodox/ez/matrix.c ****             case 11:
 368:keyboards/ergodox/ez/matrix.c ****                 DDRD  |= (1<<2);
 369:keyboards/ergodox/ez/matrix.c ****                 PORTD &= ~(1<<3);
 370:keyboards/ergodox/ez/matrix.c ****                 break;
 371:keyboards/ergodox/ez/matrix.c ****             case 12:
 372:keyboards/ergodox/ez/matrix.c ****                 DDRD  |= (1<<3);
 373:keyboards/ergodox/ez/matrix.c ****                 PORTD &= ~(1<<3);
 374:keyboards/ergodox/ez/matrix.c ****                 break;
 375:keyboards/ergodox/ez/matrix.c ****             case 13:
 376:keyboards/ergodox/ez/matrix.c ****                 DDRC  |= (1<<6);
 708               		.loc 1 376 17 view .LVU200
 709               		.loc 1 376 23 is_stmt 0 view .LVU201
 710 015a 3E9A      		sbi 0x7,6
 377:keyboards/ergodox/ez/matrix.c ****                 PORTC &= ~(1<<6);
 711               		.loc 1 377 17 is_stmt 1 view .LVU202
 712               		.loc 1 377 23 is_stmt 0 view .LVU203
 713 015c 4698      		cbi 0x8,6
 378:keyboards/ergodox/ez/matrix.c ****                 break;
 714               		.loc 1 378 17 is_stmt 1 view .LVU204
 715 015e 00C0      		rjmp .L24
 716               	.L30:
 356:keyboards/ergodox/ez/matrix.c ****                 PORTB &= ~(1<<1);
 717               		.loc 1 356 17 view .LVU205
 356:keyboards/ergodox/ez/matrix.c ****                 PORTB &= ~(1<<1);
 718               		.loc 1 356 23 is_stmt 0 view .LVU206
 719 0160 219A      		sbi 0x4,1
 357:keyboards/ergodox/ez/matrix.c ****                 break;
 720               		.loc 1 357 17 is_stmt 1 view .LVU207
 357:keyboards/ergodox/ez/matrix.c ****                 break;
 721               		.loc 1 357 23 is_stmt 0 view .LVU208
 722 0162 2998      		cbi 0x5,1
 358:keyboards/ergodox/ez/matrix.c ****             case 9:
 723               		.loc 1 358 17 is_stmt 1 view .LVU209
 724 0164 00C0      		rjmp .L24
 725               	.L31:
 360:keyboards/ergodox/ez/matrix.c ****                 PORTB &= ~(1<<2);
 726               		.loc 1 360 17 view .LVU210
 360:keyboards/ergodox/ez/matrix.c ****                 PORTB &= ~(1<<2);
 727               		.loc 1 360 23 is_stmt 0 view .LVU211
 728 0166 229A      		sbi 0x4,2
 361:keyboards/ergodox/ez/matrix.c ****                 break;
 729               		.loc 1 361 17 is_stmt 1 view .LVU212
 361:keyboards/ergodox/ez/matrix.c ****                 break;
 730               		.loc 1 361 23 is_stmt 0 view .LVU213
 731 0168 2A98      		cbi 0x5,2
 362:keyboards/ergodox/ez/matrix.c ****             case 10:
 732               		.loc 1 362 17 is_stmt 1 view .LVU214
 733 016a 00C0      		rjmp .L24
 734               	.L28:
 364:keyboards/ergodox/ez/matrix.c ****                 PORTB &= ~(1<<3);
 735               		.loc 1 364 17 view .LVU215
 364:keyboards/ergodox/ez/matrix.c ****                 PORTB &= ~(1<<3);
 736               		.loc 1 364 23 is_stmt 0 view .LVU216
 737 016c 239A      		sbi 0x4,3
 365:keyboards/ergodox/ez/matrix.c ****                 break;
 738               		.loc 1 365 17 is_stmt 1 view .LVU217
 365:keyboards/ergodox/ez/matrix.c ****                 break;
 739               		.loc 1 365 23 is_stmt 0 view .LVU218
 740 016e 2B98      		cbi 0x5,3
 366:keyboards/ergodox/ez/matrix.c ****             case 11:
 741               		.loc 1 366 17 is_stmt 1 view .LVU219
 742 0170 00C0      		rjmp .L24
 743               	.L34:
 368:keyboards/ergodox/ez/matrix.c ****                 PORTD &= ~(1<<3);
 744               		.loc 1 368 17 view .LVU220
 368:keyboards/ergodox/ez/matrix.c ****                 PORTD &= ~(1<<3);
 745               		.loc 1 368 23 is_stmt 0 view .LVU221
 746 0172 529A      		sbi 0xa,2
 369:keyboards/ergodox/ez/matrix.c ****                 break;
 747               		.loc 1 369 17 is_stmt 1 view .LVU222
 748               	.L61:
 373:keyboards/ergodox/ez/matrix.c ****                 break;
 749               		.loc 1 373 17 view .LVU223
 373:keyboards/ergodox/ez/matrix.c ****                 break;
 750               		.loc 1 373 23 is_stmt 0 view .LVU224
 751 0174 5B98      		cbi 0xb,3
 374:keyboards/ergodox/ez/matrix.c ****             case 13:
 752               		.loc 1 374 17 is_stmt 1 view .LVU225
 753 0176 00C0      		rjmp .L24
 754               	.L33:
 372:keyboards/ergodox/ez/matrix.c ****                 PORTD &= ~(1<<3);
 755               		.loc 1 372 17 view .LVU226
 372:keyboards/ergodox/ez/matrix.c ****                 PORTD &= ~(1<<3);
 756               		.loc 1 372 23 is_stmt 0 view .LVU227
 757 0178 539A      		sbi 0xa,3
 758 017a 00C0      		rjmp .L61
 759               	.LVL42:
 760               	.L36:
 372:keyboards/ergodox/ez/matrix.c ****                 PORTD &= ~(1<<3);
 761               		.loc 1 372 23 view .LVU228
 762               	.LBE28:
 763               	.LBE36:
 764               	.LBB37:
 765               	.LBB35:
 284:keyboards/ergodox/ez/matrix.c ****             (PINF&(1<<0) ? 0 : (1<<0)) |
 766               		.loc 1 284 9 is_stmt 1 view .LVU229
 285:keyboards/ergodox/ez/matrix.c ****             (PINF&(1<<1) ? 0 : (1<<1)) |
 767               		.loc 1 285 14 is_stmt 0 view .LVU230
 768 017c CFB1      		in r28,0xf
 285:keyboards/ergodox/ez/matrix.c ****             (PINF&(1<<1) ? 0 : (1<<1)) |
 769               		.loc 1 285 30 view .LVU231
 770 017e C095      		com r28
 771 0180 C170      		andi r28,lo8(1)
 285:keyboards/ergodox/ez/matrix.c ****             (PINF&(1<<1) ? 0 : (1<<1)) |
 772               		.loc 1 285 40 view .LVU232
 773 0182 7999      		sbic 0xf,1
 774 0184 00C0      		rjmp .L54
 775 0186 82E0      		ldi r24,lo8(2)
 776               	.L41:
 777 0188 C82B      		or r28,r24
 286:keyboards/ergodox/ez/matrix.c ****             (PINF&(1<<4) ? 0 : (1<<2)) |
 778               		.loc 1 286 40 view .LVU233
 779 018a 7C99      		sbic 0xf,4
 780 018c 00C0      		rjmp .L55
 781 018e 84E0      		ldi r24,lo8(4)
 782               	.L42:
 783 0190 C82B      		or r28,r24
 287:keyboards/ergodox/ez/matrix.c ****             (PINF&(1<<5) ? 0 : (1<<3)) |
 784               		.loc 1 287 40 view .LVU234
 785 0192 7D99      		sbic 0xf,5
 786 0194 00C0      		rjmp .L56
 787 0196 88E0      		ldi r24,lo8(8)
 788               	.L43:
 789 0198 C82B      		or r28,r24
 288:keyboards/ergodox/ez/matrix.c ****             (PINF&(1<<6) ? 0 : (1<<4)) |
 790               		.loc 1 288 40 view .LVU235
 791 019a 7E99      		sbic 0xf,6
 792 019c 00C0      		rjmp .L57
 793 019e 80E1      		ldi r24,lo8(16)
 794               	.L44:
 795 01a0 C82B      		or r28,r24
 289:keyboards/ergodox/ez/matrix.c ****             (PINF&(1<<7) ? 0 : (1<<5)) ;
 796               		.loc 1 289 40 view .LVU236
 797 01a2 7F99      		sbic 0xf,7
 798 01a4 00C0      		rjmp .L58
 799 01a6 80E2      		ldi r24,lo8(32)
 800               	.L45:
 801 01a8 C82B      		or r28,r24
 802 01aa 00C0      		rjmp .L37
 803               	.L54:
 285:keyboards/ergodox/ez/matrix.c ****             (PINF&(1<<1) ? 0 : (1<<1)) |
 804               		.loc 1 285 40 view .LVU237
 805 01ac 80E0      		ldi r24,0
 806 01ae 00C0      		rjmp .L41
 807               	.L55:
 286:keyboards/ergodox/ez/matrix.c ****             (PINF&(1<<4) ? 0 : (1<<2)) |
 808               		.loc 1 286 40 view .LVU238
 809 01b0 80E0      		ldi r24,0
 810 01b2 00C0      		rjmp .L42
 811               	.L56:
 287:keyboards/ergodox/ez/matrix.c ****             (PINF&(1<<5) ? 0 : (1<<3)) |
 812               		.loc 1 287 40 view .LVU239
 813 01b4 80E0      		ldi r24,0
 814 01b6 00C0      		rjmp .L43
 815               	.L57:
 288:keyboards/ergodox/ez/matrix.c ****             (PINF&(1<<6) ? 0 : (1<<4)) |
 816               		.loc 1 288 40 view .LVU240
 817 01b8 80E0      		ldi r24,0
 818 01ba 00C0      		rjmp .L44
 819               	.L58:
 289:keyboards/ergodox/ez/matrix.c ****             (PINF&(1<<7) ? 0 : (1<<5)) ;
 820               		.loc 1 289 40 view .LVU241
 821 01bc 80E0      		ldi r24,0
 822 01be 00C0      		rjmp .L45
 823               	.L53:
 270:keyboards/ergodox/ez/matrix.c ****         } else {
 824               		.loc 1 270 20 view .LVU242
 825 01c0 C0E0      		ldi r28,0
 826 01c2 00C0      		rjmp .L37
 827               	.LVL43:
 828               	.L50:
 270:keyboards/ergodox/ez/matrix.c ****         } else {
 829               		.loc 1 270 20 view .LVU243
 830 01c4 E0E0      		ldi r30,lo8(matrix)
 831 01c6 F0E0      		ldi r31,hi8(matrix)
 832 01c8 80E0      		ldi r24,lo8(matrix_debouncing+14)
 833 01ca 90E0      		ldi r25,hi8(matrix_debouncing+14)
 834               	.L51:
 835               	.LVL44:
 270:keyboards/ergodox/ez/matrix.c ****         } else {
 836               		.loc 1 270 20 view .LVU244
 837               	.LBE35:
 838               	.LBE37:
 839               	.LBE38:
 840               	.LBE41:
 841               	.LBB42:
 198:keyboards/ergodox/ez/matrix.c ****             }
 842               		.loc 1 198 17 is_stmt 1 discriminator 3 view .LVU245
 198:keyboards/ergodox/ez/matrix.c ****             }
 843               		.loc 1 198 46 is_stmt 0 discriminator 3 view .LVU246
 844 01cc D601      		movw r26,r12
 845 01ce 2D91      		ld r18,X+
 846 01d0 6D01      		movw r12,r26
 847               	.LVL45:
 198:keyboards/ergodox/ez/matrix.c ****             }
 848               		.loc 1 198 27 discriminator 3 view .LVU247
 849 01d2 2193      		st Z+,r18
 850               	.LVL46:
 197:keyboards/ergodox/ez/matrix.c ****                 matrix[i] = matrix_debouncing[i];
 851               		.loc 1 197 13 discriminator 3 view .LVU248
 852 01d4 8A17      		cp r24,r26
 853 01d6 9B07      		cpc r25,r27
 854 01d8 01F4      		brne .L51
 855 01da 00C0      		rjmp .L49
 856               	.LBE42:
 857               		.cfi_endproc
 858               	.LFE132:
 860               		.section	.text.matrix_is_modified,"ax",@progbits
 861               	.global	matrix_is_modified
 863               	matrix_is_modified:
 864               	.LFB133:
 209:keyboards/ergodox/ez/matrix.c ****     if (debouncing) return false;
 865               		.loc 1 209 1 is_stmt 1 view -0
 866               		.cfi_startproc
 867               	/* prologue: function */
 868               	/* frame size = 0 */
 869               	/* stack size = 0 */
 870               	.L__stack_usage = 0
 210:keyboards/ergodox/ez/matrix.c ****     return true;
 871               		.loc 1 210 5 view .LVU250
 210:keyboards/ergodox/ez/matrix.c ****     return true;
 872               		.loc 1 210 8 is_stmt 0 view .LVU251
 873 0000 81E0      		ldi r24,lo8(1)
 874 0002 9091 0000 		lds r25,debouncing
 875 0006 9111      		cpse r25,__zero_reg__
 876 0008 80E0      		ldi r24,0
 877               	.L63:
 878               	/* epilogue start */
 212:keyboards/ergodox/ez/matrix.c **** 
 879               		.loc 1 212 1 view .LVU252
 880 000a 0895      		ret
 881               		.cfi_endproc
 882               	.LFE133:
 884               		.section	.text.matrix_is_on,"ax",@progbits
 885               	.global	matrix_is_on
 887               	matrix_is_on:
 888               	.LVL47:
 889               	.LFB134:
 216:keyboards/ergodox/ez/matrix.c ****     return (matrix[row] & ((matrix_row_t)1<<col));
 890               		.loc 1 216 1 is_stmt 1 view -0
 891               		.cfi_startproc
 892               	/* prologue: function */
 893               	/* frame size = 0 */
 894               	/* stack size = 0 */
 895               	.L__stack_usage = 0
 217:keyboards/ergodox/ez/matrix.c **** }
 896               		.loc 1 217 5 view .LVU254
 217:keyboards/ergodox/ez/matrix.c **** }
 897               		.loc 1 217 19 is_stmt 0 view .LVU255
 898 0000 E82F      		mov r30,r24
 899 0002 F0E0      		ldi r31,0
 900 0004 E050      		subi r30,lo8(-(matrix))
 901 0006 F040      		sbci r31,hi8(-(matrix))
 902 0008 2081      		ld r18,Z
 903 000a 30E0      		ldi r19,0
 217:keyboards/ergodox/ez/matrix.c **** }
 904               		.loc 1 217 43 view .LVU256
 905 000c 81E0      		ldi r24,lo8(1)
 906 000e 90E0      		ldi r25,0
 907               	.LVL48:
 217:keyboards/ergodox/ez/matrix.c **** }
 908               		.loc 1 217 43 view .LVU257
 909 0010 00C0      		rjmp 2f
 910               		1:
 911 0012 880F      		lsl r24
 912 0014 991F      		rol r25
 913               		2:
 914 0016 6A95      		dec r22
 915 0018 02F4      		brpl 1b
 217:keyboards/ergodox/ez/matrix.c **** }
 916               		.loc 1 217 25 view .LVU258
 917 001a 2823      		and r18,r24
 918 001c 3923      		and r19,r25
 919 001e 81E0      		ldi r24,lo8(1)
 920 0020 232B      		or r18,r19
 921 0022 01F4      		brne .L68
 922 0024 80E0      		ldi r24,0
 923               	.L68:
 924               	/* epilogue start */
 218:keyboards/ergodox/ez/matrix.c **** 
 925               		.loc 1 218 1 view .LVU259
 926 0026 0895      		ret
 927               		.cfi_endproc
 928               	.LFE134:
 930               		.section	.text.matrix_get_row,"ax",@progbits
 931               	.global	matrix_get_row
 933               	matrix_get_row:
 934               	.LVL49:
 935               	.LFB135:
 222:keyboards/ergodox/ez/matrix.c ****     return matrix[row];
 936               		.loc 1 222 1 is_stmt 1 view -0
 937               		.cfi_startproc
 938               	/* prologue: function */
 939               	/* frame size = 0 */
 940               	/* stack size = 0 */
 941               	.L__stack_usage = 0
 223:keyboards/ergodox/ez/matrix.c **** }
 942               		.loc 1 223 5 view .LVU261
 223:keyboards/ergodox/ez/matrix.c **** }
 943               		.loc 1 223 18 is_stmt 0 view .LVU262
 944 0000 E82F      		mov r30,r24
 945 0002 F0E0      		ldi r31,0
 946 0004 E050      		subi r30,lo8(-(matrix))
 947 0006 F040      		sbci r31,hi8(-(matrix))
 224:keyboards/ergodox/ez/matrix.c **** 
 948               		.loc 1 224 1 view .LVU263
 949 0008 8081      		ld r24,Z
 950               	.LVL50:
 951               	/* epilogue start */
 224:keyboards/ergodox/ez/matrix.c **** 
 952               		.loc 1 224 1 view .LVU264
 953 000a 0895      		ret
 954               		.cfi_endproc
 955               	.LFE135:
 957               		.section	.text.matrix_print,"ax",@progbits
 958               	.global	matrix_print
 960               	matrix_print:
 961               	.LFB136:
 227:keyboards/ergodox/ez/matrix.c ****     print("\nr/c 0123456789ABCDEF\n");
 962               		.loc 1 227 1 is_stmt 1 view -0
 963               		.cfi_startproc
 964               	/* prologue: function */
 965               	/* frame size = 0 */
 966               	/* stack size = 0 */
 967               	.L__stack_usage = 0
 228:keyboards/ergodox/ez/matrix.c ****     for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 968               		.loc 1 228 38 view .LVU266
 229:keyboards/ergodox/ez/matrix.c ****         phex(row); print(": ");
 969               		.loc 1 229 5 view .LVU267
 229:keyboards/ergodox/ez/matrix.c ****         phex(row); print(": ");
 970               		.loc 1 229 10 view .LVU268
 971               	.LVL51:
 972               	/* epilogue start */
 234:keyboards/ergodox/ez/matrix.c **** 
 973               		.loc 1 234 1 is_stmt 0 view .LVU269
 974 0000 0895      		ret
 975               		.cfi_endproc
 976               	.LFE136:
 978               		.section	.text.matrix_key_count,"ax",@progbits
 979               	.global	matrix_key_count
 981               	matrix_key_count:
 982               	.LFB137:
 237:keyboards/ergodox/ez/matrix.c ****     uint8_t count = 0;
 983               		.loc 1 237 1 is_stmt 1 view -0
 984               		.cfi_startproc
 985 0000 0F93      		push r16
 986               	.LCFI10:
 987               		.cfi_def_cfa_offset 3
 988               		.cfi_offset 16, -2
 989 0002 1F93      		push r17
 990               	.LCFI11:
 991               		.cfi_def_cfa_offset 4
 992               		.cfi_offset 17, -3
 993 0004 CF93      		push r28
 994               	.LCFI12:
 995               		.cfi_def_cfa_offset 5
 996               		.cfi_offset 28, -4
 997               	/* prologue: function */
 998               	/* frame size = 0 */
 999               	/* stack size = 3 */
 1000               	.L__stack_usage = 3
 238:keyboards/ergodox/ez/matrix.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 1001               		.loc 1 238 5 view .LVU271
 1002               	.LVL52:
 239:keyboards/ergodox/ez/matrix.c ****         count += bitpop16(matrix[i]);
 1003               		.loc 1 239 5 view .LVU272
 1004               	.LBB43:
 239:keyboards/ergodox/ez/matrix.c ****         count += bitpop16(matrix[i]);
 1005               		.loc 1 239 10 view .LVU273
 239:keyboards/ergodox/ez/matrix.c ****         count += bitpop16(matrix[i]);
 1006               		.loc 1 239 10 is_stmt 0 view .LVU274
 1007 0006 00E0      		ldi r16,lo8(matrix)
 1008 0008 10E0      		ldi r17,hi8(matrix)
 1009               	.LBE43:
 238:keyboards/ergodox/ez/matrix.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 1010               		.loc 1 238 13 view .LVU275
 1011 000a C0E0      		ldi r28,0
 1012               	.LVL53:
 1013               	.L72:
 1014               	.LBB44:
 240:keyboards/ergodox/ez/matrix.c ****     }
 1015               		.loc 1 240 9 is_stmt 1 discriminator 3 view .LVU276
 240:keyboards/ergodox/ez/matrix.c ****     }
 1016               		.loc 1 240 33 is_stmt 0 discriminator 3 view .LVU277
 1017 000c F801      		movw r30,r16
 1018 000e 8191      		ld r24,Z+
 1019 0010 8F01      		movw r16,r30
 1020               	.LVL54:
 240:keyboards/ergodox/ez/matrix.c ****     }
 1021               		.loc 1 240 18 discriminator 3 view .LVU278
 1022 0012 90E0      		ldi r25,0
 1023 0014 0E94 0000 		call bitpop16
 1024               	.LVL55:
 240:keyboards/ergodox/ez/matrix.c ****     }
 1025               		.loc 1 240 15 discriminator 3 view .LVU279
 1026 0018 C80F      		add r28,r24
 1027               	.LVL56:
 239:keyboards/ergodox/ez/matrix.c ****         count += bitpop16(matrix[i]);
 1028               		.loc 1 239 5 discriminator 3 view .LVU280
 1029 001a F0E0      		ldi r31,hi8(matrix+14)
 1030 001c 0030      		cpi r16,lo8(matrix+14)
 1031 001e 1F07      		cpc r17,r31
 1032 0020 01F4      		brne .L72
 1033               	.LBE44:
 242:keyboards/ergodox/ez/matrix.c **** }
 1034               		.loc 1 242 5 is_stmt 1 view .LVU281
 243:keyboards/ergodox/ez/matrix.c **** 
 1035               		.loc 1 243 1 is_stmt 0 view .LVU282
 1036 0022 8C2F      		mov r24,r28
 1037               	/* epilogue start */
 1038 0024 CF91      		pop r28
 1039               	.LVL57:
 243:keyboards/ergodox/ez/matrix.c **** 
 1040               		.loc 1 243 1 view .LVU283
 1041 0026 1F91      		pop r17
 1042 0028 0F91      		pop r16
 1043               	.LVL58:
 243:keyboards/ergodox/ez/matrix.c **** 
 1044               		.loc 1 243 1 view .LVU284
 1045 002a 0895      		ret
 1046               		.cfi_endproc
 1047               	.LFE137:
 1049               		.section	.bss.mcp23018_reset_loop,"aw",@nobits
 1052               	mcp23018_reset_loop:
 1053 0000 00        		.zero	1
 1054               		.section	.bss.matrix_debouncing,"aw",@nobits
 1057               	matrix_debouncing:
 1058 0000 0000 0000 		.zero	14
 1058      0000 0000 
 1058      0000 0000 
 1058      0000 
 1059               		.section	.bss.matrix,"aw",@nobits
 1062               	matrix:
 1063 0000 0000 0000 		.zero	14
 1063      0000 0000 
 1063      0000 0000 
 1063      0000 
 1064               		.section	.data.debouncing,"aw",@progbits
 1067               	debouncing:
 1068 0000 05        		.byte	5
 1069               		.text
 1070               	.Letext0:
 1071               		.file 3 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/stdint.h"
 1072               		.file 4 "./tmk_core/common/keyboard.h"
 1073               		.file 5 "/usr/local/Cellar/avr-gcc/8.1.0/lib/avr-gcc/8/gcc/avr/8.1.0/include/stddef.h"
 1074               		.file 6 "./tmk_core/common/action.h"
 1075               		.file 7 "./tmk_core/common/action_layer.h"
 1076               		.file 8 "./tmk_core/common/debug.h"
 1077               		.file 9 "./tmk_core/common/matrix.h"
 1078               		.file 10 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 1079               		.file 11 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 1080               		.file 12 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 1081               		.file 13 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/HostStandardReq.h"
 1082               		.file 14 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/stdio.h"
 1083               		.file 15 "./tmk_core/common/report.h"
 1084               		.file 16 "./tmk_core/common/host.h"
 1085               		.file 17 "./quantum/keycode_config.h"
 1086               		.file 18 "./quantum/keymap.h"
 1087               		.file 19 "./tmk_core/common/timer.h"
 1088               		.file 20 "./tmk_core/common/action_util.h"
 1089               		.file 21 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/stdlib.h"
 1090               		.file 22 "keyboards/ergodox/ez/ez.h"
 1091               		.file 23 "keyboards/ergodox/ez/i2cmaster.h"
 1092               		.file 24 "./tmk_core/common/util.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 matrix.c
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccM7NxCj.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccM7NxCj.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccM7NxCj.s:4      *ABS*:000000000000003f __SREG__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccM7NxCj.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccM7NxCj.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccM7NxCj.s:12     .text.init_cols:0000000000000000 init_cols
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccM7NxCj.s:39     .text.unselect_rows:0000000000000000 unselect_rows
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccM7NxCj.s:122    .text.matrix_init_user:0000000000000000 matrix_init_user
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccM7NxCj.s:122    .text.matrix_init_user:0000000000000000 matrix_init_user.localalias.0
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccM7NxCj.s:141    .text.matrix_scan_user:0000000000000000 matrix_scan_user
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccM7NxCj.s:156    .text.matrix_init_kb:0000000000000000 matrix_init_kb
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccM7NxCj.s:173    .text.matrix_scan_kb:0000000000000000 matrix_scan_kb
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccM7NxCj.s:190    .text.matrix_rows:0000000000000000 matrix_rows
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccM7NxCj.s:209    .text.matrix_cols:0000000000000000 matrix_cols
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccM7NxCj.s:228    .text.matrix_init:0000000000000000 matrix_init
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccM7NxCj.s:1062   .bss.matrix:0000000000000000 matrix
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccM7NxCj.s:1057   .bss.matrix_debouncing:0000000000000000 matrix_debouncing
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccM7NxCj.s:282    .text.matrix_power_up:0000000000000000 matrix_power_up
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccM7NxCj.s:335    .text.matrix_scan:0000000000000000 matrix_scan
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccM7NxCj.s:1052   .bss.mcp23018_reset_loop:0000000000000000 mcp23018_reset_loop
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccM7NxCj.s:1067   .data.debouncing:0000000000000000 debouncing
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccM7NxCj.s:863    .text.matrix_is_modified:0000000000000000 matrix_is_modified
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccM7NxCj.s:887    .text.matrix_is_on:0000000000000000 matrix_is_on
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccM7NxCj.s:933    .text.matrix_get_row:0000000000000000 matrix_get_row
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccM7NxCj.s:960    .text.matrix_print:0000000000000000 matrix_print
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccM7NxCj.s:981    .text.matrix_key_count:0000000000000000 matrix_key_count

UNDEFINED SYMBOLS
mcp23018_status
i2c_start
i2c_write
i2c_stop
init_mcp23018
ergodox_blink_all_leds
i2c_readNak
matrix_scan_quantum
bitpop16
__do_copy_data
__do_clear_bss
