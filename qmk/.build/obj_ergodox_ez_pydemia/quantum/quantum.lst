   1               		.file	"quantum.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.do_code16,"ax",@progbits
  12               	do_code16:
  13               	.LVL0:
  14               	.LFB107:
  15               		.file 1 "quantum/quantum.c"
   1:quantum/quantum.c **** #include "quantum.h"
   2:quantum/quantum.c **** 
   3:quantum/quantum.c **** static void do_code16 (uint16_t code, void (*f) (uint8_t)) {
  16               		.loc 1 3 60 view -0
  17               		.cfi_startproc
  18               		.loc 1 3 60 is_stmt 0 view .LVU1
  19 0000 0F93      		push r16
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 16, -2
  23 0002 1F93      		push r17
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 17, -3
  27 0004 CF93      		push r28
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 28, -4
  31 0006 DF93      		push r29
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 29, -5
  35               	/* prologue: function */
  36               	/* frame size = 0 */
  37               	/* stack size = 4 */
  38               	.L__stack_usage = 4
  39 0008 EC01      		movw r28,r24
  40 000a 8B01      		movw r16,r22
   4:quantum/quantum.c ****   switch (code) {
  41               		.loc 1 4 3 is_stmt 1 view .LVU2
  42 000c 9A95      		dec r25
  43               	.LVL1:
  44               		.loc 1 4 3 is_stmt 0 view .LVU3
  45 000e 8115      		cp r24,__zero_reg__
  46 0010 9F41      		sbci r25,31
  47 0012 00F4      		brsh .L1
   5:quantum/quantum.c ****   case QK_MODS ... QK_MODS_MAX:
   6:quantum/quantum.c ****     break;
  48               		.loc 1 6 5 is_stmt 1 view .LVU4
   7:quantum/quantum.c ****   default:
   8:quantum/quantum.c ****     return;
   9:quantum/quantum.c ****   }
  10:quantum/quantum.c **** 
  11:quantum/quantum.c ****   if (code & QK_LCTL)
  49               		.loc 1 11 3 view .LVU5
  50               		.loc 1 11 6 is_stmt 0 view .LVU6
  51 0014 D0FF      		sbrs r29,0
  52 0016 00C0      		rjmp .L4
  12:quantum/quantum.c ****     f(KC_LCTL);
  53               		.loc 1 12 5 is_stmt 1 view .LVU7
  54 0018 80EE      		ldi r24,lo8(-32)
  55 001a FB01      		movw r30,r22
  56 001c 0995      		icall
  57               	.LVL2:
  58               	.L4:
  13:quantum/quantum.c ****   if (code & QK_LSFT)
  59               		.loc 1 13 3 view .LVU8
  60               		.loc 1 13 6 is_stmt 0 view .LVU9
  61 001e D1FF      		sbrs r29,1
  62 0020 00C0      		rjmp .L5
  14:quantum/quantum.c ****     f(KC_LSFT);
  63               		.loc 1 14 5 is_stmt 1 view .LVU10
  64 0022 81EE      		ldi r24,lo8(-31)
  65 0024 F801      		movw r30,r16
  66 0026 0995      		icall
  67               	.LVL3:
  68               	.L5:
  15:quantum/quantum.c ****   if (code & QK_LALT)
  69               		.loc 1 15 3 view .LVU11
  70               		.loc 1 15 6 is_stmt 0 view .LVU12
  71 0028 D2FF      		sbrs r29,2
  72 002a 00C0      		rjmp .L6
  16:quantum/quantum.c ****     f(KC_LALT);
  73               		.loc 1 16 5 is_stmt 1 view .LVU13
  74 002c 82EE      		ldi r24,lo8(-30)
  75 002e F801      		movw r30,r16
  76 0030 0995      		icall
  77               	.LVL4:
  78               	.L6:
  17:quantum/quantum.c ****   if (code & QK_LGUI)
  79               		.loc 1 17 3 view .LVU14
  80               		.loc 1 17 6 is_stmt 0 view .LVU15
  81 0032 D3FF      		sbrs r29,3
  82 0034 00C0      		rjmp .L7
  18:quantum/quantum.c ****     f(KC_LGUI);
  83               		.loc 1 18 5 is_stmt 1 view .LVU16
  84 0036 83EE      		ldi r24,lo8(-29)
  85 0038 F801      		movw r30,r16
  86 003a 0995      		icall
  87               	.LVL5:
  88               	.L7:
  19:quantum/quantum.c **** 
  20:quantum/quantum.c ****   if (code & QK_RCTL)
  89               		.loc 1 20 3 view .LVU17
  90               		.loc 1 20 12 is_stmt 0 view .LVU18
  91 003c CE01      		movw r24,r28
  92 003e 8827      		clr r24
  93 0040 9171      		andi r25,17
  94               		.loc 1 20 6 view .LVU19
  95 0042 892B      		or r24,r25
  96 0044 01F0      		breq .L8
  21:quantum/quantum.c ****     f(KC_RCTL);
  97               		.loc 1 21 5 is_stmt 1 view .LVU20
  98 0046 84EE      		ldi r24,lo8(-28)
  99 0048 F801      		movw r30,r16
 100 004a 0995      		icall
 101               	.LVL6:
 102               	.L8:
  22:quantum/quantum.c ****   if (code & QK_RSFT)
 103               		.loc 1 22 3 view .LVU21
 104               		.loc 1 22 12 is_stmt 0 view .LVU22
 105 004c CE01      		movw r24,r28
 106 004e 8827      		clr r24
 107 0050 9271      		andi r25,18
 108               		.loc 1 22 6 view .LVU23
 109 0052 892B      		or r24,r25
 110 0054 01F0      		breq .L9
  23:quantum/quantum.c ****     f(KC_RSFT);
 111               		.loc 1 23 5 is_stmt 1 view .LVU24
 112 0056 85EE      		ldi r24,lo8(-27)
 113 0058 F801      		movw r30,r16
 114 005a 0995      		icall
 115               	.LVL7:
 116               	.L9:
  24:quantum/quantum.c ****   if (code & QK_RALT)
 117               		.loc 1 24 3 view .LVU25
 118               		.loc 1 24 12 is_stmt 0 view .LVU26
 119 005c CE01      		movw r24,r28
 120 005e 8827      		clr r24
 121 0060 9471      		andi r25,20
 122               		.loc 1 24 6 view .LVU27
 123 0062 892B      		or r24,r25
 124 0064 01F0      		breq .L10
  25:quantum/quantum.c ****     f(KC_RALT);
 125               		.loc 1 25 5 is_stmt 1 view .LVU28
 126 0066 86EE      		ldi r24,lo8(-26)
 127 0068 F801      		movw r30,r16
 128 006a 0995      		icall
 129               	.LVL8:
 130               	.L10:
  26:quantum/quantum.c ****   if (code & QK_RGUI)
 131               		.loc 1 26 3 view .LVU29
 132               		.loc 1 26 12 is_stmt 0 view .LVU30
 133 006c CC27      		clr r28
 134 006e D871      		andi r29,24
 135               	.LVL9:
 136               		.loc 1 26 6 view .LVU31
 137 0070 CD2B      		or r28,r29
 138 0072 01F0      		breq .L1
  27:quantum/quantum.c ****     f(KC_RGUI);
 139               		.loc 1 27 5 is_stmt 1 view .LVU32
 140 0074 87EE      		ldi r24,lo8(-25)
 141 0076 F801      		movw r30,r16
 142               	/* epilogue start */
  28:quantum/quantum.c **** }
 143               		.loc 1 28 1 is_stmt 0 view .LVU33
 144 0078 DF91      		pop r29
 145 007a CF91      		pop r28
 146 007c 1F91      		pop r17
 147 007e 0F91      		pop r16
 148               	.LVL10:
  27:quantum/quantum.c ****     f(KC_RGUI);
 149               		.loc 1 27 5 view .LVU34
 150 0080 0994      		ijmp
 151               	.LVL11:
 152               	.L1:
 153               	/* epilogue start */
 154               		.loc 1 28 1 view .LVU35
 155 0082 DF91      		pop r29
 156 0084 CF91      		pop r28
 157 0086 1F91      		pop r17
 158 0088 0F91      		pop r16
 159               	.LVL12:
 160               		.loc 1 28 1 view .LVU36
 161 008a 0895      		ret
 162               		.cfi_endproc
 163               	.LFE107:
 165               		.section	.text.register_code16,"ax",@progbits
 166               	.global	register_code16
 168               	register_code16:
 169               	.LVL13:
 170               	.LFB108:
  29:quantum/quantum.c **** 
  30:quantum/quantum.c **** void register_code16 (uint16_t code) {
 171               		.loc 1 30 38 is_stmt 1 view -0
 172               		.cfi_startproc
 173               		.loc 1 30 38 is_stmt 0 view .LVU38
 174 0000 CF93      		push r28
 175               	.LCFI4:
 176               		.cfi_def_cfa_offset 3
 177               		.cfi_offset 28, -2
 178               	/* prologue: function */
 179               	/* frame size = 0 */
 180               	/* stack size = 1 */
 181               	.L__stack_usage = 1
 182 0002 C82F      		mov r28,r24
  31:quantum/quantum.c ****   do_code16 (code, register_code);
 183               		.loc 1 31 3 is_stmt 1 view .LVU39
 184 0004 60E0      		ldi r22,lo8(gs(register_code))
 185 0006 70E0      		ldi r23,hi8(gs(register_code))
 186 0008 0E94 0000 		call do_code16
 187               	.LVL14:
  32:quantum/quantum.c ****   register_code (code);
 188               		.loc 1 32 3 view .LVU40
 189 000c 8C2F      		mov r24,r28
 190               	/* epilogue start */
  33:quantum/quantum.c **** }
 191               		.loc 1 33 1 is_stmt 0 view .LVU41
 192 000e CF91      		pop r28
  32:quantum/quantum.c ****   register_code (code);
 193               		.loc 1 32 3 view .LVU42
 194 0010 0C94 0000 		jmp register_code
 195               	.LVL15:
 196               		.cfi_endproc
 197               	.LFE108:
 199               		.section	.text.unregister_code16,"ax",@progbits
 200               	.global	unregister_code16
 202               	unregister_code16:
 203               	.LVL16:
 204               	.LFB109:
  34:quantum/quantum.c **** 
  35:quantum/quantum.c **** void unregister_code16 (uint16_t code) {
 205               		.loc 1 35 40 is_stmt 1 view -0
 206               		.cfi_startproc
 207               		.loc 1 35 40 is_stmt 0 view .LVU44
 208 0000 CF93      		push r28
 209               	.LCFI5:
 210               		.cfi_def_cfa_offset 3
 211               		.cfi_offset 28, -2
 212 0002 DF93      		push r29
 213               	.LCFI6:
 214               		.cfi_def_cfa_offset 4
 215               		.cfi_offset 29, -3
 216               	/* prologue: function */
 217               	/* frame size = 0 */
 218               	/* stack size = 2 */
 219               	.L__stack_usage = 2
 220 0004 EC01      		movw r28,r24
  36:quantum/quantum.c ****   unregister_code (code);
 221               		.loc 1 36 3 is_stmt 1 view .LVU45
 222 0006 0E94 0000 		call unregister_code
 223               	.LVL17:
  37:quantum/quantum.c ****   do_code16 (code, unregister_code);
 224               		.loc 1 37 3 view .LVU46
 225 000a 60E0      		ldi r22,lo8(gs(unregister_code))
 226 000c 70E0      		ldi r23,hi8(gs(unregister_code))
 227 000e CE01      		movw r24,r28
 228               	/* epilogue start */
  38:quantum/quantum.c **** }
 229               		.loc 1 38 1 is_stmt 0 view .LVU47
 230 0010 DF91      		pop r29
 231 0012 CF91      		pop r28
 232               	.LVL18:
  37:quantum/quantum.c ****   do_code16 (code, unregister_code);
 233               		.loc 1 37 3 view .LVU48
 234 0014 0C94 0000 		jmp do_code16
 235               	.LVL19:
  37:quantum/quantum.c ****   do_code16 (code, unregister_code);
 236               		.loc 1 37 3 view .LVU49
 237               		.cfi_endproc
 238               	.LFE109:
 240               		.section	.text.process_action_kb,"ax",@progbits
 241               		.weak	process_action_kb
 243               	process_action_kb:
 244               	.LVL20:
 245               	.LFB110:
  39:quantum/quantum.c **** 
  40:quantum/quantum.c **** __attribute__ ((weak))
  41:quantum/quantum.c **** bool process_action_kb(keyrecord_t *record) {
 246               		.loc 1 41 45 is_stmt 1 view -0
 247               		.cfi_startproc
 248               	/* prologue: function */
 249               	/* frame size = 0 */
 250               	/* stack size = 0 */
 251               	.L__stack_usage = 0
  42:quantum/quantum.c ****   return true;
 252               		.loc 1 42 3 view .LVU51
  43:quantum/quantum.c **** }
 253               		.loc 1 43 1 is_stmt 0 view .LVU52
 254 0000 81E0      		ldi r24,lo8(1)
 255               	.LVL21:
 256               	/* epilogue start */
 257               		.loc 1 43 1 view .LVU53
 258 0002 0895      		ret
 259               		.cfi_endproc
 260               	.LFE110:
 262               		.section	.text.process_record_user,"ax",@progbits
 263               		.weak	process_record_user
 265               	process_record_user:
 266               	.LVL22:
 267               	.LFB112:
  44:quantum/quantum.c **** 
  45:quantum/quantum.c **** __attribute__ ((weak))
  46:quantum/quantum.c **** bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
  47:quantum/quantum.c ****   return process_record_user(keycode, record);
  48:quantum/quantum.c **** }
  49:quantum/quantum.c **** 
  50:quantum/quantum.c **** __attribute__ ((weak))
  51:quantum/quantum.c **** bool process_record_user(uint16_t keycode, keyrecord_t *record) {
 268               		.loc 1 51 65 is_stmt 1 view -0
 269               		.cfi_startproc
 270               	/* prologue: function */
 271               	/* frame size = 0 */
 272               	/* stack size = 0 */
 273               	.L__stack_usage = 0
  52:quantum/quantum.c ****   return true;
 274               		.loc 1 52 3 view .LVU55
  53:quantum/quantum.c **** }
 275               		.loc 1 53 1 is_stmt 0 view .LVU56
 276 0000 81E0      		ldi r24,lo8(1)
 277               	.LVL23:
 278               	/* epilogue start */
 279               		.loc 1 53 1 view .LVU57
 280 0002 0895      		ret
 281               		.cfi_endproc
 282               	.LFE112:
 284               		.section	.text.process_record_kb,"ax",@progbits
 285               		.weak	process_record_kb
 287               	process_record_kb:
 288               	.LVL24:
 289               	.LFB111:
  46:quantum/quantum.c ****   return process_record_user(keycode, record);
 290               		.loc 1 46 63 is_stmt 1 view -0
 291               		.cfi_startproc
 292               	/* prologue: function */
 293               	/* frame size = 0 */
 294               	/* stack size = 0 */
 295               	.L__stack_usage = 0
  47:quantum/quantum.c **** }
 296               		.loc 1 47 3 view .LVU59
  47:quantum/quantum.c **** }
 297               		.loc 1 47 10 is_stmt 0 view .LVU60
 298 0000 0C94 0000 		jmp process_record_user
 299               	.LVL25:
  47:quantum/quantum.c **** }
 300               		.loc 1 47 10 view .LVU61
 301               		.cfi_endproc
 302               	.LFE111:
 304               		.section	.text.reset_keyboard,"ax",@progbits
 305               	.global	reset_keyboard
 307               	reset_keyboard:
 308               	.LFB113:
  54:quantum/quantum.c **** 
  55:quantum/quantum.c **** void reset_keyboard(void) {
 309               		.loc 1 55 27 is_stmt 1 view -0
 310               		.cfi_startproc
 311               	/* prologue: function */
 312               	/* frame size = 0 */
 313               	/* stack size = 0 */
 314               	.L__stack_usage = 0
  56:quantum/quantum.c ****   clear_keyboard();
 315               		.loc 1 56 3 view .LVU63
 316 0000 0E94 0000 		call clear_keyboard
 317               	.LVL26:
  57:quantum/quantum.c **** #ifdef AUDIO_ENABLE
  58:quantum/quantum.c ****   stop_all_notes();
  59:quantum/quantum.c ****   shutdown_user();
  60:quantum/quantum.c **** #endif
  61:quantum/quantum.c ****   wait_ms(250);
 318               		.loc 1 61 3 view .LVU64
 319               	.LBB4:
 320               	.LBI4:
 321               		.file 2 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** _delay_ms(double __ms)
 322               		.loc 2 166 1 view .LVU65
 323               	.LBB5:
 167:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	double __tmp ;
 324               		.loc 2 168 2 view .LVU66
 169:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 325               		.loc 2 172 2 view .LVU67
 173:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 326               		.loc 2 173 2 view .LVU68
 174:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 327               		.loc 2 174 2 view .LVU69
 175:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 328               		.loc 2 184 3 view .LVU70
 185:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 329               		.loc 2 187 2 view .LVU71
 330 0004 2FEF      		ldi r18,lo8(799999)
 331 0006 84E3      		ldi r24,hi8(799999)
 332 0008 9CE0      		ldi r25,hlo8(799999)
 333 000a 2150      	1:	subi r18,1
 334 000c 8040      		sbci r24,0
 335 000e 9040      		sbci r25,0
 336 0010 01F4      		brne 1b
 337 0012 00C0      		rjmp .
 338 0014 0000      		nop
 339               	.LVL27:
 340               		.loc 2 187 2 is_stmt 0 view .LVU72
 341               	.LBE5:
 342               	.LBE4:
  62:quantum/quantum.c **** #ifdef CATERINA_BOOTLOADER
  63:quantum/quantum.c ****   *(uint16_t *)0x0800 = 0x7777; // these two are a-star-specific
  64:quantum/quantum.c **** #endif
  65:quantum/quantum.c ****   bootloader_jump();
 343               		.loc 1 65 3 is_stmt 1 view .LVU73
 344 0016 0C94 0000 		jmp bootloader_jump
 345               	.LVL28:
 346               		.cfi_endproc
 347               	.LFE113:
 349               		.section	.text.process_record_quantum,"ax",@progbits
 350               	.global	process_record_quantum
 352               	process_record_quantum:
 353               	.LVL29:
 354               	.LFB114:
  66:quantum/quantum.c **** }
  67:quantum/quantum.c **** 
  68:quantum/quantum.c **** // Shift / paren setup
  69:quantum/quantum.c **** 
  70:quantum/quantum.c **** #ifndef LSPO_KEY
  71:quantum/quantum.c ****   #define LSPO_KEY KC_9
  72:quantum/quantum.c **** #endif
  73:quantum/quantum.c **** #ifndef RSPC_KEY
  74:quantum/quantum.c ****   #define RSPC_KEY KC_0
  75:quantum/quantum.c **** #endif
  76:quantum/quantum.c **** 
  77:quantum/quantum.c **** static bool shift_interrupted[2] = {0, 0};
  78:quantum/quantum.c **** 
  79:quantum/quantum.c **** bool process_record_quantum(keyrecord_t *record) {
 355               		.loc 1 79 50 view -0
 356               		.cfi_startproc
 357               		.loc 1 79 50 is_stmt 0 view .LVU75
 358 0000 0F93      		push r16
 359               	.LCFI7:
 360               		.cfi_def_cfa_offset 3
 361               		.cfi_offset 16, -2
 362 0002 1F93      		push r17
 363               	.LCFI8:
 364               		.cfi_def_cfa_offset 4
 365               		.cfi_offset 17, -3
 366 0004 CF93      		push r28
 367               	.LCFI9:
 368               		.cfi_def_cfa_offset 5
 369               		.cfi_offset 28, -4
 370 0006 DF93      		push r29
 371               	.LCFI10:
 372               		.cfi_def_cfa_offset 6
 373               		.cfi_offset 29, -5
 374               	/* prologue: function */
 375               	/* frame size = 0 */
 376               	/* stack size = 4 */
 377               	.L__stack_usage = 4
 378 0008 8C01      		movw r16,r24
  80:quantum/quantum.c **** 
  81:quantum/quantum.c ****   /* This gets the keycode from the key pressed */
  82:quantum/quantum.c ****   keypos_t key = record->event.key;
 379               		.loc 1 82 3 is_stmt 1 view .LVU76
 380               		.loc 1 82 12 is_stmt 0 view .LVU77
 381 000a FC01      		movw r30,r24
 382 000c C081      		ld r28,Z
 383 000e D181      		ldd r29,Z+1
 384               	.LVL30:
  83:quantum/quantum.c ****   uint16_t keycode;
 385               		.loc 1 83 3 is_stmt 1 view .LVU78
  84:quantum/quantum.c **** 
  85:quantum/quantum.c ****   #if !defined(NO_ACTION_LAYER) && defined(PREVENT_STUCK_MODIFIERS)
  86:quantum/quantum.c ****     /* TODO: Use store_or_get_action() or a similar function. */
  87:quantum/quantum.c ****     if (!disable_action_cache) {
  88:quantum/quantum.c ****       uint8_t layer;
  89:quantum/quantum.c **** 
  90:quantum/quantum.c ****       if (record->event.pressed) {
  91:quantum/quantum.c ****         layer = layer_switch_get_layer(key);
  92:quantum/quantum.c ****         update_source_layers_cache(key, layer);
  93:quantum/quantum.c ****       } else {
  94:quantum/quantum.c ****         layer = read_source_layers_cache(key);
  95:quantum/quantum.c ****       }
  96:quantum/quantum.c ****       keycode = keymap_key_to_keycode(layer, key);
  97:quantum/quantum.c ****     } else
  98:quantum/quantum.c ****   #endif
  99:quantum/quantum.c ****     keycode = keymap_key_to_keycode(layer_switch_get_layer(key), key);
 386               		.loc 1 99 5 view .LVU79
 387               		.loc 1 99 37 is_stmt 0 view .LVU80
 388 0010 CE01      		movw r24,r28
 389               	.LVL31:
 390               		.loc 1 99 37 view .LVU81
 391 0012 0E94 0000 		call layer_switch_get_layer
 392               	.LVL32:
 393               		.loc 1 99 15 view .LVU82
 394 0016 BE01      		movw r22,r28
 395 0018 0E94 0000 		call keymap_key_to_keycode
 396               	.LVL33:
 397 001c EC01      		movw r28,r24
 398               	.LVL34:
 100:quantum/quantum.c **** 
 101:quantum/quantum.c ****     // This is how you use actions here
 102:quantum/quantum.c ****     // if (keycode == KC_LEAD) {
 103:quantum/quantum.c ****     //   action_t action;
 104:quantum/quantum.c ****     //   action.code = ACTION_DEFAULT_LAYER_SET(0);
 105:quantum/quantum.c ****     //   process_action(record, action);
 106:quantum/quantum.c ****     //   return false;
 107:quantum/quantum.c ****     // }
 108:quantum/quantum.c **** 
 109:quantum/quantum.c ****   if (!(
 399               		.loc 1 109 3 is_stmt 1 view .LVU83
 110:quantum/quantum.c ****     process_record_kb(keycode, record) &&
 400               		.loc 1 110 5 is_stmt 0 view .LVU84
 401 001e B801      		movw r22,r16
 402 0020 0E94 0000 		call process_record_kb
 403               	.LVL35:
 111:quantum/quantum.c ****   #ifdef MIDI_ENABLE
 112:quantum/quantum.c ****     process_midi(keycode, record) &&
 113:quantum/quantum.c ****   #endif
 114:quantum/quantum.c ****   #ifdef AUDIO_ENABLE
 115:quantum/quantum.c ****     process_music(keycode, record) &&
 116:quantum/quantum.c ****   #endif
 117:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
 118:quantum/quantum.c ****     process_tap_dance(keycode, record) &&
 119:quantum/quantum.c ****   #endif
 120:quantum/quantum.c ****   #ifndef DISABLE_LEADER
 121:quantum/quantum.c ****     process_leader(keycode, record) &&
 404               		.loc 1 121 37 view .LVU85
 405 0024 8823      		tst r24
 406 0026 01F4      		brne .+2
 407 0028 00C0      		rjmp .L42
 118:quantum/quantum.c ****   #endif
 408               		.loc 1 118 5 view .LVU86
 409 002a B801      		movw r22,r16
 410 002c CE01      		movw r24,r28
 411 002e 0E94 0000 		call process_tap_dance
 412               	.LVL36:
 110:quantum/quantum.c ****     process_record_kb(keycode, record) &&
 413               		.loc 1 110 40 view .LVU87
 414 0032 8823      		tst r24
 415 0034 01F0      		breq .L42
 416               		.loc 1 121 5 view .LVU88
 417 0036 B801      		movw r22,r16
 418 0038 CE01      		movw r24,r28
 419 003a 0E94 0000 		call process_leader
 420               	.LVL37:
 118:quantum/quantum.c ****   #endif
 421               		.loc 1 118 40 view .LVU89
 422 003e 8823      		tst r24
 423 0040 01F0      		breq .L42
 122:quantum/quantum.c ****   #endif
 123:quantum/quantum.c ****   #ifndef DISABLE_CHORDING
 124:quantum/quantum.c ****     process_chording(keycode, record) &&
 125:quantum/quantum.c ****   #endif
 126:quantum/quantum.c ****   #ifdef UNICODE_ENABLE
 127:quantum/quantum.c ****     process_unicode(keycode, record) &&
 424               		.loc 1 127 5 discriminator 2 view .LVU90
 425 0042 B801      		movw r22,r16
 426 0044 CE01      		movw r24,r28
 427 0046 0E94 0000 		call process_unicode
 428               	.LVL38:
 121:quantum/quantum.c ****   #endif
 429               		.loc 1 121 37 discriminator 2 view .LVU91
 430 004a 8823      		tst r24
 431 004c 01F0      		breq .L42
 128:quantum/quantum.c ****   #endif
 129:quantum/quantum.c ****   #ifdef UCIS_ENABLE
 130:quantum/quantum.c ****     process_ucis(keycode, record) &&
 131:quantum/quantum.c ****   #endif
 132:quantum/quantum.c ****   #ifdef UNICODEMAP_ENABLE
 133:quantum/quantum.c ****     process_unicode_map(keycode, record) &&
 134:quantum/quantum.c ****   #endif
 135:quantum/quantum.c ****       true)) {
 136:quantum/quantum.c ****     return false;
 137:quantum/quantum.c ****   }
 138:quantum/quantum.c **** 
 139:quantum/quantum.c ****   // Shift / paren setup
 140:quantum/quantum.c **** 
 141:quantum/quantum.c ****   switch(keycode) {
 432               		.loc 1 141 3 is_stmt 1 view .LVU92
 433 004e C531      		cpi r28,21
 434 0050 F0E7      		ldi r31,112
 435 0052 DF07      		cpc r29,r31
 436 0054 00F4      		brsh .L46
 437 0056 C230      		cpi r28,2
 438 0058 80E7      		ldi r24,112
 439 005a D807      		cpc r29,r24
 440 005c 00F4      		brsh .L47
 441 005e C115      		cp r28,__zero_reg__
 442 0060 E0E7      		ldi r30,112
 443 0062 DE07      		cpc r29,r30
 444 0064 01F0      		breq .L48
 445 0066 C130      		cpi r28,1
 446 0068 D047      		sbci r29,112
 447 006a 01F0      		breq .L49
 448               	.L50:
 142:quantum/quantum.c ****     case RESET:
 143:quantum/quantum.c ****       if (record->event.pressed) {
 144:quantum/quantum.c ****         reset_keyboard();
 145:quantum/quantum.c ****       }
 146:quantum/quantum.c **** 	  return false;
 147:quantum/quantum.c ****       break;
 148:quantum/quantum.c ****     case DEBUG:
 149:quantum/quantum.c ****       if (record->event.pressed) {
 150:quantum/quantum.c ****           print("\nDEBUG: enabled.\n");
 151:quantum/quantum.c ****           debug_enable = true;
 152:quantum/quantum.c ****       }
 153:quantum/quantum.c **** 	  return false;
 154:quantum/quantum.c ****       break;
 155:quantum/quantum.c **** 	#ifdef RGBLIGHT_ENABLE
 156:quantum/quantum.c **** 	case RGB_TOG:
 157:quantum/quantum.c **** 		if (record->event.pressed) {
 158:quantum/quantum.c **** 			rgblight_toggle();
 159:quantum/quantum.c ****       }
 160:quantum/quantum.c **** 	  return false;
 161:quantum/quantum.c ****       break;
 162:quantum/quantum.c **** 	case RGB_MOD:
 163:quantum/quantum.c **** 		if (record->event.pressed) {
 164:quantum/quantum.c **** 			rgblight_step();
 165:quantum/quantum.c ****       }
 166:quantum/quantum.c **** 	  return false;
 167:quantum/quantum.c ****       break;
 168:quantum/quantum.c **** 	case RGB_HUI:
 169:quantum/quantum.c **** 		if (record->event.pressed) {
 170:quantum/quantum.c **** 			rgblight_increase_hue();
 171:quantum/quantum.c ****       }
 172:quantum/quantum.c **** 	  return false;
 173:quantum/quantum.c ****       break;
 174:quantum/quantum.c **** 	case RGB_HUD:
 175:quantum/quantum.c **** 		if (record->event.pressed) {
 176:quantum/quantum.c **** 			rgblight_decrease_hue();
 177:quantum/quantum.c ****       }
 178:quantum/quantum.c **** 	  return false;
 179:quantum/quantum.c ****       break;
 180:quantum/quantum.c **** 	case RGB_SAI:
 181:quantum/quantum.c **** 		if (record->event.pressed) {
 182:quantum/quantum.c **** 			rgblight_increase_sat();
 183:quantum/quantum.c ****       }
 184:quantum/quantum.c **** 	  return false;
 185:quantum/quantum.c ****       break;
 186:quantum/quantum.c **** 	case RGB_SAD:
 187:quantum/quantum.c **** 		if (record->event.pressed) {
 188:quantum/quantum.c **** 			rgblight_decrease_sat();
 189:quantum/quantum.c ****       }
 190:quantum/quantum.c **** 	  return false;
 191:quantum/quantum.c ****       break;
 192:quantum/quantum.c **** 	case RGB_VAI:
 193:quantum/quantum.c **** 		if (record->event.pressed) {
 194:quantum/quantum.c **** 			rgblight_increase_val();
 195:quantum/quantum.c ****       }
 196:quantum/quantum.c **** 	  return false;
 197:quantum/quantum.c ****       break;
 198:quantum/quantum.c **** 	case RGB_VAD:
 199:quantum/quantum.c **** 		if (record->event.pressed) {
 200:quantum/quantum.c **** 			rgblight_decrease_val();
 201:quantum/quantum.c ****       }
 202:quantum/quantum.c **** 	  return false;
 203:quantum/quantum.c ****       break;
 204:quantum/quantum.c **** 	#endif
 205:quantum/quantum.c ****     case MAGIC_SWAP_CONTROL_CAPSLOCK ... MAGIC_TOGGLE_NKRO:
 206:quantum/quantum.c ****       if (record->event.pressed) {
 207:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 208:quantum/quantum.c ****         if (!eeconfig_is_enabled()) {
 209:quantum/quantum.c ****             eeconfig_init();
 210:quantum/quantum.c ****         }
 211:quantum/quantum.c ****         /* keymap config */
 212:quantum/quantum.c ****         keymap_config.raw = eeconfig_read_keymap();
 213:quantum/quantum.c ****         switch (keycode)
 214:quantum/quantum.c ****         {
 215:quantum/quantum.c ****           case MAGIC_SWAP_CONTROL_CAPSLOCK:
 216:quantum/quantum.c ****             keymap_config.swap_control_capslock = true;
 217:quantum/quantum.c ****             break;
 218:quantum/quantum.c ****           case MAGIC_CAPSLOCK_TO_CONTROL:
 219:quantum/quantum.c ****             keymap_config.capslock_to_control = true;
 220:quantum/quantum.c ****             break;
 221:quantum/quantum.c ****           case MAGIC_SWAP_LALT_LGUI:
 222:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = true;
 223:quantum/quantum.c ****             break;
 224:quantum/quantum.c ****           case MAGIC_SWAP_RALT_RGUI:
 225:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 226:quantum/quantum.c ****             break;
 227:quantum/quantum.c ****           case MAGIC_NO_GUI:
 228:quantum/quantum.c ****             keymap_config.no_gui = true;
 229:quantum/quantum.c ****             break;
 230:quantum/quantum.c ****           case MAGIC_SWAP_GRAVE_ESC:
 231:quantum/quantum.c ****             keymap_config.swap_grave_esc = true;
 232:quantum/quantum.c ****             break;
 233:quantum/quantum.c ****           case MAGIC_SWAP_BACKSLASH_BACKSPACE:
 234:quantum/quantum.c ****             keymap_config.swap_backslash_backspace = true;
 235:quantum/quantum.c ****             break;
 236:quantum/quantum.c ****           case MAGIC_HOST_NKRO:
 237:quantum/quantum.c ****             keymap_config.nkro = true;
 238:quantum/quantum.c ****             break;
 239:quantum/quantum.c ****           case MAGIC_SWAP_ALT_GUI:
 240:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = true;
 241:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 242:quantum/quantum.c ****             break;
 243:quantum/quantum.c ****           case MAGIC_UNSWAP_CONTROL_CAPSLOCK:
 244:quantum/quantum.c ****             keymap_config.swap_control_capslock = false;
 245:quantum/quantum.c ****             break;
 246:quantum/quantum.c ****           case MAGIC_UNCAPSLOCK_TO_CONTROL:
 247:quantum/quantum.c ****             keymap_config.capslock_to_control = false;
 248:quantum/quantum.c ****             break;
 249:quantum/quantum.c ****           case MAGIC_UNSWAP_LALT_LGUI:
 250:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = false;
 251:quantum/quantum.c ****             break;
 252:quantum/quantum.c ****           case MAGIC_UNSWAP_RALT_RGUI:
 253:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 254:quantum/quantum.c ****             break;
 255:quantum/quantum.c ****           case MAGIC_UNNO_GUI:
 256:quantum/quantum.c ****             keymap_config.no_gui = false;
 257:quantum/quantum.c ****             break;
 258:quantum/quantum.c ****           case MAGIC_UNSWAP_GRAVE_ESC:
 259:quantum/quantum.c ****             keymap_config.swap_grave_esc = false;
 260:quantum/quantum.c ****             break;
 261:quantum/quantum.c ****           case MAGIC_UNSWAP_BACKSLASH_BACKSPACE:
 262:quantum/quantum.c ****             keymap_config.swap_backslash_backspace = false;
 263:quantum/quantum.c ****             break;
 264:quantum/quantum.c ****           case MAGIC_UNHOST_NKRO:
 265:quantum/quantum.c ****             keymap_config.nkro = false;
 266:quantum/quantum.c ****             break;
 267:quantum/quantum.c ****           case MAGIC_UNSWAP_ALT_GUI:
 268:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = false;
 269:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 270:quantum/quantum.c ****             break;
 271:quantum/quantum.c ****           case MAGIC_TOGGLE_NKRO:
 272:quantum/quantum.c ****             keymap_config.nkro = !keymap_config.nkro;
 273:quantum/quantum.c ****             break;
 274:quantum/quantum.c ****           default:
 275:quantum/quantum.c ****             break;
 276:quantum/quantum.c ****         }
 277:quantum/quantum.c ****         eeconfig_update_keymap(keymap_config.raw);
 278:quantum/quantum.c ****         clear_keyboard(); // clear to prevent stuck keys
 279:quantum/quantum.c **** 
 280:quantum/quantum.c ****         return false;
 281:quantum/quantum.c ****       }
 282:quantum/quantum.c ****       break;
 283:quantum/quantum.c ****     case KC_LSPO: {
 284:quantum/quantum.c ****       if (record->event.pressed) {
 285:quantum/quantum.c ****         shift_interrupted[0] = false;
 286:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 287:quantum/quantum.c ****       }
 288:quantum/quantum.c ****       else {
 289:quantum/quantum.c ****         #ifdef DISABLE_SPACE_CADET_ROLLOVER
 290:quantum/quantum.c ****           if (get_mods() & MOD_BIT(KC_RSFT)) {
 291:quantum/quantum.c ****             shift_interrupted[0] = true;
 292:quantum/quantum.c ****             shift_interrupted[1] = true;
 293:quantum/quantum.c ****           }
 294:quantum/quantum.c ****         #endif
 295:quantum/quantum.c ****         if (!shift_interrupted[0]) {
 296:quantum/quantum.c ****           register_code(LSPO_KEY);
 297:quantum/quantum.c ****           unregister_code(LSPO_KEY);
 298:quantum/quantum.c ****         }
 299:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_LSFT));
 300:quantum/quantum.c ****       }
 301:quantum/quantum.c ****       return false;
 302:quantum/quantum.c ****       // break;
 303:quantum/quantum.c ****     }
 304:quantum/quantum.c **** 
 305:quantum/quantum.c ****     case KC_RSPC: {
 306:quantum/quantum.c ****       if (record->event.pressed) {
 307:quantum/quantum.c ****         shift_interrupted[1] = false;
 308:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 309:quantum/quantum.c ****       }
 310:quantum/quantum.c ****       else {
 311:quantum/quantum.c ****         #ifdef DISABLE_SPACE_CADET_ROLLOVER
 312:quantum/quantum.c ****           if (get_mods() & MOD_BIT(KC_LSFT)) {
 313:quantum/quantum.c ****             shift_interrupted[0] = true;
 314:quantum/quantum.c ****             shift_interrupted[1] = true;
 315:quantum/quantum.c ****           }
 316:quantum/quantum.c ****         #endif
 317:quantum/quantum.c ****         if (!shift_interrupted[1]) {
 318:quantum/quantum.c ****           register_code(RSPC_KEY);
 319:quantum/quantum.c ****           unregister_code(RSPC_KEY);
 320:quantum/quantum.c ****         }
 321:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 322:quantum/quantum.c ****       }
 323:quantum/quantum.c ****       return false;
 324:quantum/quantum.c ****       // break;
 325:quantum/quantum.c ****     }
 326:quantum/quantum.c ****     default: {
 327:quantum/quantum.c ****       shift_interrupted[0] = true;
 449               		.loc 1 327 7 view .LVU93
 450               		.loc 1 327 28 is_stmt 0 view .LVU94
 451 006c 81E0      		ldi r24,lo8(1)
 452 006e 8093 0000 		sts shift_interrupted,r24
 328:quantum/quantum.c ****       shift_interrupted[1] = true;
 453               		.loc 1 328 7 is_stmt 1 view .LVU95
 454               		.loc 1 328 28 is_stmt 0 view .LVU96
 455 0072 8093 0000 		sts shift_interrupted+1,r24
 329:quantum/quantum.c ****       break;
 456               		.loc 1 329 7 is_stmt 1 view .LVU97
 457               	.L53:
 330:quantum/quantum.c ****     }
 331:quantum/quantum.c ****   }
 332:quantum/quantum.c **** 
 333:quantum/quantum.c ****   return process_action_kb(record);
 458               		.loc 1 333 3 view .LVU98
 459               		.loc 1 333 10 is_stmt 0 view .LVU99
 460 0076 C801      		movw r24,r16
 461               	/* epilogue start */
 334:quantum/quantum.c **** }
 462               		.loc 1 334 1 view .LVU100
 463 0078 DF91      		pop r29
 464 007a CF91      		pop r28
 465               	.LVL39:
 466               		.loc 1 334 1 view .LVU101
 467 007c 1F91      		pop r17
 468 007e 0F91      		pop r16
 469               	.LVL40:
 333:quantum/quantum.c **** }
 470               		.loc 1 333 10 view .LVU102
 471 0080 0C94 0000 		jmp process_action_kb
 472               	.LVL41:
 473               	.L46:
 333:quantum/quantum.c **** }
 474               		.loc 1 333 10 view .LVU103
 475 0084 CC33      		cpi r28,60
 476 0086 80E7      		ldi r24,112
 477 0088 D807      		cpc r29,r24
 478 008a 01F4      		brne .+2
 479 008c 00C0      		rjmp .L51
 480 008e CD33      		cpi r28,61
 481 0090 D047      		sbci r29,112
 482 0092 01F4      		brne .L50
 306:quantum/quantum.c ****         shift_interrupted[1] = false;
 483               		.loc 1 306 7 is_stmt 1 view .LVU104
 306:quantum/quantum.c ****         shift_interrupted[1] = false;
 484               		.loc 1 306 24 is_stmt 0 view .LVU105
 485 0094 F801      		movw r30,r16
 486 0096 8281      		ldd r24,Z+2
 306:quantum/quantum.c ****         shift_interrupted[1] = false;
 487               		.loc 1 306 10 view .LVU106
 488 0098 8823      		tst r24
 489 009a 01F4      		brne .+2
 490 009c 00C0      		rjmp .L78
 307:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 491               		.loc 1 307 9 is_stmt 1 view .LVU107
 307:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 492               		.loc 1 307 30 is_stmt 0 view .LVU108
 493 009e 1092 0000 		sts shift_interrupted+1,__zero_reg__
 308:quantum/quantum.c ****       }
 494               		.loc 1 308 9 is_stmt 1 view .LVU109
 495 00a2 80E2      		ldi r24,lo8(32)
 496 00a4 00C0      		rjmp .L99
 497               	.L48:
 143:quantum/quantum.c ****         reset_keyboard();
 498               		.loc 1 143 7 view .LVU110
 143:quantum/quantum.c ****         reset_keyboard();
 499               		.loc 1 143 10 is_stmt 0 view .LVU111
 500 00a6 F801      		movw r30,r16
 501 00a8 8281      		ldd r24,Z+2
 502 00aa 8111      		cpse r24,__zero_reg__
 144:quantum/quantum.c ****       }
 503               		.loc 1 144 9 is_stmt 1 view .LVU112
 504 00ac 0E94 0000 		call reset_keyboard
 505               	.LVL42:
 506               	.L42:
 507               		.loc 1 334 1 is_stmt 0 view .LVU113
 508 00b0 80E0      		ldi r24,0
 509               	/* epilogue start */
 510 00b2 DF91      		pop r29
 511 00b4 CF91      		pop r28
 512               	.LVL43:
 513               		.loc 1 334 1 view .LVU114
 514 00b6 1F91      		pop r17
 515 00b8 0F91      		pop r16
 516               	.LVL44:
 517               		.loc 1 334 1 view .LVU115
 518 00ba 0895      		ret
 519               	.LVL45:
 520               	.L49:
 147:quantum/quantum.c ****     case DEBUG:
 521               		.loc 1 147 7 is_stmt 1 view .LVU116
 149:quantum/quantum.c ****           print("\nDEBUG: enabled.\n");
 522               		.loc 1 149 7 view .LVU117
 149:quantum/quantum.c ****           print("\nDEBUG: enabled.\n");
 523               		.loc 1 149 10 is_stmt 0 view .LVU118
 524 00bc F801      		movw r30,r16
 525 00be 8281      		ldd r24,Z+2
 526 00c0 8823      		tst r24
 527 00c2 01F0      		breq .L42
 150:quantum/quantum.c ****           debug_enable = true;
 528               		.loc 1 150 39 is_stmt 1 view .LVU119
 151:quantum/quantum.c ****       }
 529               		.loc 1 151 11 view .LVU120
 151:quantum/quantum.c ****       }
 530               		.loc 1 151 24 is_stmt 0 view .LVU121
 531 00c4 8091 0000 		lds r24,debug_config
 532 00c8 8160      		ori r24,lo8(1<<0)
 533 00ca 8093 0000 		sts debug_config,r24
 534 00ce 00C0      		rjmp .L42
 535               	.L47:
 154:quantum/quantum.c **** 	#ifdef RGBLIGHT_ENABLE
 536               		.loc 1 154 7 is_stmt 1 view .LVU122
 206:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 537               		.loc 1 206 7 view .LVU123
 206:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 538               		.loc 1 206 10 is_stmt 0 view .LVU124
 539 00d0 F801      		movw r30,r16
 540 00d2 8281      		ldd r24,Z+2
 541 00d4 8823      		tst r24
 542 00d6 01F0      		breq .L53
 208:quantum/quantum.c ****             eeconfig_init();
 543               		.loc 1 208 9 is_stmt 1 view .LVU125
 208:quantum/quantum.c ****             eeconfig_init();
 544               		.loc 1 208 14 is_stmt 0 view .LVU126
 545 00d8 0E94 0000 		call eeconfig_is_enabled
 546               	.LVL46:
 208:quantum/quantum.c ****             eeconfig_init();
 547               		.loc 1 208 12 view .LVU127
 548 00dc 8111      		cpse r24,__zero_reg__
 549 00de 00C0      		rjmp .L54
 209:quantum/quantum.c ****         }
 550               		.loc 1 209 13 is_stmt 1 view .LVU128
 551 00e0 0E94 0000 		call eeconfig_init
 552               	.LVL47:
 553               	.L54:
 212:quantum/quantum.c ****         switch (keycode)
 554               		.loc 1 212 9 view .LVU129
 212:quantum/quantum.c ****         switch (keycode)
 555               		.loc 1 212 29 is_stmt 0 view .LVU130
 556 00e4 0E94 0000 		call eeconfig_read_keymap
 557               	.LVL48:
 558 00e8 90E0      		ldi r25,0
 559 00ea 9093 0000 		sts keymap_config+1,r25
 560 00ee 8093 0000 		sts keymap_config,r24
 213:quantum/quantum.c ****         {
 561               		.loc 1 213 9 is_stmt 1 view .LVU131
 562 00f2 FE01      		movw r30,r28
 563 00f4 E350      		subi r30,3
 564 00f6 F047      		sbci r31,112
 216:quantum/quantum.c ****             break;
 565               		.loc 1 216 49 is_stmt 0 view .LVU132
 566 00f8 8091 0000 		lds r24,keymap_config
 567 00fc 8160      		ori r24,lo8(1<<0)
 568 00fe E231      		cpi r30,18
 569 0100 F105      		cpc r31,__zero_reg__
 570 0102 00F4      		brsh .L98
 571 0104 E050      		subi r30,lo8(-(gs(.L57)))
 572 0106 F040      		sbci r31,hi8(-(gs(.L57)))
 573 0108 0C94 0000 		jmp __tablejump2__
 574               		.section	.jumptables.gcc.process_record_quantum,"a",@progbits
 575               		.p2align	1
 576               	.L57:
 577 0000 0000      		.word gs(.L74)
 578 0002 0000      		.word gs(.L73)
 579 0004 0000      		.word gs(.L72)
 580 0006 0000      		.word gs(.L71)
 581 0008 0000      		.word gs(.L70)
 582 000a 0000      		.word gs(.L69)
 583 000c 0000      		.word gs(.L68)
 584 000e 0000      		.word gs(.L67)
 585 0010 0000      		.word gs(.L66)
 586 0012 0000      		.word gs(.L65)
 587 0014 0000      		.word gs(.L64)
 588 0016 0000      		.word gs(.L63)
 589 0018 0000      		.word gs(.L62)
 590 001a 0000      		.word gs(.L61)
 591 001c 0000      		.word gs(.L60)
 592 001e 0000      		.word gs(.L59)
 593 0020 0000      		.word gs(.L58)
 594 0022 0000      		.word gs(.L56)
 595               		.section	.text.process_record_quantum
 596               	.L74:
 219:quantum/quantum.c ****             break;
 597               		.loc 1 219 13 is_stmt 1 view .LVU133
 219:quantum/quantum.c ****             break;
 598               		.loc 1 219 47 is_stmt 0 view .LVU134
 599 010c 8091 0000 		lds r24,keymap_config
 600 0110 8260      		ori r24,lo8(1<<1)
 601               	.L98:
 272:quantum/quantum.c ****             break;
 602               		.loc 1 272 32 view .LVU135
 603 0112 8093 0000 		sts keymap_config,r24
 273:quantum/quantum.c ****           default:
 604               		.loc 1 273 13 is_stmt 1 view .LVU136
 277:quantum/quantum.c ****         clear_keyboard(); // clear to prevent stuck keys
 605               		.loc 1 277 9 view .LVU137
 606 0116 8091 0000 		lds r24,keymap_config
 607 011a 0E94 0000 		call eeconfig_update_keymap
 608               	.LVL49:
 278:quantum/quantum.c **** 
 609               		.loc 1 278 9 view .LVU138
 610 011e 0E94 0000 		call clear_keyboard
 611               	.LVL50:
 280:quantum/quantum.c ****       }
 612               		.loc 1 280 9 view .LVU139
 280:quantum/quantum.c ****       }
 613               		.loc 1 280 16 is_stmt 0 view .LVU140
 614 0122 00C0      		rjmp .L42
 615               	.L73:
 222:quantum/quantum.c ****             break;
 616               		.loc 1 222 13 is_stmt 1 view .LVU141
 222:quantum/quantum.c ****             break;
 617               		.loc 1 222 42 is_stmt 0 view .LVU142
 618 0124 8091 0000 		lds r24,keymap_config
 619 0128 8460      		ori r24,lo8(1<<2)
 620 012a 00C0      		rjmp .L98
 621               	.L72:
 225:quantum/quantum.c ****             break;
 622               		.loc 1 225 13 is_stmt 1 view .LVU143
 225:quantum/quantum.c ****             break;
 623               		.loc 1 225 42 is_stmt 0 view .LVU144
 624 012c 8091 0000 		lds r24,keymap_config
 625 0130 8860      		ori r24,lo8(1<<3)
 626 0132 00C0      		rjmp .L98
 627               	.L71:
 228:quantum/quantum.c ****             break;
 628               		.loc 1 228 13 is_stmt 1 view .LVU145
 228:quantum/quantum.c ****             break;
 629               		.loc 1 228 34 is_stmt 0 view .LVU146
 630 0134 8091 0000 		lds r24,keymap_config
 631 0138 8061      		ori r24,lo8(1<<4)
 632 013a 00C0      		rjmp .L98
 633               	.L70:
 231:quantum/quantum.c ****             break;
 634               		.loc 1 231 13 is_stmt 1 view .LVU147
 231:quantum/quantum.c ****             break;
 635               		.loc 1 231 42 is_stmt 0 view .LVU148
 636 013c 8091 0000 		lds r24,keymap_config
 637 0140 8062      		ori r24,lo8(1<<5)
 638 0142 00C0      		rjmp .L98
 639               	.L69:
 234:quantum/quantum.c ****             break;
 640               		.loc 1 234 13 is_stmt 1 view .LVU149
 234:quantum/quantum.c ****             break;
 641               		.loc 1 234 52 is_stmt 0 view .LVU150
 642 0144 8091 0000 		lds r24,keymap_config
 643 0148 8064      		ori r24,lo8(1<<6)
 644 014a 00C0      		rjmp .L98
 645               	.L68:
 237:quantum/quantum.c ****             break;
 646               		.loc 1 237 13 is_stmt 1 view .LVU151
 237:quantum/quantum.c ****             break;
 647               		.loc 1 237 32 is_stmt 0 view .LVU152
 648 014c 8091 0000 		lds r24,keymap_config
 649 0150 8068      		ori r24,lo8(1<<7)
 650 0152 00C0      		rjmp .L98
 651               	.L67:
 240:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 652               		.loc 1 240 13 is_stmt 1 view .LVU153
 241:quantum/quantum.c ****             break;
 653               		.loc 1 241 13 view .LVU154
 240:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 654               		.loc 1 240 42 is_stmt 0 view .LVU155
 655 0154 8091 0000 		lds r24,keymap_config
 656 0158 8C60      		ori r24,lo8(12)
 657 015a 00C0      		rjmp .L98
 658               	.L66:
 244:quantum/quantum.c ****             break;
 659               		.loc 1 244 13 is_stmt 1 view .LVU156
 244:quantum/quantum.c ****             break;
 660               		.loc 1 244 49 is_stmt 0 view .LVU157
 661 015c 8091 0000 		lds r24,keymap_config
 662 0160 8E7F      		andi r24,lo8(~(1<<0))
 663 0162 00C0      		rjmp .L98
 664               	.L65:
 247:quantum/quantum.c ****             break;
 665               		.loc 1 247 13 is_stmt 1 view .LVU158
 247:quantum/quantum.c ****             break;
 666               		.loc 1 247 47 is_stmt 0 view .LVU159
 667 0164 8091 0000 		lds r24,keymap_config
 668 0168 8D7F      		andi r24,lo8(~(1<<1))
 669 016a 00C0      		rjmp .L98
 670               	.L64:
 250:quantum/quantum.c ****             break;
 671               		.loc 1 250 13 is_stmt 1 view .LVU160
 250:quantum/quantum.c ****             break;
 672               		.loc 1 250 42 is_stmt 0 view .LVU161
 673 016c 8091 0000 		lds r24,keymap_config
 674 0170 8B7F      		andi r24,lo8(~(1<<2))
 675 0172 00C0      		rjmp .L98
 676               	.L63:
 253:quantum/quantum.c ****             break;
 677               		.loc 1 253 13 is_stmt 1 view .LVU162
 253:quantum/quantum.c ****             break;
 678               		.loc 1 253 42 is_stmt 0 view .LVU163
 679 0174 8091 0000 		lds r24,keymap_config
 680 0178 877F      		andi r24,lo8(~(1<<3))
 681 017a 00C0      		rjmp .L98
 682               	.L62:
 256:quantum/quantum.c ****             break;
 683               		.loc 1 256 13 is_stmt 1 view .LVU164
 256:quantum/quantum.c ****             break;
 684               		.loc 1 256 34 is_stmt 0 view .LVU165
 685 017c 8091 0000 		lds r24,keymap_config
 686 0180 8F7E      		andi r24,lo8(~(1<<4))
 687 0182 00C0      		rjmp .L98
 688               	.L61:
 259:quantum/quantum.c ****             break;
 689               		.loc 1 259 13 is_stmt 1 view .LVU166
 259:quantum/quantum.c ****             break;
 690               		.loc 1 259 42 is_stmt 0 view .LVU167
 691 0184 8091 0000 		lds r24,keymap_config
 692 0188 8F7D      		andi r24,lo8(~(1<<5))
 693 018a 00C0      		rjmp .L98
 694               	.L60:
 262:quantum/quantum.c ****             break;
 695               		.loc 1 262 13 is_stmt 1 view .LVU168
 262:quantum/quantum.c ****             break;
 696               		.loc 1 262 52 is_stmt 0 view .LVU169
 697 018c 8091 0000 		lds r24,keymap_config
 698 0190 8F7B      		andi r24,lo8(~(1<<6))
 699 0192 00C0      		rjmp .L98
 700               	.L59:
 265:quantum/quantum.c ****             break;
 701               		.loc 1 265 13 is_stmt 1 view .LVU170
 265:quantum/quantum.c ****             break;
 702               		.loc 1 265 32 is_stmt 0 view .LVU171
 703 0194 8091 0000 		lds r24,keymap_config
 704 0198 8F77      		andi r24,lo8(~(1<<7))
 705 019a 00C0      		rjmp .L98
 706               	.L58:
 268:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 707               		.loc 1 268 13 is_stmt 1 view .LVU172
 269:quantum/quantum.c ****             break;
 708               		.loc 1 269 13 view .LVU173
 268:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 709               		.loc 1 268 42 is_stmt 0 view .LVU174
 710 019c 8091 0000 		lds r24,keymap_config
 711 01a0 837F      		andi r24,lo8(-13)
 712 01a2 00C0      		rjmp .L98
 713               	.L56:
 272:quantum/quantum.c ****             break;
 714               		.loc 1 272 13 is_stmt 1 view .LVU175
 272:quantum/quantum.c ****             break;
 715               		.loc 1 272 48 is_stmt 0 view .LVU176
 716 01a4 9091 0000 		lds r25,keymap_config
 272:quantum/quantum.c ****             break;
 717               		.loc 1 272 32 view .LVU177
 718 01a8 892F      		mov r24,r25
 719 01aa 97FB      		bst r25,7
 720 01ac 87F9      		bld r24,7
 721 01ae 8058      		subi r24,0x80
 722 01b0 00C0      		rjmp .L98
 723               	.L51:
 284:quantum/quantum.c ****         shift_interrupted[0] = false;
 724               		.loc 1 284 7 is_stmt 1 view .LVU178
 284:quantum/quantum.c ****         shift_interrupted[0] = false;
 725               		.loc 1 284 24 is_stmt 0 view .LVU179
 726 01b2 F801      		movw r30,r16
 727 01b4 8281      		ldd r24,Z+2
 284:quantum/quantum.c ****         shift_interrupted[0] = false;
 728               		.loc 1 284 10 view .LVU180
 729 01b6 8823      		tst r24
 730 01b8 01F0      		breq .L76
 285:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 731               		.loc 1 285 9 is_stmt 1 view .LVU181
 285:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 732               		.loc 1 285 30 is_stmt 0 view .LVU182
 733 01ba 1092 0000 		sts shift_interrupted,__zero_reg__
 286:quantum/quantum.c ****       }
 734               		.loc 1 286 9 is_stmt 1 view .LVU183
 735 01be 82E0      		ldi r24,lo8(2)
 736               	.L99:
 308:quantum/quantum.c ****       }
 737               		.loc 1 308 9 is_stmt 0 view .LVU184
 738 01c0 0E94 0000 		call register_mods
 739               	.LVL51:
 740 01c4 00C0      		rjmp .L42
 741               	.L76:
 295:quantum/quantum.c ****           register_code(LSPO_KEY);
 742               		.loc 1 295 9 is_stmt 1 view .LVU185
 295:quantum/quantum.c ****           register_code(LSPO_KEY);
 743               		.loc 1 295 12 is_stmt 0 view .LVU186
 744 01c6 8091 0000 		lds r24,shift_interrupted
 745 01ca 8111      		cpse r24,__zero_reg__
 746 01cc 00C0      		rjmp .L77
 296:quantum/quantum.c ****           unregister_code(LSPO_KEY);
 747               		.loc 1 296 11 is_stmt 1 view .LVU187
 748 01ce 86E2      		ldi r24,lo8(38)
 749 01d0 0E94 0000 		call register_code
 750               	.LVL52:
 297:quantum/quantum.c ****         }
 751               		.loc 1 297 11 view .LVU188
 752 01d4 86E2      		ldi r24,lo8(38)
 753 01d6 0E94 0000 		call unregister_code
 754               	.LVL53:
 755               	.L77:
 299:quantum/quantum.c ****       }
 756               		.loc 1 299 9 view .LVU189
 757 01da 82E0      		ldi r24,lo8(2)
 758               	.L100:
 321:quantum/quantum.c ****       }
 759               		.loc 1 321 9 is_stmt 0 view .LVU190
 760 01dc 0E94 0000 		call unregister_mods
 761               	.LVL54:
 762 01e0 00C0      		rjmp .L42
 763               	.L78:
 317:quantum/quantum.c ****           register_code(RSPC_KEY);
 764               		.loc 1 317 9 is_stmt 1 view .LVU191
 317:quantum/quantum.c ****           register_code(RSPC_KEY);
 765               		.loc 1 317 12 is_stmt 0 view .LVU192
 766 01e2 8091 0000 		lds r24,shift_interrupted+1
 767 01e6 8111      		cpse r24,__zero_reg__
 768 01e8 00C0      		rjmp .L79
 318:quantum/quantum.c ****           unregister_code(RSPC_KEY);
 769               		.loc 1 318 11 is_stmt 1 view .LVU193
 770 01ea 87E2      		ldi r24,lo8(39)
 771 01ec 0E94 0000 		call register_code
 772               	.LVL55:
 319:quantum/quantum.c ****         }
 773               		.loc 1 319 11 view .LVU194
 774 01f0 87E2      		ldi r24,lo8(39)
 775 01f2 0E94 0000 		call unregister_code
 776               	.LVL56:
 777               	.L79:
 321:quantum/quantum.c ****       }
 778               		.loc 1 321 9 view .LVU195
 779 01f6 80E2      		ldi r24,lo8(32)
 780 01f8 00C0      		rjmp .L100
 781               		.cfi_endproc
 782               	.LFE114:
 784               		.section	.text.send_string,"ax",@progbits
 785               	.global	send_string
 787               	send_string:
 788               	.LVL57:
 789               	.LFB115:
 335:quantum/quantum.c **** 
 336:quantum/quantum.c **** const bool ascii_to_qwerty_shift_lut[0x80] PROGMEM = {
 337:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 338:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 339:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 340:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 341:quantum/quantum.c ****     0, 1, 1, 1, 1, 1, 1, 0,
 342:quantum/quantum.c ****     1, 1, 1, 1, 0, 0, 0, 0,
 343:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 344:quantum/quantum.c ****     0, 0, 1, 0, 1, 0, 1, 1,
 345:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 346:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 347:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 348:quantum/quantum.c ****     1, 1, 1, 0, 0, 0, 1, 1,
 349:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 350:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 351:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 352:quantum/quantum.c ****     0, 0, 0, 1, 1, 1, 1, 0
 353:quantum/quantum.c **** };
 354:quantum/quantum.c **** 
 355:quantum/quantum.c **** const uint8_t ascii_to_qwerty_keycode_lut[0x80] PROGMEM = {
 356:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 357:quantum/quantum.c ****     KC_BSPC, KC_TAB, KC_ENT, 0, 0, 0, 0, 0,
 358:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 359:quantum/quantum.c ****     0, 0, 0, KC_ESC, 0, 0, 0, 0,
 360:quantum/quantum.c ****     KC_SPC, KC_1, KC_QUOT, KC_3, KC_4, KC_5, KC_7, KC_QUOT,
 361:quantum/quantum.c ****     KC_9, KC_0, KC_8, KC_EQL, KC_COMM, KC_MINS, KC_DOT, KC_SLSH,
 362:quantum/quantum.c ****     KC_0, KC_1, KC_2, KC_3, KC_4, KC_5, KC_6, KC_7,
 363:quantum/quantum.c ****     KC_8, KC_9, KC_SCLN, KC_SCLN, KC_COMM, KC_EQL, KC_DOT, KC_SLSH,
 364:quantum/quantum.c ****     KC_2, KC_A, KC_B, KC_C, KC_D, KC_E, KC_F, KC_G,
 365:quantum/quantum.c ****     KC_H, KC_I, KC_J, KC_K, KC_L, KC_M, KC_N, KC_O,
 366:quantum/quantum.c ****     KC_P, KC_Q, KC_R, KC_S, KC_T, KC_U, KC_V, KC_W,
 367:quantum/quantum.c ****     KC_X, KC_Y, KC_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_6, KC_MINS,
 368:quantum/quantum.c ****     KC_GRV, KC_A, KC_B, KC_C, KC_D, KC_E, KC_F, KC_G,
 369:quantum/quantum.c ****     KC_H, KC_I, KC_J, KC_K, KC_L, KC_M, KC_N, KC_O,
 370:quantum/quantum.c ****     KC_P, KC_Q, KC_R, KC_S, KC_T, KC_U, KC_V, KC_W,
 371:quantum/quantum.c ****     KC_X, KC_Y, KC_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_GRV, KC_DEL
 372:quantum/quantum.c **** };
 373:quantum/quantum.c **** 
 374:quantum/quantum.c **** /* for users whose OSes are set to Colemak */
 375:quantum/quantum.c **** #if 0
 376:quantum/quantum.c **** #include "keymap_colemak.h"
 377:quantum/quantum.c **** 
 378:quantum/quantum.c **** const bool ascii_to_colemak_shift_lut[0x80] PROGMEM = {
 379:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 380:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 381:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 382:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 383:quantum/quantum.c ****     0, 1, 1, 1, 1, 1, 1, 0,
 384:quantum/quantum.c ****     1, 1, 1, 1, 0, 0, 0, 0,
 385:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 386:quantum/quantum.c ****     0, 0, 1, 0, 1, 0, 1, 1,
 387:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 388:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 389:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 390:quantum/quantum.c ****     1, 1, 1, 0, 0, 0, 1, 1,
 391:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 392:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 393:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 394:quantum/quantum.c ****     0, 0, 0, 1, 1, 1, 1, 0
 395:quantum/quantum.c **** };
 396:quantum/quantum.c **** 
 397:quantum/quantum.c **** const uint8_t ascii_to_colemak_keycode_lut[0x80] PROGMEM = {
 398:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 399:quantum/quantum.c ****     KC_BSPC, KC_TAB, KC_ENT, 0, 0, 0, 0, 0,
 400:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 401:quantum/quantum.c ****     0, 0, 0, KC_ESC, 0, 0, 0, 0,
 402:quantum/quantum.c ****     KC_SPC, KC_1, KC_QUOT, KC_3, KC_4, KC_5, KC_7, KC_QUOT,
 403:quantum/quantum.c ****     KC_9, KC_0, KC_8, KC_EQL, KC_COMM, KC_MINS, KC_DOT, KC_SLSH,
 404:quantum/quantum.c ****     KC_0, KC_1, KC_2, KC_3, KC_4, KC_5, KC_6, KC_7,
 405:quantum/quantum.c ****     KC_8, KC_9, CM_SCLN, CM_SCLN, KC_COMM, KC_EQL, KC_DOT, KC_SLSH,
 406:quantum/quantum.c ****     KC_2, CM_A, CM_B, CM_C, CM_D, CM_E, CM_F, CM_G,
 407:quantum/quantum.c ****     CM_H, CM_I, CM_J, CM_K, CM_L, CM_M, CM_N, CM_O,
 408:quantum/quantum.c ****     CM_P, CM_Q, CM_R, CM_S, CM_T, CM_U, CM_V, CM_W,
 409:quantum/quantum.c ****     CM_X, CM_Y, CM_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_6, KC_MINS,
 410:quantum/quantum.c ****     KC_GRV, CM_A, CM_B, CM_C, CM_D, CM_E, CM_F, CM_G,
 411:quantum/quantum.c ****     CM_H, CM_I, CM_J, CM_K, CM_L, CM_M, CM_N, CM_O,
 412:quantum/quantum.c ****     CM_P, CM_Q, CM_R, CM_S, CM_T, CM_U, CM_V, CM_W,
 413:quantum/quantum.c ****     CM_X, CM_Y, CM_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_GRV, KC_DEL
 414:quantum/quantum.c **** };
 415:quantum/quantum.c **** 
 416:quantum/quantum.c **** #endif
 417:quantum/quantum.c **** 
 418:quantum/quantum.c **** void send_string(const char *str) {
 790               		.loc 1 418 35 view -0
 791               		.cfi_startproc
 792               		.loc 1 418 35 is_stmt 0 view .LVU197
 793 0000 0F93      		push r16
 794               	.LCFI11:
 795               		.cfi_def_cfa_offset 3
 796               		.cfi_offset 16, -2
 797 0002 1F93      		push r17
 798               	.LCFI12:
 799               		.cfi_def_cfa_offset 4
 800               		.cfi_offset 17, -3
 801 0004 CF93      		push r28
 802               	.LCFI13:
 803               		.cfi_def_cfa_offset 5
 804               		.cfi_offset 28, -4
 805               	/* prologue: function */
 806               	/* frame size = 0 */
 807               	/* stack size = 3 */
 808               	.L__stack_usage = 3
 809 0006 8C01      		movw r16,r24
 810               	.LVL58:
 811               	.L105:
 419:quantum/quantum.c ****     while (1) {
 812               		.loc 1 419 5 is_stmt 1 view .LVU198
 813               	.LBB6:
 420:quantum/quantum.c ****         uint8_t keycode;
 814               		.loc 1 420 9 view .LVU199
 421:quantum/quantum.c ****         uint8_t ascii_code = pgm_read_byte(str);
 815               		.loc 1 421 9 view .LVU200
 816               	.LBB7:
 817               		.loc 1 421 30 view .LVU201
 818               		.loc 1 421 30 view .LVU202
 819               		.loc 1 421 30 view .LVU203
 820 0008 F801      		movw r30,r16
 821               	/* #APP */
 822               	 ;  421 "quantum/quantum.c" 1
 823 000a 2491      		lpm r18, Z
 824               		
 825               	 ;  0 "" 2
 826               	.LVL59:
 827               		.loc 1 421 30 view .LVU204
 828               		.loc 1 421 30 is_stmt 0 view .LVU205
 829               	/* #NOAPP */
 830               	.LBE7:
 422:quantum/quantum.c ****         if (!ascii_code) break;
 831               		.loc 1 422 9 is_stmt 1 view .LVU206
 832               		.loc 1 422 12 is_stmt 0 view .LVU207
 833 000c 2223      		tst r18
 834 000e 01F0      		breq .L101
 423:quantum/quantum.c ****         keycode = pgm_read_byte(&ascii_to_qwerty_keycode_lut[ascii_code]);
 835               		.loc 1 423 9 is_stmt 1 view .LVU208
 836               	.LBB8:
 837               		.loc 1 423 19 view .LVU209
 838 0010 30E0      		ldi r19,0
 839               	.LVL60:
 840               		.loc 1 423 19 view .LVU210
 841               		.loc 1 423 19 view .LVU211
 842 0012 F901      		movw r30,r18
 843 0014 E050      		subi r30,lo8(-(ascii_to_qwerty_keycode_lut))
 844 0016 F040      		sbci r31,hi8(-(ascii_to_qwerty_keycode_lut))
 845               	.LVL61:
 846               		.loc 1 423 19 is_stmt 0 view .LVU212
 847               	/* #APP */
 848               	 ;  423 "quantum/quantum.c" 1
 849 0018 C491      		lpm r28, Z
 850               		
 851               	 ;  0 "" 2
 852               	.LVL62:
 853               		.loc 1 423 19 is_stmt 1 view .LVU213
 854               		.loc 1 423 19 is_stmt 0 view .LVU214
 855               	/* #NOAPP */
 856               	.LBE8:
 424:quantum/quantum.c ****         if (pgm_read_byte(&ascii_to_qwerty_shift_lut[ascii_code])) {
 857               		.loc 1 424 9 is_stmt 1 view .LVU215
 858               	.LBB9:
 859               		.loc 1 424 13 view .LVU216
 860               		.loc 1 424 13 view .LVU217
 861               		.loc 1 424 13 view .LVU218
 862 001a 2050      		subi r18,lo8(-(ascii_to_qwerty_shift_lut))
 863 001c 3040      		sbci r19,hi8(-(ascii_to_qwerty_shift_lut))
 864               	.LVL63:
 865               		.loc 1 424 13 is_stmt 0 view .LVU219
 866 001e F901      		movw r30,r18
 867               	.LVL64:
 868               		.loc 1 424 13 view .LVU220
 869               	/* #APP */
 870               	 ;  424 "quantum/quantum.c" 1
 871 0020 2491      		lpm r18, Z
 872               		
 873               	 ;  0 "" 2
 874               	.LVL65:
 875               		.loc 1 424 13 is_stmt 1 view .LVU221
 876               	/* #NOAPP */
 877               	.LBE9:
 878               		.loc 1 424 12 is_stmt 0 view .LVU222
 879 0022 2223      		tst r18
 880 0024 01F0      		breq .L103
 425:quantum/quantum.c ****             register_code(KC_LSFT);
 881               		.loc 1 425 13 is_stmt 1 view .LVU223
 882 0026 81EE      		ldi r24,lo8(-31)
 883 0028 0E94 0000 		call register_code
 884               	.LVL66:
 426:quantum/quantum.c ****             register_code(keycode);
 885               		.loc 1 426 13 view .LVU224
 886 002c 8C2F      		mov r24,r28
 887 002e 0E94 0000 		call register_code
 888               	.LVL67:
 427:quantum/quantum.c ****             unregister_code(keycode);
 889               		.loc 1 427 13 view .LVU225
 890 0032 8C2F      		mov r24,r28
 891 0034 0E94 0000 		call unregister_code
 892               	.LVL68:
 428:quantum/quantum.c ****             unregister_code(KC_LSFT);
 893               		.loc 1 428 13 view .LVU226
 894 0038 81EE      		ldi r24,lo8(-31)
 895               	.L106:
 429:quantum/quantum.c ****         }
 430:quantum/quantum.c ****         else {
 431:quantum/quantum.c ****             register_code(keycode);
 432:quantum/quantum.c ****             unregister_code(keycode);
 896               		.loc 1 432 13 is_stmt 0 view .LVU227
 897 003a 0E94 0000 		call unregister_code
 898               	.LVL69:
 433:quantum/quantum.c ****         }
 434:quantum/quantum.c ****         ++str;
 899               		.loc 1 434 9 is_stmt 1 view .LVU228
 900 003e 0F5F      		subi r16,-1
 901 0040 1F4F      		sbci r17,-1
 902               	.LVL70:
 903               		.loc 1 434 9 is_stmt 0 view .LVU229
 904               	.LBE6:
 419:quantum/quantum.c ****         uint8_t keycode;
 905               		.loc 1 419 15 view .LVU230
 906 0042 00C0      		rjmp .L105
 907               	.LVL71:
 908               	.L103:
 909               	.LBB10:
 431:quantum/quantum.c ****             unregister_code(keycode);
 910               		.loc 1 431 13 is_stmt 1 view .LVU231
 911 0044 8C2F      		mov r24,r28
 912 0046 0E94 0000 		call register_code
 913               	.LVL72:
 432:quantum/quantum.c ****         }
 914               		.loc 1 432 13 view .LVU232
 915 004a 8C2F      		mov r24,r28
 916 004c 00C0      		rjmp .L106
 917               	.LVL73:
 918               	.L101:
 919               	/* epilogue start */
 432:quantum/quantum.c ****         }
 920               		.loc 1 432 13 is_stmt 0 view .LVU233
 921               	.LBE10:
 435:quantum/quantum.c ****     }
 436:quantum/quantum.c **** }
 922               		.loc 1 436 1 view .LVU234
 923 004e CF91      		pop r28
 924 0050 1F91      		pop r17
 925 0052 0F91      		pop r16
 926               	.LVL74:
 927               		.loc 1 436 1 view .LVU235
 928 0054 0895      		ret
 929               		.cfi_endproc
 930               	.LFE115:
 932               		.section	.text.update_tri_layer,"ax",@progbits
 933               	.global	update_tri_layer
 935               	update_tri_layer:
 936               	.LVL75:
 937               	.LFB116:
 437:quantum/quantum.c **** 
 438:quantum/quantum.c **** void update_tri_layer(uint8_t layer1, uint8_t layer2, uint8_t layer3) {
 938               		.loc 1 438 71 is_stmt 1 view -0
 939               		.cfi_startproc
 940               		.loc 1 438 71 is_stmt 0 view .LVU237
 941 0000 8F92      		push r8
 942               	.LCFI14:
 943               		.cfi_def_cfa_offset 3
 944               		.cfi_offset 8, -2
 945 0002 9F92      		push r9
 946               	.LCFI15:
 947               		.cfi_def_cfa_offset 4
 948               		.cfi_offset 9, -3
 949 0004 AF92      		push r10
 950               	.LCFI16:
 951               		.cfi_def_cfa_offset 5
 952               		.cfi_offset 10, -4
 953 0006 BF92      		push r11
 954               	.LCFI17:
 955               		.cfi_def_cfa_offset 6
 956               		.cfi_offset 11, -5
 957 0008 CF92      		push r12
 958               	.LCFI18:
 959               		.cfi_def_cfa_offset 7
 960               		.cfi_offset 12, -6
 961 000a DF92      		push r13
 962               	.LCFI19:
 963               		.cfi_def_cfa_offset 8
 964               		.cfi_offset 13, -7
 965 000c EF92      		push r14
 966               	.LCFI20:
 967               		.cfi_def_cfa_offset 9
 968               		.cfi_offset 14, -8
 969 000e FF92      		push r15
 970               	.LCFI21:
 971               		.cfi_def_cfa_offset 10
 972               		.cfi_offset 15, -9
 973 0010 0F93      		push r16
 974               	.LCFI22:
 975               		.cfi_def_cfa_offset 11
 976               		.cfi_offset 16, -10
 977 0012 1F93      		push r17
 978               	.LCFI23:
 979               		.cfi_def_cfa_offset 12
 980               		.cfi_offset 17, -11
 981               	/* prologue: function */
 982               	/* frame size = 0 */
 983               	/* stack size = 10 */
 984               	.L__stack_usage = 10
 439:quantum/quantum.c ****   if (IS_LAYER_ON(layer1) && IS_LAYER_ON(layer2)) {
 985               		.loc 1 439 3 is_stmt 1 view .LVU238
 986 0014 C12C      		mov r12,__zero_reg__
 987 0016 D12C      		mov r13,__zero_reg__
 988 0018 7601      		movw r14,r12
 989 001a C394      		inc r12
 990 001c 9701      		movw r18,r14
 991 001e 8601      		movw r16,r12
 992 0020 00C0      		rjmp 2f
 993               		1:
 994 0022 000F      		lsl r16
 995 0024 111F      		rol r17
 996 0026 221F      		rol r18
 997 0028 331F      		rol r19
 998               		2:
 999 002a 6A95      		dec r22
 1000 002c 02F4      		brpl 1b
 1001 002e 4601      		movw r8,r12
 1002 0030 5701      		movw r10,r14
 1003 0032 00C0      		rjmp 2f
 1004               		1:
 1005 0034 880C      		lsl r8
 1006 0036 991C      		rol r9
 1007 0038 AA1C      		rol r10
 1008 003a BB1C      		rol r11
 1009               		2:
 1010 003c 8A95      		dec r24
 1011 003e 02F4      		brpl 1b
 1012 0040 D501      		movw r26,r10
 1013 0042 C401      		movw r24,r8
 1014               	.LVL76:
 1015               		.loc 1 439 3 is_stmt 0 view .LVU239
 1016 0044 802B      		or r24,r16
 1017 0046 912B      		or r25,r17
 1018 0048 A22B      		or r26,r18
 1019 004a B32B      		or r27,r19
 1020               		.loc 1 439 27 view .LVU240
 1021 004c 0091 0000 		lds r16,layer_state
 1022 0050 1091 0000 		lds r17,layer_state+1
 1023 0054 2091 0000 		lds r18,layer_state+2
 1024 0058 3091 0000 		lds r19,layer_state+3
 1025 005c 0823      		and r16,r24
 1026 005e 1923      		and r17,r25
 1027 0060 2A23      		and r18,r26
 1028 0062 3B23      		and r19,r27
 1029 0064 8017      		cp r24,r16
 1030 0066 9107      		cpc r25,r17
 1031 0068 A207      		cpc r26,r18
 1032 006a B307      		cpc r27,r19
 1033 006c 01F4      		brne .L108
 440:quantum/quantum.c ****     layer_on(layer3);
 1034               		.loc 1 440 5 is_stmt 1 view .LVU241
 1035 006e 842F      		mov r24,r20
 1036               	/* epilogue start */
 441:quantum/quantum.c ****   } else {
 442:quantum/quantum.c ****     layer_off(layer3);
 443:quantum/quantum.c ****   }
 444:quantum/quantum.c **** }
 1037               		.loc 1 444 1 is_stmt 0 view .LVU242
 1038 0070 1F91      		pop r17
 1039 0072 0F91      		pop r16
 1040 0074 FF90      		pop r15
 1041 0076 EF90      		pop r14
 1042 0078 DF90      		pop r13
 1043 007a CF90      		pop r12
 1044 007c BF90      		pop r11
 1045 007e AF90      		pop r10
 1046 0080 9F90      		pop r9
 1047 0082 8F90      		pop r8
 440:quantum/quantum.c ****     layer_on(layer3);
 1048               		.loc 1 440 5 view .LVU243
 1049 0084 0C94 0000 		jmp layer_on
 1050               	.LVL77:
 1051               	.L108:
 442:quantum/quantum.c ****   }
 1052               		.loc 1 442 5 is_stmt 1 view .LVU244
 1053 0088 842F      		mov r24,r20
 1054               	/* epilogue start */
 1055               		.loc 1 444 1 is_stmt 0 view .LVU245
 1056 008a 1F91      		pop r17
 1057 008c 0F91      		pop r16
 1058 008e FF90      		pop r15
 1059 0090 EF90      		pop r14
 1060 0092 DF90      		pop r13
 1061 0094 CF90      		pop r12
 1062 0096 BF90      		pop r11
 1063 0098 AF90      		pop r10
 1064 009a 9F90      		pop r9
 1065 009c 8F90      		pop r8
 442:quantum/quantum.c ****   }
 1066               		.loc 1 442 5 view .LVU246
 1067 009e 0C94 0000 		jmp layer_off
 1068               	.LVL78:
 442:quantum/quantum.c ****   }
 1069               		.loc 1 442 5 view .LVU247
 1070               		.cfi_endproc
 1071               	.LFE116:
 1073               		.section	.text.tap_random_base64,"ax",@progbits
 1074               	.global	tap_random_base64
 1076               	tap_random_base64:
 1077               	.LFB117:
 445:quantum/quantum.c **** 
 446:quantum/quantum.c **** void tap_random_base64(void) {
 1078               		.loc 1 446 30 is_stmt 1 view -0
 1079               		.cfi_startproc
 1080 0000 CF93      		push r28
 1081               	.LCFI24:
 1082               		.cfi_def_cfa_offset 3
 1083               		.cfi_offset 28, -2
 1084 0002 DF93      		push r29
 1085               	.LCFI25:
 1086               		.cfi_def_cfa_offset 4
 1087               		.cfi_offset 29, -3
 1088               	/* prologue: function */
 1089               	/* frame size = 0 */
 1090               	/* stack size = 2 */
 1091               	.L__stack_usage = 2
 447:quantum/quantum.c ****   #if defined(__AVR_ATmega32U4__)
 448:quantum/quantum.c ****     uint8_t key = (TCNT0 + TCNT1 + TCNT3 + TCNT4) % 64;
 1092               		.loc 1 448 5 view .LVU249
 1093               		.loc 1 448 20 is_stmt 0 view .LVU250
 1094 0004 46B5      		in r20,0x26
 1095               		.loc 1 448 28 view .LVU251
 1096 0006 2091 8400 		lds r18,132
 1097 000a 3091 8500 		lds r19,132+1
 1098               		.loc 1 448 36 view .LVU252
 1099 000e C091 9400 		lds r28,148
 1100 0012 D091 9500 		lds r29,148+1
 1101               		.loc 1 448 44 view .LVU253
 1102 0016 8091 BE00 		lds r24,190
 1103 001a 9091 BF00 		lds r25,190+1
 1104               		.loc 1 448 34 view .LVU254
 1105 001e C20F      		add r28,r18
 1106 0020 C40F      		add r28,r20
 1107               		.loc 1 448 42 view .LVU255
 1108 0022 C80F      		add r28,r24
 1109               		.loc 1 448 13 view .LVU256
 1110 0024 CF73      		andi r28,lo8(63)
 1111               	.LVL79:
 449:quantum/quantum.c ****   #else
 450:quantum/quantum.c ****     uint8_t key = rand() % 64;
 451:quantum/quantum.c ****   #endif
 452:quantum/quantum.c ****   switch (key) {
 1112               		.loc 1 452 3 is_stmt 1 view .LVU257
 1113 0026 CE33      		cpi r28,lo8(62)
 1114 0028 00F4      		brsh .L110
 1115 002a C533      		cpi r28,lo8(53)
 1116 002c 00F4      		brsh .L111
 1117 002e CA31      		cpi r28,lo8(26)
 1118 0030 00F0      		brlo .L112
 1119 0032 C433      		cpi r28,lo8(52)
 1120 0034 00F4      		brsh .L117
 453:quantum/quantum.c ****     case 0 ... 25:
 454:quantum/quantum.c ****       register_code(KC_LSFT);
 455:quantum/quantum.c ****       register_code(key + KC_A);
 456:quantum/quantum.c ****       unregister_code(key + KC_A);
 457:quantum/quantum.c ****       unregister_code(KC_LSFT);
 458:quantum/quantum.c ****       break;
 459:quantum/quantum.c ****     case 26 ... 51:
 460:quantum/quantum.c ****       register_code(key - 26 + KC_A);
 1121               		.loc 1 460 7 view .LVU258
 1122 0036 C651      		subi r28,lo8(-(-22))
 1123               	.LVL80:
 1124               	.L120:
 461:quantum/quantum.c ****       unregister_code(key - 26 + KC_A);
 462:quantum/quantum.c ****       break;
 463:quantum/quantum.c ****     case 52:
 464:quantum/quantum.c ****       register_code(KC_0);
 465:quantum/quantum.c ****       unregister_code(KC_0);
 466:quantum/quantum.c ****       break;
 467:quantum/quantum.c ****     case 53 ... 61:
 468:quantum/quantum.c ****       register_code(key - 53 + KC_1);
 1125               		.loc 1 468 7 is_stmt 0 view .LVU259
 1126 0038 8C2F      		mov r24,r28
 1127 003a 0E94 0000 		call register_code
 1128               	.LVL81:
 469:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 1129               		.loc 1 469 7 is_stmt 1 view .LVU260
 1130 003e 8C2F      		mov r24,r28
 1131 0040 00C0      		rjmp .L118
 1132               	.LVL82:
 1133               	.L110:
 1134               		.loc 1 469 7 is_stmt 0 view .LVU261
 1135 0042 CE33      		cpi r28,lo8(62)
 1136 0044 01F0      		breq .L115
 1137 0046 CF33      		cpi r28,lo8(63)
 1138 0048 01F0      		breq .L116
 1139               	.L112:
 454:quantum/quantum.c ****       register_code(key + KC_A);
 1140               		.loc 1 454 7 is_stmt 1 view .LVU262
 1141 004a 81EE      		ldi r24,lo8(-31)
 1142 004c 0E94 0000 		call register_code
 1143               	.LVL83:
 455:quantum/quantum.c ****       unregister_code(key + KC_A);
 1144               		.loc 1 455 7 view .LVU263
 1145 0050 CC5F      		subi r28,lo8(-(4))
 1146               	.LVL84:
 455:quantum/quantum.c ****       unregister_code(key + KC_A);
 1147               		.loc 1 455 7 is_stmt 0 view .LVU264
 1148 0052 8C2F      		mov r24,r28
 1149 0054 0E94 0000 		call register_code
 1150               	.LVL85:
 456:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1151               		.loc 1 456 7 is_stmt 1 view .LVU265
 1152 0058 8C2F      		mov r24,r28
 1153               	.LVL86:
 1154               	.L119:
 470:quantum/quantum.c ****       break;
 471:quantum/quantum.c ****     case 62:
 472:quantum/quantum.c ****       register_code(KC_LSFT);
 473:quantum/quantum.c ****       register_code(KC_EQL);
 474:quantum/quantum.c ****       unregister_code(KC_EQL);
 1155               		.loc 1 474 7 is_stmt 0 view .LVU266
 1156 005a 0E94 0000 		call unregister_code
 1157               	.LVL87:
 475:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1158               		.loc 1 475 7 is_stmt 1 view .LVU267
 1159 005e 81EE      		ldi r24,lo8(-31)
 1160 0060 00C0      		rjmp .L118
 1161               	.LVL88:
 1162               	.L117:
 464:quantum/quantum.c ****       unregister_code(KC_0);
 1163               		.loc 1 464 7 view .LVU268
 1164 0062 87E2      		ldi r24,lo8(39)
 1165 0064 0E94 0000 		call register_code
 1166               	.LVL89:
 465:quantum/quantum.c ****       break;
 1167               		.loc 1 465 7 view .LVU269
 1168 0068 87E2      		ldi r24,lo8(39)
 1169               	.LVL90:
 1170               	.L118:
 1171               	/* epilogue start */
 476:quantum/quantum.c ****       break;
 477:quantum/quantum.c ****     case 63:
 478:quantum/quantum.c ****       register_code(KC_SLSH);
 479:quantum/quantum.c ****       unregister_code(KC_SLSH);
 480:quantum/quantum.c ****       break;
 481:quantum/quantum.c ****   }
 482:quantum/quantum.c **** }
 1172               		.loc 1 482 1 is_stmt 0 view .LVU270
 1173 006a DF91      		pop r29
 1174 006c CF91      		pop r28
 479:quantum/quantum.c ****       break;
 1175               		.loc 1 479 7 view .LVU271
 1176 006e 0C94 0000 		jmp unregister_code
 1177               	.LVL91:
 1178               	.L111:
 468:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 1179               		.loc 1 468 7 is_stmt 1 view .LVU272
 1180 0072 C751      		subi r28,lo8(-(-23))
 1181               	.LVL92:
 468:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 1182               		.loc 1 468 7 is_stmt 0 view .LVU273
 1183 0074 00C0      		rjmp .L120
 1184               	.LVL93:
 1185               	.L115:
 472:quantum/quantum.c ****       register_code(KC_EQL);
 1186               		.loc 1 472 7 is_stmt 1 view .LVU274
 1187 0076 81EE      		ldi r24,lo8(-31)
 1188 0078 0E94 0000 		call register_code
 1189               	.LVL94:
 473:quantum/quantum.c ****       unregister_code(KC_EQL);
 1190               		.loc 1 473 7 view .LVU275
 1191 007c 8EE2      		ldi r24,lo8(46)
 1192 007e 0E94 0000 		call register_code
 1193               	.LVL95:
 474:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1194               		.loc 1 474 7 view .LVU276
 1195 0082 8EE2      		ldi r24,lo8(46)
 1196 0084 00C0      		rjmp .L119
 1197               	.L116:
 478:quantum/quantum.c ****       unregister_code(KC_SLSH);
 1198               		.loc 1 478 7 view .LVU277
 1199 0086 88E3      		ldi r24,lo8(56)
 1200 0088 0E94 0000 		call register_code
 1201               	.LVL96:
 479:quantum/quantum.c ****       break;
 1202               		.loc 1 479 7 view .LVU278
 1203 008c 88E3      		ldi r24,lo8(56)
 1204 008e 00C0      		rjmp .L118
 1205               		.cfi_endproc
 1206               	.LFE117:
 1208               		.section	.text.matrix_init_quantum,"ax",@progbits
 1209               	.global	matrix_init_quantum
 1211               	matrix_init_quantum:
 1212               	.LFB118:
 483:quantum/quantum.c **** 
 484:quantum/quantum.c **** void matrix_init_quantum() {
 1213               		.loc 1 484 28 view -0
 1214               		.cfi_startproc
 1215               	/* prologue: function */
 1216               	/* frame size = 0 */
 1217               	/* stack size = 0 */
 1218               	.L__stack_usage = 0
 485:quantum/quantum.c ****   #ifdef BACKLIGHT_ENABLE
 486:quantum/quantum.c ****     backlight_init_ports();
 487:quantum/quantum.c ****   #endif
 488:quantum/quantum.c ****   matrix_init_kb();
 1219               		.loc 1 488 3 view .LVU280
 1220 0000 0C94 0000 		jmp matrix_init_kb
 1221               	.LVL97:
 1222               		.cfi_endproc
 1223               	.LFE118:
 1225               		.section	.text.matrix_scan_quantum,"ax",@progbits
 1226               	.global	matrix_scan_quantum
 1228               	matrix_scan_quantum:
 1229               	.LFB119:
 489:quantum/quantum.c **** }
 490:quantum/quantum.c **** 
 491:quantum/quantum.c **** void matrix_scan_quantum() {
 1230               		.loc 1 491 28 view -0
 1231               		.cfi_startproc
 1232               	/* prologue: function */
 1233               	/* frame size = 0 */
 1234               	/* stack size = 0 */
 1235               	.L__stack_usage = 0
 492:quantum/quantum.c ****   #ifdef AUDIO_ENABLE
 493:quantum/quantum.c ****     matrix_scan_music();
 494:quantum/quantum.c ****   #endif
 495:quantum/quantum.c **** 
 496:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
 497:quantum/quantum.c ****     matrix_scan_tap_dance();
 1236               		.loc 1 497 5 view .LVU282
 1237 0000 0E94 0000 		call matrix_scan_tap_dance
 1238               	.LVL98:
 498:quantum/quantum.c ****   #endif
 499:quantum/quantum.c ****   matrix_scan_kb();
 1239               		.loc 1 499 3 view .LVU283
 1240 0004 0C94 0000 		jmp matrix_scan_kb
 1241               	.LVL99:
 1242               		.cfi_endproc
 1243               	.LFE119:
 1245               		.section	.text.backlight_init_ports,"ax",@progbits
 1246               		.weak	backlight_init_ports
 1248               	backlight_init_ports:
 1249               	.LFB133:
 1250               		.cfi_startproc
 1251               	/* prologue: function */
 1252               	/* frame size = 0 */
 1253               	/* stack size = 0 */
 1254               	.L__stack_usage = 0
 1255               	/* epilogue start */
 1256 0000 0895      		ret
 1257               		.cfi_endproc
 1258               	.LFE133:
 1260               		.section	.text.led_set_user,"ax",@progbits
 1261               		.weak	led_set_user
 1263               	led_set_user:
 1264               	.LVL100:
 1265               	.LFB122:
 500:quantum/quantum.c **** }
 501:quantum/quantum.c **** 
 502:quantum/quantum.c **** #if defined(BACKLIGHT_ENABLE) && defined(BACKLIGHT_PIN)
 503:quantum/quantum.c **** 
 504:quantum/quantum.c **** static const uint8_t backlight_pin = BACKLIGHT_PIN;
 505:quantum/quantum.c **** 
 506:quantum/quantum.c **** #if BACKLIGHT_PIN == B7
 507:quantum/quantum.c **** #  define COM1x1 COM1C1
 508:quantum/quantum.c **** #  define OCR1x  OCR1C
 509:quantum/quantum.c **** #elif BACKLIGHT_PIN == B6
 510:quantum/quantum.c **** #  define COM1x1 COM1B1
 511:quantum/quantum.c **** #  define OCR1x  OCR1B
 512:quantum/quantum.c **** #elif BACKLIGHT_PIN == B5
 513:quantum/quantum.c **** #  define COM1x1 COM1A1
 514:quantum/quantum.c **** #  define OCR1x  OCR1A
 515:quantum/quantum.c **** #else
 516:quantum/quantum.c **** #  error "Backlight pin not supported - use B5, B6, or B7"
 517:quantum/quantum.c **** #endif
 518:quantum/quantum.c **** 
 519:quantum/quantum.c **** __attribute__ ((weak))
 520:quantum/quantum.c **** void backlight_init_ports(void)
 521:quantum/quantum.c **** {
 522:quantum/quantum.c **** 
 523:quantum/quantum.c ****   // Setup backlight pin as output and output low.
 524:quantum/quantum.c ****   // DDRx |= n
 525:quantum/quantum.c ****   _SFR_IO8((backlight_pin >> 4) + 1) |= _BV(backlight_pin & 0xF);
 526:quantum/quantum.c ****   // PORTx &= ~n
 527:quantum/quantum.c ****   _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 528:quantum/quantum.c **** 
 529:quantum/quantum.c ****   // Use full 16-bit resolution.
 530:quantum/quantum.c ****   ICR1 = 0xFFFF;
 531:quantum/quantum.c **** 
 532:quantum/quantum.c ****   // I could write a wall of text here to explain... but TL;DW
 533:quantum/quantum.c ****   // Go read the ATmega32u4 datasheet.
 534:quantum/quantum.c ****   // And this: http://blog.saikoled.com/post/43165849837/secret-konami-cheat-code-to-high-resolutio
 535:quantum/quantum.c **** 
 536:quantum/quantum.c ****   // Pin PB7 = OCR1C (Timer 1, Channel C)
 537:quantum/quantum.c ****   // Compare Output Mode = Clear on compare match, Channel C = COM1C1=1 COM1C0=0
 538:quantum/quantum.c ****   // (i.e. start high, go low when counter matches.)
 539:quantum/quantum.c ****   // WGM Mode 14 (Fast PWM) = WGM13=1 WGM12=1 WGM11=1 WGM10=0
 540:quantum/quantum.c ****   // Clock Select = clk/1 (no prescaling) = CS12=0 CS11=0 CS10=1
 541:quantum/quantum.c **** 
 542:quantum/quantum.c ****   TCCR1A = _BV(COM1x1) | _BV(WGM11); // = 0b00001010;
 543:quantum/quantum.c ****   TCCR1B = _BV(WGM13) | _BV(WGM12) | _BV(CS10); // = 0b00011001;
 544:quantum/quantum.c **** 
 545:quantum/quantum.c ****   backlight_init();
 546:quantum/quantum.c ****   #ifdef BACKLIGHT_BREATHING
 547:quantum/quantum.c ****     breathing_defaults();
 548:quantum/quantum.c ****   #endif
 549:quantum/quantum.c **** }
 550:quantum/quantum.c **** 
 551:quantum/quantum.c **** __attribute__ ((weak))
 552:quantum/quantum.c **** void backlight_set(uint8_t level)
 553:quantum/quantum.c **** {
 554:quantum/quantum.c ****   // Prevent backlight blink on lowest level
 555:quantum/quantum.c ****   // PORTx &= ~n
 556:quantum/quantum.c ****   _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 557:quantum/quantum.c **** 
 558:quantum/quantum.c ****   if ( level == 0 ) {
 559:quantum/quantum.c ****     // Turn off PWM control on backlight pin, revert to output low.
 560:quantum/quantum.c ****     TCCR1A &= ~(_BV(COM1x1));
 561:quantum/quantum.c ****     OCR1x = 0x0;
 562:quantum/quantum.c ****   } else if ( level == BACKLIGHT_LEVELS ) {
 563:quantum/quantum.c ****     // Turn on PWM control of backlight pin
 564:quantum/quantum.c ****     TCCR1A |= _BV(COM1x1);
 565:quantum/quantum.c ****     // Set the brightness
 566:quantum/quantum.c ****     OCR1x = 0xFFFF;
 567:quantum/quantum.c ****   } else {
 568:quantum/quantum.c ****     // Turn on PWM control of backlight pin
 569:quantum/quantum.c ****     TCCR1A |= _BV(COM1x1);
 570:quantum/quantum.c ****     // Set the brightness
 571:quantum/quantum.c ****     OCR1x = 0xFFFF >> ((BACKLIGHT_LEVELS - level) * ((BACKLIGHT_LEVELS + 1) / 2));
 572:quantum/quantum.c ****   }
 573:quantum/quantum.c **** 
 574:quantum/quantum.c ****   #ifdef BACKLIGHT_BREATHING
 575:quantum/quantum.c ****     breathing_intensity_default();
 576:quantum/quantum.c ****   #endif
 577:quantum/quantum.c **** }
 578:quantum/quantum.c **** 
 579:quantum/quantum.c **** 
 580:quantum/quantum.c **** #ifdef BACKLIGHT_BREATHING
 581:quantum/quantum.c **** 
 582:quantum/quantum.c **** #define BREATHING_NO_HALT  0
 583:quantum/quantum.c **** #define BREATHING_HALT_OFF 1
 584:quantum/quantum.c **** #define BREATHING_HALT_ON  2
 585:quantum/quantum.c **** 
 586:quantum/quantum.c **** static uint8_t breath_intensity;
 587:quantum/quantum.c **** static uint8_t breath_speed;
 588:quantum/quantum.c **** static uint16_t breathing_index;
 589:quantum/quantum.c **** static uint8_t breathing_halt;
 590:quantum/quantum.c **** 
 591:quantum/quantum.c **** void breathing_enable(void)
 592:quantum/quantum.c **** {
 593:quantum/quantum.c ****     if (get_backlight_level() == 0)
 594:quantum/quantum.c ****     {
 595:quantum/quantum.c ****         breathing_index = 0;
 596:quantum/quantum.c ****     }
 597:quantum/quantum.c ****     else
 598:quantum/quantum.c ****     {
 599:quantum/quantum.c ****         // Set breathing_index to be at the midpoint (brightest point)
 600:quantum/quantum.c ****         breathing_index = 0x20 << breath_speed;
 601:quantum/quantum.c ****     }
 602:quantum/quantum.c **** 
 603:quantum/quantum.c ****     breathing_halt = BREATHING_NO_HALT;
 604:quantum/quantum.c **** 
 605:quantum/quantum.c ****     // Enable breathing interrupt
 606:quantum/quantum.c ****     TIMSK1 |= _BV(OCIE1A);
 607:quantum/quantum.c **** }
 608:quantum/quantum.c **** 
 609:quantum/quantum.c **** void breathing_pulse(void)
 610:quantum/quantum.c **** {
 611:quantum/quantum.c ****     if (get_backlight_level() == 0)
 612:quantum/quantum.c ****     {
 613:quantum/quantum.c ****         breathing_index = 0;
 614:quantum/quantum.c ****     }
 615:quantum/quantum.c ****     else
 616:quantum/quantum.c ****     {
 617:quantum/quantum.c ****         // Set breathing_index to be at the midpoint + 1 (brightest point)
 618:quantum/quantum.c ****         breathing_index = 0x21 << breath_speed;
 619:quantum/quantum.c ****     }
 620:quantum/quantum.c **** 
 621:quantum/quantum.c ****     breathing_halt = BREATHING_HALT_ON;
 622:quantum/quantum.c **** 
 623:quantum/quantum.c ****     // Enable breathing interrupt
 624:quantum/quantum.c ****     TIMSK1 |= _BV(OCIE1A);
 625:quantum/quantum.c **** }
 626:quantum/quantum.c **** 
 627:quantum/quantum.c **** void breathing_disable(void)
 628:quantum/quantum.c **** {
 629:quantum/quantum.c ****     // Disable breathing interrupt
 630:quantum/quantum.c ****     TIMSK1 &= ~_BV(OCIE1A);
 631:quantum/quantum.c ****     backlight_set(get_backlight_level());
 632:quantum/quantum.c **** }
 633:quantum/quantum.c **** 
 634:quantum/quantum.c **** void breathing_self_disable(void)
 635:quantum/quantum.c **** {
 636:quantum/quantum.c ****     if (get_backlight_level() == 0)
 637:quantum/quantum.c ****     {
 638:quantum/quantum.c ****         breathing_halt = BREATHING_HALT_OFF;
 639:quantum/quantum.c ****     }
 640:quantum/quantum.c ****     else
 641:quantum/quantum.c ****     {
 642:quantum/quantum.c ****         breathing_halt = BREATHING_HALT_ON;
 643:quantum/quantum.c ****     }
 644:quantum/quantum.c **** 
 645:quantum/quantum.c ****     //backlight_set(get_backlight_level());
 646:quantum/quantum.c **** }
 647:quantum/quantum.c **** 
 648:quantum/quantum.c **** void breathing_toggle(void)
 649:quantum/quantum.c **** {
 650:quantum/quantum.c ****     if (!is_breathing())
 651:quantum/quantum.c ****     {
 652:quantum/quantum.c ****         if (get_backlight_level() == 0)
 653:quantum/quantum.c ****         {
 654:quantum/quantum.c ****             breathing_index = 0;
 655:quantum/quantum.c ****         }
 656:quantum/quantum.c ****         else
 657:quantum/quantum.c ****         {
 658:quantum/quantum.c ****             // Set breathing_index to be at the midpoint + 1 (brightest point)
 659:quantum/quantum.c ****             breathing_index = 0x21 << breath_speed;
 660:quantum/quantum.c ****         }
 661:quantum/quantum.c **** 
 662:quantum/quantum.c ****         breathing_halt = BREATHING_NO_HALT;
 663:quantum/quantum.c ****     }
 664:quantum/quantum.c **** 
 665:quantum/quantum.c ****     // Toggle breathing interrupt
 666:quantum/quantum.c ****     TIMSK1 ^= _BV(OCIE1A);
 667:quantum/quantum.c **** 
 668:quantum/quantum.c ****     // Restore backlight level
 669:quantum/quantum.c ****     if (!is_breathing())
 670:quantum/quantum.c ****     {
 671:quantum/quantum.c ****         backlight_set(get_backlight_level());
 672:quantum/quantum.c ****     }
 673:quantum/quantum.c **** }
 674:quantum/quantum.c **** 
 675:quantum/quantum.c **** bool is_breathing(void)
 676:quantum/quantum.c **** {
 677:quantum/quantum.c ****     return (TIMSK1 && _BV(OCIE1A));
 678:quantum/quantum.c **** }
 679:quantum/quantum.c **** 
 680:quantum/quantum.c **** void breathing_intensity_default(void)
 681:quantum/quantum.c **** {
 682:quantum/quantum.c ****     //breath_intensity = (uint8_t)((uint16_t)100 * (uint16_t)get_backlight_level() / (uint16_t)BACK
 683:quantum/quantum.c ****     breath_intensity = ((BACKLIGHT_LEVELS - get_backlight_level()) * ((BACKLIGHT_LEVELS + 1) / 2));
 684:quantum/quantum.c **** }
 685:quantum/quantum.c **** 
 686:quantum/quantum.c **** void breathing_intensity_set(uint8_t value)
 687:quantum/quantum.c **** {
 688:quantum/quantum.c ****     breath_intensity = value;
 689:quantum/quantum.c **** }
 690:quantum/quantum.c **** 
 691:quantum/quantum.c **** void breathing_speed_default(void)
 692:quantum/quantum.c **** {
 693:quantum/quantum.c ****     breath_speed = 4;
 694:quantum/quantum.c **** }
 695:quantum/quantum.c **** 
 696:quantum/quantum.c **** void breathing_speed_set(uint8_t value)
 697:quantum/quantum.c **** {
 698:quantum/quantum.c ****     bool is_breathing_now = is_breathing();
 699:quantum/quantum.c ****     uint8_t old_breath_speed = breath_speed;
 700:quantum/quantum.c **** 
 701:quantum/quantum.c ****     if (is_breathing_now)
 702:quantum/quantum.c ****     {
 703:quantum/quantum.c ****         // Disable breathing interrupt
 704:quantum/quantum.c ****         TIMSK1 &= ~_BV(OCIE1A);
 705:quantum/quantum.c ****     }
 706:quantum/quantum.c **** 
 707:quantum/quantum.c ****     breath_speed = value;
 708:quantum/quantum.c **** 
 709:quantum/quantum.c ****     if (is_breathing_now)
 710:quantum/quantum.c ****     {
 711:quantum/quantum.c ****         // Adjust index to account for new speed
 712:quantum/quantum.c ****         breathing_index = (( (uint8_t)( (breathing_index) >> old_breath_speed ) ) & 0x3F) << breath
 713:quantum/quantum.c **** 
 714:quantum/quantum.c ****         // Enable breathing interrupt
 715:quantum/quantum.c ****         TIMSK1 |= _BV(OCIE1A);
 716:quantum/quantum.c ****     }
 717:quantum/quantum.c **** 
 718:quantum/quantum.c **** }
 719:quantum/quantum.c **** 
 720:quantum/quantum.c **** void breathing_speed_inc(uint8_t value)
 721:quantum/quantum.c **** {
 722:quantum/quantum.c ****     if ((uint16_t)(breath_speed - value) > 10 )
 723:quantum/quantum.c ****     {
 724:quantum/quantum.c ****         breathing_speed_set(0);
 725:quantum/quantum.c ****     }
 726:quantum/quantum.c ****     else
 727:quantum/quantum.c ****     {
 728:quantum/quantum.c ****         breathing_speed_set(breath_speed - value);
 729:quantum/quantum.c ****     }
 730:quantum/quantum.c **** }
 731:quantum/quantum.c **** 
 732:quantum/quantum.c **** void breathing_speed_dec(uint8_t value)
 733:quantum/quantum.c **** {
 734:quantum/quantum.c ****     if ((uint16_t)(breath_speed + value) > 10 )
 735:quantum/quantum.c ****     {
 736:quantum/quantum.c ****         breathing_speed_set(10);
 737:quantum/quantum.c ****     }
 738:quantum/quantum.c ****     else
 739:quantum/quantum.c ****     {
 740:quantum/quantum.c ****         breathing_speed_set(breath_speed + value);
 741:quantum/quantum.c ****     }
 742:quantum/quantum.c **** }
 743:quantum/quantum.c **** 
 744:quantum/quantum.c **** void breathing_defaults(void)
 745:quantum/quantum.c **** {
 746:quantum/quantum.c ****     breathing_intensity_default();
 747:quantum/quantum.c ****     breathing_speed_default();
 748:quantum/quantum.c ****     breathing_halt = BREATHING_NO_HALT;
 749:quantum/quantum.c **** }
 750:quantum/quantum.c **** 
 751:quantum/quantum.c **** /* Breathing Sleep LED brighness(PWM On period) table
 752:quantum/quantum.c ****  * (64[steps] * 4[duration]) / 64[PWM periods/s] = 4 second breath cycle
 753:quantum/quantum.c ****  *
 754:quantum/quantum.c ****  * http://www.wolframalpha.com/input/?i=%28sin%28+x%2F64*pi%29**8+*+255%2C+x%3D0+to+63
 755:quantum/quantum.c ****  * (0..63).each {|x| p ((sin(x/64.0*PI)**8)*255).to_i }
 756:quantum/quantum.c ****  */
 757:quantum/quantum.c **** static const uint8_t breathing_table[64] PROGMEM = {
 758:quantum/quantum.c ****   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   2,   4,   6,  10,
 759:quantum/quantum.c ****  15,  23,  32,  44,  58,  74,  93, 113, 135, 157, 179, 199, 218, 233, 245, 252,
 760:quantum/quantum.c **** 255, 252, 245, 233, 218, 199, 179, 157, 135, 113,  93,  74,  58,  44,  32,  23,
 761:quantum/quantum.c ****  15,  10,   6,   4,   2,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 762:quantum/quantum.c **** };
 763:quantum/quantum.c **** 
 764:quantum/quantum.c **** ISR(TIMER1_COMPA_vect)
 765:quantum/quantum.c **** {
 766:quantum/quantum.c ****     // OCR1x = (pgm_read_byte(&breathing_table[ ( (uint8_t)( (breathing_index++) >> breath_speed ) 
 767:quantum/quantum.c **** 
 768:quantum/quantum.c **** 
 769:quantum/quantum.c ****     uint8_t local_index = ( (uint8_t)( (breathing_index++) >> breath_speed ) ) & 0x3F;
 770:quantum/quantum.c **** 
 771:quantum/quantum.c ****     if (((breathing_halt == BREATHING_HALT_ON) && (local_index == 0x20)) || ((breathing_halt == BRE
 772:quantum/quantum.c ****     {
 773:quantum/quantum.c ****         // Disable breathing interrupt
 774:quantum/quantum.c ****         TIMSK1 &= ~_BV(OCIE1A);
 775:quantum/quantum.c ****     }
 776:quantum/quantum.c **** 
 777:quantum/quantum.c ****     OCR1x = (uint16_t)(((uint16_t)pgm_read_byte(&breathing_table[local_index]) * 257)) >> breath_in
 778:quantum/quantum.c **** 
 779:quantum/quantum.c **** }
 780:quantum/quantum.c **** 
 781:quantum/quantum.c **** 
 782:quantum/quantum.c **** 
 783:quantum/quantum.c **** #endif // breathing
 784:quantum/quantum.c **** 
 785:quantum/quantum.c **** #else // backlight
 786:quantum/quantum.c **** 
 787:quantum/quantum.c **** __attribute__ ((weak))
 788:quantum/quantum.c **** void backlight_init_ports(void)
 789:quantum/quantum.c **** {
 790:quantum/quantum.c **** 
 791:quantum/quantum.c **** }
 792:quantum/quantum.c **** 
 793:quantum/quantum.c **** __attribute__ ((weak))
 794:quantum/quantum.c **** void backlight_set(uint8_t level)
 795:quantum/quantum.c **** {
 796:quantum/quantum.c **** 
 797:quantum/quantum.c **** }
 798:quantum/quantum.c **** 
 799:quantum/quantum.c **** #endif // backlight
 800:quantum/quantum.c **** 
 801:quantum/quantum.c **** 
 802:quantum/quantum.c **** 
 803:quantum/quantum.c **** __attribute__ ((weak))
 804:quantum/quantum.c **** void led_set_user(uint8_t usb_led) {
 1266               		.loc 1 804 36 view -0
 1267               		.cfi_startproc
 1268               	/* prologue: function */
 1269               	/* frame size = 0 */
 1270               	/* stack size = 0 */
 1271               	.L__stack_usage = 0
 805:quantum/quantum.c **** 
 806:quantum/quantum.c **** }
 1272               		.loc 1 806 1 view .LVU285
 1273               	/* epilogue start */
 1274 0000 0895      		ret
 1275               		.cfi_endproc
 1276               	.LFE122:
 1278               		.set	led_set_user.localalias.1,led_set_user
 1279               		.section	.text.backlight_set,"ax",@progbits
 1280               		.weak	backlight_set
 1282               	backlight_set:
 1283               	.LFB135:
 1284               		.cfi_startproc
 1285               	/* prologue: function */
 1286               	/* frame size = 0 */
 1287               	/* stack size = 0 */
 1288               	.L__stack_usage = 0
 1289               	/* epilogue start */
 1290 0000 0895      		ret
 1291               		.cfi_endproc
 1292               	.LFE135:
 1294               		.section	.text.led_set_kb,"ax",@progbits
 1295               		.weak	led_set_kb
 1297               	led_set_kb:
 1298               	.LVL101:
 1299               	.LFB123:
 807:quantum/quantum.c **** 
 808:quantum/quantum.c **** __attribute__ ((weak))
 809:quantum/quantum.c **** void led_set_kb(uint8_t usb_led) {
 1300               		.loc 1 809 34 view -0
 1301               		.cfi_startproc
 1302               	/* prologue: function */
 1303               	/* frame size = 0 */
 1304               	/* stack size = 0 */
 1305               	.L__stack_usage = 0
 810:quantum/quantum.c ****     led_set_user(usb_led);
 1306               		.loc 1 810 5 view .LVU287
 1307 0000 0C94 0000 		jmp led_set_user
 1308               	.LVL102:
 1309               		.loc 1 810 5 is_stmt 0 view .LVU288
 1310               		.cfi_endproc
 1311               	.LFE123:
 1313               		.section	.text.led_init_ports,"ax",@progbits
 1314               		.weak	led_init_ports
 1316               	led_init_ports:
 1317               	.LFB124:
 811:quantum/quantum.c **** }
 812:quantum/quantum.c **** 
 813:quantum/quantum.c **** __attribute__ ((weak))
 814:quantum/quantum.c **** void led_init_ports(void)
 815:quantum/quantum.c **** {
 1318               		.loc 1 815 1 is_stmt 1 view -0
 1319               		.cfi_startproc
 1320               	/* prologue: function */
 1321               	/* frame size = 0 */
 1322               	/* stack size = 0 */
 1323               	.L__stack_usage = 0
 816:quantum/quantum.c **** 
 817:quantum/quantum.c **** }
 1324               		.loc 1 817 1 view .LVU290
 1325               	/* epilogue start */
 1326 0000 0895      		ret
 1327               		.cfi_endproc
 1328               	.LFE124:
 1330               		.section	.text.led_set,"ax",@progbits
 1331               		.weak	led_set
 1333               	led_set:
 1334               	.LVL103:
 1335               	.LFB125:
 818:quantum/quantum.c **** 
 819:quantum/quantum.c **** __attribute__ ((weak))
 820:quantum/quantum.c **** void led_set(uint8_t usb_led)
 821:quantum/quantum.c **** {
 1336               		.loc 1 821 1 view -0
 1337               		.cfi_startproc
 1338               	/* prologue: function */
 1339               	/* frame size = 0 */
 1340               	/* stack size = 0 */
 1341               	.L__stack_usage = 0
 822:quantum/quantum.c **** 
 823:quantum/quantum.c ****   // Example LED Code
 824:quantum/quantum.c ****   //
 825:quantum/quantum.c ****     // // Using PE6 Caps Lock LED
 826:quantum/quantum.c ****     // if (usb_led & (1<<USB_LED_CAPS_LOCK))
 827:quantum/quantum.c ****     // {
 828:quantum/quantum.c ****     //     // Output high.
 829:quantum/quantum.c ****     //     DDRE |= (1<<6);
 830:quantum/quantum.c ****     //     PORTE |= (1<<6);
 831:quantum/quantum.c ****     // }
 832:quantum/quantum.c ****     // else
 833:quantum/quantum.c ****     // {
 834:quantum/quantum.c ****     //     // Output low.
 835:quantum/quantum.c ****     //     DDRE &= ~(1<<6);
 836:quantum/quantum.c ****     //     PORTE &= ~(1<<6);
 837:quantum/quantum.c ****     // }
 838:quantum/quantum.c **** 
 839:quantum/quantum.c ****   led_set_kb(usb_led);
 1342               		.loc 1 839 3 view .LVU292
 1343 0000 0C94 0000 		jmp led_set_kb
 1344               	.LVL104:
 1345               		.loc 1 839 3 is_stmt 0 view .LVU293
 1346               		.cfi_endproc
 1347               	.LFE125:
 1349               		.section	.text.startup_user,"ax",@progbits
 1350               		.weak	startup_user
 1352               	startup_user:
 1353               	.LFB129:
 1354               		.cfi_startproc
 1355               	/* prologue: function */
 1356               	/* frame size = 0 */
 1357               	/* stack size = 0 */
 1358               	.L__stack_usage = 0
 1359               	/* epilogue start */
 1360 0000 0895      		ret
 1361               		.cfi_endproc
 1362               	.LFE129:
 1364               		.section	.text.shutdown_user,"ax",@progbits
 1365               		.weak	shutdown_user
 1367               	shutdown_user:
 1368               	.LFB131:
 1369               		.cfi_startproc
 1370               	/* prologue: function */
 1371               	/* frame size = 0 */
 1372               	/* stack size = 0 */
 1373               	.L__stack_usage = 0
 1374               	/* epilogue start */
 1375 0000 0895      		ret
 1376               		.cfi_endproc
 1377               	.LFE131:
 1379               	.global	ascii_to_qwerty_keycode_lut
 1380               		.section	.progmem.data.ascii_to_qwerty_keycode_lut,"a",@progbits
 1383               	ascii_to_qwerty_keycode_lut:
 1384 0000 00        		.byte	0
 1385 0001 00        		.byte	0
 1386 0002 00        		.byte	0
 1387 0003 00        		.byte	0
 1388 0004 00        		.byte	0
 1389 0005 00        		.byte	0
 1390 0006 00        		.byte	0
 1391 0007 00        		.byte	0
 1392 0008 2A        		.byte	42
 1393 0009 2B        		.byte	43
 1394 000a 28        		.byte	40
 1395 000b 00        		.byte	0
 1396 000c 00        		.byte	0
 1397 000d 00        		.byte	0
 1398 000e 00        		.byte	0
 1399 000f 00        		.byte	0
 1400 0010 00        		.byte	0
 1401 0011 00        		.byte	0
 1402 0012 00        		.byte	0
 1403 0013 00        		.byte	0
 1404 0014 00        		.byte	0
 1405 0015 00        		.byte	0
 1406 0016 00        		.byte	0
 1407 0017 00        		.byte	0
 1408 0018 00        		.byte	0
 1409 0019 00        		.byte	0
 1410 001a 00        		.byte	0
 1411 001b 29        		.byte	41
 1412 001c 00        		.byte	0
 1413 001d 00        		.byte	0
 1414 001e 00        		.byte	0
 1415 001f 00        		.byte	0
 1416 0020 2C        		.byte	44
 1417 0021 1E        		.byte	30
 1418 0022 34        		.byte	52
 1419 0023 20        		.byte	32
 1420 0024 21        		.byte	33
 1421 0025 22        		.byte	34
 1422 0026 24        		.byte	36
 1423 0027 34        		.byte	52
 1424 0028 26        		.byte	38
 1425 0029 27        		.byte	39
 1426 002a 25        		.byte	37
 1427 002b 2E        		.byte	46
 1428 002c 36        		.byte	54
 1429 002d 2D        		.byte	45
 1430 002e 37        		.byte	55
 1431 002f 38        		.byte	56
 1432 0030 27        		.byte	39
 1433 0031 1E        		.byte	30
 1434 0032 1F        		.byte	31
 1435 0033 20        		.byte	32
 1436 0034 21        		.byte	33
 1437 0035 22        		.byte	34
 1438 0036 23        		.byte	35
 1439 0037 24        		.byte	36
 1440 0038 25        		.byte	37
 1441 0039 26        		.byte	38
 1442 003a 33        		.byte	51
 1443 003b 33        		.byte	51
 1444 003c 36        		.byte	54
 1445 003d 2E        		.byte	46
 1446 003e 37        		.byte	55
 1447 003f 38        		.byte	56
 1448 0040 1F        		.byte	31
 1449 0041 04        		.byte	4
 1450 0042 05        		.byte	5
 1451 0043 06        		.byte	6
 1452 0044 07        		.byte	7
 1453 0045 08        		.byte	8
 1454 0046 09        		.byte	9
 1455 0047 0A        		.byte	10
 1456 0048 0B        		.byte	11
 1457 0049 0C        		.byte	12
 1458 004a 0D        		.byte	13
 1459 004b 0E        		.byte	14
 1460 004c 0F        		.byte	15
 1461 004d 10        		.byte	16
 1462 004e 11        		.byte	17
 1463 004f 12        		.byte	18
 1464 0050 13        		.byte	19
 1465 0051 14        		.byte	20
 1466 0052 15        		.byte	21
 1467 0053 16        		.byte	22
 1468 0054 17        		.byte	23
 1469 0055 18        		.byte	24
 1470 0056 19        		.byte	25
 1471 0057 1A        		.byte	26
 1472 0058 1B        		.byte	27
 1473 0059 1C        		.byte	28
 1474 005a 1D        		.byte	29
 1475 005b 2F        		.byte	47
 1476 005c 31        		.byte	49
 1477 005d 30        		.byte	48
 1478 005e 23        		.byte	35
 1479 005f 2D        		.byte	45
 1480 0060 35        		.byte	53
 1481 0061 04        		.byte	4
 1482 0062 05        		.byte	5
 1483 0063 06        		.byte	6
 1484 0064 07        		.byte	7
 1485 0065 08        		.byte	8
 1486 0066 09        		.byte	9
 1487 0067 0A        		.byte	10
 1488 0068 0B        		.byte	11
 1489 0069 0C        		.byte	12
 1490 006a 0D        		.byte	13
 1491 006b 0E        		.byte	14
 1492 006c 0F        		.byte	15
 1493 006d 10        		.byte	16
 1494 006e 11        		.byte	17
 1495 006f 12        		.byte	18
 1496 0070 13        		.byte	19
 1497 0071 14        		.byte	20
 1498 0072 15        		.byte	21
 1499 0073 16        		.byte	22
 1500 0074 17        		.byte	23
 1501 0075 18        		.byte	24
 1502 0076 19        		.byte	25
 1503 0077 1A        		.byte	26
 1504 0078 1B        		.byte	27
 1505 0079 1C        		.byte	28
 1506 007a 1D        		.byte	29
 1507 007b 2F        		.byte	47
 1508 007c 31        		.byte	49
 1509 007d 30        		.byte	48
 1510 007e 35        		.byte	53
 1511 007f 4C        		.byte	76
 1512               	.global	ascii_to_qwerty_shift_lut
 1513               		.section	.progmem.data.ascii_to_qwerty_shift_lut,"a",@progbits
 1516               	ascii_to_qwerty_shift_lut:
 1517 0000 00        		.byte	0
 1518 0001 00        		.byte	0
 1519 0002 00        		.byte	0
 1520 0003 00        		.byte	0
 1521 0004 00        		.byte	0
 1522 0005 00        		.byte	0
 1523 0006 00        		.byte	0
 1524 0007 00        		.byte	0
 1525 0008 00        		.byte	0
 1526 0009 00        		.byte	0
 1527 000a 00        		.byte	0
 1528 000b 00        		.byte	0
 1529 000c 00        		.byte	0
 1530 000d 00        		.byte	0
 1531 000e 00        		.byte	0
 1532 000f 00        		.byte	0
 1533 0010 00        		.byte	0
 1534 0011 00        		.byte	0
 1535 0012 00        		.byte	0
 1536 0013 00        		.byte	0
 1537 0014 00        		.byte	0
 1538 0015 00        		.byte	0
 1539 0016 00        		.byte	0
 1540 0017 00        		.byte	0
 1541 0018 00        		.byte	0
 1542 0019 00        		.byte	0
 1543 001a 00        		.byte	0
 1544 001b 00        		.byte	0
 1545 001c 00        		.byte	0
 1546 001d 00        		.byte	0
 1547 001e 00        		.byte	0
 1548 001f 00        		.byte	0
 1549 0020 00        		.byte	0
 1550 0021 01        		.byte	1
 1551 0022 01        		.byte	1
 1552 0023 01        		.byte	1
 1553 0024 01        		.byte	1
 1554 0025 01        		.byte	1
 1555 0026 01        		.byte	1
 1556 0027 00        		.byte	0
 1557 0028 01        		.byte	1
 1558 0029 01        		.byte	1
 1559 002a 01        		.byte	1
 1560 002b 01        		.byte	1
 1561 002c 00        		.byte	0
 1562 002d 00        		.byte	0
 1563 002e 00        		.byte	0
 1564 002f 00        		.byte	0
 1565 0030 00        		.byte	0
 1566 0031 00        		.byte	0
 1567 0032 00        		.byte	0
 1568 0033 00        		.byte	0
 1569 0034 00        		.byte	0
 1570 0035 00        		.byte	0
 1571 0036 00        		.byte	0
 1572 0037 00        		.byte	0
 1573 0038 00        		.byte	0
 1574 0039 00        		.byte	0
 1575 003a 01        		.byte	1
 1576 003b 00        		.byte	0
 1577 003c 01        		.byte	1
 1578 003d 00        		.byte	0
 1579 003e 01        		.byte	1
 1580 003f 01        		.byte	1
 1581 0040 01        		.byte	1
 1582 0041 01        		.byte	1
 1583 0042 01        		.byte	1
 1584 0043 01        		.byte	1
 1585 0044 01        		.byte	1
 1586 0045 01        		.byte	1
 1587 0046 01        		.byte	1
 1588 0047 01        		.byte	1
 1589 0048 01        		.byte	1
 1590 0049 01        		.byte	1
 1591 004a 01        		.byte	1
 1592 004b 01        		.byte	1
 1593 004c 01        		.byte	1
 1594 004d 01        		.byte	1
 1595 004e 01        		.byte	1
 1596 004f 01        		.byte	1
 1597 0050 01        		.byte	1
 1598 0051 01        		.byte	1
 1599 0052 01        		.byte	1
 1600 0053 01        		.byte	1
 1601 0054 01        		.byte	1
 1602 0055 01        		.byte	1
 1603 0056 01        		.byte	1
 1604 0057 01        		.byte	1
 1605 0058 01        		.byte	1
 1606 0059 01        		.byte	1
 1607 005a 01        		.byte	1
 1608 005b 00        		.byte	0
 1609 005c 00        		.byte	0
 1610 005d 00        		.byte	0
 1611 005e 01        		.byte	1
 1612 005f 01        		.byte	1
 1613 0060 00        		.byte	0
 1614 0061 00        		.byte	0
 1615 0062 00        		.byte	0
 1616 0063 00        		.byte	0
 1617 0064 00        		.byte	0
 1618 0065 00        		.byte	0
 1619 0066 00        		.byte	0
 1620 0067 00        		.byte	0
 1621 0068 00        		.byte	0
 1622 0069 00        		.byte	0
 1623 006a 00        		.byte	0
 1624 006b 00        		.byte	0
 1625 006c 00        		.byte	0
 1626 006d 00        		.byte	0
 1627 006e 00        		.byte	0
 1628 006f 00        		.byte	0
 1629 0070 00        		.byte	0
 1630 0071 00        		.byte	0
 1631 0072 00        		.byte	0
 1632 0073 00        		.byte	0
 1633 0074 00        		.byte	0
 1634 0075 00        		.byte	0
 1635 0076 00        		.byte	0
 1636 0077 00        		.byte	0
 1637 0078 00        		.byte	0
 1638 0079 00        		.byte	0
 1639 007a 00        		.byte	0
 1640 007b 01        		.byte	1
 1641 007c 01        		.byte	1
 1642 007d 01        		.byte	1
 1643 007e 01        		.byte	1
 1644 007f 00        		.byte	0
 1645               		.section	.bss.shift_interrupted,"aw",@nobits
 1648               	shift_interrupted:
 1649 0000 0000      		.zero	2
 1650               		.text
 1651               	.Letext0:
 1652               		.file 3 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/stdint.h"
 1653               		.file 4 "/usr/local/Cellar/avr-gcc/8.1.0/lib/avr-gcc/8/gcc/avr/8.1.0/include/stddef.h"
 1654               		.file 5 "./tmk_core/common/keyboard.h"
 1655               		.file 6 "./tmk_core/common/action.h"
 1656               		.file 7 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 1657               		.file 8 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 1658               		.file 9 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 1659               		.file 10 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/HostStandardReq.h"
 1660               		.file 11 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/stdio.h"
 1661               		.file 12 "./tmk_core/common/report.h"
 1662               		.file 13 "./tmk_core/common/host.h"
 1663               		.file 14 "./tmk_core/common/debug.h"
 1664               		.file 15 "quantum/keycode_config.h"
 1665               		.file 16 "quantum/keymap.h"
 1666               		.file 17 "./tmk_core/common/keycode.h"
 1667               		.file 18 "./tmk_core/common/action_layer.h"
 1668               		.file 19 "./tmk_core/common/timer.h"
 1669               		.file 20 "./tmk_core/common/action_util.h"
 1670               		.file 21 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/stdlib.h"
 1671               		.file 22 "./quantum/process_keycode/process_tap_dance.h"
 1672               		.file 23 "quantum/quantum.h"
 1673               		.file 24 "./quantum/process_keycode/process_leader.h"
 1674               		.file 25 "./quantum/process_keycode/process_unicode.h"
 1675               		.file 26 "./tmk_core/common/eeconfig.h"
 1676               		.file 27 "./tmk_core/common/bootloader.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 quantum.c
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cckcUOq8.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cckcUOq8.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cckcUOq8.s:4      *ABS*:000000000000003f __SREG__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cckcUOq8.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cckcUOq8.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cckcUOq8.s:12     .text.do_code16:0000000000000000 do_code16
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cckcUOq8.s:168    .text.register_code16:0000000000000000 register_code16
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cckcUOq8.s:202    .text.unregister_code16:0000000000000000 unregister_code16
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cckcUOq8.s:243    .text.process_action_kb:0000000000000000 process_action_kb
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cckcUOq8.s:265    .text.process_record_user:0000000000000000 process_record_user
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cckcUOq8.s:287    .text.process_record_kb:0000000000000000 process_record_kb
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cckcUOq8.s:307    .text.reset_keyboard:0000000000000000 reset_keyboard
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cckcUOq8.s:352    .text.process_record_quantum:0000000000000000 process_record_quantum
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cckcUOq8.s:1648   .bss.shift_interrupted:0000000000000000 shift_interrupted
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cckcUOq8.s:787    .text.send_string:0000000000000000 send_string
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cckcUOq8.s:1383   .progmem.data.ascii_to_qwerty_keycode_lut:0000000000000000 ascii_to_qwerty_keycode_lut
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cckcUOq8.s:1516   .progmem.data.ascii_to_qwerty_shift_lut:0000000000000000 ascii_to_qwerty_shift_lut
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cckcUOq8.s:935    .text.update_tri_layer:0000000000000000 update_tri_layer
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cckcUOq8.s:1076   .text.tap_random_base64:0000000000000000 tap_random_base64
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cckcUOq8.s:1211   .text.matrix_init_quantum:0000000000000000 matrix_init_quantum
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cckcUOq8.s:1228   .text.matrix_scan_quantum:0000000000000000 matrix_scan_quantum
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cckcUOq8.s:1248   .text.backlight_init_ports:0000000000000000 backlight_init_ports
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cckcUOq8.s:1263   .text.led_set_user:0000000000000000 led_set_user
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cckcUOq8.s:1263   .text.led_set_user:0000000000000000 led_set_user.localalias.1
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cckcUOq8.s:1282   .text.backlight_set:0000000000000000 backlight_set
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cckcUOq8.s:1297   .text.led_set_kb:0000000000000000 led_set_kb
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cckcUOq8.s:1316   .text.led_init_ports:0000000000000000 led_init_ports
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cckcUOq8.s:1333   .text.led_set:0000000000000000 led_set
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cckcUOq8.s:1352   .text.startup_user:0000000000000000 startup_user
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cckcUOq8.s:1367   .text.shutdown_user:0000000000000000 shutdown_user

UNDEFINED SYMBOLS
register_code
unregister_code
clear_keyboard
bootloader_jump
layer_switch_get_layer
keymap_key_to_keycode
process_tap_dance
process_leader
process_unicode
debug_config
eeconfig_is_enabled
eeconfig_init
eeconfig_read_keymap
keymap_config
__tablejump2__
eeconfig_update_keymap
register_mods
unregister_mods
layer_state
layer_on
layer_off
matrix_init_kb
matrix_scan_tap_dance
matrix_scan_kb
__do_clear_bss
