   1               		.file	"command.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.command_common,"ax",@progbits
  12               	command_common:
  13               	.LFB113:
  14               		.file 1 "./tmk_core/common/command.c"
   1:./tmk_core/common/command.c **** /*
   2:./tmk_core/common/command.c **** Copyright 2011 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/command.c **** 
   4:./tmk_core/common/command.c **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/command.c **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/command.c **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/command.c **** (at your option) any later version.
   8:./tmk_core/common/command.c **** 
   9:./tmk_core/common/command.c **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/command.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/command.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/command.c **** GNU General Public License for more details.
  13:./tmk_core/common/command.c **** 
  14:./tmk_core/common/command.c **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/command.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/command.c **** */
  17:./tmk_core/common/command.c **** #include <stdint.h>
  18:./tmk_core/common/command.c **** #include <stdbool.h>
  19:./tmk_core/common/command.c **** #include "wait.h"
  20:./tmk_core/common/command.c **** #include "keycode.h"
  21:./tmk_core/common/command.c **** #include "host.h"
  22:./tmk_core/common/command.c **** #include "keymap.h"
  23:./tmk_core/common/command.c **** #include "print.h"
  24:./tmk_core/common/command.c **** #include "debug.h"
  25:./tmk_core/common/command.c **** #include "util.h"
  26:./tmk_core/common/command.c **** #include "timer.h"
  27:./tmk_core/common/command.c **** #include "keyboard.h"
  28:./tmk_core/common/command.c **** #include "bootloader.h"
  29:./tmk_core/common/command.c **** #include "action_layer.h"
  30:./tmk_core/common/command.c **** #include "action_util.h"
  31:./tmk_core/common/command.c **** #include "eeconfig.h"
  32:./tmk_core/common/command.c **** #include "sleep_led.h"
  33:./tmk_core/common/command.c **** #include "led.h"
  34:./tmk_core/common/command.c **** #include "command.h"
  35:./tmk_core/common/command.c **** #include "backlight.h"
  36:./tmk_core/common/command.c **** #include "quantum.h"
  37:./tmk_core/common/command.c **** #include "version.h"
  38:./tmk_core/common/command.c **** 
  39:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  40:./tmk_core/common/command.c **** #include "mousekey.h"
  41:./tmk_core/common/command.c **** #endif
  42:./tmk_core/common/command.c **** 
  43:./tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
  44:./tmk_core/common/command.c **** 	#include "usb_keyboard.h"
  45:./tmk_core/common/command.c **** 		#ifdef EXTRAKEY_ENABLE
  46:./tmk_core/common/command.c **** 		#include "usb_extra.h"
  47:./tmk_core/common/command.c **** 	#endif
  48:./tmk_core/common/command.c **** #endif
  49:./tmk_core/common/command.c **** 
  50:./tmk_core/common/command.c **** #ifdef PROTOCOL_VUSB
  51:./tmk_core/common/command.c **** 	#include "usbdrv.h"
  52:./tmk_core/common/command.c **** #endif
  53:./tmk_core/common/command.c **** 
  54:./tmk_core/common/command.c **** #ifdef AUDIO_ENABLE
  55:./tmk_core/common/command.c ****     #include "audio.h"
  56:./tmk_core/common/command.c **** #endif /* AUDIO_ENABLE */
  57:./tmk_core/common/command.c **** 
  58:./tmk_core/common/command.c **** 
  59:./tmk_core/common/command.c **** static bool command_common(uint8_t code);
  60:./tmk_core/common/command.c **** static void command_common_help(void);
  61:./tmk_core/common/command.c **** static void print_version(void);
  62:./tmk_core/common/command.c **** static void print_status(void);
  63:./tmk_core/common/command.c **** static bool command_console(uint8_t code);
  64:./tmk_core/common/command.c **** static void command_console_help(void);
  65:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  66:./tmk_core/common/command.c **** static bool mousekey_console(uint8_t code);
  67:./tmk_core/common/command.c **** static void mousekey_console_help(void);
  68:./tmk_core/common/command.c **** #endif
  69:./tmk_core/common/command.c **** 
  70:./tmk_core/common/command.c **** static void switch_default_layer(uint8_t layer);
  71:./tmk_core/common/command.c **** 
  72:./tmk_core/common/command.c **** 
  73:./tmk_core/common/command.c **** command_state_t command_state = ONESHOT;
  74:./tmk_core/common/command.c **** 
  75:./tmk_core/common/command.c **** 
  76:./tmk_core/common/command.c **** bool command_proc(uint8_t code)
  77:./tmk_core/common/command.c **** {
  78:./tmk_core/common/command.c ****     switch (command_state) {
  79:./tmk_core/common/command.c ****         case ONESHOT:
  80:./tmk_core/common/command.c ****             if (!IS_COMMAND())
  81:./tmk_core/common/command.c ****                 return false;
  82:./tmk_core/common/command.c ****             return (command_extra(code) || command_common(code));
  83:./tmk_core/common/command.c ****             break;
  84:./tmk_core/common/command.c ****         case CONSOLE:
  85:./tmk_core/common/command.c ****             if (IS_COMMAND())
  86:./tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
  87:./tmk_core/common/command.c ****             else
  88:./tmk_core/common/command.c ****                 return (command_console_extra(code) || command_console(code));
  89:./tmk_core/common/command.c ****             break;
  90:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  91:./tmk_core/common/command.c ****         case MOUSEKEY:
  92:./tmk_core/common/command.c ****             mousekey_console(code);
  93:./tmk_core/common/command.c ****             break;
  94:./tmk_core/common/command.c **** #endif
  95:./tmk_core/common/command.c ****         default:
  96:./tmk_core/common/command.c ****             command_state = ONESHOT;
  97:./tmk_core/common/command.c ****             return false;
  98:./tmk_core/common/command.c ****     }
  99:./tmk_core/common/command.c ****     return true;
 100:./tmk_core/common/command.c **** }
 101:./tmk_core/common/command.c **** 
 102:./tmk_core/common/command.c **** /* TODO: Refactoring is needed. */
 103:./tmk_core/common/command.c **** /* This allows to define extra commands. return false when not processed. */
 104:./tmk_core/common/command.c **** bool command_extra(uint8_t code) __attribute__ ((weak));
 105:./tmk_core/common/command.c **** bool command_extra(uint8_t code)
 106:./tmk_core/common/command.c **** {
 107:./tmk_core/common/command.c ****     (void)code;
 108:./tmk_core/common/command.c ****     return false;
 109:./tmk_core/common/command.c **** }
 110:./tmk_core/common/command.c **** 
 111:./tmk_core/common/command.c **** bool command_console_extra(uint8_t code) __attribute__ ((weak));
 112:./tmk_core/common/command.c **** bool command_console_extra(uint8_t code)
 113:./tmk_core/common/command.c **** {
 114:./tmk_core/common/command.c ****     (void)code;
 115:./tmk_core/common/command.c ****     return false;
 116:./tmk_core/common/command.c **** }
 117:./tmk_core/common/command.c **** 
 118:./tmk_core/common/command.c **** 
 119:./tmk_core/common/command.c **** /***********************************************************
 120:./tmk_core/common/command.c ****  * Command common
 121:./tmk_core/common/command.c ****  ***********************************************************/
 122:./tmk_core/common/command.c **** static void command_common_help(void)
 123:./tmk_core/common/command.c **** {
 124:./tmk_core/common/command.c **** 	print(                            "\n\t- Magic -\n"
 125:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG       ) ":	Debug Message Toggle\n"
 126:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG_MATRIX) ":	Matrix Debug Mode Toggle - Show keypresses in matrix grid\n"
 127:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG_KBD   ) ":	Keyboard Debug Toggle - Show keypress report\n"
 128:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG_MOUSE ) ":	Debug Mouse Toggle\n"
 129:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_VERSION     ) ":	Version\n"
 130:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_STATUS      ) ":	Status\n"
 131:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_CONSOLE     ) ":	Activate Console Mode\n"
 132:./tmk_core/common/command.c **** 
 133:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_CUSTOM
 134:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER0      ) ":	Switch to Layer 0\n"
 135:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER1      ) ":	Switch to Layer 1\n"
 136:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER2      ) ":	Switch to Layer 2\n"
 137:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER3      ) ":	Switch to Layer 3\n"
 138:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER4      ) ":	Switch to Layer 4\n"
 139:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER5      ) ":	Switch to Layer 5\n"
 140:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER6      ) ":	Switch to Layer 6\n"
 141:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER7      ) ":	Switch to Layer 7\n"
 142:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER8      ) ":	Switch to Layer 8\n"
 143:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER9      ) ":	Switch to Layer 9\n"
 144:./tmk_core/common/command.c **** #endif
 145:./tmk_core/common/command.c **** 
 146:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_FKEYS
 147:./tmk_core/common/command.c **** 		                            "F1-F10:	Switch to Layer 0-9 (F10 = L0)\n"
 148:./tmk_core/common/command.c **** #endif
 149:./tmk_core/common/command.c **** 
 150:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_NKEYS
 151:./tmk_core/common/command.c **** 		                            "0-9:	Switch to Layer 0-9\n"
 152:./tmk_core/common/command.c **** #endif
 153:./tmk_core/common/command.c **** 
 154:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER0_ALT1 ) ":	Switch to Layer 0 (alternate key 1)\n"
 155:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER0_ALT2 ) ":	Switch to Layer 0 (alternate key 2)\n"
 156:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_BOOTLOADER  ) ":	Jump to Bootloader (Reset)\n"
 157:./tmk_core/common/command.c **** 
 158:./tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 159:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LOCK        ) ":	Lock\n"
 160:./tmk_core/common/command.c **** #endif
 161:./tmk_core/common/command.c **** 
 162:./tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 163:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_EEPROM      ) ":	Print EEPROM Settings\n"
 164:./tmk_core/common/command.c **** #endif
 165:./tmk_core/common/command.c **** 
 166:./tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 167:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_NKRO        ) ":	NKRO Toggle\n"
 168:./tmk_core/common/command.c **** #endif
 169:./tmk_core/common/command.c **** 
 170:./tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 171:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_SLEEP_LED   ) ":	Sleep LED Test\n"
 172:./tmk_core/common/command.c **** #endif
 173:./tmk_core/common/command.c ****     );
 174:./tmk_core/common/command.c **** }
 175:./tmk_core/common/command.c **** 
 176:./tmk_core/common/command.c **** static void print_version(void)
 177:./tmk_core/common/command.c **** {
 178:./tmk_core/common/command.c **** 	// print version & information
 179:./tmk_core/common/command.c ****     print("\n\t- Version -\n");
 180:./tmk_core/common/command.c ****     print("DESC: " STR(DESCRIPTION) "\n");
 181:./tmk_core/common/command.c ****     print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
 182:./tmk_core/common/command.c ****           "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
 183:./tmk_core/common/command.c ****           "VER: " STR(DEVICE_VER) "\n");
 184:./tmk_core/common/command.c ****     print("BUILD: " STR(QMK_VERSION) " (" __TIME__ " " __DATE__ ")\n");
 185:./tmk_core/common/command.c **** 
 186:./tmk_core/common/command.c ****     /* build options */
 187:./tmk_core/common/command.c ****     print("OPTIONS:"
 188:./tmk_core/common/command.c **** 
 189:./tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 190:./tmk_core/common/command.c **** 	    " PJRC"
 191:./tmk_core/common/command.c **** #endif
 192:./tmk_core/common/command.c **** #ifdef PROTOCOL_LUFA
 193:./tmk_core/common/command.c **** 	    " LUFA"
 194:./tmk_core/common/command.c **** #endif
 195:./tmk_core/common/command.c **** #ifdef PROTOCOL_VUSB
 196:./tmk_core/common/command.c **** 	    " VUSB"
 197:./tmk_core/common/command.c **** #endif
 198:./tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 199:./tmk_core/common/command.c **** 	    " BOOTMAGIC"
 200:./tmk_core/common/command.c **** #endif
 201:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 202:./tmk_core/common/command.c **** 	    " MOUSEKEY"
 203:./tmk_core/common/command.c **** #endif
 204:./tmk_core/common/command.c **** #ifdef EXTRAKEY_ENABLE
 205:./tmk_core/common/command.c **** 	    " EXTRAKEY"
 206:./tmk_core/common/command.c **** #endif
 207:./tmk_core/common/command.c **** #ifdef CONSOLE_ENABLE
 208:./tmk_core/common/command.c **** 	    " CONSOLE"
 209:./tmk_core/common/command.c **** #endif
 210:./tmk_core/common/command.c **** #ifdef COMMAND_ENABLE
 211:./tmk_core/common/command.c **** 	    " COMMAND"
 212:./tmk_core/common/command.c **** #endif
 213:./tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 214:./tmk_core/common/command.c **** 	    " NKRO"
 215:./tmk_core/common/command.c **** #endif
 216:./tmk_core/common/command.c **** #ifdef KEYMAP_SECTION_ENABLE
 217:./tmk_core/common/command.c **** 	    " KEYMAP_SECTION"
 218:./tmk_core/common/command.c **** #endif
 219:./tmk_core/common/command.c **** 
 220:./tmk_core/common/command.c **** 	    " " STR(BOOTLOADER_SIZE) "\n");
 221:./tmk_core/common/command.c **** 
 222:./tmk_core/common/command.c ****     print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
 223:./tmk_core/common/command.c **** #if defined(__AVR__)
 224:./tmk_core/common/command.c ****           " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__
 225:./tmk_core/common/command.c ****           " AVR_ARCH: avr" STR(__AVR_ARCH__)
 226:./tmk_core/common/command.c **** #endif
 227:./tmk_core/common/command.c **** 		  "\n");
 228:./tmk_core/common/command.c **** 
 229:./tmk_core/common/command.c **** 	return;
 230:./tmk_core/common/command.c **** }
 231:./tmk_core/common/command.c **** 
 232:./tmk_core/common/command.c **** static void print_status(void)
 233:./tmk_core/common/command.c **** {
 234:./tmk_core/common/command.c **** 
 235:./tmk_core/common/command.c ****     print("\n\t- Status -\n");
 236:./tmk_core/common/command.c **** 
 237:./tmk_core/common/command.c ****     print_val_hex8(host_keyboard_leds());
 238:./tmk_core/common/command.c ****     print_val_hex8(keyboard_protocol);
 239:./tmk_core/common/command.c ****     print_val_hex8(keyboard_idle);
 240:./tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 241:./tmk_core/common/command.c ****     print_val_hex8(keymap_config.nkro);
 242:./tmk_core/common/command.c **** #endif
 243:./tmk_core/common/command.c ****     print_val_hex32(timer_read32());
 244:./tmk_core/common/command.c **** 
 245:./tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 246:./tmk_core/common/command.c ****     print_val_hex8(UDCON);
 247:./tmk_core/common/command.c ****     print_val_hex8(UDIEN);
 248:./tmk_core/common/command.c ****     print_val_hex8(UDINT);
 249:./tmk_core/common/command.c ****     print_val_hex8(usb_keyboard_leds);
 250:./tmk_core/common/command.c ****     print_val_hex8(usb_keyboard_idle_count);
 251:./tmk_core/common/command.c **** #endif
 252:./tmk_core/common/command.c **** 
 253:./tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 254:./tmk_core/common/command.c **** #   if USB_COUNT_SOF
 255:./tmk_core/common/command.c ****     print_val_hex8(usbSofCount);
 256:./tmk_core/common/command.c **** #   endif
 257:./tmk_core/common/command.c **** #endif
 258:./tmk_core/common/command.c **** 	return;
 259:./tmk_core/common/command.c **** }
 260:./tmk_core/common/command.c **** 
 261:./tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 262:./tmk_core/common/command.c **** static void print_eeconfig(void)
 263:./tmk_core/common/command.c **** {
 264:./tmk_core/common/command.c **** 
 265:./tmk_core/common/command.c **** // Print these variables if NO_PRINT or USER_PRINT are not defined.
 266:./tmk_core/common/command.c **** #if !defined(NO_PRINT) && !defined(USER_PRINT)
 267:./tmk_core/common/command.c **** 
 268:./tmk_core/common/command.c ****     print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
 269:./tmk_core/common/command.c **** 
 270:./tmk_core/common/command.c ****     debug_config_t dc;
 271:./tmk_core/common/command.c ****     dc.raw = eeconfig_read_debug();
 272:./tmk_core/common/command.c ****     print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
 273:./tmk_core/common/command.c ****     print(".enable: "); print_dec(dc.enable); print("\n");
 274:./tmk_core/common/command.c ****     print(".matrix: "); print_dec(dc.matrix); print("\n");
 275:./tmk_core/common/command.c ****     print(".keyboard: "); print_dec(dc.keyboard); print("\n");
 276:./tmk_core/common/command.c ****     print(".mouse: "); print_dec(dc.mouse); print("\n");
 277:./tmk_core/common/command.c **** 
 278:./tmk_core/common/command.c ****     keymap_config_t kc;
 279:./tmk_core/common/command.c ****     kc.raw = eeconfig_read_keymap();
 280:./tmk_core/common/command.c ****     print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
 281:./tmk_core/common/command.c ****     print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
 282:./tmk_core/common/command.c ****     print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
 283:./tmk_core/common/command.c ****     print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
 284:./tmk_core/common/command.c ****     print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
 285:./tmk_core/common/command.c ****     print(".no_gui: "); print_dec(kc.no_gui); print("\n");
 286:./tmk_core/common/command.c ****     print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
 287:./tmk_core/common/command.c ****     print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
 288:./tmk_core/common/command.c ****     print(".nkro: "); print_dec(kc.nkro); print("\n");
 289:./tmk_core/common/command.c **** 
 290:./tmk_core/common/command.c **** #ifdef BACKLIGHT_ENABLE
 291:./tmk_core/common/command.c ****     backlight_config_t bc;
 292:./tmk_core/common/command.c ****     bc.raw = eeconfig_read_backlight();
 293:./tmk_core/common/command.c ****     print("backlight_config.raw: "); print_hex8(bc.raw); print("\n");
 294:./tmk_core/common/command.c ****     print(".enable: "); print_dec(bc.enable); print("\n");
 295:./tmk_core/common/command.c ****     print(".level: "); print_dec(bc.level); print("\n");
 296:./tmk_core/common/command.c **** #endif /* BACKLIGHT_ENABLE */
 297:./tmk_core/common/command.c **** 
 298:./tmk_core/common/command.c **** #endif /* !NO_PRINT */
 299:./tmk_core/common/command.c **** 
 300:./tmk_core/common/command.c **** }
 301:./tmk_core/common/command.c **** #endif /* BOOTMAGIC_ENABLE */
 302:./tmk_core/common/command.c **** 
 303:./tmk_core/common/command.c **** static bool command_common(uint8_t code)
 304:./tmk_core/common/command.c **** {
  15               		.loc 1 304 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 0F93      		push r16
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 16, -2
  22 0002 1F93      		push r17
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 17, -3
  26               	/* prologue: function */
  27               	/* frame size = 0 */
  28               	/* stack size = 2 */
  29               	.L__stack_usage = 2
 305:./tmk_core/common/command.c **** 
 306:./tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 307:./tmk_core/common/command.c ****     static host_driver_t *host_driver = 0;
 308:./tmk_core/common/command.c **** #endif
 309:./tmk_core/common/command.c **** 
 310:./tmk_core/common/command.c ****     switch (code) {
  30               		.loc 1 310 0
  31 0004 8732      		cpi r24,lo8(39)
  32 0006 00F0      		brlo .+2
  33 0008 00C0      		rjmp .L3
  34 000a 8E31      		cpi r24,lo8(30)
  35 000c 00F0      		brlo .+2
  36 000e 00C0      		rjmp .L4
  37 0010 8031      		cpi r24,lo8(16)
  38 0012 01F4      		brne .+2
  39 0014 00C0      		rjmp .L5
  40 0016 00F4      		brsh .L6
  41 0018 8730      		cpi r24,lo8(7)
  42 001a 01F4      		brne .+2
  43 001c 00C0      		rjmp .L7
  44 001e 00F4      		brsh .L8
  45 0020 8630      		cpi r24,lo8(6)
  46 0022 01F0      		breq .+2
  47 0024 00C0      		rjmp .L25
 311:./tmk_core/common/command.c **** 
 312:./tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 313:./tmk_core/common/command.c **** 
 314:./tmk_core/common/command.c **** 		// test breathing sleep LED
 315:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_SLEEP_LED):
 316:./tmk_core/common/command.c ****             print("Sleep LED Test\n");
 317:./tmk_core/common/command.c ****             sleep_led_toggle();
 318:./tmk_core/common/command.c ****             led_set(host_keyboard_leds());
 319:./tmk_core/common/command.c ****             break;
 320:./tmk_core/common/command.c **** #endif
 321:./tmk_core/common/command.c **** 
 322:./tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 323:./tmk_core/common/command.c **** 
 324:./tmk_core/common/command.c **** 		// print stored eeprom config
 325:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_EEPROM):
 326:./tmk_core/common/command.c ****             print("eeconfig:\n");
 327:./tmk_core/common/command.c ****             print_eeconfig();
 328:./tmk_core/common/command.c ****             break;
 329:./tmk_core/common/command.c **** #endif
 330:./tmk_core/common/command.c **** 
 331:./tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 332:./tmk_core/common/command.c **** 
 333:./tmk_core/common/command.c **** 		// lock/unlock keyboard
 334:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_LOCK):
 335:./tmk_core/common/command.c ****             if (host_get_driver()) {
 336:./tmk_core/common/command.c ****                 host_driver = host_get_driver();
 337:./tmk_core/common/command.c ****                 clear_keyboard();
 338:./tmk_core/common/command.c ****                 host_set_driver(0);
 339:./tmk_core/common/command.c ****                 print("Locked.\n");
 340:./tmk_core/common/command.c ****             } else {
 341:./tmk_core/common/command.c ****                 host_set_driver(host_driver);
 342:./tmk_core/common/command.c ****                 print("Unlocked.\n");
 343:./tmk_core/common/command.c ****             }
 344:./tmk_core/common/command.c ****             break;
 345:./tmk_core/common/command.c **** #endif
 346:./tmk_core/common/command.c **** 
 347:./tmk_core/common/command.c **** 		// print help
 348:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_HELP1):
 349:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_HELP2):
 350:./tmk_core/common/command.c ****             command_common_help();
 351:./tmk_core/common/command.c ****             break;
 352:./tmk_core/common/command.c **** 
 353:./tmk_core/common/command.c **** 		// activate console
 354:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_CONSOLE):
 355:./tmk_core/common/command.c ****             debug_matrix   = false;
  48               		.loc 1 355 0
  49 0026 8091 0000 		lds r24,debug_config
  50               	.LVL1:
 356:./tmk_core/common/command.c ****             debug_keyboard = false;
 357:./tmk_core/common/command.c ****             debug_mouse    = false;
 358:./tmk_core/common/command.c ****             debug_enable   = false;
  51               		.loc 1 358 0
  52 002a 817F      		andi r24,lo8(-15)
  53 002c 8E7F      		andi r24,lo8(~(1<<0))
  54 002e 8093 0000 		sts debug_config,r24
 359:./tmk_core/common/command.c ****             command_console_help();
 360:./tmk_core/common/command.c ****             print("C> ");
 361:./tmk_core/common/command.c ****             command_state = CONSOLE;
  55               		.loc 1 361 0
  56 0032 81E0      		ldi r24,lo8(1)
  57 0034 8093 0000 		sts command_state,r24
 362:./tmk_core/common/command.c ****             break;
  58               		.loc 1 362 0
  59 0038 00C0      		rjmp .L2
  60               	.LVL2:
  61               	.L8:
 310:./tmk_core/common/command.c **** 
  62               		.loc 1 310 0
  63 003a 8B30      		cpi r24,lo8(11)
  64 003c 01F4      		brne .+2
  65 003e 00C0      		rjmp .L48
  66 0040 8E30      		cpi r24,lo8(14)
  67 0042 01F0      		breq .+2
  68 0044 00C0      		rjmp .L25
 363:./tmk_core/common/command.c **** 
 364:./tmk_core/common/command.c ****         // jump to bootloader
 365:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_BOOTLOADER):
 366:./tmk_core/common/command.c ****             clear_keyboard(); // clear to prevent stuck keys
 367:./tmk_core/common/command.c ****             print("\n\nJumping to bootloader... ");
 368:./tmk_core/common/command.c ****             #ifdef AUDIO_ENABLE
 369:./tmk_core/common/command.c **** 	            stop_all_notes();
 370:./tmk_core/common/command.c ****                 shutdown_user();
 371:./tmk_core/common/command.c ****             #else
 372:./tmk_core/common/command.c **** 	            wait_ms(1000);
 373:./tmk_core/common/command.c ****             #endif
 374:./tmk_core/common/command.c ****             bootloader_jump(); // not return
 375:./tmk_core/common/command.c ****             break;
 376:./tmk_core/common/command.c **** 
 377:./tmk_core/common/command.c ****         // debug toggle
 378:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG):
 379:./tmk_core/common/command.c ****             debug_enable = !debug_enable;
 380:./tmk_core/common/command.c ****             if (debug_enable) {
 381:./tmk_core/common/command.c ****                 print("\ndebug: on\n");
 382:./tmk_core/common/command.c ****                 debug_matrix   = true;
 383:./tmk_core/common/command.c ****                 debug_keyboard = true;
 384:./tmk_core/common/command.c ****                 debug_mouse    = true;
 385:./tmk_core/common/command.c ****             } else {
 386:./tmk_core/common/command.c ****                 print("\ndebug: off\n");
 387:./tmk_core/common/command.c ****             }
 388:./tmk_core/common/command.c ****             break;
 389:./tmk_core/common/command.c **** 
 390:./tmk_core/common/command.c ****         // debug matrix toggle
 391:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG_MATRIX):
 392:./tmk_core/common/command.c ****             debug_matrix = !debug_matrix;
 393:./tmk_core/common/command.c ****             if (debug_matrix) {
 394:./tmk_core/common/command.c ****                 print("\nmatrix: on\n");
 395:./tmk_core/common/command.c ****                 debug_enable = true;
 396:./tmk_core/common/command.c ****             } else {
 397:./tmk_core/common/command.c ****                 print("\nmatrix: off\n");
 398:./tmk_core/common/command.c ****             }
 399:./tmk_core/common/command.c ****             break;
 400:./tmk_core/common/command.c **** 
 401:./tmk_core/common/command.c ****         // debug keyboard toggle
 402:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG_KBD):
 403:./tmk_core/common/command.c ****             debug_keyboard = !debug_keyboard;
  69               		.loc 1 403 0
  70 0046 8091 0000 		lds r24,debug_config
  71               	.LVL3:
  72 004a 82FB      		bst r24,2
  73 004c 2227      		clr r18
  74 004e 20F9      		bld r18,0
  75 0050 91E0      		ldi r25,lo8(1)
  76 0052 9227      		eor r25,r18
  77 0054 90FB      		bst r25,0
  78 0056 82F9      		bld r24,2
  79 0058 00C0      		rjmp .L47
  80               	.LVL4:
  81               	.L6:
 310:./tmk_core/common/command.c **** 
  82               		.loc 1 310 0
  83 005a 8631      		cpi r24,lo8(22)
  84 005c 01F4      		brne .+2
  85 005e 00C0      		rjmp .L48
  86 0060 00F4      		brsh .L12
  87 0062 8131      		cpi r24,lo8(17)
  88 0064 01F0      		breq .+2
  89 0066 00C0      		rjmp .L25
 404:./tmk_core/common/command.c ****             if (debug_keyboard) {
 405:./tmk_core/common/command.c ****                 print("\nkeyboard: on\n");
 406:./tmk_core/common/command.c ****                 debug_enable = true;
 407:./tmk_core/common/command.c ****             } else {
 408:./tmk_core/common/command.c ****                 print("\nkeyboard: off\n");
 409:./tmk_core/common/command.c ****             }
 410:./tmk_core/common/command.c ****             break;
 411:./tmk_core/common/command.c **** 
 412:./tmk_core/common/command.c ****         // debug mouse toggle
 413:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG_MOUSE):
 414:./tmk_core/common/command.c ****             debug_mouse = !debug_mouse;
 415:./tmk_core/common/command.c ****             if (debug_mouse) {
 416:./tmk_core/common/command.c ****                 print("\nmouse: on\n");
 417:./tmk_core/common/command.c ****                 debug_enable = true;
 418:./tmk_core/common/command.c ****             } else {
 419:./tmk_core/common/command.c **** 				print("\nmouse: off\n");
 420:./tmk_core/common/command.c ****             }
 421:./tmk_core/common/command.c ****             break;
 422:./tmk_core/common/command.c **** 
 423:./tmk_core/common/command.c **** 		// print version
 424:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_VERSION):
 425:./tmk_core/common/command.c ****         	print_version();
 426:./tmk_core/common/command.c **** 		    break;
 427:./tmk_core/common/command.c **** 
 428:./tmk_core/common/command.c **** 		// print status
 429:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_STATUS):
 430:./tmk_core/common/command.c **** 			print_status();
 431:./tmk_core/common/command.c ****             break;
 432:./tmk_core/common/command.c **** 
 433:./tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 434:./tmk_core/common/command.c **** 
 435:./tmk_core/common/command.c **** 		// NKRO toggle
 436:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_NKRO):
 437:./tmk_core/common/command.c ****             clear_keyboard(); // clear to prevent stuck keys
  90               		.loc 1 437 0
  91 0068 0E94 0000 		call clear_keyboard
  92               	.LVL5:
 438:./tmk_core/common/command.c ****             keymap_config.nkro = !keymap_config.nkro;
  93               		.loc 1 438 0
  94 006c 8091 0000 		lds r24,keymap_config
  95 0070 87FB      		bst r24,7
  96 0072 2227      		clr r18
  97 0074 20F9      		bld r18,0
  98 0076 91E0      		ldi r25,lo8(1)
  99 0078 9227      		eor r25,r18
 100 007a 90FB      		bst r25,0
 101 007c 87F9      		bld r24,7
 102 007e 8093 0000 		sts keymap_config,r24
 103 0082 00C0      		rjmp .L48
 104               	.LVL6:
 105               	.L12:
 310:./tmk_core/common/command.c **** 
 106               		.loc 1 310 0
 107 0084 8931      		cpi r24,lo8(25)
 108 0086 01F4      		brne .+2
 109 0088 00C0      		rjmp .L48
 110 008a 8B31      		cpi r24,lo8(27)
 111 008c 01F0      		breq .+2
 112 008e 00C0      		rjmp .L25
 392:./tmk_core/common/command.c ****             if (debug_matrix) {
 113               		.loc 1 392 0
 114 0090 8091 0000 		lds r24,debug_config
 115               	.LVL7:
 116 0094 81FB      		bst r24,1
 117 0096 2227      		clr r18
 118 0098 20F9      		bld r18,0
 119 009a 91E0      		ldi r25,lo8(1)
 120 009c 9227      		eor r25,r18
 121 009e 90FB      		bst r25,0
 122 00a0 81F9      		bld r24,1
 123 00a2 00C0      		rjmp .L47
 124               	.LVL8:
 125               	.L3:
 310:./tmk_core/common/command.c **** 
 126               		.loc 1 310 0
 127 00a4 8833      		cpi r24,lo8(56)
 128 00a6 01F4      		brne .+2
 129 00a8 00C0      		rjmp .L48
 130 00aa 00F4      		brsh .L15
 131 00ac 8932      		cpi r24,lo8(41)
 132 00ae 01F4      		brne .+2
 133 00b0 00C0      		rjmp .L17
 134 00b2 8533      		cpi r24,lo8(53)
 135 00b4 01F4      		brne .+2
 136 00b6 00C0      		rjmp .L17
 137 00b8 8732      		cpi r24,lo8(39)
 138 00ba 01F4      		brne .+2
 139 00bc 00C0      		rjmp .L17
 140 00be 00C0      		rjmp .L25
 141               	.L15:
 142 00c0 8334      		cpi r24,lo8(67)
 143 00c2 01F4      		brne .+2
 144 00c4 00C0      		rjmp .L17
 145 00c6 00F4      		brsh .L19
 146 00c8 8A33      		cpi r24,lo8(58)
 147 00ca 00F4      		brsh .+2
 148 00cc 00C0      		rjmp .L25
 149               	.LVL9:
 439:./tmk_core/common/command.c ****             if (keymap_config.nkro) {
 440:./tmk_core/common/command.c ****                 print("NKRO: on\n");
 441:./tmk_core/common/command.c ****             } else {
 442:./tmk_core/common/command.c ****                 print("NKRO: off\n");
 443:./tmk_core/common/command.c ****             }
 444:./tmk_core/common/command.c ****             break;
 445:./tmk_core/common/command.c **** #endif
 446:./tmk_core/common/command.c **** 
 447:./tmk_core/common/command.c **** 		// switch layers
 448:./tmk_core/common/command.c **** 
 449:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER0_ALT1):
 450:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER0_ALT2):
 451:./tmk_core/common/command.c ****             switch_default_layer(0);
 452:./tmk_core/common/command.c ****             break;
 453:./tmk_core/common/command.c **** 
 454:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_CUSTOM
 455:./tmk_core/common/command.c **** 
 456:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER0):
 457:./tmk_core/common/command.c ****             switch_default_layer(0);
 458:./tmk_core/common/command.c ****             break;
 459:./tmk_core/common/command.c **** 
 460:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER1):
 461:./tmk_core/common/command.c ****             switch_default_layer(1);
 462:./tmk_core/common/command.c ****             break;
 463:./tmk_core/common/command.c **** 
 464:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER2):
 465:./tmk_core/common/command.c ****             switch_default_layer(2);
 466:./tmk_core/common/command.c ****             break;
 467:./tmk_core/common/command.c **** 
 468:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER3):
 469:./tmk_core/common/command.c ****             switch_default_layer(3);
 470:./tmk_core/common/command.c ****             break;
 471:./tmk_core/common/command.c **** 
 472:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER4):
 473:./tmk_core/common/command.c ****             switch_default_layer(4);
 474:./tmk_core/common/command.c ****             break;
 475:./tmk_core/common/command.c **** 
 476:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER5):
 477:./tmk_core/common/command.c ****             switch_default_layer(5);
 478:./tmk_core/common/command.c ****             break;
 479:./tmk_core/common/command.c **** 
 480:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER6):
 481:./tmk_core/common/command.c ****             switch_default_layer(6);
 482:./tmk_core/common/command.c ****             break;
 483:./tmk_core/common/command.c **** 
 484:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER7):
 485:./tmk_core/common/command.c ****             switch_default_layer(7);
 486:./tmk_core/common/command.c ****             break;
 487:./tmk_core/common/command.c **** 
 488:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER8):
 489:./tmk_core/common/command.c ****             switch_default_layer(8);
 490:./tmk_core/common/command.c ****             break;
 491:./tmk_core/common/command.c **** 
 492:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER9):
 493:./tmk_core/common/command.c ****             switch_default_layer(9);
 494:./tmk_core/common/command.c ****             break;
 495:./tmk_core/common/command.c **** #endif
 496:./tmk_core/common/command.c **** 
 497:./tmk_core/common/command.c **** 
 498:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_FKEYS
 499:./tmk_core/common/command.c **** 
 500:./tmk_core/common/command.c ****         case KC_F1 ... KC_F9:
 501:./tmk_core/common/command.c ****             switch_default_layer((code - KC_F1) + 1);
 150               		.loc 1 501 0
 151 00ce 8953      		subi r24,lo8(-(-57))
 152               	.LVL10:
 153 00d0 00C0      		rjmp .L50
 154               	.LVL11:
 155               	.L19:
 310:./tmk_core/common/command.c **** 
 156               		.loc 1 310 0
 157 00d2 8834      		cpi r24,lo8(72)
 158 00d4 01F0      		breq .+2
 159 00d6 00C0      		rjmp .L25
 366:./tmk_core/common/command.c ****             print("\n\nJumping to bootloader... ");
 160               		.loc 1 366 0
 161 00d8 0E94 0000 		call clear_keyboard
 162               	.LVL12:
 163               	.LBB16:
 164               	.LBB17:
 165               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/lib/avr/include/util/delay.h **** 
 155:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/lib/avr/include/util/delay.h **** 
 158:/usr/lib/avr/include/util/delay.h **** 	#else
 159:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 160:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/lib/avr/include/util/delay.h **** 	#endif
 162:/usr/lib/avr/include/util/delay.h **** 
 163:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 166               		.loc 2 163 0
 167 00dc 0FEF      		ldi r16,lo8(3199999)
 168 00de 13ED      		ldi r17,hi8(3199999)
 169 00e0 20E3      		ldi r18,hlo8(3199999)
 170 00e2 0150      	1:	subi r16,1
 171 00e4 1040      		sbci r17,0
 172 00e6 2040      		sbci r18,0
 173 00e8 01F4      		brne 1b
 174 00ea 00C0      		rjmp .
 175 00ec 0000      		nop
 176               	.LBE17:
 177               	.LBE16:
 374:./tmk_core/common/command.c ****             break;
 178               		.loc 1 374 0
 179 00ee 0E94 0000 		call bootloader_jump
 180               	.LVL13:
 181 00f2 00C0      		rjmp .L48
 182               	.LVL14:
 183               	.L7:
 379:./tmk_core/common/command.c ****             if (debug_enable) {
 184               		.loc 1 379 0
 185 00f4 9091 0000 		lds r25,debug_config
 186 00f8 892F      		mov r24,r25
 187               	.LVL15:
 188 00fa 8095      		com r24
 189 00fc 8170      		andi r24,lo8(1)
 190 00fe 80FB      		bst r24,0
 191 0100 90F9      		bld r25,0
 192 0102 9093 0000 		sts debug_config,r25
 380:./tmk_core/common/command.c ****                 print("\ndebug: on\n");
 193               		.loc 1 380 0
 194 0106 8823      		tst r24
 195 0108 01F0      		breq .L48
 384:./tmk_core/common/command.c ****             } else {
 196               		.loc 1 384 0
 197 010a 9660      		ori r25,lo8(6)
 198 010c 9860      		ori r25,lo8(1<<3)
 199 010e 9093 0000 		sts debug_config,r25
 200 0112 00C0      		rjmp .L2
 201               	.LVL16:
 202               	.L5:
 414:./tmk_core/common/command.c ****             if (debug_mouse) {
 203               		.loc 1 414 0
 204 0114 8091 0000 		lds r24,debug_config
 205               	.LVL17:
 206 0118 83FB      		bst r24,3
 207 011a 2227      		clr r18
 208 011c 20F9      		bld r18,0
 209 011e 91E0      		ldi r25,lo8(1)
 210 0120 9227      		eor r25,r18
 211 0122 90FB      		bst r25,0
 212 0124 83F9      		bld r24,3
 213               	.L47:
 392:./tmk_core/common/command.c ****             if (debug_matrix) {
 214               		.loc 1 392 0
 215 0126 8093 0000 		sts debug_config,r24
 393:./tmk_core/common/command.c ****                 print("\nmatrix: on\n");
 216               		.loc 1 393 0
 217 012a 9923      		tst r25
 218 012c 01F0      		breq .L48
 395:./tmk_core/common/command.c ****             } else {
 219               		.loc 1 395 0
 220 012e 8091 0000 		lds r24,debug_config
 221 0132 8160      		ori r24,lo8(1<<0)
 222 0134 8093 0000 		sts debug_config,r24
 223 0138 00C0      		rjmp .L48
 224               	.LVL18:
 225               	.L4:
 502:./tmk_core/common/command.c ****             break;
 503:./tmk_core/common/command.c ****         case KC_F10:
 504:./tmk_core/common/command.c ****             switch_default_layer(0);
 505:./tmk_core/common/command.c ****             break;
 506:./tmk_core/common/command.c **** #endif
 507:./tmk_core/common/command.c **** 
 508:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_NKEYS
 509:./tmk_core/common/command.c **** 
 510:./tmk_core/common/command.c ****         case KC_1 ... KC_9:
 511:./tmk_core/common/command.c ****             switch_default_layer((code - KC_1) + 1);
 226               		.loc 1 511 0
 227 013a 8D51      		subi r24,lo8(-(-29))
 228               	.LVL19:
 229               	.L50:
 230               	.LBB18:
 231               	.LBB19:
 512:./tmk_core/common/command.c ****             break;
 513:./tmk_core/common/command.c ****         case KC_0:
 514:./tmk_core/common/command.c ****             switch_default_layer(0);
 515:./tmk_core/common/command.c ****             break;
 516:./tmk_core/common/command.c **** #endif
 517:./tmk_core/common/command.c **** 
 518:./tmk_core/common/command.c ****         default:
 519:./tmk_core/common/command.c ****             print("?");
 520:./tmk_core/common/command.c ****             return false;
 521:./tmk_core/common/command.c ****     }
 522:./tmk_core/common/command.c ****     return true;
 523:./tmk_core/common/command.c **** }
 524:./tmk_core/common/command.c **** 
 525:./tmk_core/common/command.c **** 
 526:./tmk_core/common/command.c **** /***********************************************************
 527:./tmk_core/common/command.c ****  * Command console
 528:./tmk_core/common/command.c ****  ***********************************************************/
 529:./tmk_core/common/command.c **** static void command_console_help(void)
 530:./tmk_core/common/command.c **** {
 531:./tmk_core/common/command.c ****     print("\n\t- Console -\n"
 532:./tmk_core/common/command.c ****           "ESC/q:	quit\n"
 533:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 534:./tmk_core/common/command.c ****           "m:	mousekey\n"
 535:./tmk_core/common/command.c **** #endif
 536:./tmk_core/common/command.c ****     );
 537:./tmk_core/common/command.c **** }
 538:./tmk_core/common/command.c **** 
 539:./tmk_core/common/command.c **** static bool command_console(uint8_t code)
 540:./tmk_core/common/command.c **** {
 541:./tmk_core/common/command.c ****     switch (code) {
 542:./tmk_core/common/command.c ****         case KC_H:
 543:./tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 544:./tmk_core/common/command.c ****             command_console_help();
 545:./tmk_core/common/command.c ****             break;
 546:./tmk_core/common/command.c ****         case KC_Q:
 547:./tmk_core/common/command.c ****         case KC_ESC:
 548:./tmk_core/common/command.c ****             command_state = ONESHOT;
 549:./tmk_core/common/command.c ****             return false;
 550:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 551:./tmk_core/common/command.c ****         case KC_M:
 552:./tmk_core/common/command.c ****             mousekey_console_help();
 553:./tmk_core/common/command.c ****             print("M> ");
 554:./tmk_core/common/command.c ****             command_state = MOUSEKEY;
 555:./tmk_core/common/command.c ****             return true;
 556:./tmk_core/common/command.c **** #endif
 557:./tmk_core/common/command.c ****         default:
 558:./tmk_core/common/command.c ****             print("?");
 559:./tmk_core/common/command.c ****             return false;
 560:./tmk_core/common/command.c ****     }
 561:./tmk_core/common/command.c ****     print("C> ");
 562:./tmk_core/common/command.c ****     return true;
 563:./tmk_core/common/command.c **** }
 564:./tmk_core/common/command.c **** 
 565:./tmk_core/common/command.c **** 
 566:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 567:./tmk_core/common/command.c **** /***********************************************************
 568:./tmk_core/common/command.c ****  * Mousekey console
 569:./tmk_core/common/command.c ****  ***********************************************************/
 570:./tmk_core/common/command.c **** static uint8_t mousekey_param = 0;
 571:./tmk_core/common/command.c **** 
 572:./tmk_core/common/command.c **** static void mousekey_param_print(void)
 573:./tmk_core/common/command.c **** {
 574:./tmk_core/common/command.c **** // Print these variables if NO_PRINT or USER_PRINT are not defined.
 575:./tmk_core/common/command.c **** #if !defined(NO_PRINT) && !defined(USER_PRINT)
 576:./tmk_core/common/command.c ****     print("\n\t- Values -\n");
 577:./tmk_core/common/command.c ****     print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
 578:./tmk_core/common/command.c ****     print("2: interval(ms): "); pdec(mk_interval); print("\n");
 579:./tmk_core/common/command.c ****     print("3: max_speed: "); pdec(mk_max_speed); print("\n");
 580:./tmk_core/common/command.c ****     print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
 581:./tmk_core/common/command.c ****     print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
 582:./tmk_core/common/command.c ****     print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
 583:./tmk_core/common/command.c **** #endif /* !NO_PRINT */
 584:./tmk_core/common/command.c **** 
 585:./tmk_core/common/command.c **** }
 586:./tmk_core/common/command.c **** 
 587:./tmk_core/common/command.c **** //#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
 588:./tmk_core/common/command.c **** #define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
 589:./tmk_core/common/command.c **** static void mousekey_param_inc(uint8_t param, uint8_t inc)
 590:./tmk_core/common/command.c **** {
 591:./tmk_core/common/command.c ****     switch (param) {
 592:./tmk_core/common/command.c ****         case 1:
 593:./tmk_core/common/command.c ****             if (mk_delay + inc < UINT8_MAX)
 594:./tmk_core/common/command.c ****                 mk_delay += inc;
 595:./tmk_core/common/command.c ****             else
 596:./tmk_core/common/command.c ****                 mk_delay = UINT8_MAX;
 597:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 598:./tmk_core/common/command.c ****             break;
 599:./tmk_core/common/command.c ****         case 2:
 600:./tmk_core/common/command.c ****             if (mk_interval + inc < UINT8_MAX)
 601:./tmk_core/common/command.c ****                 mk_interval += inc;
 602:./tmk_core/common/command.c ****             else
 603:./tmk_core/common/command.c ****                 mk_interval = UINT8_MAX;
 604:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 605:./tmk_core/common/command.c ****             break;
 606:./tmk_core/common/command.c ****         case 3:
 607:./tmk_core/common/command.c ****             if (mk_max_speed + inc < UINT8_MAX)
 608:./tmk_core/common/command.c ****                 mk_max_speed += inc;
 609:./tmk_core/common/command.c ****             else
 610:./tmk_core/common/command.c ****                 mk_max_speed = UINT8_MAX;
 611:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 612:./tmk_core/common/command.c ****             break;
 613:./tmk_core/common/command.c ****         case 4:
 614:./tmk_core/common/command.c ****             if (mk_time_to_max + inc < UINT8_MAX)
 615:./tmk_core/common/command.c ****                 mk_time_to_max += inc;
 616:./tmk_core/common/command.c ****             else
 617:./tmk_core/common/command.c ****                 mk_time_to_max = UINT8_MAX;
 618:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 619:./tmk_core/common/command.c ****             break;
 620:./tmk_core/common/command.c ****         case 5:
 621:./tmk_core/common/command.c ****             if (mk_wheel_max_speed + inc < UINT8_MAX)
 622:./tmk_core/common/command.c ****                 mk_wheel_max_speed += inc;
 623:./tmk_core/common/command.c ****             else
 624:./tmk_core/common/command.c ****                 mk_wheel_max_speed = UINT8_MAX;
 625:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 626:./tmk_core/common/command.c ****             break;
 627:./tmk_core/common/command.c ****         case 6:
 628:./tmk_core/common/command.c ****             if (mk_wheel_time_to_max + inc < UINT8_MAX)
 629:./tmk_core/common/command.c ****                 mk_wheel_time_to_max += inc;
 630:./tmk_core/common/command.c ****             else
 631:./tmk_core/common/command.c ****                 mk_wheel_time_to_max = UINT8_MAX;
 632:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 633:./tmk_core/common/command.c ****             break;
 634:./tmk_core/common/command.c ****     }
 635:./tmk_core/common/command.c **** }
 636:./tmk_core/common/command.c **** 
 637:./tmk_core/common/command.c **** static void mousekey_param_dec(uint8_t param, uint8_t dec)
 638:./tmk_core/common/command.c **** {
 639:./tmk_core/common/command.c ****     switch (param) {
 640:./tmk_core/common/command.c ****         case 1:
 641:./tmk_core/common/command.c ****             if (mk_delay > dec)
 642:./tmk_core/common/command.c ****                 mk_delay -= dec;
 643:./tmk_core/common/command.c ****             else
 644:./tmk_core/common/command.c ****                 mk_delay = 0;
 645:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 646:./tmk_core/common/command.c ****             break;
 647:./tmk_core/common/command.c ****         case 2:
 648:./tmk_core/common/command.c ****             if (mk_interval > dec)
 649:./tmk_core/common/command.c ****                 mk_interval -= dec;
 650:./tmk_core/common/command.c ****             else
 651:./tmk_core/common/command.c ****                 mk_interval = 0;
 652:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 653:./tmk_core/common/command.c ****             break;
 654:./tmk_core/common/command.c ****         case 3:
 655:./tmk_core/common/command.c ****             if (mk_max_speed > dec)
 656:./tmk_core/common/command.c ****                 mk_max_speed -= dec;
 657:./tmk_core/common/command.c ****             else
 658:./tmk_core/common/command.c ****                 mk_max_speed = 0;
 659:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 660:./tmk_core/common/command.c ****             break;
 661:./tmk_core/common/command.c ****         case 4:
 662:./tmk_core/common/command.c ****             if (mk_time_to_max > dec)
 663:./tmk_core/common/command.c ****                 mk_time_to_max -= dec;
 664:./tmk_core/common/command.c ****             else
 665:./tmk_core/common/command.c ****                 mk_time_to_max = 0;
 666:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 667:./tmk_core/common/command.c ****             break;
 668:./tmk_core/common/command.c ****         case 5:
 669:./tmk_core/common/command.c ****             if (mk_wheel_max_speed > dec)
 670:./tmk_core/common/command.c ****                 mk_wheel_max_speed -= dec;
 671:./tmk_core/common/command.c ****             else
 672:./tmk_core/common/command.c ****                 mk_wheel_max_speed = 0;
 673:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 674:./tmk_core/common/command.c ****             break;
 675:./tmk_core/common/command.c ****         case 6:
 676:./tmk_core/common/command.c ****             if (mk_wheel_time_to_max > dec)
 677:./tmk_core/common/command.c ****                 mk_wheel_time_to_max -= dec;
 678:./tmk_core/common/command.c ****             else
 679:./tmk_core/common/command.c ****                 mk_wheel_time_to_max = 0;
 680:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 681:./tmk_core/common/command.c ****             break;
 682:./tmk_core/common/command.c ****     }
 683:./tmk_core/common/command.c **** }
 684:./tmk_core/common/command.c **** 
 685:./tmk_core/common/command.c **** static void mousekey_console_help(void)
 686:./tmk_core/common/command.c **** {
 687:./tmk_core/common/command.c ****     print("\n\t- Mousekey -\n"
 688:./tmk_core/common/command.c ****           "ESC/q:	quit\n"
 689:./tmk_core/common/command.c ****           "1:	delay(*10ms)\n"
 690:./tmk_core/common/command.c ****           "2:	interval(ms)\n"
 691:./tmk_core/common/command.c ****           "3:	max_speed\n"
 692:./tmk_core/common/command.c ****           "4:	time_to_max\n"
 693:./tmk_core/common/command.c ****           "5:	wheel_max_speed\n"
 694:./tmk_core/common/command.c ****           "6:	wheel_time_to_max\n"
 695:./tmk_core/common/command.c ****           "\n"
 696:./tmk_core/common/command.c ****           "p:	print values\n"
 697:./tmk_core/common/command.c ****           "d:	set defaults\n"
 698:./tmk_core/common/command.c ****           "up:	+1\n"
 699:./tmk_core/common/command.c ****           "down:	-1\n"
 700:./tmk_core/common/command.c ****           "pgup:	+10\n"
 701:./tmk_core/common/command.c ****           "pgdown:	-10\n"
 702:./tmk_core/common/command.c ****           "\n"
 703:./tmk_core/common/command.c ****           "speed = delta * max_speed * (repeat / time_to_max)\n");
 704:./tmk_core/common/command.c ****     xprintf("where delta: cursor=%d, wheel=%d\n"
 705:./tmk_core/common/command.c ****             "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_D
 706:./tmk_core/common/command.c **** }
 707:./tmk_core/common/command.c **** 
 708:./tmk_core/common/command.c **** static bool mousekey_console(uint8_t code)
 709:./tmk_core/common/command.c **** {
 710:./tmk_core/common/command.c ****     switch (code) {
 711:./tmk_core/common/command.c ****         case KC_H:
 712:./tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 713:./tmk_core/common/command.c ****             mousekey_console_help();
 714:./tmk_core/common/command.c ****             break;
 715:./tmk_core/common/command.c ****         case KC_Q:
 716:./tmk_core/common/command.c ****         case KC_ESC:
 717:./tmk_core/common/command.c ****             if (mousekey_param) {
 718:./tmk_core/common/command.c ****                 mousekey_param = 0;
 719:./tmk_core/common/command.c ****             } else {
 720:./tmk_core/common/command.c ****                 print("C> ");
 721:./tmk_core/common/command.c ****                 command_state = CONSOLE;
 722:./tmk_core/common/command.c ****                 return false;
 723:./tmk_core/common/command.c ****             }
 724:./tmk_core/common/command.c ****             break;
 725:./tmk_core/common/command.c ****         case KC_P:
 726:./tmk_core/common/command.c ****             mousekey_param_print();
 727:./tmk_core/common/command.c ****             break;
 728:./tmk_core/common/command.c ****         case KC_1:
 729:./tmk_core/common/command.c ****         case KC_2:
 730:./tmk_core/common/command.c ****         case KC_3:
 731:./tmk_core/common/command.c ****         case KC_4:
 732:./tmk_core/common/command.c ****         case KC_5:
 733:./tmk_core/common/command.c ****         case KC_6:
 734:./tmk_core/common/command.c ****             mousekey_param = numkey2num(code);
 735:./tmk_core/common/command.c ****             break;
 736:./tmk_core/common/command.c ****         case KC_UP:
 737:./tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 1);
 738:./tmk_core/common/command.c ****             break;
 739:./tmk_core/common/command.c ****         case KC_DOWN:
 740:./tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 1);
 741:./tmk_core/common/command.c ****             break;
 742:./tmk_core/common/command.c ****         case KC_PGUP:
 743:./tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 10);
 744:./tmk_core/common/command.c ****             break;
 745:./tmk_core/common/command.c ****         case KC_PGDN:
 746:./tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 10);
 747:./tmk_core/common/command.c ****             break;
 748:./tmk_core/common/command.c ****         case KC_D:
 749:./tmk_core/common/command.c ****             mk_delay = MOUSEKEY_DELAY/10;
 750:./tmk_core/common/command.c ****             mk_interval = MOUSEKEY_INTERVAL;
 751:./tmk_core/common/command.c ****             mk_max_speed = MOUSEKEY_MAX_SPEED;
 752:./tmk_core/common/command.c ****             mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
 753:./tmk_core/common/command.c ****             mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
 754:./tmk_core/common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 755:./tmk_core/common/command.c ****             print("set default\n");
 756:./tmk_core/common/command.c ****             break;
 757:./tmk_core/common/command.c ****         default:
 758:./tmk_core/common/command.c ****             print("?");
 759:./tmk_core/common/command.c ****             return false;
 760:./tmk_core/common/command.c ****     }
 761:./tmk_core/common/command.c ****     if (mousekey_param) {
 762:./tmk_core/common/command.c ****         xprintf("M%d> ", mousekey_param);
 763:./tmk_core/common/command.c ****     } else {
 764:./tmk_core/common/command.c ****         print("M>" );
 765:./tmk_core/common/command.c ****     }
 766:./tmk_core/common/command.c ****     return true;
 767:./tmk_core/common/command.c **** }
 768:./tmk_core/common/command.c **** #endif
 769:./tmk_core/common/command.c **** 
 770:./tmk_core/common/command.c **** 
 771:./tmk_core/common/command.c **** /***********************************************************
 772:./tmk_core/common/command.c ****  * Utilities
 773:./tmk_core/common/command.c ****  ***********************************************************/
 774:./tmk_core/common/command.c **** uint8_t numkey2num(uint8_t code)
 775:./tmk_core/common/command.c **** {
 776:./tmk_core/common/command.c ****     switch (code) {
 777:./tmk_core/common/command.c ****         case KC_1: return 1;
 778:./tmk_core/common/command.c ****         case KC_2: return 2;
 779:./tmk_core/common/command.c ****         case KC_3: return 3;
 780:./tmk_core/common/command.c ****         case KC_4: return 4;
 781:./tmk_core/common/command.c ****         case KC_5: return 5;
 782:./tmk_core/common/command.c ****         case KC_6: return 6;
 783:./tmk_core/common/command.c ****         case KC_7: return 7;
 784:./tmk_core/common/command.c ****         case KC_8: return 8;
 785:./tmk_core/common/command.c ****         case KC_9: return 9;
 786:./tmk_core/common/command.c ****         case KC_0: return 0;
 787:./tmk_core/common/command.c ****     }
 788:./tmk_core/common/command.c ****     return 0;
 789:./tmk_core/common/command.c **** }
 790:./tmk_core/common/command.c **** 
 791:./tmk_core/common/command.c **** static void switch_default_layer(uint8_t layer)
 792:./tmk_core/common/command.c **** {
 793:./tmk_core/common/command.c ****     xprintf("L%d\n", layer);
 794:./tmk_core/common/command.c ****     default_layer_set(1UL<<layer);
 232               		.loc 1 794 0
 233 013c 41E0      		ldi r20,lo8(1)
 234 013e 50E0      		ldi r21,0
 235 0140 60E0      		ldi r22,0
 236 0142 70E0      		ldi r23,0
 237 0144 8A01      		movw r16,r20
 238 0146 9B01      		movw r18,r22
 239 0148 00C0      		rjmp 2f
 240               		1:
 241 014a 000F      		lsl r16
 242 014c 111F      		rol r17
 243 014e 221F      		rol r18
 244 0150 331F      		rol r19
 245               		2:
 246 0152 8A95      		dec r24
 247 0154 02F4      		brpl 1b
 248 0156 C901      		movw r24,r18
 249 0158 B801      		movw r22,r16
 250               	.L49:
 251 015a 0E94 0000 		call default_layer_set
 252               	.LVL20:
 795:./tmk_core/common/command.c ****     clear_keyboard();
 253               		.loc 1 795 0
 254 015e 0E94 0000 		call clear_keyboard
 255               	.LVL21:
 256               	.L48:
 257               	.LBE19:
 258               	.LBE18:
 522:./tmk_core/common/command.c **** }
 259               		.loc 1 522 0
 260 0162 81E0      		ldi r24,lo8(1)
 261 0164 00C0      		rjmp .L2
 262               	.LVL22:
 263               	.L17:
 264               	.LBB20:
 265               	.LBB21:
 794:./tmk_core/common/command.c ****     clear_keyboard();
 266               		.loc 1 794 0
 267 0166 61E0      		ldi r22,lo8(1)
 268 0168 70E0      		ldi r23,0
 269 016a 80E0      		ldi r24,0
 270 016c 90E0      		ldi r25,0
 271 016e 00C0      		rjmp .L49
 272               	.LVL23:
 273               	.L25:
 274               	.LBE21:
 275               	.LBE20:
 520:./tmk_core/common/command.c ****     }
 276               		.loc 1 520 0
 277 0170 80E0      		ldi r24,0
 278               	.LVL24:
 279               	.L2:
 280               	/* epilogue start */
 523:./tmk_core/common/command.c **** 
 281               		.loc 1 523 0
 282 0172 1F91      		pop r17
 283 0174 0F91      		pop r16
 284 0176 0895      		ret
 285               		.cfi_endproc
 286               	.LFE113:
 288               		.section	.text.command_extra,"ax",@progbits
 289               		.weak	command_extra
 291               	command_extra:
 292               	.LFB108:
 106:./tmk_core/common/command.c ****     (void)code;
 293               		.loc 1 106 0
 294               		.cfi_startproc
 295               	.LVL25:
 296               	/* prologue: function */
 297               	/* frame size = 0 */
 298               	/* stack size = 0 */
 299               	.L__stack_usage = 0
 109:./tmk_core/common/command.c **** 
 300               		.loc 1 109 0
 301 0000 80E0      		ldi r24,0
 302               	.LVL26:
 303 0002 0895      		ret
 304               		.cfi_endproc
 305               	.LFE108:
 307               		.section	.text.command_console_extra,"ax",@progbits
 308               		.weak	command_console_extra
 310               	command_console_extra:
 311               	.LFB109:
 113:./tmk_core/common/command.c ****     (void)code;
 312               		.loc 1 113 0
 313               		.cfi_startproc
 314               	.LVL27:
 315               	/* prologue: function */
 316               	/* frame size = 0 */
 317               	/* stack size = 0 */
 318               	.L__stack_usage = 0
 116:./tmk_core/common/command.c **** 
 319               		.loc 1 116 0
 320 0000 80E0      		ldi r24,0
 321               	.LVL28:
 322 0002 0895      		ret
 323               		.cfi_endproc
 324               	.LFE109:
 326               		.section	.text.command_proc,"ax",@progbits
 327               	.global	command_proc
 329               	command_proc:
 330               	.LFB107:
  77:./tmk_core/common/command.c ****     switch (command_state) {
 331               		.loc 1 77 0
 332               		.cfi_startproc
 333               	.LVL29:
 334 0000 CF93      		push r28
 335               	.LCFI2:
 336               		.cfi_def_cfa_offset 3
 337               		.cfi_offset 28, -2
 338               	/* prologue: function */
 339               	/* frame size = 0 */
 340               	/* stack size = 1 */
 341               	.L__stack_usage = 1
 342 0002 C82F      		mov r28,r24
  78:./tmk_core/common/command.c ****         case ONESHOT:
 343               		.loc 1 78 0
 344 0004 8091 0000 		lds r24,command_state
 345               	.LVL30:
 346 0008 8823      		tst r24
 347 000a 01F0      		breq .L56
 348 000c 8130      		cpi r24,lo8(1)
 349 000e 01F0      		breq .L57
 350 0010 00C0      		rjmp .L95
 351               	.L56:
  80:./tmk_core/common/command.c ****                 return false;
 352               		.loc 1 80 0
 353 0012 E091 0000 		lds r30,keyboard_report
 354 0016 F091 0000 		lds r31,keyboard_report+1
 355 001a 8081      		ld r24,Z
 356 001c 8131      		cpi r24,lo8(17)
 357 001e 01F0      		breq .L61
  80:./tmk_core/common/command.c ****                 return false;
 358               		.loc 1 80 0 is_stmt 0 discriminator 1
 359 0020 8232      		cpi r24,lo8(34)
 360 0022 01F4      		brne .L68
 361 0024 00C0      		rjmp .L61
 362               	.L57:
  85:./tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
 363               		.loc 1 85 0 is_stmt 1
 364 0026 E091 0000 		lds r30,keyboard_report
 365 002a F091 0000 		lds r31,keyboard_report+1
 366 002e 8081      		ld r24,Z
 367 0030 8131      		cpi r24,lo8(17)
 368 0032 01F0      		breq .L61
  85:./tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
 369               		.loc 1 85 0 is_stmt 0 discriminator 1
 370 0034 8232      		cpi r24,lo8(34)
 371 0036 01F4      		brne .L62
 372               	.L61:
  86:./tmk_core/common/command.c ****             else
 373               		.loc 1 86 0 is_stmt 1
 374 0038 8C2F      		mov r24,r28
 375 003a 0E94 0000 		call command_extra
 376               	.LVL31:
 377 003e 8111      		cpse r24,__zero_reg__
 378 0040 00C0      		rjmp .L70
  86:./tmk_core/common/command.c ****             else
 379               		.loc 1 86 0 is_stmt 0 discriminator 2
 380 0042 8C2F      		mov r24,r28
 381 0044 0E94 0000 		call command_common
 382               	.LVL32:
 383 0048 00C0      		rjmp .L64
 384               	.L70:
  86:./tmk_core/common/command.c ****             else
 385               		.loc 1 86 0
 386 004a 81E0      		ldi r24,lo8(1)
 387 004c 90E0      		ldi r25,0
 388 004e 00C0      		rjmp .L64
 389               	.L62:
  88:./tmk_core/common/command.c ****             break;
 390               		.loc 1 88 0 is_stmt 1
 391 0050 8C2F      		mov r24,r28
 392 0052 0E94 0000 		call command_console_extra
 393               	.LVL33:
 394 0056 8111      		cpse r24,__zero_reg__
 395 0058 00C0      		rjmp .L72
 396               	.LVL34:
 397               	.LBB24:
 398               	.LBB25:
 541:./tmk_core/common/command.c ****         case KC_H:
 399               		.loc 1 541 0
 400 005a C431      		cpi r28,lo8(20)
 401 005c 01F0      		breq .L66
 402 005e 00F4      		brsh .L67
 403 0060 CB30      		cpi r28,lo8(11)
 404 0062 01F0      		breq .L72
 405 0064 00C0      		rjmp .L65
 406               	.L67:
 407 0066 C932      		cpi r28,lo8(41)
 408 0068 01F0      		breq .L66
 409 006a C833      		cpi r28,lo8(56)
 410 006c 01F0      		breq .L72
 411 006e 00C0      		rjmp .L65
 412               	.L66:
 548:./tmk_core/common/command.c ****             return false;
 413               		.loc 1 548 0
 414 0070 1092 0000 		sts command_state,__zero_reg__
 415 0074 00C0      		rjmp .L65
 416               	.LVL35:
 417               	.L72:
 418               	.LBE25:
 419               	.LBE24:
  88:./tmk_core/common/command.c ****             break;
 420               		.loc 1 88 0
 421 0076 81E0      		ldi r24,lo8(1)
 422               	.L64:
  88:./tmk_core/common/command.c ****             break;
 423               		.loc 1 88 0 is_stmt 0 discriminator 6
 424 0078 8170      		andi r24,lo8(1)
 425 007a 00C0      		rjmp .L92
 426               	.L95:
  96:./tmk_core/common/command.c ****             return false;
 427               		.loc 1 96 0 is_stmt 1
 428 007c 1092 0000 		sts command_state,__zero_reg__
 429               	.L68:
  81:./tmk_core/common/command.c ****             return (command_extra(code) || command_common(code));
 430               		.loc 1 81 0
 431 0080 80E0      		ldi r24,0
 432 0082 00C0      		rjmp .L92
 433               	.LVL36:
 434               	.L65:
  88:./tmk_core/common/command.c ****             break;
 435               		.loc 1 88 0
 436 0084 80E0      		ldi r24,0
 437 0086 00C0      		rjmp .L64
 438               	.LVL37:
 439               	.L92:
 440               	/* epilogue start */
 100:./tmk_core/common/command.c **** 
 441               		.loc 1 100 0
 442 0088 CF91      		pop r28
 443               	.LVL38:
 444 008a 0895      		ret
 445               		.cfi_endproc
 446               	.LFE107:
 448               		.section	.text.numkey2num,"ax",@progbits
 449               	.global	numkey2num
 451               	numkey2num:
 452               	.LFB116:
 775:./tmk_core/common/command.c ****     switch (code) {
 453               		.loc 1 775 0
 454               		.cfi_startproc
 455               	.LVL39:
 456               	/* prologue: function */
 457               	/* frame size = 0 */
 458               	/* stack size = 0 */
 459               	.L__stack_usage = 0
 460 0000 8E51      		subi r24,lo8(-(-30))
 461               	.LVL40:
 462 0002 8A30      		cpi r24,lo8(10)
 463 0004 00F4      		brsh .L98
 464 0006 E82F      		mov r30,r24
 465 0008 F0E0      		ldi r31,0
 466 000a E050      		subi r30,lo8(-(CSWTCH.17))
 467 000c F040      		sbci r31,hi8(-(CSWTCH.17))
 468 000e 8081      		ld r24,Z
 469               	.LVL41:
 470 0010 0895      		ret
 471               	.L98:
 775:./tmk_core/common/command.c ****     switch (code) {
 472               		.loc 1 775 0
 473 0012 80E0      		ldi r24,0
 789:./tmk_core/common/command.c **** 
 474               		.loc 1 789 0
 475 0014 0895      		ret
 476               		.cfi_endproc
 477               	.LFE116:
 479               		.section	.rodata.CSWTCH.17,"a",@progbits
 482               	CSWTCH.17:
 483 0000 01        		.byte	1
 484 0001 02        		.byte	2
 485 0002 03        		.byte	3
 486 0003 04        		.byte	4
 487 0004 05        		.byte	5
 488 0005 06        		.byte	6
 489 0006 07        		.byte	7
 490 0007 08        		.byte	8
 491 0008 09        		.byte	9
 492 0009 00        		.byte	0
 493               	.global	command_state
 494               		.section	.bss.command_state,"aw",@nobits
 497               	command_state:
 498 0000 00        		.zero	1
 499               		.text
 500               	.Letext0:
 501               		.file 3 "/usr/lib/avr/include/stdint.h"
 502               		.file 4 "./tmk_core/common/report.h"
 503               		.file 5 "./tmk_core/common/debug.h"
 504               		.file 6 "./quantum/keycode_config.h"
 505               		.file 7 "./tmk_core/common/command.h"
 506               		.file 8 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 507               		.file 9 "./tmk_core/common/action_util.h"
 508               		.file 10 "./tmk_core/common/action.h"
 509               		.file 11 "./tmk_core/common/bootloader.h"
 510               		.file 12 "./tmk_core/common/keycode.h"
 511               		.file 13 "./tmk_core/common/action_layer.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 command.c
     /tmp/ccJnHMGz.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccJnHMGz.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccJnHMGz.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccJnHMGz.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccJnHMGz.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccJnHMGz.s:12     .text.command_common:0000000000000000 command_common
     /tmp/ccJnHMGz.s:497    .bss.command_state:0000000000000000 command_state
     /tmp/ccJnHMGz.s:291    .text.command_extra:0000000000000000 command_extra
     /tmp/ccJnHMGz.s:310    .text.command_console_extra:0000000000000000 command_console_extra
     /tmp/ccJnHMGz.s:329    .text.command_proc:0000000000000000 command_proc
     /tmp/ccJnHMGz.s:451    .text.numkey2num:0000000000000000 numkey2num
     /tmp/ccJnHMGz.s:482    .rodata.CSWTCH.17:0000000000000000 CSWTCH.17

UNDEFINED SYMBOLS
debug_config
clear_keyboard
keymap_config
bootloader_jump
default_layer_set
keyboard_report
__do_copy_data
__do_clear_bss
