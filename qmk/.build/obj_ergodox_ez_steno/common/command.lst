   1               		.file	"command.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.switch_default_layer,"ax",@progbits
  12               	switch_default_layer:
  13               	.LVL0:
  14               	.LFB117:
  15               		.file 1 "./tmk_core/common/command.c"
   1:./tmk_core/common/command.c **** /*
   2:./tmk_core/common/command.c **** Copyright 2011 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/command.c **** 
   4:./tmk_core/common/command.c **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/command.c **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/command.c **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/command.c **** (at your option) any later version.
   8:./tmk_core/common/command.c **** 
   9:./tmk_core/common/command.c **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/command.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/command.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/command.c **** GNU General Public License for more details.
  13:./tmk_core/common/command.c **** 
  14:./tmk_core/common/command.c **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/command.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/command.c **** */
  17:./tmk_core/common/command.c **** #include <stdint.h>
  18:./tmk_core/common/command.c **** #include <stdbool.h>
  19:./tmk_core/common/command.c **** #include "wait.h"
  20:./tmk_core/common/command.c **** #include "keycode.h"
  21:./tmk_core/common/command.c **** #include "host.h"
  22:./tmk_core/common/command.c **** #include "keymap.h"
  23:./tmk_core/common/command.c **** #include "print.h"
  24:./tmk_core/common/command.c **** #include "debug.h"
  25:./tmk_core/common/command.c **** #include "util.h"
  26:./tmk_core/common/command.c **** #include "timer.h"
  27:./tmk_core/common/command.c **** #include "keyboard.h"
  28:./tmk_core/common/command.c **** #include "bootloader.h"
  29:./tmk_core/common/command.c **** #include "action_layer.h"
  30:./tmk_core/common/command.c **** #include "action_util.h"
  31:./tmk_core/common/command.c **** #include "eeconfig.h"
  32:./tmk_core/common/command.c **** #include "sleep_led.h"
  33:./tmk_core/common/command.c **** #include "led.h"
  34:./tmk_core/common/command.c **** #include "command.h"
  35:./tmk_core/common/command.c **** #include "backlight.h"
  36:./tmk_core/common/command.c **** #include "quantum.h"
  37:./tmk_core/common/command.c **** #include "version.h"
  38:./tmk_core/common/command.c **** 
  39:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  40:./tmk_core/common/command.c **** #include "mousekey.h"
  41:./tmk_core/common/command.c **** #endif
  42:./tmk_core/common/command.c **** 
  43:./tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
  44:./tmk_core/common/command.c **** 	#include "usb_keyboard.h"
  45:./tmk_core/common/command.c **** 		#ifdef EXTRAKEY_ENABLE
  46:./tmk_core/common/command.c **** 		#include "usb_extra.h"
  47:./tmk_core/common/command.c **** 	#endif
  48:./tmk_core/common/command.c **** #endif
  49:./tmk_core/common/command.c **** 
  50:./tmk_core/common/command.c **** #ifdef PROTOCOL_VUSB
  51:./tmk_core/common/command.c **** 	#include "usbdrv.h"
  52:./tmk_core/common/command.c **** #endif
  53:./tmk_core/common/command.c **** 
  54:./tmk_core/common/command.c **** #ifdef AUDIO_ENABLE
  55:./tmk_core/common/command.c ****     #include "audio.h"
  56:./tmk_core/common/command.c **** #endif /* AUDIO_ENABLE */
  57:./tmk_core/common/command.c **** 
  58:./tmk_core/common/command.c **** 
  59:./tmk_core/common/command.c **** static bool command_common(uint8_t code);
  60:./tmk_core/common/command.c **** static void command_common_help(void);
  61:./tmk_core/common/command.c **** static void print_version(void);
  62:./tmk_core/common/command.c **** static void print_status(void);
  63:./tmk_core/common/command.c **** static bool command_console(uint8_t code);
  64:./tmk_core/common/command.c **** static void command_console_help(void);
  65:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  66:./tmk_core/common/command.c **** static bool mousekey_console(uint8_t code);
  67:./tmk_core/common/command.c **** static void mousekey_console_help(void);
  68:./tmk_core/common/command.c **** #endif
  69:./tmk_core/common/command.c **** 
  70:./tmk_core/common/command.c **** static void switch_default_layer(uint8_t layer);
  71:./tmk_core/common/command.c **** 
  72:./tmk_core/common/command.c **** 
  73:./tmk_core/common/command.c **** command_state_t command_state = ONESHOT;
  74:./tmk_core/common/command.c **** 
  75:./tmk_core/common/command.c **** 
  76:./tmk_core/common/command.c **** bool command_proc(uint8_t code)
  77:./tmk_core/common/command.c **** {
  78:./tmk_core/common/command.c ****     switch (command_state) {
  79:./tmk_core/common/command.c ****         case ONESHOT:
  80:./tmk_core/common/command.c ****             if (!IS_COMMAND())
  81:./tmk_core/common/command.c ****                 return false;
  82:./tmk_core/common/command.c ****             return (command_extra(code) || command_common(code));
  83:./tmk_core/common/command.c ****             break;
  84:./tmk_core/common/command.c ****         case CONSOLE:
  85:./tmk_core/common/command.c ****             if (IS_COMMAND())
  86:./tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
  87:./tmk_core/common/command.c ****             else
  88:./tmk_core/common/command.c ****                 return (command_console_extra(code) || command_console(code));
  89:./tmk_core/common/command.c ****             break;
  90:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  91:./tmk_core/common/command.c ****         case MOUSEKEY:
  92:./tmk_core/common/command.c ****             mousekey_console(code);
  93:./tmk_core/common/command.c ****             break;
  94:./tmk_core/common/command.c **** #endif
  95:./tmk_core/common/command.c ****         default:
  96:./tmk_core/common/command.c ****             command_state = ONESHOT;
  97:./tmk_core/common/command.c ****             return false;
  98:./tmk_core/common/command.c ****     }
  99:./tmk_core/common/command.c ****     return true;
 100:./tmk_core/common/command.c **** }
 101:./tmk_core/common/command.c **** 
 102:./tmk_core/common/command.c **** /* TODO: Refactoring is needed. */
 103:./tmk_core/common/command.c **** /* This allows to define extra commands. return false when not processed. */
 104:./tmk_core/common/command.c **** bool command_extra(uint8_t code) __attribute__ ((weak));
 105:./tmk_core/common/command.c **** bool command_extra(uint8_t code)
 106:./tmk_core/common/command.c **** {
 107:./tmk_core/common/command.c ****     (void)code;
 108:./tmk_core/common/command.c ****     return false;
 109:./tmk_core/common/command.c **** }
 110:./tmk_core/common/command.c **** 
 111:./tmk_core/common/command.c **** bool command_console_extra(uint8_t code) __attribute__ ((weak));
 112:./tmk_core/common/command.c **** bool command_console_extra(uint8_t code)
 113:./tmk_core/common/command.c **** {
 114:./tmk_core/common/command.c ****     (void)code;
 115:./tmk_core/common/command.c ****     return false;
 116:./tmk_core/common/command.c **** }
 117:./tmk_core/common/command.c **** 
 118:./tmk_core/common/command.c **** 
 119:./tmk_core/common/command.c **** /***********************************************************
 120:./tmk_core/common/command.c ****  * Command common
 121:./tmk_core/common/command.c ****  ***********************************************************/
 122:./tmk_core/common/command.c **** static void command_common_help(void)
 123:./tmk_core/common/command.c **** {
 124:./tmk_core/common/command.c **** 	print(                            "\n\t- Magic -\n"
 125:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG       ) ":	Debug Message Toggle\n"
 126:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG_MATRIX) ":	Matrix Debug Mode Toggle - Show keypresses in matrix grid\n"
 127:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG_KBD   ) ":	Keyboard Debug Toggle - Show keypress report\n"
 128:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG_MOUSE ) ":	Debug Mouse Toggle\n"
 129:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_VERSION     ) ":	Version\n"
 130:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_STATUS      ) ":	Status\n"
 131:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_CONSOLE     ) ":	Activate Console Mode\n"
 132:./tmk_core/common/command.c **** 
 133:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_CUSTOM
 134:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER0      ) ":	Switch to Layer 0\n"
 135:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER1      ) ":	Switch to Layer 1\n"
 136:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER2      ) ":	Switch to Layer 2\n"
 137:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER3      ) ":	Switch to Layer 3\n"
 138:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER4      ) ":	Switch to Layer 4\n"
 139:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER5      ) ":	Switch to Layer 5\n"
 140:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER6      ) ":	Switch to Layer 6\n"
 141:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER7      ) ":	Switch to Layer 7\n"
 142:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER8      ) ":	Switch to Layer 8\n"
 143:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER9      ) ":	Switch to Layer 9\n"
 144:./tmk_core/common/command.c **** #endif
 145:./tmk_core/common/command.c **** 
 146:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_FKEYS
 147:./tmk_core/common/command.c **** 		                            "F1-F10:	Switch to Layer 0-9 (F10 = L0)\n"
 148:./tmk_core/common/command.c **** #endif
 149:./tmk_core/common/command.c **** 
 150:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_NKEYS
 151:./tmk_core/common/command.c **** 		                            "0-9:	Switch to Layer 0-9\n"
 152:./tmk_core/common/command.c **** #endif
 153:./tmk_core/common/command.c **** 
 154:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER0_ALT1 ) ":	Switch to Layer 0 (alternate key 1)\n"
 155:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER0_ALT2 ) ":	Switch to Layer 0 (alternate key 2)\n"
 156:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_BOOTLOADER  ) ":	Jump to Bootloader (Reset)\n"
 157:./tmk_core/common/command.c **** 
 158:./tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 159:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LOCK        ) ":	Lock\n"
 160:./tmk_core/common/command.c **** #endif
 161:./tmk_core/common/command.c **** 
 162:./tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 163:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_EEPROM      ) ":	Print EEPROM Settings\n"
 164:./tmk_core/common/command.c **** #endif
 165:./tmk_core/common/command.c **** 
 166:./tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 167:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_NKRO        ) ":	NKRO Toggle\n"
 168:./tmk_core/common/command.c **** #endif
 169:./tmk_core/common/command.c **** 
 170:./tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 171:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_SLEEP_LED   ) ":	Sleep LED Test\n"
 172:./tmk_core/common/command.c **** #endif
 173:./tmk_core/common/command.c ****     );
 174:./tmk_core/common/command.c **** }
 175:./tmk_core/common/command.c **** 
 176:./tmk_core/common/command.c **** static void print_version(void)
 177:./tmk_core/common/command.c **** {
 178:./tmk_core/common/command.c **** 	// print version & information
 179:./tmk_core/common/command.c ****     print("\n\t- Version -\n");
 180:./tmk_core/common/command.c ****     print("DESC: " STR(DESCRIPTION) "\n");
 181:./tmk_core/common/command.c ****     print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
 182:./tmk_core/common/command.c ****           "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
 183:./tmk_core/common/command.c ****           "VER: " STR(DEVICE_VER) "\n");
 184:./tmk_core/common/command.c ****     print("BUILD: " STR(QMK_VERSION) " (" __TIME__ " " __DATE__ ")\n");
 185:./tmk_core/common/command.c **** 
 186:./tmk_core/common/command.c ****     /* build options */
 187:./tmk_core/common/command.c ****     print("OPTIONS:"
 188:./tmk_core/common/command.c **** 
 189:./tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 190:./tmk_core/common/command.c **** 	    " PJRC"
 191:./tmk_core/common/command.c **** #endif
 192:./tmk_core/common/command.c **** #ifdef PROTOCOL_LUFA
 193:./tmk_core/common/command.c **** 	    " LUFA"
 194:./tmk_core/common/command.c **** #endif
 195:./tmk_core/common/command.c **** #ifdef PROTOCOL_VUSB
 196:./tmk_core/common/command.c **** 	    " VUSB"
 197:./tmk_core/common/command.c **** #endif
 198:./tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 199:./tmk_core/common/command.c **** 	    " BOOTMAGIC"
 200:./tmk_core/common/command.c **** #endif
 201:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 202:./tmk_core/common/command.c **** 	    " MOUSEKEY"
 203:./tmk_core/common/command.c **** #endif
 204:./tmk_core/common/command.c **** #ifdef EXTRAKEY_ENABLE
 205:./tmk_core/common/command.c **** 	    " EXTRAKEY"
 206:./tmk_core/common/command.c **** #endif
 207:./tmk_core/common/command.c **** #ifdef CONSOLE_ENABLE
 208:./tmk_core/common/command.c **** 	    " CONSOLE"
 209:./tmk_core/common/command.c **** #endif
 210:./tmk_core/common/command.c **** #ifdef COMMAND_ENABLE
 211:./tmk_core/common/command.c **** 	    " COMMAND"
 212:./tmk_core/common/command.c **** #endif
 213:./tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 214:./tmk_core/common/command.c **** 	    " NKRO"
 215:./tmk_core/common/command.c **** #endif
 216:./tmk_core/common/command.c **** #ifdef KEYMAP_SECTION_ENABLE
 217:./tmk_core/common/command.c **** 	    " KEYMAP_SECTION"
 218:./tmk_core/common/command.c **** #endif
 219:./tmk_core/common/command.c **** 
 220:./tmk_core/common/command.c **** 	    " " STR(BOOTLOADER_SIZE) "\n");
 221:./tmk_core/common/command.c **** 
 222:./tmk_core/common/command.c ****     print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
 223:./tmk_core/common/command.c **** #if defined(__AVR__)
 224:./tmk_core/common/command.c ****           " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__
 225:./tmk_core/common/command.c ****           " AVR_ARCH: avr" STR(__AVR_ARCH__)
 226:./tmk_core/common/command.c **** #endif
 227:./tmk_core/common/command.c **** 		  "\n");
 228:./tmk_core/common/command.c **** 
 229:./tmk_core/common/command.c **** 	return;
 230:./tmk_core/common/command.c **** }
 231:./tmk_core/common/command.c **** 
 232:./tmk_core/common/command.c **** static void print_status(void)
 233:./tmk_core/common/command.c **** {
 234:./tmk_core/common/command.c **** 
 235:./tmk_core/common/command.c ****     print("\n\t- Status -\n");
 236:./tmk_core/common/command.c **** 
 237:./tmk_core/common/command.c ****     print_val_hex8(host_keyboard_leds());
 238:./tmk_core/common/command.c ****     print_val_hex8(keyboard_protocol);
 239:./tmk_core/common/command.c ****     print_val_hex8(keyboard_idle);
 240:./tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 241:./tmk_core/common/command.c ****     print_val_hex8(keymap_config.nkro);
 242:./tmk_core/common/command.c **** #endif
 243:./tmk_core/common/command.c ****     print_val_hex32(timer_read32());
 244:./tmk_core/common/command.c **** 
 245:./tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 246:./tmk_core/common/command.c ****     print_val_hex8(UDCON);
 247:./tmk_core/common/command.c ****     print_val_hex8(UDIEN);
 248:./tmk_core/common/command.c ****     print_val_hex8(UDINT);
 249:./tmk_core/common/command.c ****     print_val_hex8(usb_keyboard_leds);
 250:./tmk_core/common/command.c ****     print_val_hex8(usb_keyboard_idle_count);
 251:./tmk_core/common/command.c **** #endif
 252:./tmk_core/common/command.c **** 
 253:./tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 254:./tmk_core/common/command.c **** #   if USB_COUNT_SOF
 255:./tmk_core/common/command.c ****     print_val_hex8(usbSofCount);
 256:./tmk_core/common/command.c **** #   endif
 257:./tmk_core/common/command.c **** #endif
 258:./tmk_core/common/command.c **** 	return;
 259:./tmk_core/common/command.c **** }
 260:./tmk_core/common/command.c **** 
 261:./tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 262:./tmk_core/common/command.c **** static void print_eeconfig(void)
 263:./tmk_core/common/command.c **** {
 264:./tmk_core/common/command.c **** 
 265:./tmk_core/common/command.c **** // Print these variables if NO_PRINT or USER_PRINT are not defined.
 266:./tmk_core/common/command.c **** #if !defined(NO_PRINT) && !defined(USER_PRINT)
 267:./tmk_core/common/command.c **** 
 268:./tmk_core/common/command.c ****     print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
 269:./tmk_core/common/command.c **** 
 270:./tmk_core/common/command.c ****     debug_config_t dc;
 271:./tmk_core/common/command.c ****     dc.raw = eeconfig_read_debug();
 272:./tmk_core/common/command.c ****     print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
 273:./tmk_core/common/command.c ****     print(".enable: "); print_dec(dc.enable); print("\n");
 274:./tmk_core/common/command.c ****     print(".matrix: "); print_dec(dc.matrix); print("\n");
 275:./tmk_core/common/command.c ****     print(".keyboard: "); print_dec(dc.keyboard); print("\n");
 276:./tmk_core/common/command.c ****     print(".mouse: "); print_dec(dc.mouse); print("\n");
 277:./tmk_core/common/command.c **** 
 278:./tmk_core/common/command.c ****     keymap_config_t kc;
 279:./tmk_core/common/command.c ****     kc.raw = eeconfig_read_keymap();
 280:./tmk_core/common/command.c ****     print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
 281:./tmk_core/common/command.c ****     print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
 282:./tmk_core/common/command.c ****     print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
 283:./tmk_core/common/command.c ****     print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
 284:./tmk_core/common/command.c ****     print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
 285:./tmk_core/common/command.c ****     print(".no_gui: "); print_dec(kc.no_gui); print("\n");
 286:./tmk_core/common/command.c ****     print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
 287:./tmk_core/common/command.c ****     print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
 288:./tmk_core/common/command.c ****     print(".nkro: "); print_dec(kc.nkro); print("\n");
 289:./tmk_core/common/command.c **** 
 290:./tmk_core/common/command.c **** #ifdef BACKLIGHT_ENABLE
 291:./tmk_core/common/command.c ****     backlight_config_t bc;
 292:./tmk_core/common/command.c ****     bc.raw = eeconfig_read_backlight();
 293:./tmk_core/common/command.c ****     print("backlight_config.raw: "); print_hex8(bc.raw); print("\n");
 294:./tmk_core/common/command.c ****     print(".enable: "); print_dec(bc.enable); print("\n");
 295:./tmk_core/common/command.c ****     print(".level: "); print_dec(bc.level); print("\n");
 296:./tmk_core/common/command.c **** #endif /* BACKLIGHT_ENABLE */
 297:./tmk_core/common/command.c **** 
 298:./tmk_core/common/command.c **** #endif /* !NO_PRINT */
 299:./tmk_core/common/command.c **** 
 300:./tmk_core/common/command.c **** }
 301:./tmk_core/common/command.c **** #endif /* BOOTMAGIC_ENABLE */
 302:./tmk_core/common/command.c **** 
 303:./tmk_core/common/command.c **** static bool command_common(uint8_t code)
 304:./tmk_core/common/command.c **** {
 305:./tmk_core/common/command.c **** 
 306:./tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 307:./tmk_core/common/command.c ****     static host_driver_t *host_driver = 0;
 308:./tmk_core/common/command.c **** #endif
 309:./tmk_core/common/command.c **** 
 310:./tmk_core/common/command.c ****     switch (code) {
 311:./tmk_core/common/command.c **** 
 312:./tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 313:./tmk_core/common/command.c **** 
 314:./tmk_core/common/command.c **** 		// test breathing sleep LED
 315:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_SLEEP_LED):
 316:./tmk_core/common/command.c ****             print("Sleep LED Test\n");
 317:./tmk_core/common/command.c ****             sleep_led_toggle();
 318:./tmk_core/common/command.c ****             led_set(host_keyboard_leds());
 319:./tmk_core/common/command.c ****             break;
 320:./tmk_core/common/command.c **** #endif
 321:./tmk_core/common/command.c **** 
 322:./tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 323:./tmk_core/common/command.c **** 
 324:./tmk_core/common/command.c **** 		// print stored eeprom config
 325:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_EEPROM):
 326:./tmk_core/common/command.c ****             print("eeconfig:\n");
 327:./tmk_core/common/command.c ****             print_eeconfig();
 328:./tmk_core/common/command.c ****             break;
 329:./tmk_core/common/command.c **** #endif
 330:./tmk_core/common/command.c **** 
 331:./tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 332:./tmk_core/common/command.c **** 
 333:./tmk_core/common/command.c **** 		// lock/unlock keyboard
 334:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_LOCK):
 335:./tmk_core/common/command.c ****             if (host_get_driver()) {
 336:./tmk_core/common/command.c ****                 host_driver = host_get_driver();
 337:./tmk_core/common/command.c ****                 clear_keyboard();
 338:./tmk_core/common/command.c ****                 host_set_driver(0);
 339:./tmk_core/common/command.c ****                 print("Locked.\n");
 340:./tmk_core/common/command.c ****             } else {
 341:./tmk_core/common/command.c ****                 host_set_driver(host_driver);
 342:./tmk_core/common/command.c ****                 print("Unlocked.\n");
 343:./tmk_core/common/command.c ****             }
 344:./tmk_core/common/command.c ****             break;
 345:./tmk_core/common/command.c **** #endif
 346:./tmk_core/common/command.c **** 
 347:./tmk_core/common/command.c **** 		// print help
 348:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_HELP1):
 349:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_HELP2):
 350:./tmk_core/common/command.c ****             command_common_help();
 351:./tmk_core/common/command.c ****             break;
 352:./tmk_core/common/command.c **** 
 353:./tmk_core/common/command.c **** 		// activate console
 354:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_CONSOLE):
 355:./tmk_core/common/command.c ****             debug_matrix   = false;
 356:./tmk_core/common/command.c ****             debug_keyboard = false;
 357:./tmk_core/common/command.c ****             debug_mouse    = false;
 358:./tmk_core/common/command.c ****             debug_enable   = false;
 359:./tmk_core/common/command.c ****             command_console_help();
 360:./tmk_core/common/command.c ****             print("C> ");
 361:./tmk_core/common/command.c ****             command_state = CONSOLE;
 362:./tmk_core/common/command.c ****             break;
 363:./tmk_core/common/command.c **** 
 364:./tmk_core/common/command.c ****         // jump to bootloader
 365:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_BOOTLOADER):
 366:./tmk_core/common/command.c ****             clear_keyboard(); // clear to prevent stuck keys
 367:./tmk_core/common/command.c ****             print("\n\nJumping to bootloader... ");
 368:./tmk_core/common/command.c ****             #ifdef AUDIO_ENABLE
 369:./tmk_core/common/command.c **** 	            stop_all_notes();
 370:./tmk_core/common/command.c ****                 shutdown_user();
 371:./tmk_core/common/command.c ****             #else
 372:./tmk_core/common/command.c **** 	            wait_ms(1000);
 373:./tmk_core/common/command.c ****             #endif
 374:./tmk_core/common/command.c ****             bootloader_jump(); // not return
 375:./tmk_core/common/command.c ****             break;
 376:./tmk_core/common/command.c **** 
 377:./tmk_core/common/command.c ****         // debug toggle
 378:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG):
 379:./tmk_core/common/command.c ****             debug_enable = !debug_enable;
 380:./tmk_core/common/command.c ****             if (debug_enable) {
 381:./tmk_core/common/command.c ****                 print("\ndebug: on\n");
 382:./tmk_core/common/command.c ****                 debug_matrix   = true;
 383:./tmk_core/common/command.c ****                 debug_keyboard = true;
 384:./tmk_core/common/command.c ****                 debug_mouse    = true;
 385:./tmk_core/common/command.c ****             } else {
 386:./tmk_core/common/command.c ****                 print("\ndebug: off\n");
 387:./tmk_core/common/command.c ****             }
 388:./tmk_core/common/command.c ****             break;
 389:./tmk_core/common/command.c **** 
 390:./tmk_core/common/command.c ****         // debug matrix toggle
 391:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG_MATRIX):
 392:./tmk_core/common/command.c ****             debug_matrix = !debug_matrix;
 393:./tmk_core/common/command.c ****             if (debug_matrix) {
 394:./tmk_core/common/command.c ****                 print("\nmatrix: on\n");
 395:./tmk_core/common/command.c ****                 debug_enable = true;
 396:./tmk_core/common/command.c ****             } else {
 397:./tmk_core/common/command.c ****                 print("\nmatrix: off\n");
 398:./tmk_core/common/command.c ****             }
 399:./tmk_core/common/command.c ****             break;
 400:./tmk_core/common/command.c **** 
 401:./tmk_core/common/command.c ****         // debug keyboard toggle
 402:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG_KBD):
 403:./tmk_core/common/command.c ****             debug_keyboard = !debug_keyboard;
 404:./tmk_core/common/command.c ****             if (debug_keyboard) {
 405:./tmk_core/common/command.c ****                 print("\nkeyboard: on\n");
 406:./tmk_core/common/command.c ****                 debug_enable = true;
 407:./tmk_core/common/command.c ****             } else {
 408:./tmk_core/common/command.c ****                 print("\nkeyboard: off\n");
 409:./tmk_core/common/command.c ****             }
 410:./tmk_core/common/command.c ****             break;
 411:./tmk_core/common/command.c **** 
 412:./tmk_core/common/command.c ****         // debug mouse toggle
 413:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG_MOUSE):
 414:./tmk_core/common/command.c ****             debug_mouse = !debug_mouse;
 415:./tmk_core/common/command.c ****             if (debug_mouse) {
 416:./tmk_core/common/command.c ****                 print("\nmouse: on\n");
 417:./tmk_core/common/command.c ****                 debug_enable = true;
 418:./tmk_core/common/command.c ****             } else {
 419:./tmk_core/common/command.c **** 				print("\nmouse: off\n");
 420:./tmk_core/common/command.c ****             }
 421:./tmk_core/common/command.c ****             break;
 422:./tmk_core/common/command.c **** 
 423:./tmk_core/common/command.c **** 		// print version
 424:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_VERSION):
 425:./tmk_core/common/command.c ****         	print_version();
 426:./tmk_core/common/command.c **** 		    break;
 427:./tmk_core/common/command.c **** 
 428:./tmk_core/common/command.c **** 		// print status
 429:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_STATUS):
 430:./tmk_core/common/command.c **** 			print_status();
 431:./tmk_core/common/command.c ****             break;
 432:./tmk_core/common/command.c **** 
 433:./tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 434:./tmk_core/common/command.c **** 
 435:./tmk_core/common/command.c **** 		// NKRO toggle
 436:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_NKRO):
 437:./tmk_core/common/command.c ****             clear_keyboard(); // clear to prevent stuck keys
 438:./tmk_core/common/command.c ****             keymap_config.nkro = !keymap_config.nkro;
 439:./tmk_core/common/command.c ****             if (keymap_config.nkro) {
 440:./tmk_core/common/command.c ****                 print("NKRO: on\n");
 441:./tmk_core/common/command.c ****             } else {
 442:./tmk_core/common/command.c ****                 print("NKRO: off\n");
 443:./tmk_core/common/command.c ****             }
 444:./tmk_core/common/command.c ****             break;
 445:./tmk_core/common/command.c **** #endif
 446:./tmk_core/common/command.c **** 
 447:./tmk_core/common/command.c **** 		// switch layers
 448:./tmk_core/common/command.c **** 
 449:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER0_ALT1):
 450:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER0_ALT2):
 451:./tmk_core/common/command.c ****             switch_default_layer(0);
 452:./tmk_core/common/command.c ****             break;
 453:./tmk_core/common/command.c **** 
 454:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_CUSTOM
 455:./tmk_core/common/command.c **** 
 456:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER0):
 457:./tmk_core/common/command.c ****             switch_default_layer(0);
 458:./tmk_core/common/command.c ****             break;
 459:./tmk_core/common/command.c **** 
 460:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER1):
 461:./tmk_core/common/command.c ****             switch_default_layer(1);
 462:./tmk_core/common/command.c ****             break;
 463:./tmk_core/common/command.c **** 
 464:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER2):
 465:./tmk_core/common/command.c ****             switch_default_layer(2);
 466:./tmk_core/common/command.c ****             break;
 467:./tmk_core/common/command.c **** 
 468:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER3):
 469:./tmk_core/common/command.c ****             switch_default_layer(3);
 470:./tmk_core/common/command.c ****             break;
 471:./tmk_core/common/command.c **** 
 472:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER4):
 473:./tmk_core/common/command.c ****             switch_default_layer(4);
 474:./tmk_core/common/command.c ****             break;
 475:./tmk_core/common/command.c **** 
 476:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER5):
 477:./tmk_core/common/command.c ****             switch_default_layer(5);
 478:./tmk_core/common/command.c ****             break;
 479:./tmk_core/common/command.c **** 
 480:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER6):
 481:./tmk_core/common/command.c ****             switch_default_layer(6);
 482:./tmk_core/common/command.c ****             break;
 483:./tmk_core/common/command.c **** 
 484:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER7):
 485:./tmk_core/common/command.c ****             switch_default_layer(7);
 486:./tmk_core/common/command.c ****             break;
 487:./tmk_core/common/command.c **** 
 488:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER8):
 489:./tmk_core/common/command.c ****             switch_default_layer(8);
 490:./tmk_core/common/command.c ****             break;
 491:./tmk_core/common/command.c **** 
 492:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER9):
 493:./tmk_core/common/command.c ****             switch_default_layer(9);
 494:./tmk_core/common/command.c ****             break;
 495:./tmk_core/common/command.c **** #endif
 496:./tmk_core/common/command.c **** 
 497:./tmk_core/common/command.c **** 
 498:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_FKEYS
 499:./tmk_core/common/command.c **** 
 500:./tmk_core/common/command.c ****         case KC_F1 ... KC_F9:
 501:./tmk_core/common/command.c ****             switch_default_layer((code - KC_F1) + 1);
 502:./tmk_core/common/command.c ****             break;
 503:./tmk_core/common/command.c ****         case KC_F10:
 504:./tmk_core/common/command.c ****             switch_default_layer(0);
 505:./tmk_core/common/command.c ****             break;
 506:./tmk_core/common/command.c **** #endif
 507:./tmk_core/common/command.c **** 
 508:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_NKEYS
 509:./tmk_core/common/command.c **** 
 510:./tmk_core/common/command.c ****         case KC_1 ... KC_9:
 511:./tmk_core/common/command.c ****             switch_default_layer((code - KC_1) + 1);
 512:./tmk_core/common/command.c ****             break;
 513:./tmk_core/common/command.c ****         case KC_0:
 514:./tmk_core/common/command.c ****             switch_default_layer(0);
 515:./tmk_core/common/command.c ****             break;
 516:./tmk_core/common/command.c **** #endif
 517:./tmk_core/common/command.c **** 
 518:./tmk_core/common/command.c ****         default:
 519:./tmk_core/common/command.c ****             print("?");
 520:./tmk_core/common/command.c ****             return false;
 521:./tmk_core/common/command.c ****     }
 522:./tmk_core/common/command.c ****     return true;
 523:./tmk_core/common/command.c **** }
 524:./tmk_core/common/command.c **** 
 525:./tmk_core/common/command.c **** 
 526:./tmk_core/common/command.c **** /***********************************************************
 527:./tmk_core/common/command.c ****  * Command console
 528:./tmk_core/common/command.c ****  ***********************************************************/
 529:./tmk_core/common/command.c **** static void command_console_help(void)
 530:./tmk_core/common/command.c **** {
 531:./tmk_core/common/command.c ****     print("\n\t- Console -\n"
 532:./tmk_core/common/command.c ****           "ESC/q:	quit\n"
 533:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 534:./tmk_core/common/command.c ****           "m:	mousekey\n"
 535:./tmk_core/common/command.c **** #endif
 536:./tmk_core/common/command.c ****     );
 537:./tmk_core/common/command.c **** }
 538:./tmk_core/common/command.c **** 
 539:./tmk_core/common/command.c **** static bool command_console(uint8_t code)
 540:./tmk_core/common/command.c **** {
 541:./tmk_core/common/command.c ****     switch (code) {
 542:./tmk_core/common/command.c ****         case KC_H:
 543:./tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 544:./tmk_core/common/command.c ****             command_console_help();
 545:./tmk_core/common/command.c ****             break;
 546:./tmk_core/common/command.c ****         case KC_Q:
 547:./tmk_core/common/command.c ****         case KC_ESC:
 548:./tmk_core/common/command.c ****             command_state = ONESHOT;
 549:./tmk_core/common/command.c ****             return false;
 550:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 551:./tmk_core/common/command.c ****         case KC_M:
 552:./tmk_core/common/command.c ****             mousekey_console_help();
 553:./tmk_core/common/command.c ****             print("M> ");
 554:./tmk_core/common/command.c ****             command_state = MOUSEKEY;
 555:./tmk_core/common/command.c ****             return true;
 556:./tmk_core/common/command.c **** #endif
 557:./tmk_core/common/command.c ****         default:
 558:./tmk_core/common/command.c ****             print("?");
 559:./tmk_core/common/command.c ****             return false;
 560:./tmk_core/common/command.c ****     }
 561:./tmk_core/common/command.c ****     print("C> ");
 562:./tmk_core/common/command.c ****     return true;
 563:./tmk_core/common/command.c **** }
 564:./tmk_core/common/command.c **** 
 565:./tmk_core/common/command.c **** 
 566:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 567:./tmk_core/common/command.c **** /***********************************************************
 568:./tmk_core/common/command.c ****  * Mousekey console
 569:./tmk_core/common/command.c ****  ***********************************************************/
 570:./tmk_core/common/command.c **** static uint8_t mousekey_param = 0;
 571:./tmk_core/common/command.c **** 
 572:./tmk_core/common/command.c **** static void mousekey_param_print(void)
 573:./tmk_core/common/command.c **** {
 574:./tmk_core/common/command.c **** // Print these variables if NO_PRINT or USER_PRINT are not defined.
 575:./tmk_core/common/command.c **** #if !defined(NO_PRINT) && !defined(USER_PRINT)
 576:./tmk_core/common/command.c ****     print("\n\t- Values -\n");
 577:./tmk_core/common/command.c ****     print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
 578:./tmk_core/common/command.c ****     print("2: interval(ms): "); pdec(mk_interval); print("\n");
 579:./tmk_core/common/command.c ****     print("3: max_speed: "); pdec(mk_max_speed); print("\n");
 580:./tmk_core/common/command.c ****     print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
 581:./tmk_core/common/command.c ****     print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
 582:./tmk_core/common/command.c ****     print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
 583:./tmk_core/common/command.c **** #endif /* !NO_PRINT */
 584:./tmk_core/common/command.c **** 
 585:./tmk_core/common/command.c **** }
 586:./tmk_core/common/command.c **** 
 587:./tmk_core/common/command.c **** //#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
 588:./tmk_core/common/command.c **** #define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
 589:./tmk_core/common/command.c **** static void mousekey_param_inc(uint8_t param, uint8_t inc)
 590:./tmk_core/common/command.c **** {
 591:./tmk_core/common/command.c ****     switch (param) {
 592:./tmk_core/common/command.c ****         case 1:
 593:./tmk_core/common/command.c ****             if (mk_delay + inc < UINT8_MAX)
 594:./tmk_core/common/command.c ****                 mk_delay += inc;
 595:./tmk_core/common/command.c ****             else
 596:./tmk_core/common/command.c ****                 mk_delay = UINT8_MAX;
 597:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 598:./tmk_core/common/command.c ****             break;
 599:./tmk_core/common/command.c ****         case 2:
 600:./tmk_core/common/command.c ****             if (mk_interval + inc < UINT8_MAX)
 601:./tmk_core/common/command.c ****                 mk_interval += inc;
 602:./tmk_core/common/command.c ****             else
 603:./tmk_core/common/command.c ****                 mk_interval = UINT8_MAX;
 604:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 605:./tmk_core/common/command.c ****             break;
 606:./tmk_core/common/command.c ****         case 3:
 607:./tmk_core/common/command.c ****             if (mk_max_speed + inc < UINT8_MAX)
 608:./tmk_core/common/command.c ****                 mk_max_speed += inc;
 609:./tmk_core/common/command.c ****             else
 610:./tmk_core/common/command.c ****                 mk_max_speed = UINT8_MAX;
 611:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 612:./tmk_core/common/command.c ****             break;
 613:./tmk_core/common/command.c ****         case 4:
 614:./tmk_core/common/command.c ****             if (mk_time_to_max + inc < UINT8_MAX)
 615:./tmk_core/common/command.c ****                 mk_time_to_max += inc;
 616:./tmk_core/common/command.c ****             else
 617:./tmk_core/common/command.c ****                 mk_time_to_max = UINT8_MAX;
 618:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 619:./tmk_core/common/command.c ****             break;
 620:./tmk_core/common/command.c ****         case 5:
 621:./tmk_core/common/command.c ****             if (mk_wheel_max_speed + inc < UINT8_MAX)
 622:./tmk_core/common/command.c ****                 mk_wheel_max_speed += inc;
 623:./tmk_core/common/command.c ****             else
 624:./tmk_core/common/command.c ****                 mk_wheel_max_speed = UINT8_MAX;
 625:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 626:./tmk_core/common/command.c ****             break;
 627:./tmk_core/common/command.c ****         case 6:
 628:./tmk_core/common/command.c ****             if (mk_wheel_time_to_max + inc < UINT8_MAX)
 629:./tmk_core/common/command.c ****                 mk_wheel_time_to_max += inc;
 630:./tmk_core/common/command.c ****             else
 631:./tmk_core/common/command.c ****                 mk_wheel_time_to_max = UINT8_MAX;
 632:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 633:./tmk_core/common/command.c ****             break;
 634:./tmk_core/common/command.c ****     }
 635:./tmk_core/common/command.c **** }
 636:./tmk_core/common/command.c **** 
 637:./tmk_core/common/command.c **** static void mousekey_param_dec(uint8_t param, uint8_t dec)
 638:./tmk_core/common/command.c **** {
 639:./tmk_core/common/command.c ****     switch (param) {
 640:./tmk_core/common/command.c ****         case 1:
 641:./tmk_core/common/command.c ****             if (mk_delay > dec)
 642:./tmk_core/common/command.c ****                 mk_delay -= dec;
 643:./tmk_core/common/command.c ****             else
 644:./tmk_core/common/command.c ****                 mk_delay = 0;
 645:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 646:./tmk_core/common/command.c ****             break;
 647:./tmk_core/common/command.c ****         case 2:
 648:./tmk_core/common/command.c ****             if (mk_interval > dec)
 649:./tmk_core/common/command.c ****                 mk_interval -= dec;
 650:./tmk_core/common/command.c ****             else
 651:./tmk_core/common/command.c ****                 mk_interval = 0;
 652:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 653:./tmk_core/common/command.c ****             break;
 654:./tmk_core/common/command.c ****         case 3:
 655:./tmk_core/common/command.c ****             if (mk_max_speed > dec)
 656:./tmk_core/common/command.c ****                 mk_max_speed -= dec;
 657:./tmk_core/common/command.c ****             else
 658:./tmk_core/common/command.c ****                 mk_max_speed = 0;
 659:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 660:./tmk_core/common/command.c ****             break;
 661:./tmk_core/common/command.c ****         case 4:
 662:./tmk_core/common/command.c ****             if (mk_time_to_max > dec)
 663:./tmk_core/common/command.c ****                 mk_time_to_max -= dec;
 664:./tmk_core/common/command.c ****             else
 665:./tmk_core/common/command.c ****                 mk_time_to_max = 0;
 666:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 667:./tmk_core/common/command.c ****             break;
 668:./tmk_core/common/command.c ****         case 5:
 669:./tmk_core/common/command.c ****             if (mk_wheel_max_speed > dec)
 670:./tmk_core/common/command.c ****                 mk_wheel_max_speed -= dec;
 671:./tmk_core/common/command.c ****             else
 672:./tmk_core/common/command.c ****                 mk_wheel_max_speed = 0;
 673:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 674:./tmk_core/common/command.c ****             break;
 675:./tmk_core/common/command.c ****         case 6:
 676:./tmk_core/common/command.c ****             if (mk_wheel_time_to_max > dec)
 677:./tmk_core/common/command.c ****                 mk_wheel_time_to_max -= dec;
 678:./tmk_core/common/command.c ****             else
 679:./tmk_core/common/command.c ****                 mk_wheel_time_to_max = 0;
 680:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 681:./tmk_core/common/command.c ****             break;
 682:./tmk_core/common/command.c ****     }
 683:./tmk_core/common/command.c **** }
 684:./tmk_core/common/command.c **** 
 685:./tmk_core/common/command.c **** static void mousekey_console_help(void)
 686:./tmk_core/common/command.c **** {
 687:./tmk_core/common/command.c ****     print("\n\t- Mousekey -\n"
 688:./tmk_core/common/command.c ****           "ESC/q:	quit\n"
 689:./tmk_core/common/command.c ****           "1:	delay(*10ms)\n"
 690:./tmk_core/common/command.c ****           "2:	interval(ms)\n"
 691:./tmk_core/common/command.c ****           "3:	max_speed\n"
 692:./tmk_core/common/command.c ****           "4:	time_to_max\n"
 693:./tmk_core/common/command.c ****           "5:	wheel_max_speed\n"
 694:./tmk_core/common/command.c ****           "6:	wheel_time_to_max\n"
 695:./tmk_core/common/command.c ****           "\n"
 696:./tmk_core/common/command.c ****           "p:	print values\n"
 697:./tmk_core/common/command.c ****           "d:	set defaults\n"
 698:./tmk_core/common/command.c ****           "up:	+1\n"
 699:./tmk_core/common/command.c ****           "down:	-1\n"
 700:./tmk_core/common/command.c ****           "pgup:	+10\n"
 701:./tmk_core/common/command.c ****           "pgdown:	-10\n"
 702:./tmk_core/common/command.c ****           "\n"
 703:./tmk_core/common/command.c ****           "speed = delta * max_speed * (repeat / time_to_max)\n");
 704:./tmk_core/common/command.c ****     xprintf("where delta: cursor=%d, wheel=%d\n"
 705:./tmk_core/common/command.c ****             "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_D
 706:./tmk_core/common/command.c **** }
 707:./tmk_core/common/command.c **** 
 708:./tmk_core/common/command.c **** static bool mousekey_console(uint8_t code)
 709:./tmk_core/common/command.c **** {
 710:./tmk_core/common/command.c ****     switch (code) {
 711:./tmk_core/common/command.c ****         case KC_H:
 712:./tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 713:./tmk_core/common/command.c ****             mousekey_console_help();
 714:./tmk_core/common/command.c ****             break;
 715:./tmk_core/common/command.c ****         case KC_Q:
 716:./tmk_core/common/command.c ****         case KC_ESC:
 717:./tmk_core/common/command.c ****             if (mousekey_param) {
 718:./tmk_core/common/command.c ****                 mousekey_param = 0;
 719:./tmk_core/common/command.c ****             } else {
 720:./tmk_core/common/command.c ****                 print("C> ");
 721:./tmk_core/common/command.c ****                 command_state = CONSOLE;
 722:./tmk_core/common/command.c ****                 return false;
 723:./tmk_core/common/command.c ****             }
 724:./tmk_core/common/command.c ****             break;
 725:./tmk_core/common/command.c ****         case KC_P:
 726:./tmk_core/common/command.c ****             mousekey_param_print();
 727:./tmk_core/common/command.c ****             break;
 728:./tmk_core/common/command.c ****         case KC_1:
 729:./tmk_core/common/command.c ****         case KC_2:
 730:./tmk_core/common/command.c ****         case KC_3:
 731:./tmk_core/common/command.c ****         case KC_4:
 732:./tmk_core/common/command.c ****         case KC_5:
 733:./tmk_core/common/command.c ****         case KC_6:
 734:./tmk_core/common/command.c ****             mousekey_param = numkey2num(code);
 735:./tmk_core/common/command.c ****             break;
 736:./tmk_core/common/command.c ****         case KC_UP:
 737:./tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 1);
 738:./tmk_core/common/command.c ****             break;
 739:./tmk_core/common/command.c ****         case KC_DOWN:
 740:./tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 1);
 741:./tmk_core/common/command.c ****             break;
 742:./tmk_core/common/command.c ****         case KC_PGUP:
 743:./tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 10);
 744:./tmk_core/common/command.c ****             break;
 745:./tmk_core/common/command.c ****         case KC_PGDN:
 746:./tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 10);
 747:./tmk_core/common/command.c ****             break;
 748:./tmk_core/common/command.c ****         case KC_D:
 749:./tmk_core/common/command.c ****             mk_delay = MOUSEKEY_DELAY/10;
 750:./tmk_core/common/command.c ****             mk_interval = MOUSEKEY_INTERVAL;
 751:./tmk_core/common/command.c ****             mk_max_speed = MOUSEKEY_MAX_SPEED;
 752:./tmk_core/common/command.c ****             mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
 753:./tmk_core/common/command.c ****             mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
 754:./tmk_core/common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 755:./tmk_core/common/command.c ****             print("set default\n");
 756:./tmk_core/common/command.c ****             break;
 757:./tmk_core/common/command.c ****         default:
 758:./tmk_core/common/command.c ****             print("?");
 759:./tmk_core/common/command.c ****             return false;
 760:./tmk_core/common/command.c ****     }
 761:./tmk_core/common/command.c ****     if (mousekey_param) {
 762:./tmk_core/common/command.c ****         xprintf("M%d> ", mousekey_param);
 763:./tmk_core/common/command.c ****     } else {
 764:./tmk_core/common/command.c ****         print("M>" );
 765:./tmk_core/common/command.c ****     }
 766:./tmk_core/common/command.c ****     return true;
 767:./tmk_core/common/command.c **** }
 768:./tmk_core/common/command.c **** #endif
 769:./tmk_core/common/command.c **** 
 770:./tmk_core/common/command.c **** 
 771:./tmk_core/common/command.c **** /***********************************************************
 772:./tmk_core/common/command.c ****  * Utilities
 773:./tmk_core/common/command.c ****  ***********************************************************/
 774:./tmk_core/common/command.c **** uint8_t numkey2num(uint8_t code)
 775:./tmk_core/common/command.c **** {
 776:./tmk_core/common/command.c ****     switch (code) {
 777:./tmk_core/common/command.c ****         case KC_1: return 1;
 778:./tmk_core/common/command.c ****         case KC_2: return 2;
 779:./tmk_core/common/command.c ****         case KC_3: return 3;
 780:./tmk_core/common/command.c ****         case KC_4: return 4;
 781:./tmk_core/common/command.c ****         case KC_5: return 5;
 782:./tmk_core/common/command.c ****         case KC_6: return 6;
 783:./tmk_core/common/command.c ****         case KC_7: return 7;
 784:./tmk_core/common/command.c ****         case KC_8: return 8;
 785:./tmk_core/common/command.c ****         case KC_9: return 9;
 786:./tmk_core/common/command.c ****         case KC_0: return 0;
 787:./tmk_core/common/command.c ****     }
 788:./tmk_core/common/command.c ****     return 0;
 789:./tmk_core/common/command.c **** }
 790:./tmk_core/common/command.c **** 
 791:./tmk_core/common/command.c **** static void switch_default_layer(uint8_t layer)
 792:./tmk_core/common/command.c **** {
  16               		.loc 1 792 1 view -0
  17               		.cfi_startproc
  18               		.loc 1 792 1 is_stmt 0 view .LVU1
  19 0000 0F93      		push r16
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 16, -2
  23 0002 1F93      		push r17
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 17, -3
  27               	/* prologue: function */
  28               	/* frame size = 0 */
  29               	/* stack size = 2 */
  30               	.L__stack_usage = 2
 793:./tmk_core/common/command.c ****     xprintf("L%d\n", layer);
  31               		.loc 1 793 28 is_stmt 1 view .LVU2
 794:./tmk_core/common/command.c ****     default_layer_set(1UL<<layer);
  32               		.loc 1 794 5 view .LVU3
  33 0004 41E0      		ldi r20,lo8(1)
  34 0006 50E0      		ldi r21,0
  35 0008 60E0      		ldi r22,0
  36 000a 70E0      		ldi r23,0
  37 000c 8A01      		movw r16,r20
  38 000e 9B01      		movw r18,r22
  39 0010 00C0      		rjmp 2f
  40               		1:
  41 0012 000F      		lsl r16
  42 0014 111F      		rol r17
  43 0016 221F      		rol r18
  44 0018 331F      		rol r19
  45               		2:
  46 001a 8A95      		dec r24
  47 001c 02F4      		brpl 1b
  48 001e C901      		movw r24,r18
  49               	.LVL1:
  50               		.loc 1 794 5 is_stmt 0 view .LVU4
  51 0020 B801      		movw r22,r16
  52 0022 0E94 0000 		call default_layer_set
  53               	.LVL2:
 795:./tmk_core/common/command.c ****     clear_keyboard();
  54               		.loc 1 795 5 is_stmt 1 view .LVU5
  55               	/* epilogue start */
 796:./tmk_core/common/command.c **** }
  56               		.loc 1 796 1 is_stmt 0 view .LVU6
  57 0026 1F91      		pop r17
  58 0028 0F91      		pop r16
 795:./tmk_core/common/command.c ****     clear_keyboard();
  59               		.loc 1 795 5 view .LVU7
  60 002a 0C94 0000 		jmp clear_keyboard
  61               	.LVL3:
  62               		.cfi_endproc
  63               	.LFE117:
  65               		.section	.text.command_common,"ax",@progbits
  67               	command_common:
  68               	.LVL4:
  69               	.LFB113:
 304:./tmk_core/common/command.c **** 
  70               		.loc 1 304 1 is_stmt 1 view -0
  71               		.cfi_startproc
  72               	/* prologue: function */
  73               	/* frame size = 0 */
  74               	/* stack size = 0 */
  75               	.L__stack_usage = 0
 310:./tmk_core/common/command.c **** 
  76               		.loc 1 310 5 view .LVU9
  77 0000 8732      		cpi r24,lo8(39)
  78 0002 00F0      		brlo .+2
  79 0004 00C0      		rjmp .L3
  80 0006 8E31      		cpi r24,lo8(30)
  81 0008 00F0      		brlo .+2
  82 000a 00C0      		rjmp .L4
  83 000c 8031      		cpi r24,lo8(16)
  84 000e 01F4      		brne .+2
  85 0010 00C0      		rjmp .L5
  86 0012 00F4      		brsh .L6
  87 0014 8730      		cpi r24,lo8(7)
  88 0016 01F4      		brne .+2
  89 0018 00C0      		rjmp .L7
  90 001a 00F4      		brsh .L8
  91 001c 8630      		cpi r24,lo8(6)
  92 001e 01F4      		brne .+2
  93 0020 00C0      		rjmp .L9
  94               	.L27:
 520:./tmk_core/common/command.c ****     }
  95               		.loc 1 520 20 is_stmt 0 view .LVU10
  96 0022 80E0      		ldi r24,0
  97               	.LVL5:
  98               	/* epilogue start */
 523:./tmk_core/common/command.c **** 
  99               		.loc 1 523 1 view .LVU11
 100 0024 0895      		ret
 101               	.LVL6:
 102               	.L8:
 523:./tmk_core/common/command.c **** 
 103               		.loc 1 523 1 view .LVU12
 104 0026 8B30      		cpi r24,lo8(11)
 105 0028 01F4      		brne .+2
 106 002a 00C0      		rjmp .L26
 107 002c 8E30      		cpi r24,lo8(14)
 108 002e 01F4      		brne .L27
 403:./tmk_core/common/command.c ****             if (debug_keyboard) {
 109               		.loc 1 403 13 is_stmt 1 view .LVU13
 403:./tmk_core/common/command.c ****             if (debug_keyboard) {
 110               		.loc 1 403 31 is_stmt 0 view .LVU14
 111 0030 9091 0000 		lds r25,debug_config
 403:./tmk_core/common/command.c ****             if (debug_keyboard) {
 112               		.loc 1 403 28 view .LVU15
 113 0034 892F      		mov r24,r25
 114               	.LVL7:
 403:./tmk_core/common/command.c ****             if (debug_keyboard) {
 115               		.loc 1 403 28 view .LVU16
 116 0036 8B7F      		andi r24,~(1<<2)
 117 0038 92FF      		sbrs r25,2
 118 003a 8460      		ori r24,1<<2
 119 003c 8093 0000 		sts debug_config,r24
 404:./tmk_core/common/command.c ****                 print("\nkeyboard: on\n");
 120               		.loc 1 404 13 is_stmt 1 view .LVU17
 404:./tmk_core/common/command.c ****                 print("\nkeyboard: on\n");
 121               		.loc 1 404 16 is_stmt 0 view .LVU18
 122 0040 82FD      		sbrc r24,2
 123 0042 00C0      		rjmp .L22
 124 0044 00C0      		rjmp .L26
 125               	.LVL8:
 126               	.L6:
 404:./tmk_core/common/command.c ****                 print("\nkeyboard: on\n");
 127               		.loc 1 404 16 view .LVU19
 128 0046 8631      		cpi r24,lo8(22)
 129 0048 01F4      		brne .+2
 130 004a 00C0      		rjmp .L26
 131 004c 00F4      		brsh .L12
 132 004e 8131      		cpi r24,lo8(17)
 133 0050 01F4      		brne .L27
 437:./tmk_core/common/command.c ****             keymap_config.nkro = !keymap_config.nkro;
 134               		.loc 1 437 13 is_stmt 1 view .LVU20
 135 0052 0E94 0000 		call clear_keyboard
 136               	.LVL9:
 438:./tmk_core/common/command.c ****             if (keymap_config.nkro) {
 137               		.loc 1 438 13 view .LVU21
 438:./tmk_core/common/command.c ****             if (keymap_config.nkro) {
 138               		.loc 1 438 48 is_stmt 0 view .LVU22
 139 0056 9091 0000 		lds r25,keymap_config
 438:./tmk_core/common/command.c ****             if (keymap_config.nkro) {
 140               		.loc 1 438 32 view .LVU23
 141 005a 892F      		mov r24,r25
 142 005c 97FB      		bst r25,7
 143 005e 87F9      		bld r24,7
 144 0060 8058      		subi r24,0x80
 145 0062 8093 0000 		sts keymap_config,r24
 439:./tmk_core/common/command.c ****                 print("NKRO: on\n");
 146               		.loc 1 439 13 is_stmt 1 view .LVU24
 147 0066 00C0      		rjmp .L26
 148               	.LVL10:
 149               	.L12:
 439:./tmk_core/common/command.c ****                 print("NKRO: on\n");
 150               		.loc 1 439 13 is_stmt 0 view .LVU25
 151 0068 8931      		cpi r24,lo8(25)
 152 006a 01F0      		breq .L26
 153 006c 8B31      		cpi r24,lo8(27)
 154 006e 01F4      		brne .L27
 392:./tmk_core/common/command.c ****             if (debug_matrix) {
 155               		.loc 1 392 13 is_stmt 1 view .LVU26
 392:./tmk_core/common/command.c ****             if (debug_matrix) {
 156               		.loc 1 392 29 is_stmt 0 view .LVU27
 157 0070 9091 0000 		lds r25,debug_config
 392:./tmk_core/common/command.c ****             if (debug_matrix) {
 158               		.loc 1 392 26 view .LVU28
 159 0074 892F      		mov r24,r25
 160               	.LVL11:
 392:./tmk_core/common/command.c ****             if (debug_matrix) {
 161               		.loc 1 392 26 view .LVU29
 162 0076 8D7F      		andi r24,~(1<<1)
 163 0078 91FF      		sbrs r25,1
 164 007a 8260      		ori r24,1<<1
 165 007c 8093 0000 		sts debug_config,r24
 393:./tmk_core/common/command.c ****                 print("\nmatrix: on\n");
 166               		.loc 1 393 13 is_stmt 1 view .LVU30
 393:./tmk_core/common/command.c ****                 print("\nmatrix: on\n");
 167               		.loc 1 393 16 is_stmt 0 view .LVU31
 168 0080 81FF      		sbrs r24,1
 169 0082 00C0      		rjmp .L26
 170               	.L22:
 394:./tmk_core/common/command.c ****                 debug_enable = true;
 171               		.loc 1 394 40 is_stmt 1 view .LVU32
 395:./tmk_core/common/command.c ****             } else {
 172               		.loc 1 395 17 view .LVU33
 395:./tmk_core/common/command.c ****             } else {
 173               		.loc 1 395 30 is_stmt 0 view .LVU34
 174 0084 8091 0000 		lds r24,debug_config
 175 0088 8160      		ori r24,lo8(1<<0)
 176 008a 00C0      		rjmp .L45
 177               	.LVL12:
 178               	.L3:
 395:./tmk_core/common/command.c ****             } else {
 179               		.loc 1 395 30 view .LVU35
 180 008c 8833      		cpi r24,lo8(56)
 181 008e 01F0      		breq .L26
 182 0090 00F4      		brsh .L15
 183 0092 8932      		cpi r24,lo8(41)
 184 0094 01F0      		breq .L16
 185 0096 8533      		cpi r24,lo8(53)
 186 0098 01F0      		breq .L16
 187 009a 8732      		cpi r24,lo8(39)
 188 009c 01F4      		brne .L27
 189               	.L16:
 451:./tmk_core/common/command.c ****             break;
 190               		.loc 1 451 13 is_stmt 1 view .LVU36
 191 009e 80E0      		ldi r24,0
 192               	.LVL13:
 193               	.L44:
 511:./tmk_core/common/command.c ****             break;
 194               		.loc 1 511 13 is_stmt 0 view .LVU37
 195 00a0 0E94 0000 		call switch_default_layer
 196               	.LVL14:
 512:./tmk_core/common/command.c ****         case KC_0:
 197               		.loc 1 512 13 is_stmt 1 view .LVU38
 198 00a4 00C0      		rjmp .L26
 199               	.LVL15:
 200               	.L15:
 512:./tmk_core/common/command.c ****         case KC_0:
 201               		.loc 1 512 13 is_stmt 0 view .LVU39
 202 00a6 8334      		cpi r24,lo8(67)
 203 00a8 01F0      		breq .L16
 204 00aa 00F4      		brsh .L17
 205 00ac 8A33      		cpi r24,lo8(58)
 206 00ae 00F4      		brsh .+2
 207 00b0 00C0      		rjmp .L27
 501:./tmk_core/common/command.c ****             break;
 208               		.loc 1 501 13 is_stmt 1 view .LVU40
 209 00b2 8953      		subi r24,lo8(-(-57))
 210               	.LVL16:
 501:./tmk_core/common/command.c ****             break;
 211               		.loc 1 501 13 is_stmt 0 view .LVU41
 212 00b4 00C0      		rjmp .L44
 213               	.LVL17:
 214               	.L17:
 501:./tmk_core/common/command.c ****             break;
 215               		.loc 1 501 13 view .LVU42
 216 00b6 8834      		cpi r24,lo8(72)
 217 00b8 01F0      		breq .+2
 218 00ba 00C0      		rjmp .L27
 366:./tmk_core/common/command.c ****             print("\n\nJumping to bootloader... ");
 219               		.loc 1 366 13 is_stmt 1 view .LVU43
 220 00bc 0E94 0000 		call clear_keyboard
 221               	.LVL18:
 367:./tmk_core/common/command.c ****             #ifdef AUDIO_ENABLE
 222               		.loc 1 367 51 view .LVU44
 372:./tmk_core/common/command.c ****             #endif
 223               		.loc 1 372 14 view .LVU45
 224               	.LBB4:
 225               	.LBI4:
 226               		.file 2 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** _delay_ms(double __ms)
 227               		.loc 2 166 1 view .LVU46
 228               	.LBB5:
 167:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	double __tmp ;
 229               		.loc 2 168 2 view .LVU47
 169:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 230               		.loc 2 172 2 view .LVU48
 173:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 231               		.loc 2 173 2 view .LVU49
 174:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 232               		.loc 2 174 2 view .LVU50
 175:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 233               		.loc 2 184 3 view .LVU51
 185:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 234               		.loc 2 187 2 view .LVU52
 235 00c0 2FEF      		ldi r18,lo8(3199999)
 236 00c2 83ED      		ldi r24,hi8(3199999)
 237 00c4 90E3      		ldi r25,hlo8(3199999)
 238 00c6 2150      	1:	subi r18,1
 239 00c8 8040      		sbci r24,0
 240 00ca 9040      		sbci r25,0
 241 00cc 01F4      		brne 1b
 242 00ce 00C0      		rjmp .
 243 00d0 0000      		nop
 244               	.LVL19:
 245               		.loc 2 187 2 is_stmt 0 view .LVU53
 246               	.LBE5:
 247               	.LBE4:
 374:./tmk_core/common/command.c ****             break;
 248               		.loc 1 374 13 is_stmt 1 view .LVU54
 249 00d2 0E94 0000 		call bootloader_jump
 250               	.LVL20:
 375:./tmk_core/common/command.c **** 
 251               		.loc 1 375 13 view .LVU55
 252               	.L26:
 522:./tmk_core/common/command.c **** }
 253               		.loc 1 522 12 is_stmt 0 view .LVU56
 254 00d6 81E0      		ldi r24,lo8(1)
 255 00d8 0895      		ret
 256               	.LVL21:
 257               	.L9:
 355:./tmk_core/common/command.c ****             debug_keyboard = false;
 258               		.loc 1 355 13 is_stmt 1 view .LVU57
 356:./tmk_core/common/command.c ****             debug_mouse    = false;
 259               		.loc 1 356 13 view .LVU58
 357:./tmk_core/common/command.c ****             debug_enable   = false;
 260               		.loc 1 357 13 view .LVU59
 358:./tmk_core/common/command.c ****             command_console_help();
 261               		.loc 1 358 13 view .LVU60
 358:./tmk_core/common/command.c ****             command_console_help();
 262               		.loc 1 358 28 is_stmt 0 view .LVU61
 263 00da 8091 0000 		lds r24,debug_config
 264               	.LVL22:
 358:./tmk_core/common/command.c ****             command_console_help();
 265               		.loc 1 358 28 view .LVU62
 266 00de 807F      		andi r24,lo8(-16)
 267 00e0 8093 0000 		sts debug_config,r24
 359:./tmk_core/common/command.c ****             print("C> ");
 268               		.loc 1 359 13 is_stmt 1 view .LVU63
 360:./tmk_core/common/command.c ****             command_state = CONSOLE;
 269               		.loc 1 360 25 view .LVU64
 361:./tmk_core/common/command.c ****             break;
 270               		.loc 1 361 13 view .LVU65
 361:./tmk_core/common/command.c ****             break;
 271               		.loc 1 361 27 is_stmt 0 view .LVU66
 272 00e4 81E0      		ldi r24,lo8(1)
 273 00e6 8093 0000 		sts command_state,r24
 362:./tmk_core/common/command.c **** 
 274               		.loc 1 362 13 is_stmt 1 view .LVU67
 275 00ea 0895      		ret
 276               	.LVL23:
 277               	.L7:
 379:./tmk_core/common/command.c ****             if (debug_enable) {
 278               		.loc 1 379 13 view .LVU68
 379:./tmk_core/common/command.c ****             if (debug_enable) {
 279               		.loc 1 379 29 is_stmt 0 view .LVU69
 280 00ec 9091 0000 		lds r25,debug_config
 379:./tmk_core/common/command.c ****             if (debug_enable) {
 281               		.loc 1 379 26 view .LVU70
 282 00f0 892F      		mov r24,r25
 283               	.LVL24:
 379:./tmk_core/common/command.c ****             if (debug_enable) {
 284               		.loc 1 379 26 view .LVU71
 285 00f2 8E7F      		andi r24,~(1<<0)
 286 00f4 90FF      		sbrs r25,0
 287 00f6 8160      		ori r24,1<<0
 288 00f8 8093 0000 		sts debug_config,r24
 380:./tmk_core/common/command.c ****                 print("\ndebug: on\n");
 289               		.loc 1 380 13 is_stmt 1 view .LVU72
 380:./tmk_core/common/command.c ****                 print("\ndebug: on\n");
 290               		.loc 1 380 16 is_stmt 0 view .LVU73
 291 00fc 80FF      		sbrs r24,0
 292 00fe 00C0      		rjmp .L26
 381:./tmk_core/common/command.c ****                 debug_matrix   = true;
 293               		.loc 1 381 39 is_stmt 1 view .LVU74
 382:./tmk_core/common/command.c ****                 debug_keyboard = true;
 294               		.loc 1 382 17 view .LVU75
 383:./tmk_core/common/command.c ****                 debug_mouse    = true;
 295               		.loc 1 383 17 view .LVU76
 384:./tmk_core/common/command.c ****             } else {
 296               		.loc 1 384 17 view .LVU77
 382:./tmk_core/common/command.c ****                 debug_keyboard = true;
 297               		.loc 1 382 32 is_stmt 0 view .LVU78
 298 0100 8E60      		ori r24,lo8(14)
 299               	.L45:
 395:./tmk_core/common/command.c ****             } else {
 300               		.loc 1 395 30 view .LVU79
 301 0102 8093 0000 		sts debug_config,r24
 302 0106 00C0      		rjmp .L26
 303               	.LVL25:
 304               	.L5:
 414:./tmk_core/common/command.c ****             if (debug_mouse) {
 305               		.loc 1 414 13 is_stmt 1 view .LVU80
 414:./tmk_core/common/command.c ****             if (debug_mouse) {
 306               		.loc 1 414 28 is_stmt 0 view .LVU81
 307 0108 9091 0000 		lds r25,debug_config
 414:./tmk_core/common/command.c ****             if (debug_mouse) {
 308               		.loc 1 414 25 view .LVU82
 309 010c 892F      		mov r24,r25
 310               	.LVL26:
 414:./tmk_core/common/command.c ****             if (debug_mouse) {
 311               		.loc 1 414 25 view .LVU83
 312 010e 877F      		andi r24,~(1<<3)
 313 0110 93FF      		sbrs r25,3
 314 0112 8860      		ori r24,1<<3
 315 0114 8093 0000 		sts debug_config,r24
 415:./tmk_core/common/command.c ****                 print("\nmouse: on\n");
 316               		.loc 1 415 13 is_stmt 1 view .LVU84
 415:./tmk_core/common/command.c ****                 print("\nmouse: on\n");
 317               		.loc 1 415 16 is_stmt 0 view .LVU85
 318 0118 83FD      		sbrc r24,3
 319 011a 00C0      		rjmp .L22
 320 011c 00C0      		rjmp .L26
 321               	.LVL27:
 322               	.L4:
 511:./tmk_core/common/command.c ****             break;
 323               		.loc 1 511 13 is_stmt 1 view .LVU86
 324 011e 8D51      		subi r24,lo8(-(-29))
 325               	.LVL28:
 511:./tmk_core/common/command.c ****             break;
 326               		.loc 1 511 13 is_stmt 0 view .LVU87
 327 0120 00C0      		rjmp .L44
 328               		.cfi_endproc
 329               	.LFE113:
 331               		.section	.text.command_extra,"ax",@progbits
 332               		.weak	command_extra
 334               	command_extra:
 335               	.LVL29:
 336               	.LFB108:
 106:./tmk_core/common/command.c ****     (void)code;
 337               		.loc 1 106 1 is_stmt 1 view -0
 338               		.cfi_startproc
 339               	/* prologue: function */
 340               	/* frame size = 0 */
 341               	/* stack size = 0 */
 342               	.L__stack_usage = 0
 107:./tmk_core/common/command.c ****     return false;
 343               		.loc 1 107 5 view .LVU89
 108:./tmk_core/common/command.c **** }
 344               		.loc 1 108 5 view .LVU90
 109:./tmk_core/common/command.c **** 
 345               		.loc 1 109 1 is_stmt 0 view .LVU91
 346 0000 80E0      		ldi r24,0
 347               	.LVL30:
 348               	/* epilogue start */
 109:./tmk_core/common/command.c **** 
 349               		.loc 1 109 1 view .LVU92
 350 0002 0895      		ret
 351               		.cfi_endproc
 352               	.LFE108:
 354               		.set	command_extra.localalias.0,command_extra
 355               		.section	.text.command_console_extra,"ax",@progbits
 356               		.weak	command_console_extra
 358               	command_console_extra:
 359               	.LFB119:
 360               		.cfi_startproc
 361               	/* prologue: function */
 362               	/* frame size = 0 */
 363               	/* stack size = 0 */
 364               	.L__stack_usage = 0
 365 0000 0C94 0000 		jmp command_extra.localalias.0
 366               		.cfi_endproc
 367               	.LFE119:
 369               		.section	.text.command_proc,"ax",@progbits
 370               	.global	command_proc
 372               	command_proc:
 373               	.LVL31:
 374               	.LFB107:
  77:./tmk_core/common/command.c ****     switch (command_state) {
 375               		.loc 1 77 1 is_stmt 1 view -0
 376               		.cfi_startproc
  77:./tmk_core/common/command.c ****     switch (command_state) {
 377               		.loc 1 77 1 is_stmt 0 view .LVU94
 378 0000 CF93      		push r28
 379               	.LCFI2:
 380               		.cfi_def_cfa_offset 3
 381               		.cfi_offset 28, -2
 382               	/* prologue: function */
 383               	/* frame size = 0 */
 384               	/* stack size = 1 */
 385               	.L__stack_usage = 1
 386 0002 C82F      		mov r28,r24
  78:./tmk_core/common/command.c ****         case ONESHOT:
 387               		.loc 1 78 5 is_stmt 1 view .LVU95
 388 0004 8091 0000 		lds r24,command_state
 389               	.LVL32:
  78:./tmk_core/common/command.c ****         case ONESHOT:
 390               		.loc 1 78 5 is_stmt 0 view .LVU96
 391 0008 8823      		tst r24
 392 000a 01F0      		breq .L49
 393 000c 8130      		cpi r24,lo8(1)
 394 000e 01F0      		breq .L50
  89:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 395               		.loc 1 89 13 is_stmt 1 view .LVU97
  96:./tmk_core/common/command.c ****             return false;
 396               		.loc 1 96 13 view .LVU98
  96:./tmk_core/common/command.c ****             return false;
 397               		.loc 1 96 27 is_stmt 0 view .LVU99
 398 0010 1092 0000 		sts command_state,__zero_reg__
  97:./tmk_core/common/command.c ****     }
 399               		.loc 1 97 13 is_stmt 1 view .LVU100
 400               	.L61:
  81:./tmk_core/common/command.c ****             return (command_extra(code) || command_common(code));
 401               		.loc 1 81 24 is_stmt 0 view .LVU101
 402 0014 80E0      		ldi r24,0
 403 0016 00C0      		rjmp .L48
 404               	.L49:
  80:./tmk_core/common/command.c ****                 return false;
 405               		.loc 1 80 13 is_stmt 1 view .LVU102
  80:./tmk_core/common/command.c ****                 return false;
 406               		.loc 1 80 18 is_stmt 0 view .LVU103
 407 0018 E091 0000 		lds r30,keyboard_report
 408 001c F091 0000 		lds r31,keyboard_report+1
 409 0020 8081      		ld r24,Z
  80:./tmk_core/common/command.c ****                 return false;
 410               		.loc 1 80 16 view .LVU104
 411 0022 8131      		cpi r24,lo8(17)
 412 0024 01F0      		breq .L55
  80:./tmk_core/common/command.c ****                 return false;
 413               		.loc 1 80 17 discriminator 1 view .LVU105
 414 0026 8232      		cpi r24,lo8(34)
 415 0028 01F4      		brne .L61
 416               	.L55:
  86:./tmk_core/common/command.c ****             else
 417               		.loc 1 86 17 is_stmt 1 view .LVU106
  86:./tmk_core/common/command.c ****             else
 418               		.loc 1 86 25 is_stmt 0 view .LVU107
 419 002a 8C2F      		mov r24,r28
 420 002c 0E94 0000 		call command_extra
 421               	.LVL33:
  86:./tmk_core/common/command.c ****             else
 422               		.loc 1 86 45 view .LVU108
 423 0030 8111      		cpse r24,__zero_reg__
 424 0032 00C0      		rjmp .L63
  86:./tmk_core/common/command.c ****             else
 425               		.loc 1 86 48 discriminator 2 view .LVU109
 426 0034 8C2F      		mov r24,r28
 427 0036 0E94 0000 		call command_common
 428               	.LVL34:
 429               	.L58:
  88:./tmk_core/common/command.c ****             break;
 430               		.loc 1 88 53 discriminator 6 view .LVU110
 431 003a 8170      		andi r24,lo8(1)
 432               	.L48:
 433               	/* epilogue start */
 100:./tmk_core/common/command.c **** 
 434               		.loc 1 100 1 view .LVU111
 435 003c CF91      		pop r28
 436               	.LVL35:
 100:./tmk_core/common/command.c **** 
 437               		.loc 1 100 1 view .LVU112
 438 003e 0895      		ret
 439               	.LVL36:
 440               	.L50:
  83:./tmk_core/common/command.c ****         case CONSOLE:
 441               		.loc 1 83 13 is_stmt 1 view .LVU113
  85:./tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
 442               		.loc 1 85 13 view .LVU114
  85:./tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
 443               		.loc 1 85 17 is_stmt 0 view .LVU115
 444 0040 E091 0000 		lds r30,keyboard_report
 445 0044 F091 0000 		lds r31,keyboard_report+1
 446 0048 8081      		ld r24,Z
  85:./tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
 447               		.loc 1 85 16 view .LVU116
 448 004a 8131      		cpi r24,lo8(17)
 449 004c 01F0      		breq .L55
  85:./tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
 450               		.loc 1 85 17 discriminator 1 view .LVU117
 451 004e 8232      		cpi r24,lo8(34)
 452 0050 01F0      		breq .L55
  88:./tmk_core/common/command.c ****             break;
 453               		.loc 1 88 17 is_stmt 1 view .LVU118
  88:./tmk_core/common/command.c ****             break;
 454               		.loc 1 88 25 is_stmt 0 view .LVU119
 455 0052 8C2F      		mov r24,r28
 456 0054 0E94 0000 		call command_console_extra
 457               	.LVL37:
  88:./tmk_core/common/command.c ****             break;
 458               		.loc 1 88 53 view .LVU120
 459 0058 8111      		cpse r24,__zero_reg__
 460 005a 00C0      		rjmp .L66
 461               	.LVL38:
 462               	.LBB8:
 463               	.LBI8:
 539:./tmk_core/common/command.c **** {
 464               		.loc 1 539 13 is_stmt 1 view .LVU121
 465               	.LBB9:
 541:./tmk_core/common/command.c ****         case KC_H:
 466               		.loc 1 541 5 view .LVU122
 467 005c C431      		cpi r28,lo8(20)
 468 005e 01F0      		breq .L59
 469 0060 00F4      		brsh .L60
 470 0062 CB30      		cpi r28,lo8(11)
 471 0064 01F4      		brne .L58
 472               	.LVL39:
 473               	.L66:
 541:./tmk_core/common/command.c ****         case KC_H:
 474               		.loc 1 541 5 is_stmt 0 view .LVU123
 475               	.LBE9:
 476               	.LBE8:
  88:./tmk_core/common/command.c ****             break;
 477               		.loc 1 88 53 view .LVU124
 478 0066 81E0      		ldi r24,lo8(1)
 479 0068 00C0      		rjmp .L58
 480               	.L63:
  86:./tmk_core/common/command.c ****             else
 481               		.loc 1 86 45 view .LVU125
 482 006a 81E0      		ldi r24,lo8(1)
 483 006c 90E0      		ldi r25,0
 484 006e 00C0      		rjmp .L58
 485               	.LVL40:
 486               	.L60:
  86:./tmk_core/common/command.c ****             else
 487               		.loc 1 86 45 view .LVU126
 488 0070 C932      		cpi r28,lo8(41)
 489 0072 01F0      		breq .L59
 490 0074 C833      		cpi r28,lo8(56)
 491 0076 01F0      		breq .L66
 492               	.L80:
 493               	.LBB12:
 494               	.LBB10:
 549:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 495               		.loc 1 549 13 is_stmt 1 view .LVU127
 496               	.LVL41:
 549:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 497               		.loc 1 549 13 is_stmt 0 view .LVU128
 498               	.LBE10:
 499               	.LBE12:
  88:./tmk_core/common/command.c ****             break;
 500               		.loc 1 88 53 view .LVU129
 501 0078 80E0      		ldi r24,0
 502 007a 00C0      		rjmp .L58
 503               	.LVL42:
 504               	.L59:
 505               	.LBB13:
 506               	.LBB11:
 548:./tmk_core/common/command.c ****             return false;
 507               		.loc 1 548 13 is_stmt 1 view .LVU130
 548:./tmk_core/common/command.c ****             return false;
 508               		.loc 1 548 27 is_stmt 0 view .LVU131
 509 007c 1092 0000 		sts command_state,__zero_reg__
 510 0080 00C0      		rjmp .L80
 511               	.LBE11:
 512               	.LBE13:
 513               		.cfi_endproc
 514               	.LFE107:
 516               		.section	.text.numkey2num,"ax",@progbits
 517               	.global	numkey2num
 519               	numkey2num:
 520               	.LVL43:
 521               	.LFB116:
 775:./tmk_core/common/command.c ****     switch (code) {
 522               		.loc 1 775 1 is_stmt 1 view -0
 523               		.cfi_startproc
 524               	/* prologue: function */
 525               	/* frame size = 0 */
 526               	/* stack size = 0 */
 527               	.L__stack_usage = 0
 776:./tmk_core/common/command.c ****         case KC_1: return 1;
 528               		.loc 1 776 5 view .LVU133
 529 0000 8E51      		subi r24,lo8(-(-30))
 530               	.LVL44:
 776:./tmk_core/common/command.c ****         case KC_1: return 1;
 531               		.loc 1 776 5 is_stmt 0 view .LVU134
 532 0002 8A30      		cpi r24,lo8(10)
 533 0004 00F4      		brsh .L85
 534 0006 E82F      		mov r30,r24
 535 0008 F0E0      		ldi r31,0
 536 000a E050      		subi r30,lo8(-(CSWTCH.8))
 537 000c F040      		sbci r31,hi8(-(CSWTCH.8))
 538 000e 8081      		ld r24,Z
 539               	.LVL45:
 776:./tmk_core/common/command.c ****         case KC_1: return 1;
 540               		.loc 1 776 5 view .LVU135
 541 0010 0895      		ret
 542               	.L85:
 775:./tmk_core/common/command.c ****     switch (code) {
 543               		.loc 1 775 1 view .LVU136
 544 0012 80E0      		ldi r24,0
 545               	/* epilogue start */
 789:./tmk_core/common/command.c **** 
 546               		.loc 1 789 1 view .LVU137
 547 0014 0895      		ret
 548               		.cfi_endproc
 549               	.LFE116:
 551               		.section	.rodata.CSWTCH.8,"a",@progbits
 554               	CSWTCH.8:
 555 0000 01        		.byte	1
 556 0001 02        		.byte	2
 557 0002 03        		.byte	3
 558 0003 04        		.byte	4
 559 0004 05        		.byte	5
 560 0005 06        		.byte	6
 561 0006 07        		.byte	7
 562 0007 08        		.byte	8
 563 0008 09        		.byte	9
 564 0009 00        		.byte	0
 565               	.global	command_state
 566               		.section	.bss.command_state,"aw",@nobits
 569               	command_state:
 570 0000 00        		.zero	1
 571               		.text
 572               	.Letext0:
 573               		.file 3 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/stdint.h"
 574               		.file 4 "/usr/local/Cellar/avr-gcc/8.1.0/lib/avr-gcc/8/gcc/avr/8.1.0/include/stddef.h"
 575               		.file 5 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 576               		.file 6 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 577               		.file 7 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 578               		.file 8 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/HostStandardReq.h"
 579               		.file 9 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/stdio.h"
 580               		.file 10 "./tmk_core/common/report.h"
 581               		.file 11 "./tmk_core/common/host.h"
 582               		.file 12 "./tmk_core/common/keyboard.h"
 583               		.file 13 "./tmk_core/common/action.h"
 584               		.file 14 "./tmk_core/common/debug.h"
 585               		.file 15 "./quantum/keycode_config.h"
 586               		.file 16 "./quantum/keymap.h"
 587               		.file 17 "./tmk_core/common/timer.h"
 588               		.file 18 "./tmk_core/common/action_layer.h"
 589               		.file 19 "./tmk_core/common/action_util.h"
 590               		.file 20 "./tmk_core/common/command.h"
 591               		.file 21 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/stdlib.h"
 592               		.file 22 "./tmk_core/common/bootloader.h"
 593               		.file 23 "./tmk_core/common/keycode.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 command.c
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccXVi0Cd.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccXVi0Cd.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccXVi0Cd.s:4      *ABS*:000000000000003f __SREG__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccXVi0Cd.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccXVi0Cd.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccXVi0Cd.s:12     .text.switch_default_layer:0000000000000000 switch_default_layer
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccXVi0Cd.s:67     .text.command_common:0000000000000000 command_common
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccXVi0Cd.s:569    .bss.command_state:0000000000000000 command_state
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccXVi0Cd.s:334    .text.command_extra:0000000000000000 command_extra
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccXVi0Cd.s:334    .text.command_extra:0000000000000000 command_extra.localalias.0
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccXVi0Cd.s:358    .text.command_console_extra:0000000000000000 command_console_extra
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccXVi0Cd.s:372    .text.command_proc:0000000000000000 command_proc
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccXVi0Cd.s:519    .text.numkey2num:0000000000000000 numkey2num
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccXVi0Cd.s:554    .rodata.CSWTCH.8:0000000000000000 CSWTCH.8

UNDEFINED SYMBOLS
default_layer_set
clear_keyboard
debug_config
keymap_config
bootloader_jump
keyboard_report
__do_copy_data
__do_clear_bss
