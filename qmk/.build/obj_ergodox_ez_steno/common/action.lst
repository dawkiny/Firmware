   1               		.file	"action.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.process_hand_swap,"ax",@progbits
  11               	.global	process_hand_swap
  13               	process_hand_swap:
  14               	.LVL0:
  15               	.LFB104:
  16               		.file 1 "./tmk_core/common/action.c"
   1:./tmk_core/common/action.c **** /*
   2:./tmk_core/common/action.c **** Copyright 2012,2013 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/action.c **** 
   4:./tmk_core/common/action.c **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/action.c **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/action.c **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/action.c **** (at your option) any later version.
   8:./tmk_core/common/action.c **** 
   9:./tmk_core/common/action.c **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/action.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/action.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/action.c **** GNU General Public License for more details.
  13:./tmk_core/common/action.c **** 
  14:./tmk_core/common/action.c **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/action.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/action.c **** */
  17:./tmk_core/common/action.c **** #include "host.h"
  18:./tmk_core/common/action.c **** #include "keycode.h"
  19:./tmk_core/common/action.c **** #include "keyboard.h"
  20:./tmk_core/common/action.c **** #include "mousekey.h"
  21:./tmk_core/common/action.c **** #include "command.h"
  22:./tmk_core/common/action.c **** #include "led.h"
  23:./tmk_core/common/action.c **** #include "backlight.h"
  24:./tmk_core/common/action.c **** #include "action_layer.h"
  25:./tmk_core/common/action.c **** #include "action_tapping.h"
  26:./tmk_core/common/action.c **** #include "action_macro.h"
  27:./tmk_core/common/action.c **** #include "action_util.h"
  28:./tmk_core/common/action.c **** #include "action.h"
  29:./tmk_core/common/action.c **** 
  30:./tmk_core/common/action.c **** #ifdef DEBUG_ACTION
  31:./tmk_core/common/action.c **** #include "debug.h"
  32:./tmk_core/common/action.c **** #else
  33:./tmk_core/common/action.c **** #include "nodebug.h"
  34:./tmk_core/common/action.c **** #endif
  35:./tmk_core/common/action.c **** 
  36:./tmk_core/common/action.c **** 
  37:./tmk_core/common/action.c **** void action_exec(keyevent_t event)
  38:./tmk_core/common/action.c **** {
  39:./tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  40:./tmk_core/common/action.c ****         dprint("\n---- action_exec: start -----\n");
  41:./tmk_core/common/action.c ****         dprint("EVENT: "); debug_event(event); dprintln();
  42:./tmk_core/common/action.c ****     }
  43:./tmk_core/common/action.c **** 
  44:./tmk_core/common/action.c **** #ifdef ONEHAND_ENABLE
  45:./tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  46:./tmk_core/common/action.c ****         process_hand_swap(&event);
  47:./tmk_core/common/action.c ****     }
  48:./tmk_core/common/action.c **** #endif
  49:./tmk_core/common/action.c **** 
  50:./tmk_core/common/action.c ****     keyrecord_t record = { .event = event };
  51:./tmk_core/common/action.c **** 
  52:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
  53:./tmk_core/common/action.c ****     action_tapping_process(record);
  54:./tmk_core/common/action.c **** #else
  55:./tmk_core/common/action.c ****     process_record(&record);
  56:./tmk_core/common/action.c ****     if (!IS_NOEVENT(record.event)) {
  57:./tmk_core/common/action.c ****         dprint("processed: "); debug_record(record); dprintln();
  58:./tmk_core/common/action.c ****     }
  59:./tmk_core/common/action.c **** #endif
  60:./tmk_core/common/action.c **** }
  61:./tmk_core/common/action.c **** 
  62:./tmk_core/common/action.c **** #ifdef ONEHAND_ENABLE
  63:./tmk_core/common/action.c **** bool swap_hands = false;
  64:./tmk_core/common/action.c **** 
  65:./tmk_core/common/action.c **** void process_hand_swap(keyevent_t *event) {
  17               		.loc 1 65 43 view -0
  18               		.cfi_startproc
  19               		.loc 1 65 43 is_stmt 0 view .LVU1
  20 0000 CF93      		push r28
  21               	.LCFI0:
  22               		.cfi_def_cfa_offset 3
  23               		.cfi_offset 28, -2
  24 0002 DF93      		push r29
  25               	.LCFI1:
  26               		.cfi_def_cfa_offset 4
  27               		.cfi_offset 29, -3
  28               	/* prologue: function */
  29               	/* frame size = 0 */
  30               	/* stack size = 2 */
  31               	.L__stack_usage = 2
  32 0004 DC01      		movw r26,r24
  66:./tmk_core/common/action.c ****     static swap_state_row_t swap_state[MATRIX_ROWS];
  33               		.loc 1 66 5 is_stmt 1 view .LVU2
  67:./tmk_core/common/action.c **** 
  68:./tmk_core/common/action.c ****     keypos_t pos = event->key;
  34               		.loc 1 68 5 view .LVU3
  35               	.LVL1:
  69:./tmk_core/common/action.c ****     swap_state_row_t col_bit = (swap_state_row_t)1<<pos.col;
  36               		.loc 1 69 5 view .LVU4
  37               		.loc 1 69 56 is_stmt 0 view .LVU5
  38 0006 8C91      		ld r24,X
  39               	.LVL2:
  40               		.loc 1 69 56 view .LVU6
  41 0008 682F      		mov r22,r24
  42 000a 70E0      		ldi r23,0
  43               		.loc 1 69 51 view .LVU7
  44 000c 21E0      		ldi r18,lo8(1)
  45 000e 30E0      		ldi r19,0
  46 0010 00C0      		rjmp 2f
  47               		1:
  48 0012 220F      		lsl r18
  49               		2:
  50 0014 8A95      		dec r24
  51 0016 02F4      		brpl 1b
  52               	.LVL3:
  70:./tmk_core/common/action.c ****     bool do_swap = event->pressed ? swap_hands :
  53               		.loc 1 70 5 is_stmt 1 view .LVU8
  54 0018 1196      		adiw r26,1
  55 001a 4C91      		ld r20,X
  56 001c 1197      		sbiw r26,1
  57 001e 50E0      		ldi r21,0
  58 0020 EA01      		movw r28,r20
  59 0022 C050      		subi r28,lo8(-(swap_state.4896))
  60 0024 D040      		sbci r29,hi8(-(swap_state.4896))
  61 0026 9881      		ld r25,Y
  62               		.loc 1 70 48 is_stmt 0 view .LVU9
  63 0028 1296      		adiw r26,2
  64 002a 8C91      		ld r24,X
  65 002c 1297      		sbiw r26,2
  66               	.LVL4:
  67               		.loc 1 70 48 view .LVU10
  68 002e 8823      		tst r24
  69 0030 01F0      		breq .L2
  70               		.loc 1 70 48 discriminator 1 view .LVU11
  71 0032 8091 0000 		lds r24,swap_hands
  72               	.LVL5:
  71:./tmk_core/common/action.c ****                                     swap_state[pos.row] & (col_bit);
  72:./tmk_core/common/action.c **** 
  73:./tmk_core/common/action.c ****     if (do_swap) {
  73               		.loc 1 73 5 is_stmt 1 discriminator 1 view .LVU12
  74               	.L11:
  70:./tmk_core/common/action.c ****     bool do_swap = event->pressed ? swap_hands :
  75               		.loc 1 70 48 is_stmt 0 discriminator 2 view .LVU13
  76 0036 8823      		tst r24
  77 0038 01F0      		breq .L5
  74:./tmk_core/common/action.c ****         event->key = hand_swap_config[pos.row][pos.col];
  78               		.loc 1 74 9 is_stmt 1 view .LVU14
  79               		.loc 1 74 20 is_stmt 0 view .LVU15
  80 003a 86E0      		ldi r24,lo8(6)
  81 003c 849F      		mul r24,r20
  82 003e F001      		movw r30,r0
  83 0040 859F      		mul r24,r21
  84 0042 F00D      		add r31,r0
  85 0044 1124      		clr __zero_reg__
  86 0046 E60F      		add r30,r22
  87 0048 F71F      		adc r31,r23
  88 004a EE0F      		lsl r30
  89 004c FF1F      		rol r31
  90 004e E050      		subi r30,lo8(-(hand_swap_config))
  91 0050 F040      		sbci r31,hi8(-(hand_swap_config))
  92 0052 4081      		ld r20,Z
  93 0054 5181      		ldd r21,Z+1
  94 0056 4D93      		st X+,r20
  95 0058 5C93      		st X,r21
  96               	.LVL6:
  75:./tmk_core/common/action.c ****         swap_state[pos.row] |= col_bit;
  97               		.loc 1 75 9 is_stmt 1 view .LVU16
  98               		.loc 1 75 29 is_stmt 0 view .LVU17
  99 005a 292B      		or r18,r25
 100               	.LVL7:
 101               	.L12:
  76:./tmk_core/common/action.c ****     } else {
  77:./tmk_core/common/action.c ****         swap_state[pos.row] &= ~(col_bit);
 102               		.loc 1 77 29 view .LVU18
 103 005c 2883      		st Y,r18
 104               	.LVL8:
 105               	/* epilogue start */
  78:./tmk_core/common/action.c ****     }
  79:./tmk_core/common/action.c **** }
 106               		.loc 1 79 1 view .LVU19
 107 005e DF91      		pop r29
 108 0060 CF91      		pop r28
 109 0062 0895      		ret
 110               	.LVL9:
 111               	.L2:
  70:./tmk_core/common/action.c ****                                     swap_state[pos.row] & (col_bit);
 112               		.loc 1 70 48 discriminator 2 view .LVU20
 113 0064 892F      		mov r24,r25
 114 0066 8223      		and r24,r18
 115 0068 00C0      		rjmp .L11
 116               	.L5:
  77:./tmk_core/common/action.c ****     }
 117               		.loc 1 77 9 is_stmt 1 view .LVU21
  77:./tmk_core/common/action.c ****     }
 118               		.loc 1 77 29 is_stmt 0 view .LVU22
 119 006a 2095      		com r18
 120               	.LVL10:
  77:./tmk_core/common/action.c ****     }
 121               		.loc 1 77 29 view .LVU23
 122 006c 2923      		and r18,r25
 123 006e 00C0      		rjmp .L12
 124               		.cfi_endproc
 125               	.LFE104:
 127               		.section	.text.action_exec,"ax",@progbits
 128               	.global	action_exec
 130               	action_exec:
 131               	.LFB103:
  38:./tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
 132               		.loc 1 38 1 is_stmt 1 view -0
 133               		.cfi_startproc
 134 0000 CF93      		push r28
 135               	.LCFI2:
 136               		.cfi_def_cfa_offset 3
 137               		.cfi_offset 28, -2
 138 0002 DF93      		push r29
 139               	.LCFI3:
 140               		.cfi_def_cfa_offset 4
 141               		.cfi_offset 29, -3
 142 0004 CDB7      		in r28,__SP_L__
 143 0006 DEB7      		in r29,__SP_H__
 144               	.LCFI4:
 145               		.cfi_def_cfa_register 28
 146 0008 2B97      		sbiw r28,11
 147               	.LCFI5:
 148               		.cfi_def_cfa_offset 15
 149 000a 0FB6      		in __tmp_reg__,__SREG__
 150 000c F894      		cli
 151 000e DEBF      		out __SP_H__,r29
 152 0010 0FBE      		out __SREG__,__tmp_reg__
 153 0012 CDBF      		out __SP_L__,r28
 154               	/* prologue: function */
 155               	/* frame size = 11 */
 156               	/* stack size = 13 */
 157               	.L__stack_usage = 13
 158 0014 4F83      		std Y+7,r20
 159 0016 5887      		std Y+8,r21
 160 0018 6987      		std Y+9,r22
 161 001a 7A87      		std Y+10,r23
 162 001c 8B87      		std Y+11,r24
  39:./tmk_core/common/action.c ****         dprint("\n---- action_exec: start -----\n");
 163               		.loc 1 39 5 view .LVU25
 164               	.LBB4:
 165               	.LBI4:
 166               		.file 2 "./tmk_core/common/keyboard.h"
   1:./tmk_core/common/keyboard.h **** /*
   2:./tmk_core/common/keyboard.h **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/keyboard.h **** 
   4:./tmk_core/common/keyboard.h **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/keyboard.h **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/keyboard.h **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/keyboard.h **** (at your option) any later version.
   8:./tmk_core/common/keyboard.h **** 
   9:./tmk_core/common/keyboard.h **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/keyboard.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/keyboard.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/keyboard.h **** GNU General Public License for more details.
  13:./tmk_core/common/keyboard.h **** 
  14:./tmk_core/common/keyboard.h **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/keyboard.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/keyboard.h **** */
  17:./tmk_core/common/keyboard.h **** 
  18:./tmk_core/common/keyboard.h **** #ifndef KEYBOARD_H
  19:./tmk_core/common/keyboard.h **** #define KEYBOARD_H
  20:./tmk_core/common/keyboard.h **** 
  21:./tmk_core/common/keyboard.h **** #include <stdbool.h>
  22:./tmk_core/common/keyboard.h **** #include <stdint.h>
  23:./tmk_core/common/keyboard.h **** 
  24:./tmk_core/common/keyboard.h **** 
  25:./tmk_core/common/keyboard.h **** #ifdef __cplusplus
  26:./tmk_core/common/keyboard.h **** extern "C" {
  27:./tmk_core/common/keyboard.h **** #endif
  28:./tmk_core/common/keyboard.h **** 
  29:./tmk_core/common/keyboard.h **** /* key matrix position */
  30:./tmk_core/common/keyboard.h **** typedef struct {
  31:./tmk_core/common/keyboard.h ****     uint8_t col;
  32:./tmk_core/common/keyboard.h ****     uint8_t row;
  33:./tmk_core/common/keyboard.h **** } keypos_t;
  34:./tmk_core/common/keyboard.h **** 
  35:./tmk_core/common/keyboard.h **** /* key event */
  36:./tmk_core/common/keyboard.h **** typedef struct {
  37:./tmk_core/common/keyboard.h ****     keypos_t key;
  38:./tmk_core/common/keyboard.h ****     bool     pressed;
  39:./tmk_core/common/keyboard.h ****     uint16_t time;
  40:./tmk_core/common/keyboard.h **** } keyevent_t;
  41:./tmk_core/common/keyboard.h **** 
  42:./tmk_core/common/keyboard.h **** /* equivalent test of keypos_t */
  43:./tmk_core/common/keyboard.h **** #define KEYEQ(keya, keyb)       ((keya).row == (keyb).row && (keya).col == (keyb).col)
  44:./tmk_core/common/keyboard.h **** 
  45:./tmk_core/common/keyboard.h **** /* Rules for No Event:
  46:./tmk_core/common/keyboard.h ****  * 1) (time == 0) to handle (keyevent_t){} as empty event
  47:./tmk_core/common/keyboard.h ****  * 2) Matrix(255, 255) to make TICK event available
  48:./tmk_core/common/keyboard.h ****  */
  49:./tmk_core/common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
 167               		.loc 2 49 20 view .LVU26
 168               	.LBB5:
 169               		.loc 2 49 51 view .LVU27
 170               		.loc 2 49 74 is_stmt 0 view .LVU28
 171 001e 8A85      		ldd r24,Y+10
 172 0020 9B85      		ldd r25,Y+11
 173 0022 892B      		or r24,r25
 174 0024 01F0      		breq .L14
 175 0026 CA01      		movw r24,r20
 176 0028 8923      		and r24,r25
 177 002a 8F3F      		cpi r24,lo8(-1)
 178 002c 01F4      		brne .L15
 179               	.L14:
 180               	.LBE5:
 181               	.LBE4:
  50:./tmk_core/common/action.c **** 
 182               		.loc 1 50 5 is_stmt 1 view .LVU29
  50:./tmk_core/common/action.c **** 
 183               		.loc 1 50 17 is_stmt 0 view .LVU30
 184 002e 1E82      		std Y+6,__zero_reg__
 185 0030 1D82      		std Y+5,__zero_reg__
 186 0032 85E0      		ldi r24,lo8(5)
 187 0034 FE01      		movw r30,r28
 188 0036 3796      		adiw r30,7
 189 0038 DE01      		movw r26,r28
 190 003a 1196      		adiw r26,1
 191               		0:
 192 003c 0190      		ld r0,Z+
 193 003e 0D92      		st X+,r0
 194 0040 8A95      		dec r24
 195 0042 01F4      		brne 0b
  53:./tmk_core/common/action.c **** #else
 196               		.loc 1 53 5 is_stmt 1 view .LVU31
 197 0044 4981      		ldd r20,Y+1
 198 0046 5A81      		ldd r21,Y+2
 199 0048 6B81      		ldd r22,Y+3
 200 004a 7C81      		ldd r23,Y+4
 201 004c 8D81      		ldd r24,Y+5
 202 004e 9E81      		ldd r25,Y+6
 203 0050 0E94 0000 		call action_tapping_process
 204               	.LVL11:
 205               	/* epilogue start */
  60:./tmk_core/common/action.c **** 
 206               		.loc 1 60 1 is_stmt 0 view .LVU32
 207 0054 2B96      		adiw r28,11
 208 0056 0FB6      		in __tmp_reg__,__SREG__
 209 0058 F894      		cli
 210 005a DEBF      		out __SP_H__,r29
 211 005c 0FBE      		out __SREG__,__tmp_reg__
 212 005e CDBF      		out __SP_L__,r28
 213 0060 DF91      		pop r29
 214 0062 CF91      		pop r28
 215 0064 0895      		ret
 216               	.L15:
  41:./tmk_core/common/action.c ****     }
 217               		.loc 1 41 58 is_stmt 1 view .LVU33
  45:./tmk_core/common/action.c ****         process_hand_swap(&event);
 218               		.loc 1 45 5 view .LVU34
  46:./tmk_core/common/action.c ****     }
 219               		.loc 1 46 9 view .LVU35
 220 0066 CE01      		movw r24,r28
 221 0068 0796      		adiw r24,7
 222 006a 0E94 0000 		call process_hand_swap
 223               	.LVL12:
 224 006e 00C0      		rjmp .L14
 225               		.cfi_endproc
 226               	.LFE103:
 228               		.section	.text.process_record_quantum,"ax",@progbits
 229               		.weak	process_record_quantum
 231               	process_record_quantum:
 232               	.LVL13:
 233               	.LFB106:
  80:./tmk_core/common/action.c **** #endif
  81:./tmk_core/common/action.c **** 
  82:./tmk_core/common/action.c **** #if !defined(NO_ACTION_LAYER) && defined(PREVENT_STUCK_MODIFIERS)
  83:./tmk_core/common/action.c **** bool disable_action_cache = false;
  84:./tmk_core/common/action.c **** 
  85:./tmk_core/common/action.c **** void process_record_nocache(keyrecord_t *record)
  86:./tmk_core/common/action.c **** {
  87:./tmk_core/common/action.c ****     disable_action_cache = true;
  88:./tmk_core/common/action.c ****     process_record(record);
  89:./tmk_core/common/action.c ****     disable_action_cache = false;
  90:./tmk_core/common/action.c **** }
  91:./tmk_core/common/action.c **** #else
  92:./tmk_core/common/action.c **** void process_record_nocache(keyrecord_t *record)
  93:./tmk_core/common/action.c **** {
  94:./tmk_core/common/action.c ****     process_record(record);
  95:./tmk_core/common/action.c **** }
  96:./tmk_core/common/action.c **** #endif
  97:./tmk_core/common/action.c **** 
  98:./tmk_core/common/action.c **** __attribute__ ((weak))
  99:./tmk_core/common/action.c **** bool process_record_quantum(keyrecord_t *record) {
 234               		.loc 1 99 50 view -0
 235               		.cfi_startproc
 236               	/* prologue: function */
 237               	/* frame size = 0 */
 238               	/* stack size = 0 */
 239               	.L__stack_usage = 0
 100:./tmk_core/common/action.c ****     return true;
 240               		.loc 1 100 5 view .LVU37
 101:./tmk_core/common/action.c **** }
 241               		.loc 1 101 1 is_stmt 0 view .LVU38
 242 0000 81E0      		ldi r24,lo8(1)
 243               	.LVL14:
 244               	/* epilogue start */
 245               		.loc 1 101 1 view .LVU39
 246 0002 0895      		ret
 247               		.cfi_endproc
 248               	.LFE106:
 250               		.section	.text.register_code,"ax",@progbits
 251               	.global	register_code
 253               	register_code:
 254               	.LVL15:
 255               	.LFB109:
 102:./tmk_core/common/action.c **** 
 103:./tmk_core/common/action.c **** void process_record(keyrecord_t *record) 
 104:./tmk_core/common/action.c **** {
 105:./tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) { return; }
 106:./tmk_core/common/action.c **** 
 107:./tmk_core/common/action.c ****     if(!process_record_quantum(record))
 108:./tmk_core/common/action.c ****         return;
 109:./tmk_core/common/action.c **** 
 110:./tmk_core/common/action.c ****     action_t action = store_or_get_action(record->event.pressed, record->event.key);
 111:./tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
 112:./tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 113:./tmk_core/common/action.c ****     dprint(" layer_state: "); layer_debug();
 114:./tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 115:./tmk_core/common/action.c **** #endif
 116:./tmk_core/common/action.c ****     dprintln();
 117:./tmk_core/common/action.c **** 
 118:./tmk_core/common/action.c ****     process_action(record, action);
 119:./tmk_core/common/action.c **** }
 120:./tmk_core/common/action.c **** 
 121:./tmk_core/common/action.c **** void process_action(keyrecord_t *record, action_t action)
 122:./tmk_core/common/action.c **** {
 123:./tmk_core/common/action.c ****     bool do_release_oneshot = false;
 124:./tmk_core/common/action.c ****     keyevent_t event = record->event;
 125:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 126:./tmk_core/common/action.c ****     uint8_t tap_count = record->tap.count;
 127:./tmk_core/common/action.c **** #endif
 128:./tmk_core/common/action.c **** 
 129:./tmk_core/common/action.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 130:./tmk_core/common/action.c ****     if (has_oneshot_layer_timed_out()) {
 131:./tmk_core/common/action.c ****         dprintf("Oneshot layer: timeout\n");
 132:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 133:./tmk_core/common/action.c ****     }
 134:./tmk_core/common/action.c **** #endif
 135:./tmk_core/common/action.c **** 
 136:./tmk_core/common/action.c ****     if (event.pressed) {
 137:./tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 138:./tmk_core/common/action.c ****         clear_weak_mods();
 139:./tmk_core/common/action.c ****     }
 140:./tmk_core/common/action.c **** 
 141:./tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 142:./tmk_core/common/action.c ****     // notice we only clear the one shot layer if the pressed key is not a modifier.
 143:./tmk_core/common/action.c ****     if (is_oneshot_layer_active() && event.pressed && !IS_MOD(action.key.code)) {
 144:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 145:./tmk_core/common/action.c ****         do_release_oneshot = !is_oneshot_layer_active();
 146:./tmk_core/common/action.c ****     }
 147:./tmk_core/common/action.c **** #endif
 148:./tmk_core/common/action.c **** 
 149:./tmk_core/common/action.c ****     switch (action.kind.id) {
 150:./tmk_core/common/action.c ****         /* Key and Mods */
 151:./tmk_core/common/action.c ****         case ACT_LMODS:
 152:./tmk_core/common/action.c ****         case ACT_RMODS:
 153:./tmk_core/common/action.c ****             {
 154:./tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
 155:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 156:./tmk_core/common/action.c ****                 if (event.pressed) {
 157:./tmk_core/common/action.c ****                     if (mods) {
 158:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 159:./tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 160:./tmk_core/common/action.c ****                             // This also makes LSFT(KC_LGUI) behave exactly the same as LGUI(KC_LSF
 161:./tmk_core/common/action.c ****                             // Same applies for some keys like KC_MEH which are declared as MEH(KC_
 162:./tmk_core/common/action.c ****                             add_mods(mods);
 163:./tmk_core/common/action.c ****                         } else {
 164:./tmk_core/common/action.c ****                             add_weak_mods(mods);
 165:./tmk_core/common/action.c ****                         }
 166:./tmk_core/common/action.c ****                         send_keyboard_report();
 167:./tmk_core/common/action.c ****                     }
 168:./tmk_core/common/action.c ****                     register_code(action.key.code);
 169:./tmk_core/common/action.c ****                 } else {
 170:./tmk_core/common/action.c ****                     unregister_code(action.key.code);
 171:./tmk_core/common/action.c ****                     if (mods) {
 172:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 173:./tmk_core/common/action.c ****                             del_mods(mods);
 174:./tmk_core/common/action.c ****                         } else {
 175:./tmk_core/common/action.c ****                             del_weak_mods(mods);
 176:./tmk_core/common/action.c ****                         }
 177:./tmk_core/common/action.c ****                         send_keyboard_report();
 178:./tmk_core/common/action.c ****                     }
 179:./tmk_core/common/action.c ****                 }
 180:./tmk_core/common/action.c ****             }
 181:./tmk_core/common/action.c ****             break;
 182:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 183:./tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 184:./tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 185:./tmk_core/common/action.c ****             {
 186:./tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 187:./tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 188:./tmk_core/common/action.c ****                 switch (action.layer_tap.code) {
 189:./tmk_core/common/action.c ****     #ifndef NO_ACTION_ONESHOT
 190:./tmk_core/common/action.c ****                     case MODS_ONESHOT:
 191:./tmk_core/common/action.c ****                         // Oneshot modifier
 192:./tmk_core/common/action.c ****                         if (event.pressed) {
 193:./tmk_core/common/action.c ****                             if (tap_count == 0) {
 194:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: 0\n");
 195:./tmk_core/common/action.c ****                                 register_mods(mods);
 196:./tmk_core/common/action.c ****                             } else if (tap_count == 1) {
 197:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 198:./tmk_core/common/action.c ****                                 set_oneshot_mods(mods);
 199:./tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 200:./tmk_core/common/action.c ****                             } else if (tap_count == ONESHOT_TAP_TOGGLE) {
 201:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Toggling oneshot");
 202:./tmk_core/common/action.c ****                                 clear_oneshot_mods();
 203:./tmk_core/common/action.c ****                                 set_oneshot_locked_mods(mods);
 204:./tmk_core/common/action.c ****                                 register_mods(mods);
 205:./tmk_core/common/action.c ****                     #endif
 206:./tmk_core/common/action.c ****                             } else {
 207:./tmk_core/common/action.c ****                                 register_mods(mods);
 208:./tmk_core/common/action.c ****                             }
 209:./tmk_core/common/action.c ****                         } else {
 210:./tmk_core/common/action.c ****                             if (tap_count == 0) {
 211:./tmk_core/common/action.c ****                                 clear_oneshot_mods();
 212:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 213:./tmk_core/common/action.c ****                             } else if (tap_count == 1) {
 214:./tmk_core/common/action.c ****                                 // Retain Oneshot mods
 215:./tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 216:./tmk_core/common/action.c ****                                 if (mods & get_mods()) {
 217:./tmk_core/common/action.c ****                                     clear_oneshot_locked_mods();
 218:./tmk_core/common/action.c ****                                     clear_oneshot_mods();
 219:./tmk_core/common/action.c ****                                     unregister_mods(mods);
 220:./tmk_core/common/action.c ****                                 }
 221:./tmk_core/common/action.c ****                             } else if (tap_count == ONESHOT_TAP_TOGGLE) {
 222:./tmk_core/common/action.c ****                                 // Toggle Oneshot Layer
 223:./tmk_core/common/action.c ****                     #endif
 224:./tmk_core/common/action.c ****                             } else {
 225:./tmk_core/common/action.c ****                                 clear_oneshot_mods();
 226:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 227:./tmk_core/common/action.c ****                             }
 228:./tmk_core/common/action.c ****                         }
 229:./tmk_core/common/action.c ****                         break;
 230:./tmk_core/common/action.c ****     #endif
 231:./tmk_core/common/action.c ****                     case MODS_TAP_TOGGLE:
 232:./tmk_core/common/action.c ****                         if (event.pressed) {
 233:./tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 234:./tmk_core/common/action.c ****                                 register_mods(mods);
 235:./tmk_core/common/action.c ****                             }
 236:./tmk_core/common/action.c ****                         } else {
 237:./tmk_core/common/action.c ****                             if (tap_count < TAPPING_TOGGLE) {
 238:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 239:./tmk_core/common/action.c ****                             }
 240:./tmk_core/common/action.c ****                         }
 241:./tmk_core/common/action.c ****                         break;
 242:./tmk_core/common/action.c ****                     default:
 243:./tmk_core/common/action.c ****                         if (event.pressed) {
 244:./tmk_core/common/action.c ****                             if (tap_count > 0) {
 245:./tmk_core/common/action.c **** #ifndef IGNORE_MOD_TAP_INTERRUPT
 246:./tmk_core/common/action.c ****                                 if (record->tap.interrupted) {
 247:./tmk_core/common/action.c ****                                     dprint("mods_tap: tap: cancel: add_mods\n");
 248:./tmk_core/common/action.c ****                                     // ad hoc: set 0 to cancel tap
 249:./tmk_core/common/action.c ****                                     record->tap.count = 0;
 250:./tmk_core/common/action.c ****                                     register_mods(mods);
 251:./tmk_core/common/action.c ****                                 } else
 252:./tmk_core/common/action.c **** #endif
 253:./tmk_core/common/action.c ****                                 {
 254:./tmk_core/common/action.c ****                                     dprint("MODS_TAP: Tap: register_code\n");
 255:./tmk_core/common/action.c ****                                     register_code(action.key.code);
 256:./tmk_core/common/action.c ****                                 }
 257:./tmk_core/common/action.c ****                             } else {
 258:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 259:./tmk_core/common/action.c ****                                 register_mods(mods);
 260:./tmk_core/common/action.c ****                             }
 261:./tmk_core/common/action.c ****                         } else {
 262:./tmk_core/common/action.c ****                             if (tap_count > 0) {
 263:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 264:./tmk_core/common/action.c ****                                 unregister_code(action.key.code);
 265:./tmk_core/common/action.c ****                             } else {
 266:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 267:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 268:./tmk_core/common/action.c ****                             }
 269:./tmk_core/common/action.c ****                         }
 270:./tmk_core/common/action.c ****                         break;
 271:./tmk_core/common/action.c ****                 }
 272:./tmk_core/common/action.c ****             }
 273:./tmk_core/common/action.c ****             break;
 274:./tmk_core/common/action.c **** #endif
 275:./tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 276:./tmk_core/common/action.c ****         /* other HID usage */
 277:./tmk_core/common/action.c ****         case ACT_USAGE:
 278:./tmk_core/common/action.c ****             switch (action.usage.page) {
 279:./tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 280:./tmk_core/common/action.c ****                     if (event.pressed) {
 281:./tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 282:./tmk_core/common/action.c ****                     } else {
 283:./tmk_core/common/action.c ****                         host_system_send(0);
 284:./tmk_core/common/action.c ****                     }
 285:./tmk_core/common/action.c ****                     break;
 286:./tmk_core/common/action.c ****                 case PAGE_CONSUMER:
 287:./tmk_core/common/action.c ****                     if (event.pressed) {
 288:./tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 289:./tmk_core/common/action.c ****                     } else {
 290:./tmk_core/common/action.c ****                         host_consumer_send(0);
 291:./tmk_core/common/action.c ****                     }
 292:./tmk_core/common/action.c ****                     break;
 293:./tmk_core/common/action.c ****             }
 294:./tmk_core/common/action.c ****             break;
 295:./tmk_core/common/action.c **** #endif
 296:./tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 297:./tmk_core/common/action.c ****         /* Mouse key */
 298:./tmk_core/common/action.c ****         case ACT_MOUSEKEY:
 299:./tmk_core/common/action.c ****             if (event.pressed) {
 300:./tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 301:./tmk_core/common/action.c ****                 mousekey_send();
 302:./tmk_core/common/action.c ****             } else {
 303:./tmk_core/common/action.c ****                 mousekey_off(action.key.code);
 304:./tmk_core/common/action.c ****                 mousekey_send();
 305:./tmk_core/common/action.c ****             }
 306:./tmk_core/common/action.c ****             break;
 307:./tmk_core/common/action.c **** #endif
 308:./tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 309:./tmk_core/common/action.c ****         case ACT_LAYER:
 310:./tmk_core/common/action.c ****             if (action.layer_bitop.on == 0) {
 311:./tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 312:./tmk_core/common/action.c ****                 if (!event.pressed) {
 313:./tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 314:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 315:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 316:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 317:./tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 318:./tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 319:./tmk_core/common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 320:./tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 321:./tmk_core/common/action.c ****                     }
 322:./tmk_core/common/action.c ****                 }
 323:./tmk_core/common/action.c ****             } else {
 324:./tmk_core/common/action.c ****                 /* Layer Bitwise Operation */
 325:./tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 326:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 327:./tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 328:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 329:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 330:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 331:./tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 332:./tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 333:./tmk_core/common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 334:./tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 335:./tmk_core/common/action.c ****                     }
 336:./tmk_core/common/action.c ****                 }
 337:./tmk_core/common/action.c ****             }
 338:./tmk_core/common/action.c ****             break;
 339:./tmk_core/common/action.c ****     #ifndef NO_ACTION_TAPPING
 340:./tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 341:./tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 342:./tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 343:./tmk_core/common/action.c ****                 case 0xe0 ... 0xef:
 344:./tmk_core/common/action.c ****                     /* layer On/Off with modifiers(left only) */
 345:./tmk_core/common/action.c ****                     if (event.pressed) {
 346:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 347:./tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 348:./tmk_core/common/action.c ****                     } else {
 349:./tmk_core/common/action.c ****                         layer_off(action.layer_tap.val);
 350:./tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 351:./tmk_core/common/action.c ****                     }
 352:./tmk_core/common/action.c ****                     break;
 353:./tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 354:./tmk_core/common/action.c ****                     /* tap toggle */
 355:./tmk_core/common/action.c ****                     if (event.pressed) {
 356:./tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 357:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 358:./tmk_core/common/action.c ****                         }
 359:./tmk_core/common/action.c ****                     } else {
 360:./tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 361:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 362:./tmk_core/common/action.c ****                         }
 363:./tmk_core/common/action.c ****                     }
 364:./tmk_core/common/action.c ****                     break;
 365:./tmk_core/common/action.c ****                 case OP_ON_OFF:
 366:./tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 367:./tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 368:./tmk_core/common/action.c ****                     break;
 369:./tmk_core/common/action.c ****                 case OP_OFF_ON:
 370:./tmk_core/common/action.c ****                     event.pressed ? layer_off(action.layer_tap.val) :
 371:./tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 372:./tmk_core/common/action.c ****                     break;
 373:./tmk_core/common/action.c ****                 case OP_SET_CLEAR:
 374:./tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 375:./tmk_core/common/action.c ****                                     layer_clear();
 376:./tmk_core/common/action.c ****                     break;
 377:./tmk_core/common/action.c ****             #ifndef NO_ACTION_ONESHOT
 378:./tmk_core/common/action.c ****                 case OP_ONESHOT:
 379:./tmk_core/common/action.c ****                     // Oneshot modifier
 380:./tmk_core/common/action.c ****                 #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 381:./tmk_core/common/action.c ****                     do_release_oneshot = false;
 382:./tmk_core/common/action.c ****                     if (event.pressed) {
 383:./tmk_core/common/action.c ****                         del_mods(get_oneshot_locked_mods());
 384:./tmk_core/common/action.c ****                         if (get_oneshot_layer_state() == ONESHOT_TOGGLED) {
 385:./tmk_core/common/action.c ****                             reset_oneshot_layer();
 386:./tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 387:./tmk_core/common/action.c ****                             break;
 388:./tmk_core/common/action.c ****                         } else if (tap_count < ONESHOT_TAP_TOGGLE) {
 389:./tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 390:./tmk_core/common/action.c ****                             set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 391:./tmk_core/common/action.c ****                         }
 392:./tmk_core/common/action.c ****                     } else {
 393:./tmk_core/common/action.c ****                         add_mods(get_oneshot_locked_mods());
 394:./tmk_core/common/action.c ****                         if (tap_count >= ONESHOT_TAP_TOGGLE) {
 395:./tmk_core/common/action.c ****                             reset_oneshot_layer();
 396:./tmk_core/common/action.c ****                             clear_oneshot_locked_mods();
 397:./tmk_core/common/action.c ****                             set_oneshot_layer(action.layer_tap.val, ONESHOT_TOGGLED);
 398:./tmk_core/common/action.c ****                         } else {
 399:./tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_PRESSED);
 400:./tmk_core/common/action.c ****                         }
 401:./tmk_core/common/action.c ****                     }
 402:./tmk_core/common/action.c ****                 #else
 403:./tmk_core/common/action.c ****                     if (event.pressed) {
 404:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 405:./tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 406:./tmk_core/common/action.c ****                     } else {
 407:./tmk_core/common/action.c ****                         clear_oneshot_layer_state(ONESHOT_PRESSED);
 408:./tmk_core/common/action.c ****                         if (tap_count > 1) {
 409:./tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 410:./tmk_core/common/action.c ****                         }
 411:./tmk_core/common/action.c ****                     }
 412:./tmk_core/common/action.c ****                 #endif
 413:./tmk_core/common/action.c ****                     break;
 414:./tmk_core/common/action.c ****             #endif
 415:./tmk_core/common/action.c ****                 default:
 416:./tmk_core/common/action.c ****                     /* tap key */
 417:./tmk_core/common/action.c ****                     if (event.pressed) {
 418:./tmk_core/common/action.c ****                         if (tap_count > 0) {
 419:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 420:./tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 421:./tmk_core/common/action.c ****                         } else {
 422:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
 423:./tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 424:./tmk_core/common/action.c ****                         }
 425:./tmk_core/common/action.c ****                     } else {
 426:./tmk_core/common/action.c ****                         if (tap_count > 0) {
 427:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 428:./tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 429:./tmk_core/common/action.c ****                         } else {
 430:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: Off on release\n");
 431:./tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 432:./tmk_core/common/action.c ****                         }
 433:./tmk_core/common/action.c ****                     }
 434:./tmk_core/common/action.c ****                     break;
 435:./tmk_core/common/action.c ****             }
 436:./tmk_core/common/action.c ****             break;
 437:./tmk_core/common/action.c ****     #endif
 438:./tmk_core/common/action.c **** #endif
 439:./tmk_core/common/action.c ****         /* Extentions */
 440:./tmk_core/common/action.c **** #ifndef NO_ACTION_MACRO
 441:./tmk_core/common/action.c ****         case ACT_MACRO:
 442:./tmk_core/common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 443:./tmk_core/common/action.c ****             break;
 444:./tmk_core/common/action.c **** #endif
 445:./tmk_core/common/action.c **** #ifdef BACKLIGHT_ENABLE
 446:./tmk_core/common/action.c ****         case ACT_BACKLIGHT:
 447:./tmk_core/common/action.c ****             if (!event.pressed) {
 448:./tmk_core/common/action.c ****                 switch (action.backlight.opt) {
 449:./tmk_core/common/action.c ****                     case BACKLIGHT_INCREASE:
 450:./tmk_core/common/action.c ****                         backlight_increase();
 451:./tmk_core/common/action.c ****                         break;
 452:./tmk_core/common/action.c ****                     case BACKLIGHT_DECREASE:
 453:./tmk_core/common/action.c ****                         backlight_decrease();
 454:./tmk_core/common/action.c ****                         break;
 455:./tmk_core/common/action.c ****                     case BACKLIGHT_TOGGLE:
 456:./tmk_core/common/action.c ****                         backlight_toggle();
 457:./tmk_core/common/action.c ****                         break;
 458:./tmk_core/common/action.c ****                     case BACKLIGHT_STEP:
 459:./tmk_core/common/action.c ****                         backlight_step();
 460:./tmk_core/common/action.c ****                         break;
 461:./tmk_core/common/action.c ****                     case BACKLIGHT_LEVEL:
 462:./tmk_core/common/action.c ****                         backlight_level(action.backlight.level);
 463:./tmk_core/common/action.c ****                         break;
 464:./tmk_core/common/action.c ****                 }
 465:./tmk_core/common/action.c ****             }
 466:./tmk_core/common/action.c ****             break;
 467:./tmk_core/common/action.c **** #endif
 468:./tmk_core/common/action.c ****         case ACT_COMMAND:
 469:./tmk_core/common/action.c ****             break;
 470:./tmk_core/common/action.c **** #ifdef ONEHAND_ENABLE
 471:./tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 472:./tmk_core/common/action.c ****             switch (action.swap.code) {
 473:./tmk_core/common/action.c ****                 case OP_SH_TOGGLE:
 474:./tmk_core/common/action.c ****                     if (event.pressed) {
 475:./tmk_core/common/action.c ****                         swap_hands = !swap_hands;
 476:./tmk_core/common/action.c ****                     }
 477:./tmk_core/common/action.c ****                     break;
 478:./tmk_core/common/action.c ****                 case OP_SH_ON_OFF:
 479:./tmk_core/common/action.c ****                     swap_hands = event.pressed;
 480:./tmk_core/common/action.c ****                     break;
 481:./tmk_core/common/action.c ****                 case OP_SH_OFF_ON:
 482:./tmk_core/common/action.c ****                     swap_hands = !event.pressed;
 483:./tmk_core/common/action.c ****                     break;
 484:./tmk_core/common/action.c ****                 case OP_SH_ON:
 485:./tmk_core/common/action.c ****                     if (!event.pressed) {
 486:./tmk_core/common/action.c ****                         swap_hands = true;
 487:./tmk_core/common/action.c ****                     }
 488:./tmk_core/common/action.c ****                     break;
 489:./tmk_core/common/action.c ****                 case OP_SH_OFF:
 490:./tmk_core/common/action.c ****                     if (!event.pressed) {
 491:./tmk_core/common/action.c ****                         swap_hands = false;
 492:./tmk_core/common/action.c ****                     }
 493:./tmk_core/common/action.c ****                     break;
 494:./tmk_core/common/action.c ****     #ifndef NO_ACTION_TAPPING
 495:./tmk_core/common/action.c ****                 case OP_SH_TAP_TOGGLE:
 496:./tmk_core/common/action.c ****                     /* tap toggle */
 497:./tmk_core/common/action.c ****                     if (tap_count > 0) {
 498:./tmk_core/common/action.c ****                         if (!event.pressed) {
 499:./tmk_core/common/action.c ****                             swap_hands = !swap_hands;
 500:./tmk_core/common/action.c ****                         }
 501:./tmk_core/common/action.c ****                     } else {
 502:./tmk_core/common/action.c ****                         swap_hands = event.pressed;
 503:./tmk_core/common/action.c ****                     }
 504:./tmk_core/common/action.c ****                     break;
 505:./tmk_core/common/action.c ****                 default:
 506:./tmk_core/common/action.c ****                     if (tap_count > 0) {
 507:./tmk_core/common/action.c ****                         if (event.pressed) {
 508:./tmk_core/common/action.c ****                             register_code(action.swap.code);
 509:./tmk_core/common/action.c ****                         } else {
 510:./tmk_core/common/action.c ****                             unregister_code(action.swap.code);
 511:./tmk_core/common/action.c ****                         }
 512:./tmk_core/common/action.c ****                     } else {
 513:./tmk_core/common/action.c ****                         swap_hands = event.pressed;
 514:./tmk_core/common/action.c ****                     }
 515:./tmk_core/common/action.c ****     #endif
 516:./tmk_core/common/action.c ****             }
 517:./tmk_core/common/action.c **** #endif
 518:./tmk_core/common/action.c **** #ifndef NO_ACTION_FUNCTION
 519:./tmk_core/common/action.c ****         case ACT_FUNCTION:
 520:./tmk_core/common/action.c ****             action_function(record, action.func.id, action.func.opt);
 521:./tmk_core/common/action.c ****             break;
 522:./tmk_core/common/action.c **** #endif
 523:./tmk_core/common/action.c ****         default:
 524:./tmk_core/common/action.c ****             break;
 525:./tmk_core/common/action.c ****     }
 526:./tmk_core/common/action.c **** 
 527:./tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 528:./tmk_core/common/action.c ****     /* Because we switch layers after a oneshot event, we need to release the
 529:./tmk_core/common/action.c ****      * key before we leave the layer or no key up event will be generated.
 530:./tmk_core/common/action.c ****      */
 531:./tmk_core/common/action.c ****     if (do_release_oneshot && !(get_oneshot_layer_state() & ONESHOT_PRESSED )   ) {
 532:./tmk_core/common/action.c ****         record->event.pressed = false;
 533:./tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 534:./tmk_core/common/action.c ****         process_record(record);
 535:./tmk_core/common/action.c ****         layer_off(get_oneshot_layer());
 536:./tmk_core/common/action.c ****     }
 537:./tmk_core/common/action.c **** #endif
 538:./tmk_core/common/action.c **** }
 539:./tmk_core/common/action.c **** 
 540:./tmk_core/common/action.c **** 
 541:./tmk_core/common/action.c **** 
 542:./tmk_core/common/action.c **** 
 543:./tmk_core/common/action.c **** /*
 544:./tmk_core/common/action.c ****  * Utilities for actions.
 545:./tmk_core/common/action.c ****  */
 546:./tmk_core/common/action.c **** void register_code(uint8_t code)
 547:./tmk_core/common/action.c **** {
 256               		.loc 1 547 1 is_stmt 1 view -0
 257               		.cfi_startproc
 258               		.loc 1 547 1 is_stmt 0 view .LVU41
 259 0000 CF93      		push r28
 260               	.LCFI6:
 261               		.cfi_def_cfa_offset 3
 262               		.cfi_offset 28, -2
 263               	/* prologue: function */
 264               	/* frame size = 0 */
 265               	/* stack size = 1 */
 266               	.L__stack_usage = 1
 267 0002 C82F      		mov r28,r24
 548:./tmk_core/common/action.c ****     if (code == KC_NO) {
 268               		.loc 1 548 5 is_stmt 1 view .LVU42
 269               		.loc 1 548 8 is_stmt 0 view .LVU43
 270 0004 8823      		tst r24
 271 0006 01F4      		brne .+2
 272 0008 00C0      		rjmp .L21
 549:./tmk_core/common/action.c ****         return;
 550:./tmk_core/common/action.c ****     }
 551:./tmk_core/common/action.c **** 
 552:./tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 553:./tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 273               		.loc 1 553 10 is_stmt 1 view .LVU44
 274               		.loc 1 553 13 is_stmt 0 view .LVU45
 275 000a 8238      		cpi r24,lo8(-126)
 276 000c 01F4      		brne .L24
 554:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 555:./tmk_core/common/action.c ****         // Resync: ignore if caps lock already is on
 556:./tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
 277               		.loc 1 556 9 is_stmt 1 view .LVU46
 278               		.loc 1 556 13 is_stmt 0 view .LVU47
 279 000e 0E94 0000 		call host_keyboard_leds
 280               	.LVL16:
 281               		.loc 1 556 12 view .LVU48
 282 0012 81FD      		sbrc r24,1
 283 0014 00C0      		rjmp .L21
 557:./tmk_core/common/action.c **** #endif
 558:./tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 284               		.loc 1 558 9 is_stmt 1 view .LVU49
 285 0016 89E3      		ldi r24,lo8(57)
 286 0018 0E94 0000 		call add_key
 287               	.LVL17:
 559:./tmk_core/common/action.c ****         send_keyboard_report();
 288               		.loc 1 559 9 view .LVU50
 289 001c 0E94 0000 		call send_keyboard_report
 290               	.LVL18:
 560:./tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 291               		.loc 1 560 9 view .LVU51
 292 0020 89E3      		ldi r24,lo8(57)
 293               	.L56:
 561:./tmk_core/common/action.c ****         send_keyboard_report();
 562:./tmk_core/common/action.c ****     }
 563:./tmk_core/common/action.c **** 
 564:./tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 565:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 566:./tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
 567:./tmk_core/common/action.c **** #endif
 568:./tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 569:./tmk_core/common/action.c ****         send_keyboard_report();
 570:./tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 294               		.loc 1 570 9 is_stmt 0 view .LVU52
 295 0022 0E94 0000 		call del_key
 296               	.LVL19:
 297               	.L57:
 571:./tmk_core/common/action.c ****         send_keyboard_report();
 298               		.loc 1 571 9 is_stmt 1 view .LVU53
 299               	/* epilogue start */
 572:./tmk_core/common/action.c ****     }
 573:./tmk_core/common/action.c **** 
 574:./tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 575:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 576:./tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
 577:./tmk_core/common/action.c **** #endif
 578:./tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 579:./tmk_core/common/action.c ****         send_keyboard_report();
 580:./tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 581:./tmk_core/common/action.c ****         send_keyboard_report();
 582:./tmk_core/common/action.c ****     }
 583:./tmk_core/common/action.c **** #endif
 584:./tmk_core/common/action.c **** 
 585:./tmk_core/common/action.c ****     else if IS_KEY(code) {
 586:./tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 587:./tmk_core/common/action.c ****         if (command_proc(code)) return;
 588:./tmk_core/common/action.c **** 
 589:./tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 590:./tmk_core/common/action.c **** /* TODO: remove
 591:./tmk_core/common/action.c ****         if (oneshot_state.mods && !oneshot_state.disabled) {
 592:./tmk_core/common/action.c ****             uint8_t tmp_mods = get_mods();
 593:./tmk_core/common/action.c ****             add_mods(oneshot_state.mods);
 594:./tmk_core/common/action.c **** 
 595:./tmk_core/common/action.c ****             add_key(code);
 596:./tmk_core/common/action.c ****             send_keyboard_report();
 597:./tmk_core/common/action.c **** 
 598:./tmk_core/common/action.c ****             set_mods(tmp_mods);
 599:./tmk_core/common/action.c ****             send_keyboard_report();
 600:./tmk_core/common/action.c ****             oneshot_cancel();
 601:./tmk_core/common/action.c ****         } else
 602:./tmk_core/common/action.c **** */
 603:./tmk_core/common/action.c **** #endif
 604:./tmk_core/common/action.c ****         {
 605:./tmk_core/common/action.c ****             add_key(code);
 606:./tmk_core/common/action.c ****             send_keyboard_report();
 607:./tmk_core/common/action.c ****         }
 608:./tmk_core/common/action.c ****     }
 609:./tmk_core/common/action.c ****     else if IS_MOD(code) {
 610:./tmk_core/common/action.c ****         add_mods(MOD_BIT(code));
 611:./tmk_core/common/action.c ****         send_keyboard_report();
 612:./tmk_core/common/action.c ****     }
 613:./tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 614:./tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 615:./tmk_core/common/action.c ****     }
 616:./tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 617:./tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 618:./tmk_core/common/action.c ****     }
 619:./tmk_core/common/action.c **** }
 300               		.loc 1 619 1 is_stmt 0 view .LVU54
 301 0026 CF91      		pop r28
 571:./tmk_core/common/action.c ****         send_keyboard_report();
 302               		.loc 1 571 9 view .LVU55
 303 0028 0C94 0000 		jmp send_keyboard_report
 304               	.LVL20:
 305               	.L24:
 564:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 306               		.loc 1 564 10 is_stmt 1 view .LVU56
 564:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 307               		.loc 1 564 13 is_stmt 0 view .LVU57
 308 002c 8338      		cpi r24,lo8(-125)
 309 002e 01F4      		brne .L26
 566:./tmk_core/common/action.c **** #endif
 310               		.loc 1 566 9 is_stmt 1 view .LVU58
 566:./tmk_core/common/action.c **** #endif
 311               		.loc 1 566 13 is_stmt 0 view .LVU59
 312 0030 0E94 0000 		call host_keyboard_leds
 313               	.LVL21:
 566:./tmk_core/common/action.c **** #endif
 314               		.loc 1 566 12 view .LVU60
 315 0034 80FD      		sbrc r24,0
 316 0036 00C0      		rjmp .L21
 568:./tmk_core/common/action.c ****         send_keyboard_report();
 317               		.loc 1 568 9 is_stmt 1 view .LVU61
 318 0038 83E5      		ldi r24,lo8(83)
 319 003a 0E94 0000 		call add_key
 320               	.LVL22:
 569:./tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 321               		.loc 1 569 9 view .LVU62
 322 003e 0E94 0000 		call send_keyboard_report
 323               	.LVL23:
 570:./tmk_core/common/action.c ****         send_keyboard_report();
 324               		.loc 1 570 9 view .LVU63
 325 0042 83E5      		ldi r24,lo8(83)
 326 0044 00C0      		rjmp .L56
 327               	.LVL24:
 328               	.L26:
 574:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 329               		.loc 1 574 10 view .LVU64
 574:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 330               		.loc 1 574 13 is_stmt 0 view .LVU65
 331 0046 8438      		cpi r24,lo8(-124)
 332 0048 01F4      		brne .L27
 576:./tmk_core/common/action.c **** #endif
 333               		.loc 1 576 9 is_stmt 1 view .LVU66
 576:./tmk_core/common/action.c **** #endif
 334               		.loc 1 576 13 is_stmt 0 view .LVU67
 335 004a 0E94 0000 		call host_keyboard_leds
 336               	.LVL25:
 576:./tmk_core/common/action.c **** #endif
 337               		.loc 1 576 12 view .LVU68
 338 004e 82FD      		sbrc r24,2
 339 0050 00C0      		rjmp .L21
 578:./tmk_core/common/action.c ****         send_keyboard_report();
 340               		.loc 1 578 9 is_stmt 1 view .LVU69
 341 0052 87E4      		ldi r24,lo8(71)
 342 0054 0E94 0000 		call add_key
 343               	.LVL26:
 579:./tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 344               		.loc 1 579 9 view .LVU70
 345 0058 0E94 0000 		call send_keyboard_report
 346               	.LVL27:
 580:./tmk_core/common/action.c ****         send_keyboard_report();
 347               		.loc 1 580 9 view .LVU71
 348 005c 87E4      		ldi r24,lo8(71)
 349 005e 00C0      		rjmp .L56
 350               	.LVL28:
 351               	.L27:
 585:./tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 352               		.loc 1 585 10 view .LVU72
 585:./tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 353               		.loc 1 585 13 is_stmt 0 view .LVU73
 354 0060 8CEF      		ldi r24,lo8(-4)
 355               	.LVL29:
 585:./tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 356               		.loc 1 585 13 view .LVU74
 357 0062 8C0F      		add r24,r28
 358 0064 813A      		cpi r24,lo8(-95)
 359 0066 00F4      		brsh .L28
 587:./tmk_core/common/action.c **** 
 360               		.loc 1 587 9 is_stmt 1 view .LVU75
 587:./tmk_core/common/action.c **** 
 361               		.loc 1 587 13 is_stmt 0 view .LVU76
 362 0068 8C2F      		mov r24,r28
 363 006a 0E94 0000 		call command_proc
 364               	.LVL30:
 587:./tmk_core/common/action.c **** 
 365               		.loc 1 587 12 view .LVU77
 366 006e 8111      		cpse r24,__zero_reg__
 367 0070 00C0      		rjmp .L21
 605:./tmk_core/common/action.c ****             send_keyboard_report();
 368               		.loc 1 605 13 is_stmt 1 view .LVU78
 369 0072 8C2F      		mov r24,r28
 370 0074 0E94 0000 		call add_key
 371               	.LVL31:
 606:./tmk_core/common/action.c ****         }
 372               		.loc 1 606 13 view .LVU79
 373 0078 00C0      		rjmp .L57
 374               	.L28:
 609:./tmk_core/common/action.c ****         add_mods(MOD_BIT(code));
 375               		.loc 1 609 10 view .LVU80
 609:./tmk_core/common/action.c ****         add_mods(MOD_BIT(code));
 376               		.loc 1 609 13 is_stmt 0 view .LVU81
 377 007a 80E2      		ldi r24,lo8(32)
 378 007c 8C0F      		add r24,r28
 379 007e 8830      		cpi r24,lo8(8)
 380 0080 00F4      		brsh .L29
 610:./tmk_core/common/action.c ****         send_keyboard_report();
 381               		.loc 1 610 9 is_stmt 1 view .LVU82
 610:./tmk_core/common/action.c ****         send_keyboard_report();
 382               		.loc 1 610 18 is_stmt 0 view .LVU83
 383 0082 C770      		andi r28,lo8(7)
 384               	.LVL32:
 610:./tmk_core/common/action.c ****         send_keyboard_report();
 385               		.loc 1 610 9 view .LVU84
 386 0084 81E0      		ldi r24,lo8(1)
 387 0086 00C0      		rjmp 2f
 388               		1:
 389 0088 880F      		lsl r24
 390               		2:
 391 008a CA95      		dec r28
 392 008c 02F4      		brpl 1b
 393 008e 0E94 0000 		call add_mods
 394               	.LVL33:
 611:./tmk_core/common/action.c ****     }
 395               		.loc 1 611 9 is_stmt 1 view .LVU85
 396 0092 00C0      		rjmp .L57
 397               	.LVL34:
 398               	.L29:
 613:./tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 399               		.loc 1 613 10 view .LVU86
 613:./tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 400               		.loc 1 613 13 is_stmt 0 view .LVU87
 401 0094 8BE5      		ldi r24,lo8(91)
 402 0096 8C0F      		add r24,r28
 403 0098 8330      		cpi r24,lo8(3)
 404 009a 00F4      		brsh .L30
 614:./tmk_core/common/action.c ****     }
 405               		.loc 1 614 9 is_stmt 1 view .LVU88
 406 009c 81E8      		ldi r24,lo8(-127)
 407 009e 90E0      		ldi r25,0
 408 00a0 C53A      		cpi r28,lo8(-91)
 409 00a2 01F0      		breq .L31
 614:./tmk_core/common/action.c ****     }
 410               		.loc 1 614 26 is_stmt 0 discriminator 1 view .LVU89
 411 00a4 83E8      		ldi r24,lo8(-125)
 412 00a6 90E0      		ldi r25,0
 413 00a8 C63A      		cpi r28,lo8(-90)
 414 00aa 01F4      		brne .L31
 614:./tmk_core/common/action.c ****     }
 415               		.loc 1 614 26 view .LVU90
 416 00ac 82E8      		ldi r24,lo8(-126)
 417 00ae 90E0      		ldi r25,0
 418               	.L31:
 419               	/* epilogue start */
 420               		.loc 1 619 1 discriminator 12 view .LVU91
 421 00b0 CF91      		pop r28
 422               	.LVL35:
 614:./tmk_core/common/action.c ****     }
 423               		.loc 1 614 9 discriminator 12 view .LVU92
 424 00b2 0C94 0000 		jmp host_system_send
 425               	.LVL36:
 426               	.L30:
 616:./tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 427               		.loc 1 616 10 is_stmt 1 view .LVU93
 616:./tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 428               		.loc 1 616 13 is_stmt 0 view .LVU94
 429 00b6 88E5      		ldi r24,lo8(88)
 430 00b8 8C0F      		add r24,r28
 431 00ba 8531      		cpi r24,lo8(21)
 432 00bc 00F0      		brlo .+2
 433 00be 00C0      		rjmp .L21
 617:./tmk_core/common/action.c ****     }
 434               		.loc 1 617 9 is_stmt 1 view .LVU95
 435 00c0 82EE      		ldi r24,lo8(-30)
 436 00c2 90E0      		ldi r25,0
 437 00c4 C83A      		cpi r28,lo8(-88)
 438 00c6 01F4      		brne .+2
 439 00c8 00C0      		rjmp .L32
 617:./tmk_core/common/action.c ****     }
 440               		.loc 1 617 28 is_stmt 0 discriminator 1 view .LVU96
 441 00ca 89EE      		ldi r24,lo8(-23)
 442 00cc 90E0      		ldi r25,0
 443 00ce C93A      		cpi r28,lo8(-87)
 444 00d0 01F4      		brne .+2
 445 00d2 00C0      		rjmp .L32
 617:./tmk_core/common/action.c ****     }
 446               		.loc 1 617 28 discriminator 3 view .LVU97
 447 00d4 8AEE      		ldi r24,lo8(-22)
 448 00d6 90E0      		ldi r25,0
 449 00d8 CA3A      		cpi r28,lo8(-86)
 450 00da 01F4      		brne .+2
 451 00dc 00C0      		rjmp .L32
 617:./tmk_core/common/action.c ****     }
 452               		.loc 1 617 28 discriminator 5 view .LVU98
 453 00de 85EB      		ldi r24,lo8(-75)
 454 00e0 90E0      		ldi r25,0
 455 00e2 CB3A      		cpi r28,lo8(-85)
 456 00e4 01F4      		brne .+2
 457 00e6 00C0      		rjmp .L32
 617:./tmk_core/common/action.c ****     }
 458               		.loc 1 617 28 discriminator 7 view .LVU99
 459 00e8 86EB      		ldi r24,lo8(-74)
 460 00ea 90E0      		ldi r25,0
 461 00ec CC3A      		cpi r28,lo8(-84)
 462 00ee 01F4      		brne .+2
 463 00f0 00C0      		rjmp .L32
 617:./tmk_core/common/action.c ****     }
 464               		.loc 1 617 28 discriminator 9 view .LVU100
 465 00f2 83EB      		ldi r24,lo8(-77)
 466 00f4 90E0      		ldi r25,0
 467 00f6 CB3B      		cpi r28,lo8(-69)
 468 00f8 01F0      		breq .L32
 617:./tmk_core/common/action.c ****     }
 469               		.loc 1 617 28 discriminator 11 view .LVU101
 470 00fa 84EB      		ldi r24,lo8(-76)
 471 00fc 90E0      		ldi r25,0
 472 00fe CC3B      		cpi r28,lo8(-68)
 473 0100 01F0      		breq .L32
 617:./tmk_core/common/action.c ****     }
 474               		.loc 1 617 28 discriminator 13 view .LVU102
 475 0102 87EB      		ldi r24,lo8(-73)
 476 0104 90E0      		ldi r25,0
 477 0106 CD3A      		cpi r28,lo8(-83)
 478 0108 01F0      		breq .L32
 617:./tmk_core/common/action.c ****     }
 479               		.loc 1 617 28 discriminator 15 view .LVU103
 480 010a 8CEC      		ldi r24,lo8(-52)
 481 010c 90E0      		ldi r25,0
 482 010e C03B      		cpi r28,lo8(-80)
 483 0110 01F0      		breq .L32
 617:./tmk_core/common/action.c ****     }
 484               		.loc 1 617 28 discriminator 17 view .LVU104
 485 0112 8DEC      		ldi r24,lo8(-51)
 486 0114 90E0      		ldi r25,0
 487 0116 CE3A      		cpi r28,lo8(-82)
 488 0118 01F0      		breq .L32
 617:./tmk_core/common/action.c ****     }
 489               		.loc 1 617 28 discriminator 19 view .LVU105
 490 011a 83E8      		ldi r24,lo8(-125)
 491 011c 91E0      		ldi r25,lo8(1)
 492 011e CF3A      		cpi r28,lo8(-81)
 493 0120 01F0      		breq .L32
 617:./tmk_core/common/action.c ****     }
 494               		.loc 1 617 28 discriminator 21 view .LVU106
 495 0122 8AE8      		ldi r24,lo8(-118)
 496 0124 91E0      		ldi r25,lo8(1)
 497 0126 C13B      		cpi r28,lo8(-79)
 498 0128 01F0      		breq .L32
 617:./tmk_core/common/action.c ****     }
 499               		.loc 1 617 28 discriminator 23 view .LVU107
 500 012a 82E9      		ldi r24,lo8(-110)
 501 012c 91E0      		ldi r25,lo8(1)
 502 012e C23B      		cpi r28,lo8(-78)
 503 0130 01F0      		breq .L32
 617:./tmk_core/common/action.c ****     }
 504               		.loc 1 617 28 discriminator 25 view .LVU108
 505 0132 84E9      		ldi r24,lo8(-108)
 506 0134 91E0      		ldi r25,lo8(1)
 507 0136 C33B      		cpi r28,lo8(-77)
 508 0138 01F0      		breq .L32
 617:./tmk_core/common/action.c ****     }
 509               		.loc 1 617 28 discriminator 27 view .LVU109
 510 013a 81E2      		ldi r24,lo8(33)
 511 013c 92E0      		ldi r25,lo8(2)
 512 013e C43B      		cpi r28,lo8(-76)
 513 0140 01F0      		breq .L32
 617:./tmk_core/common/action.c ****     }
 514               		.loc 1 617 28 discriminator 29 view .LVU110
 515 0142 83E2      		ldi r24,lo8(35)
 516 0144 92E0      		ldi r25,lo8(2)
 517 0146 C53B      		cpi r28,lo8(-75)
 518 0148 01F0      		breq .L32
 617:./tmk_core/common/action.c ****     }
 519               		.loc 1 617 28 discriminator 31 view .LVU111
 520 014a 84E2      		ldi r24,lo8(36)
 521 014c 92E0      		ldi r25,lo8(2)
 522 014e C63B      		cpi r28,lo8(-74)
 523 0150 01F0      		breq .L32
 617:./tmk_core/common/action.c ****     }
 524               		.loc 1 617 28 discriminator 33 view .LVU112
 525 0152 85E2      		ldi r24,lo8(37)
 526 0154 92E0      		ldi r25,lo8(2)
 527 0156 C73B      		cpi r28,lo8(-73)
 528 0158 01F0      		breq .L32
 617:./tmk_core/common/action.c ****     }
 529               		.loc 1 617 28 discriminator 35 view .LVU113
 530 015a 86E2      		ldi r24,lo8(38)
 531 015c 92E0      		ldi r25,lo8(2)
 532 015e C83B      		cpi r28,lo8(-72)
 533 0160 01F0      		breq .L32
 617:./tmk_core/common/action.c ****     }
 534               		.loc 1 617 28 discriminator 37 view .LVU114
 535 0162 87E2      		ldi r24,lo8(39)
 536 0164 92E0      		ldi r25,lo8(2)
 537 0166 C93B      		cpi r28,lo8(-71)
 538 0168 01F0      		breq .L32
 617:./tmk_core/common/action.c ****     }
 539               		.loc 1 617 28 discriminator 39 view .LVU115
 540 016a 90E0      		ldi r25,0
 541 016c 80E0      		ldi r24,0
 542 016e CA3B      		cpi r28,lo8(-70)
 543 0170 01F4      		brne .L32
 617:./tmk_core/common/action.c ****     }
 544               		.loc 1 617 28 view .LVU116
 545 0172 8AE2      		ldi r24,lo8(42)
 546 0174 92E0      		ldi r25,lo8(2)
 547               	.L32:
 548               	/* epilogue start */
 549               		.loc 1 619 1 discriminator 84 view .LVU117
 550 0176 CF91      		pop r28
 551               	.LVL37:
 617:./tmk_core/common/action.c ****     }
 552               		.loc 1 617 9 discriminator 84 view .LVU118
 553 0178 0C94 0000 		jmp host_consumer_send
 554               	.LVL38:
 555               	.L21:
 556               	/* epilogue start */
 557               		.loc 1 619 1 view .LVU119
 558 017c CF91      		pop r28
 559               	.LVL39:
 560               		.loc 1 619 1 view .LVU120
 561 017e 0895      		ret
 562               		.cfi_endproc
 563               	.LFE109:
 565               		.section	.text.unregister_code,"ax",@progbits
 566               	.global	unregister_code
 568               	unregister_code:
 569               	.LVL40:
 570               	.LFB110:
 620:./tmk_core/common/action.c **** 
 621:./tmk_core/common/action.c **** void unregister_code(uint8_t code)
 622:./tmk_core/common/action.c **** {
 571               		.loc 1 622 1 is_stmt 1 view -0
 572               		.cfi_startproc
 573               	/* prologue: function */
 574               	/* frame size = 0 */
 575               	/* stack size = 0 */
 576               	.L__stack_usage = 0
 623:./tmk_core/common/action.c ****     if (code == KC_NO) {
 577               		.loc 1 623 5 view .LVU122
 578               		.loc 1 623 8 is_stmt 0 view .LVU123
 579 0000 8823      		tst r24
 580 0002 01F4      		brne .+2
 581 0004 00C0      		rjmp .L58
 624:./tmk_core/common/action.c ****         return;
 625:./tmk_core/common/action.c ****     }
 626:./tmk_core/common/action.c **** 
 627:./tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 628:./tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 582               		.loc 1 628 10 is_stmt 1 view .LVU124
 583               		.loc 1 628 13 is_stmt 0 view .LVU125
 584 0006 8238      		cpi r24,lo8(-126)
 585 0008 01F4      		brne .L61
 629:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 630:./tmk_core/common/action.c ****         // Resync: ignore if caps lock already is off
 631:./tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
 586               		.loc 1 631 9 is_stmt 1 view .LVU126
 587               		.loc 1 631 15 is_stmt 0 view .LVU127
 588 000a 0E94 0000 		call host_keyboard_leds
 589               	.LVL41:
 590               		.loc 1 631 12 view .LVU128
 591 000e 81FF      		sbrs r24,1
 592 0010 00C0      		rjmp .L58
 632:./tmk_core/common/action.c **** #endif
 633:./tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 593               		.loc 1 633 9 is_stmt 1 view .LVU129
 594 0012 89E3      		ldi r24,lo8(57)
 595 0014 0E94 0000 		call add_key
 596               	.LVL42:
 634:./tmk_core/common/action.c ****         send_keyboard_report();
 597               		.loc 1 634 9 view .LVU130
 598 0018 0E94 0000 		call send_keyboard_report
 599               	.LVL43:
 635:./tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 600               		.loc 1 635 9 view .LVU131
 601 001c 89E3      		ldi r24,lo8(57)
 602               	.L77:
 636:./tmk_core/common/action.c ****         send_keyboard_report();
 637:./tmk_core/common/action.c ****     }
 638:./tmk_core/common/action.c **** 
 639:./tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 640:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 641:./tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
 642:./tmk_core/common/action.c **** #endif
 643:./tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 644:./tmk_core/common/action.c ****         send_keyboard_report();
 645:./tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 603               		.loc 1 645 9 is_stmt 0 view .LVU132
 604 001e 0E94 0000 		call del_key
 605               	.LVL44:
 606               	.L78:
 646:./tmk_core/common/action.c ****         send_keyboard_report();
 607               		.loc 1 646 9 is_stmt 1 view .LVU133
 608 0022 0C94 0000 		jmp send_keyboard_report
 609               	.LVL45:
 610               	.L61:
 639:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 611               		.loc 1 639 10 view .LVU134
 639:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 612               		.loc 1 639 13 is_stmt 0 view .LVU135
 613 0026 8338      		cpi r24,lo8(-125)
 614 0028 01F4      		brne .L63
 641:./tmk_core/common/action.c **** #endif
 615               		.loc 1 641 9 is_stmt 1 view .LVU136
 641:./tmk_core/common/action.c **** #endif
 616               		.loc 1 641 15 is_stmt 0 view .LVU137
 617 002a 0E94 0000 		call host_keyboard_leds
 618               	.LVL46:
 641:./tmk_core/common/action.c **** #endif
 619               		.loc 1 641 12 view .LVU138
 620 002e 80FF      		sbrs r24,0
 621 0030 00C0      		rjmp .L58
 643:./tmk_core/common/action.c ****         send_keyboard_report();
 622               		.loc 1 643 9 is_stmt 1 view .LVU139
 623 0032 83E5      		ldi r24,lo8(83)
 624 0034 0E94 0000 		call add_key
 625               	.LVL47:
 644:./tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 626               		.loc 1 644 9 view .LVU140
 627 0038 0E94 0000 		call send_keyboard_report
 628               	.LVL48:
 645:./tmk_core/common/action.c ****         send_keyboard_report();
 629               		.loc 1 645 9 view .LVU141
 630 003c 83E5      		ldi r24,lo8(83)
 631 003e 00C0      		rjmp .L77
 632               	.LVL49:
 633               	.L63:
 647:./tmk_core/common/action.c ****     }
 648:./tmk_core/common/action.c **** 
 649:./tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 634               		.loc 1 649 10 view .LVU142
 635               		.loc 1 649 13 is_stmt 0 view .LVU143
 636 0040 8438      		cpi r24,lo8(-124)
 637 0042 01F4      		brne .L64
 650:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 651:./tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
 638               		.loc 1 651 9 is_stmt 1 view .LVU144
 639               		.loc 1 651 15 is_stmt 0 view .LVU145
 640 0044 0E94 0000 		call host_keyboard_leds
 641               	.LVL50:
 642               		.loc 1 651 12 view .LVU146
 643 0048 82FF      		sbrs r24,2
 644 004a 00C0      		rjmp .L58
 652:./tmk_core/common/action.c **** #endif
 653:./tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 645               		.loc 1 653 9 is_stmt 1 view .LVU147
 646 004c 87E4      		ldi r24,lo8(71)
 647 004e 0E94 0000 		call add_key
 648               	.LVL51:
 654:./tmk_core/common/action.c ****         send_keyboard_report();
 649               		.loc 1 654 9 view .LVU148
 650 0052 0E94 0000 		call send_keyboard_report
 651               	.LVL52:
 655:./tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 652               		.loc 1 655 9 view .LVU149
 653 0056 87E4      		ldi r24,lo8(71)
 654 0058 00C0      		rjmp .L77
 655               	.LVL53:
 656               	.L64:
 656:./tmk_core/common/action.c ****         send_keyboard_report();
 657:./tmk_core/common/action.c ****     }
 658:./tmk_core/common/action.c **** #endif
 659:./tmk_core/common/action.c **** 
 660:./tmk_core/common/action.c ****     else if IS_KEY(code) {
 657               		.loc 1 660 10 view .LVU150
 658               		.loc 1 660 13 is_stmt 0 view .LVU151
 659 005a 9CEF      		ldi r25,lo8(-4)
 660 005c 980F      		add r25,r24
 661 005e 913A      		cpi r25,lo8(-95)
 662 0060 00F0      		brlo .L77
 661:./tmk_core/common/action.c ****         del_key(code);
 662:./tmk_core/common/action.c ****         send_keyboard_report();
 663:./tmk_core/common/action.c ****     }
 664:./tmk_core/common/action.c ****     else if IS_MOD(code) {
 663               		.loc 1 664 10 is_stmt 1 view .LVU152
 664               		.loc 1 664 13 is_stmt 0 view .LVU153
 665 0062 90E2      		ldi r25,lo8(32)
 666 0064 980F      		add r25,r24
 667 0066 9830      		cpi r25,lo8(8)
 668 0068 00F4      		brsh .L66
 665:./tmk_core/common/action.c ****         del_mods(MOD_BIT(code));
 669               		.loc 1 665 9 is_stmt 1 view .LVU154
 670               		.loc 1 665 18 is_stmt 0 view .LVU155
 671 006a 8770      		andi r24,lo8(7)
 672               	.LVL54:
 673               		.loc 1 665 9 view .LVU156
 674 006c 91E0      		ldi r25,lo8(1)
 675 006e 00C0      		rjmp 2f
 676               		1:
 677 0070 990F      		lsl r25
 678               		2:
 679 0072 8A95      		dec r24
 680 0074 02F4      		brpl 1b
 681 0076 892F      		mov r24,r25
 682 0078 0E94 0000 		call del_mods
 683               	.LVL55:
 666:./tmk_core/common/action.c ****         send_keyboard_report();
 684               		.loc 1 666 9 is_stmt 1 view .LVU157
 685 007c 00C0      		rjmp .L78
 686               	.LVL56:
 687               	.L66:
 667:./tmk_core/common/action.c ****     }
 668:./tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 688               		.loc 1 668 10 view .LVU158
 689               		.loc 1 668 13 is_stmt 0 view .LVU159
 690 007e 9BE5      		ldi r25,lo8(91)
 691 0080 980F      		add r25,r24
 692 0082 9330      		cpi r25,lo8(3)
 693 0084 00F4      		brsh .L67
 669:./tmk_core/common/action.c ****         host_system_send(0);
 694               		.loc 1 669 9 is_stmt 1 view .LVU160
 695 0086 90E0      		ldi r25,0
 696 0088 80E0      		ldi r24,0
 697               	.LVL57:
 698               		.loc 1 669 9 is_stmt 0 view .LVU161
 699 008a 0C94 0000 		jmp host_system_send
 700               	.LVL58:
 701               	.L67:
 670:./tmk_core/common/action.c ****     }
 671:./tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 702               		.loc 1 671 10 is_stmt 1 view .LVU162
 703               		.loc 1 671 13 is_stmt 0 view .LVU163
 704 008e 885A      		subi r24,lo8(-(88))
 705               	.LVL59:
 706               		.loc 1 671 13 view .LVU164
 707 0090 8531      		cpi r24,lo8(21)
 708 0092 00F4      		brsh .L58
 672:./tmk_core/common/action.c ****         host_consumer_send(0);
 709               		.loc 1 672 9 is_stmt 1 view .LVU165
 710 0094 90E0      		ldi r25,0
 711 0096 80E0      		ldi r24,0
 712               	.LVL60:
 713               		.loc 1 672 9 is_stmt 0 view .LVU166
 714 0098 0C94 0000 		jmp host_consumer_send
 715               	.LVL61:
 716               	.L58:
 717               	/* epilogue start */
 673:./tmk_core/common/action.c ****     }
 674:./tmk_core/common/action.c **** }
 718               		.loc 1 674 1 view .LVU167
 719 009c 0895      		ret
 720               		.cfi_endproc
 721               	.LFE110:
 723               		.section	.text.register_mods,"ax",@progbits
 724               	.global	register_mods
 726               	register_mods:
 727               	.LVL62:
 728               	.LFB111:
 675:./tmk_core/common/action.c **** 
 676:./tmk_core/common/action.c **** void register_mods(uint8_t mods)
 677:./tmk_core/common/action.c **** {
 729               		.loc 1 677 1 is_stmt 1 view -0
 730               		.cfi_startproc
 731               	/* prologue: function */
 732               	/* frame size = 0 */
 733               	/* stack size = 0 */
 734               	.L__stack_usage = 0
 678:./tmk_core/common/action.c ****     if (mods) {
 735               		.loc 1 678 5 view .LVU169
 736               		.loc 1 678 8 is_stmt 0 view .LVU170
 737 0000 8823      		tst r24
 738 0002 01F0      		breq .L79
 679:./tmk_core/common/action.c ****         add_mods(mods);
 739               		.loc 1 679 9 is_stmt 1 view .LVU171
 740 0004 0E94 0000 		call add_mods
 741               	.LVL63:
 680:./tmk_core/common/action.c ****         send_keyboard_report();
 742               		.loc 1 680 9 view .LVU172
 743 0008 0C94 0000 		jmp send_keyboard_report
 744               	.LVL64:
 745               	.L79:
 746               	/* epilogue start */
 681:./tmk_core/common/action.c ****     }
 682:./tmk_core/common/action.c **** }
 747               		.loc 1 682 1 is_stmt 0 view .LVU173
 748 000c 0895      		ret
 749               		.cfi_endproc
 750               	.LFE111:
 752               		.section	.text.unregister_mods,"ax",@progbits
 753               	.global	unregister_mods
 755               	unregister_mods:
 756               	.LVL65:
 757               	.LFB112:
 683:./tmk_core/common/action.c **** 
 684:./tmk_core/common/action.c **** void unregister_mods(uint8_t mods)
 685:./tmk_core/common/action.c **** {
 758               		.loc 1 685 1 is_stmt 1 view -0
 759               		.cfi_startproc
 760               	/* prologue: function */
 761               	/* frame size = 0 */
 762               	/* stack size = 0 */
 763               	.L__stack_usage = 0
 686:./tmk_core/common/action.c ****     if (mods) {
 764               		.loc 1 686 5 view .LVU175
 765               		.loc 1 686 8 is_stmt 0 view .LVU176
 766 0000 8823      		tst r24
 767 0002 01F0      		breq .L81
 687:./tmk_core/common/action.c ****         del_mods(mods);
 768               		.loc 1 687 9 is_stmt 1 view .LVU177
 769 0004 0E94 0000 		call del_mods
 770               	.LVL66:
 688:./tmk_core/common/action.c ****         send_keyboard_report();
 771               		.loc 1 688 9 view .LVU178
 772 0008 0C94 0000 		jmp send_keyboard_report
 773               	.LVL67:
 774               	.L81:
 775               	/* epilogue start */
 689:./tmk_core/common/action.c ****     }
 690:./tmk_core/common/action.c **** }
 776               		.loc 1 690 1 is_stmt 0 view .LVU179
 777 000c 0895      		ret
 778               		.cfi_endproc
 779               	.LFE112:
 781               		.section	.text.process_action,"ax",@progbits
 782               	.global	process_action
 784               	process_action:
 785               	.LVL68:
 786               	.LFB108:
 122:./tmk_core/common/action.c ****     bool do_release_oneshot = false;
 787               		.loc 1 122 1 is_stmt 1 view -0
 788               		.cfi_startproc
 122:./tmk_core/common/action.c ****     bool do_release_oneshot = false;
 789               		.loc 1 122 1 is_stmt 0 view .LVU181
 790 0000 8F92      		push r8
 791               	.LCFI7:
 792               		.cfi_def_cfa_offset 3
 793               		.cfi_offset 8, -2
 794 0002 9F92      		push r9
 795               	.LCFI8:
 796               		.cfi_def_cfa_offset 4
 797               		.cfi_offset 9, -3
 798 0004 AF92      		push r10
 799               	.LCFI9:
 800               		.cfi_def_cfa_offset 5
 801               		.cfi_offset 10, -4
 802 0006 BF92      		push r11
 803               	.LCFI10:
 804               		.cfi_def_cfa_offset 6
 805               		.cfi_offset 11, -5
 806 0008 DF92      		push r13
 807               	.LCFI11:
 808               		.cfi_def_cfa_offset 7
 809               		.cfi_offset 13, -6
 810 000a EF92      		push r14
 811               	.LCFI12:
 812               		.cfi_def_cfa_offset 8
 813               		.cfi_offset 14, -7
 814 000c FF92      		push r15
 815               	.LCFI13:
 816               		.cfi_def_cfa_offset 9
 817               		.cfi_offset 15, -8
 818 000e 0F93      		push r16
 819               	.LCFI14:
 820               		.cfi_def_cfa_offset 10
 821               		.cfi_offset 16, -9
 822 0010 1F93      		push r17
 823               	.LCFI15:
 824               		.cfi_def_cfa_offset 11
 825               		.cfi_offset 17, -10
 826 0012 CF93      		push r28
 827               	.LCFI16:
 828               		.cfi_def_cfa_offset 12
 829               		.cfi_offset 28, -11
 830 0014 DF93      		push r29
 831               	.LCFI17:
 832               		.cfi_def_cfa_offset 13
 833               		.cfi_offset 29, -12
 834               	/* prologue: function */
 835               	/* frame size = 0 */
 836               	/* stack size = 11 */
 837               	.L__stack_usage = 11
 838 0016 7C01      		movw r14,r24
 839 0018 D62F      		mov r29,r22
 122:./tmk_core/common/action.c ****     bool do_release_oneshot = false;
 840               		.loc 1 122 1 view .LVU182
 841 001a C72F      		mov r28,r23
 123:./tmk_core/common/action.c ****     keyevent_t event = record->event;
 842               		.loc 1 123 5 is_stmt 1 view .LVU183
 843               	.LVL69:
 124:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 844               		.loc 1 124 5 view .LVU184
 126:./tmk_core/common/action.c **** #endif
 845               		.loc 1 126 5 view .LVU185
 126:./tmk_core/common/action.c **** #endif
 846               		.loc 1 126 36 is_stmt 0 view .LVU186
 847 001c FC01      		movw r30,r24
 848 001e 0581      		ldd r16,Z+5
 849 0020 0295      		swap r16
 850 0022 0F70      		andi r16,lo8(15)
 851               	.LVL70:
 136:./tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 852               		.loc 1 136 5 is_stmt 1 view .LVU187
 136:./tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 853               		.loc 1 136 14 is_stmt 0 view .LVU188
 854 0024 1281      		ldd r17,Z+2
 136:./tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 855               		.loc 1 136 8 view .LVU189
 856 0026 1111      		cpse r17,__zero_reg__
 138:./tmk_core/common/action.c ****     }
 857               		.loc 1 138 9 is_stmt 1 view .LVU190
 858 0028 0E94 0000 		call clear_weak_mods
 859               	.LVL71:
 860               	.L84:
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 861               		.loc 1 143 5 view .LVU191
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 862               		.loc 1 143 9 is_stmt 0 view .LVU192
 863 002c 0E94 0000 		call is_oneshot_layer_active
 864               	.LVL72:
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 865               		.loc 1 143 9 view .LVU193
 866 0030 D82E      		mov r13,r24
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 867               		.loc 1 143 8 view .LVU194
 868 0032 8823      		tst r24
 869 0034 01F0      		breq .L85
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 870               		.loc 1 143 35 discriminator 1 view .LVU195
 871 0036 1123      		tst r17
 872 0038 01F0      		breq .L168
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 873               		.loc 1 143 55 discriminator 2 view .LVU196
 874 003a 80E2      		ldi r24,lo8(32)
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 875               		.loc 1 143 55 discriminator 2 view .LVU197
 876 003c 8D0F      		add r24,r29
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 877               		.loc 1 143 52 discriminator 2 view .LVU198
 878 003e 8830      		cpi r24,lo8(8)
 879 0040 00F0      		brlo .L168
 144:./tmk_core/common/action.c ****         do_release_oneshot = !is_oneshot_layer_active();
 880               		.loc 1 144 9 is_stmt 1 view .LVU199
 881 0042 82E0      		ldi r24,lo8(2)
 882 0044 0E94 0000 		call clear_oneshot_layer_state
 883               	.LVL73:
 145:./tmk_core/common/action.c ****     }
 884               		.loc 1 145 9 view .LVU200
 145:./tmk_core/common/action.c ****     }
 885               		.loc 1 145 31 is_stmt 0 view .LVU201
 886 0048 0E94 0000 		call is_oneshot_layer_active
 887               	.LVL74:
 145:./tmk_core/common/action.c ****     }
 888               		.loc 1 145 9 view .LVU202
 889 004c 91E0      		ldi r25,lo8(1)
 890 004e D82E      		mov r13,r24
 891 0050 D926      		eor r13,r25
 892               	.LVL75:
 893               	.L85:
 149:./tmk_core/common/action.c ****         /* Key and Mods */
 894               		.loc 1 149 5 is_stmt 1 view .LVU203
 149:./tmk_core/common/action.c ****         /* Key and Mods */
 895               		.loc 1 149 24 is_stmt 0 view .LVU204
 896 0052 EC2F      		mov r30,r28
 897 0054 E295      		swap r30
 898 0056 EF70      		andi r30,lo8(15)
 149:./tmk_core/common/action.c ****         /* Key and Mods */
 899               		.loc 1 149 5 view .LVU205
 900 0058 F0E0      		ldi r31,0
 901 005a E050      		subi r30,lo8(-(gs(.L88)))
 902 005c F040      		sbci r31,hi8(-(gs(.L88)))
 903 005e 0C94 0000 		jmp __tablejump2__
 904               		.section	.jumptables.gcc.process_action,"a",@progbits
 905               		.p2align	1
 906               	.L88:
 907 0000 0000      		.word gs(.L95)
 908 0002 0000      		.word gs(.L95)
 909 0004 0000      		.word gs(.L94)
 910 0006 0000      		.word gs(.L94)
 911 0008 0000      		.word gs(.L93)
 912 000a 0000      		.word gs(.L86)
 913 000c 0000      		.word gs(.L92)
 914 000e 0000      		.word gs(.L86)
 915 0010 0000      		.word gs(.L91)
 916 0012 0000      		.word gs(.L86)
 917 0014 0000      		.word gs(.L90)
 918 0016 0000      		.word gs(.L90)
 919 0018 0000      		.word gs(.L89)
 920 001a 0000      		.word gs(.L86)
 921 001c 0000      		.word gs(.L86)
 922 001e 0000      		.word gs(.L87)
 923               		.section	.text.process_action
 924               	.LVL76:
 925               	.L168:
 123:./tmk_core/common/action.c ****     keyevent_t event = record->event;
 926               		.loc 1 123 10 view .LVU206
 927 0062 D12C      		mov r13,__zero_reg__
 928 0064 00C0      		rjmp .L85
 929               	.LVL77:
 930               	.L95:
 931               	.LBB6:
 154:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 932               		.loc 1 154 17 is_stmt 1 view .LVU207
 933 0066 0C2F      		mov r16,r28
 934               	.LVL78:
 154:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 935               		.loc 1 154 17 is_stmt 0 view .LVU208
 936 0068 0F70      		andi r16,lo8(15)
 154:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 937               		.loc 1 154 48 view .LVU209
 938 006a C07F      		andi r28,lo8(-16)
 939               	.LVL79:
 154:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 940               		.loc 1 154 25 view .LVU210
 941 006c 01F0      		breq .L96
 154:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 942               		.loc 1 154 25 discriminator 2 view .LVU211
 943 006e 0295      		swap r16
 944 0070 007F      		andi r16,lo8(-16)
 945               	.L96:
 946               	.LVL80:
 156:./tmk_core/common/action.c ****                     if (mods) {
 947               		.loc 1 156 17 is_stmt 1 discriminator 4 view .LVU212
 156:./tmk_core/common/action.c ****                     if (mods) {
 948               		.loc 1 156 20 is_stmt 0 discriminator 4 view .LVU213
 949 0072 1123      		tst r17
 950 0074 01F0      		breq .L97
 157:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 951               		.loc 1 157 21 is_stmt 1 view .LVU214
 157:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 952               		.loc 1 157 24 is_stmt 0 view .LVU215
 953 0076 0023      		tst r16
 954 0078 01F0      		breq .L204
 158:./tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 955               		.loc 1 158 25 is_stmt 1 view .LVU216
 158:./tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 956               		.loc 1 158 29 is_stmt 0 view .LVU217
 957 007a 80E2      		ldi r24,lo8(32)
 958 007c 8D0F      		add r24,r29
 158:./tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 959               		.loc 1 158 28 view .LVU218
 960 007e 8830      		cpi r24,lo8(8)
 961 0080 00F0      		brlo .L99
 158:./tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 962               		.loc 1 158 53 discriminator 1 view .LVU219
 963 0082 D111      		cpse r29,__zero_reg__
 964 0084 00C0      		rjmp .L100
 965               	.L99:
 162:./tmk_core/common/action.c ****                         } else {
 966               		.loc 1 162 29 is_stmt 1 view .LVU220
 967 0086 802F      		mov r24,r16
 968 0088 0E94 0000 		call add_mods
 969               	.LVL81:
 970               	.L101:
 166:./tmk_core/common/action.c ****                     }
 971               		.loc 1 166 25 view .LVU221
 972 008c 0E94 0000 		call send_keyboard_report
 973               	.LVL82:
 168:./tmk_core/common/action.c ****                 } else {
 974               		.loc 1 168 21 view .LVU222
 975               	.L204:
 168:./tmk_core/common/action.c ****                 } else {
 976               		.loc 1 168 21 is_stmt 0 view .LVU223
 977               	.LBE6:
 419:./tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 978               		.loc 1 419 75 is_stmt 1 view .LVU224
 420:./tmk_core/common/action.c ****                         } else {
 979               		.loc 1 420 29 view .LVU225
 980 0090 8D2F      		mov r24,r29
 981 0092 0E94 0000 		call register_code
 982               	.LVL83:
 983 0096 00C0      		rjmp .L86
 984               	.LVL84:
 985               	.L100:
 986               	.LBB7:
 164:./tmk_core/common/action.c ****                         }
 987               		.loc 1 164 29 view .LVU226
 988 0098 802F      		mov r24,r16
 989 009a 0E94 0000 		call add_weak_mods
 990               	.LVL85:
 991 009e 00C0      		rjmp .L101
 992               	.L97:
 170:./tmk_core/common/action.c ****                     if (mods) {
 993               		.loc 1 170 21 view .LVU227
 994 00a0 8D2F      		mov r24,r29
 995 00a2 0E94 0000 		call unregister_code
 996               	.LVL86:
 171:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 997               		.loc 1 171 21 view .LVU228
 171:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 998               		.loc 1 171 24 is_stmt 0 view .LVU229
 999 00a6 0023      		tst r16
 1000 00a8 01F0      		breq .L86
 172:./tmk_core/common/action.c ****                             del_mods(mods);
 1001               		.loc 1 172 25 is_stmt 1 view .LVU230
 172:./tmk_core/common/action.c ****                             del_mods(mods);
 1002               		.loc 1 172 29 is_stmt 0 view .LVU231
 1003 00aa 80E2      		ldi r24,lo8(32)
 1004 00ac 8D0F      		add r24,r29
 172:./tmk_core/common/action.c ****                             del_mods(mods);
 1005               		.loc 1 172 28 view .LVU232
 1006 00ae 8830      		cpi r24,lo8(8)
 1007 00b0 00F0      		brlo .L103
 172:./tmk_core/common/action.c ****                             del_mods(mods);
 1008               		.loc 1 172 53 discriminator 1 view .LVU233
 1009 00b2 D111      		cpse r29,__zero_reg__
 1010 00b4 00C0      		rjmp .L104
 1011               	.L103:
 173:./tmk_core/common/action.c ****                         } else {
 1012               		.loc 1 173 29 is_stmt 1 view .LVU234
 1013 00b6 802F      		mov r24,r16
 1014 00b8 0E94 0000 		call del_mods
 1015               	.LVL87:
 1016               	.L105:
 177:./tmk_core/common/action.c ****                     }
 1017               		.loc 1 177 25 view .LVU235
 1018 00bc 0E94 0000 		call send_keyboard_report
 1019               	.LVL88:
 1020               	.L86:
 177:./tmk_core/common/action.c ****                     }
 1021               		.loc 1 177 25 is_stmt 0 view .LVU236
 1022               	.LBE7:
 531:./tmk_core/common/action.c ****         record->event.pressed = false;
 1023               		.loc 1 531 5 is_stmt 1 view .LVU237
 531:./tmk_core/common/action.c ****         record->event.pressed = false;
 1024               		.loc 1 531 8 is_stmt 0 view .LVU238
 1025 00c0 DD20      		tst r13
 1026 00c2 01F4      		brne .+2
 1027 00c4 00C0      		rjmp .L83
 531:./tmk_core/common/action.c ****         record->event.pressed = false;
 1028               		.loc 1 531 33 discriminator 1 view .LVU239
 1029 00c6 0E94 0000 		call get_oneshot_layer_state
 1030               	.LVL89:
 531:./tmk_core/common/action.c ****         record->event.pressed = false;
 1031               		.loc 1 531 28 discriminator 1 view .LVU240
 1032 00ca 80FD      		sbrc r24,0
 1033 00cc 00C0      		rjmp .L83
 532:./tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 1034               		.loc 1 532 9 is_stmt 1 view .LVU241
 532:./tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 1035               		.loc 1 532 31 is_stmt 0 view .LVU242
 1036 00ce F701      		movw r30,r14
 1037 00d0 1282      		std Z+2,__zero_reg__
 533:./tmk_core/common/action.c ****         process_record(record);
 1038               		.loc 1 533 9 is_stmt 1 view .LVU243
 1039 00d2 0E94 0000 		call get_oneshot_layer
 1040               	.LVL90:
 1041 00d6 0E94 0000 		call layer_on
 1042               	.LVL91:
 534:./tmk_core/common/action.c ****         layer_off(get_oneshot_layer());
 1043               		.loc 1 534 9 view .LVU244
 1044 00da C701      		movw r24,r14
 1045 00dc 0E94 0000 		call process_record
 1046               	.LVL92:
 535:./tmk_core/common/action.c ****     }
 1047               		.loc 1 535 9 view .LVU245
 1048 00e0 0E94 0000 		call get_oneshot_layer
 1049               	.LVL93:
 1050               	/* epilogue start */
 538:./tmk_core/common/action.c **** 
 1051               		.loc 1 538 1 is_stmt 0 view .LVU246
 1052 00e4 DF91      		pop r29
 1053               	.LVL94:
 538:./tmk_core/common/action.c **** 
 1054               		.loc 1 538 1 view .LVU247
 1055 00e6 CF91      		pop r28
 538:./tmk_core/common/action.c **** 
 1056               		.loc 1 538 1 view .LVU248
 1057 00e8 1F91      		pop r17
 1058 00ea 0F91      		pop r16
 1059 00ec FF90      		pop r15
 1060 00ee EF90      		pop r14
 1061               	.LVL95:
 538:./tmk_core/common/action.c **** 
 1062               		.loc 1 538 1 view .LVU249
 1063 00f0 DF90      		pop r13
 1064               	.LVL96:
 538:./tmk_core/common/action.c **** 
 1065               		.loc 1 538 1 view .LVU250
 1066 00f2 BF90      		pop r11
 1067 00f4 AF90      		pop r10
 1068 00f6 9F90      		pop r9
 1069 00f8 8F90      		pop r8
 535:./tmk_core/common/action.c ****     }
 1070               		.loc 1 535 9 view .LVU251
 1071 00fa 0C94 0000 		jmp layer_off
 1072               	.LVL97:
 1073               	.L104:
 1074               	.LBB8:
 175:./tmk_core/common/action.c ****                         }
 1075               		.loc 1 175 29 is_stmt 1 view .LVU252
 1076 00fe 802F      		mov r24,r16
 1077 0100 0E94 0000 		call del_weak_mods
 1078               	.LVL98:
 1079 0104 00C0      		rjmp .L105
 1080               	.LVL99:
 1081               	.L94:
 175:./tmk_core/common/action.c ****                         }
 1082               		.loc 1 175 29 is_stmt 0 view .LVU253
 1083               	.LBE8:
 1084               	.LBB9:
 186:./tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 1085               		.loc 1 186 17 is_stmt 1 view .LVU254
 1086 0106 FC2F      		mov r31,r28
 1087 0108 FF70      		andi r31,lo8(15)
 1088 010a BF2E      		mov r11,r31
 186:./tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 1089               		.loc 1 186 48 is_stmt 0 view .LVU255
 1090 010c C07F      		andi r28,lo8(-16)
 1091               	.LVL100:
 186:./tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 1092               		.loc 1 186 25 view .LVU256
 1093 010e C032      		cpi r28,lo8(32)
 1094 0110 01F0      		breq .L106
 186:./tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 1095               		.loc 1 186 25 discriminator 2 view .LVU257
 1096 0112 B294      		swap r11
 1097 0114 80EF      		ldi r24,lo8(-16)
 1098 0116 B822      		and r11,r24
 1099               	.L106:
 1100               	.LVL101:
 188:./tmk_core/common/action.c ****     #ifndef NO_ACTION_ONESHOT
 1101               		.loc 1 188 17 is_stmt 1 discriminator 4 view .LVU258
 1102 0118 DD23      		tst r29
 1103 011a 01F0      		breq .L107
 1104 011c D130      		cpi r29,lo8(1)
 1105 011e 01F0      		breq .L108
 243:./tmk_core/common/action.c ****                             if (tap_count > 0) {
 1106               		.loc 1 243 25 view .LVU259
 243:./tmk_core/common/action.c ****                             if (tap_count > 0) {
 1107               		.loc 1 243 28 is_stmt 0 view .LVU260
 1108 0120 1123      		tst r17
 1109 0122 01F0      		breq .L116
 244:./tmk_core/common/action.c **** #ifndef IGNORE_MOD_TAP_INTERRUPT
 1110               		.loc 1 244 29 is_stmt 1 view .LVU261
 244:./tmk_core/common/action.c **** #ifndef IGNORE_MOD_TAP_INTERRUPT
 1111               		.loc 1 244 32 is_stmt 0 view .LVU262
 1112 0124 0023      		tst r16
 1113 0126 01F0      		breq .L205
 1114 0128 00C0      		rjmp .L204
 1115               	.L107:
 192:./tmk_core/common/action.c ****                             if (tap_count == 0) {
 1116               		.loc 1 192 25 is_stmt 1 view .LVU263
 192:./tmk_core/common/action.c ****                             if (tap_count == 0) {
 1117               		.loc 1 192 28 is_stmt 0 view .LVU264
 1118 012a 1123      		tst r17
 1119 012c 01F0      		breq .L110
 193:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: 0\n");
 1120               		.loc 1 193 29 is_stmt 1 view .LVU265
 193:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: 0\n");
 1121               		.loc 1 193 32 is_stmt 0 view .LVU266
 1122 012e 0111      		cpse r16,__zero_reg__
 1123 0130 00C0      		rjmp .L111
 1124               	.L205:
 234:./tmk_core/common/action.c ****                             }
 1125               		.loc 1 234 33 is_stmt 1 view .LVU267
 1126 0132 8B2D      		mov r24,r11
 1127               	.LVL102:
 1128               	.L201:
 234:./tmk_core/common/action.c ****                             }
 1129               		.loc 1 234 33 is_stmt 0 view .LVU268
 1130 0134 0E94 0000 		call register_mods
 1131               	.LVL103:
 1132 0138 00C0      		rjmp .L86
 1133               	.LVL104:
 1134               	.L111:
 196:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 1135               		.loc 1 196 36 is_stmt 1 view .LVU269
 198:./tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 1136               		.loc 1 198 33 is_stmt 0 view .LVU270
 1137 013a 8B2D      		mov r24,r11
 196:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 1138               		.loc 1 196 39 view .LVU271
 1139 013c 0130      		cpi r16,lo8(1)
 1140 013e 01F4      		brne .L201
 197:./tmk_core/common/action.c ****                                 set_oneshot_mods(mods);
 1141               		.loc 1 197 69 is_stmt 1 view .LVU272
 198:./tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 1142               		.loc 1 198 33 view .LVU273
 1143 0140 0E94 0000 		call set_oneshot_mods
 1144               	.LVL105:
 1145 0144 00C0      		rjmp .L86
 1146               	.L110:
 210:./tmk_core/common/action.c ****                                 clear_oneshot_mods();
 1147               		.loc 1 210 29 view .LVU274
 210:./tmk_core/common/action.c ****                                 clear_oneshot_mods();
 1148               		.loc 1 210 32 is_stmt 0 view .LVU275
 1149 0146 0111      		cpse r16,__zero_reg__
 1150 0148 00C0      		rjmp .L113
 1151               	.L209:
 225:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 1152               		.loc 1 225 33 is_stmt 1 view .LVU276
 1153 014a 0E94 0000 		call clear_oneshot_mods
 1154               	.LVL106:
 226:./tmk_core/common/action.c ****                             }
 1155               		.loc 1 226 33 view .LVU277
 1156               	.L118:
 266:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 1157               		.loc 1 266 71 view .LVU278
 267:./tmk_core/common/action.c ****                             }
 1158               		.loc 1 267 33 view .LVU279
 1159 014e 8B2D      		mov r24,r11
 1160               	.LVL107:
 1161               	.L203:
 267:./tmk_core/common/action.c ****                             }
 1162               		.loc 1 267 33 is_stmt 0 view .LVU280
 1163               	.LBE9:
 350:./tmk_core/common/action.c ****                     }
 1164               		.loc 1 350 25 view .LVU281
 1165 0150 0E94 0000 		call unregister_mods
 1166               	.LVL108:
 1167 0154 00C0      		rjmp .L86
 1168               	.LVL109:
 1169               	.L113:
 1170               	.LBB10:
 213:./tmk_core/common/action.c ****                                 // Retain Oneshot mods
 1171               		.loc 1 213 36 is_stmt 1 view .LVU282
 213:./tmk_core/common/action.c ****                                 // Retain Oneshot mods
 1172               		.loc 1 213 39 is_stmt 0 view .LVU283
 1173 0156 0130      		cpi r16,lo8(1)
 1174 0158 01F4      		brne .+2
 1175 015a 00C0      		rjmp .L86
 1176 015c 00C0      		rjmp .L209
 1177               	.L108:
 232:./tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 1178               		.loc 1 232 25 is_stmt 1 view .LVU284
 232:./tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 1179               		.loc 1 232 28 is_stmt 0 view .LVU285
 1180 015e 1123      		tst r17
 1181 0160 01F0      		breq .L115
 233:./tmk_core/common/action.c ****                                 register_mods(mods);
 1182               		.loc 1 233 29 is_stmt 1 view .LVU286
 233:./tmk_core/common/action.c ****                                 register_mods(mods);
 1183               		.loc 1 233 32 is_stmt 0 view .LVU287
 1184 0162 0230      		cpi r16,lo8(2)
 1185 0164 00F0      		brlo .+2
 1186 0166 00C0      		rjmp .L86
 1187 0168 00C0      		rjmp .L205
 1188               	.L115:
 237:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 1189               		.loc 1 237 29 is_stmt 1 view .LVU288
 237:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 1190               		.loc 1 237 32 is_stmt 0 view .LVU289
 1191 016a 0111      		cpse r16,__zero_reg__
 1192 016c 00C0      		rjmp .L86
 1193 016e 00C0      		rjmp .L118
 1194               	.L116:
 262:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 1195               		.loc 1 262 29 is_stmt 1 view .LVU290
 262:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 1196               		.loc 1 262 32 is_stmt 0 view .LVU291
 1197 0170 0023      		tst r16
 1198 0172 01F0      		breq .L118
 1199               	.LVL110:
 1200               	.L202:
 262:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 1201               		.loc 1 262 32 view .LVU292
 1202               	.LBE10:
 427:./tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 1203               		.loc 1 427 77 is_stmt 1 view .LVU293
 428:./tmk_core/common/action.c ****                         } else {
 1204               		.loc 1 428 29 view .LVU294
 1205 0174 8D2F      		mov r24,r29
 1206 0176 0E94 0000 		call unregister_code
 1207               	.LVL111:
 1208 017a 00C0      		rjmp .L86
 1209               	.L93:
 278:./tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 1210               		.loc 1 278 13 view .LVU295
 278:./tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 1211               		.loc 1 278 33 is_stmt 0 view .LVU296
 1212 017c 8C2F      		mov r24,r28
 1213 017e 8695      		lsr r24
 1214 0180 8695      		lsr r24
 1215 0182 8370      		andi r24,lo8(3)
 1216 0184 01F0      		breq .L119
 1217 0186 8130      		cpi r24,lo8(1)
 1218 0188 01F0      		breq .+2
 1219 018a 00C0      		rjmp .L86
 287:./tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 1220               		.loc 1 287 21 is_stmt 1 view .LVU297
 288:./tmk_core/common/action.c ****                     } else {
 1221               		.loc 1 288 25 is_stmt 0 view .LVU298
 1222 018c 8D2F      		mov r24,r29
 1223 018e 9C2F      		mov r25,r28
 1224 0190 9370      		andi r25,lo8(3)
 287:./tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 1225               		.loc 1 287 24 view .LVU299
 1226 0192 1111      		cpse r17,__zero_reg__
 1227 0194 00C0      		rjmp .L206
 290:./tmk_core/common/action.c ****                     }
 1228               		.loc 1 290 25 is_stmt 1 view .LVU300
 1229 0196 90E0      		ldi r25,0
 1230 0198 80E0      		ldi r24,0
 1231               	.L206:
 1232 019a 0E94 0000 		call host_consumer_send
 1233               	.LVL112:
 1234 019e 00C0      		rjmp .L86
 1235               	.L119:
 280:./tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 1236               		.loc 1 280 21 view .LVU301
 281:./tmk_core/common/action.c ****                     } else {
 1237               		.loc 1 281 25 is_stmt 0 view .LVU302
 1238 01a0 8D2F      		mov r24,r29
 1239 01a2 9C2F      		mov r25,r28
 1240 01a4 9370      		andi r25,lo8(3)
 280:./tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 1241               		.loc 1 280 24 view .LVU303
 1242 01a6 1111      		cpse r17,__zero_reg__
 1243 01a8 00C0      		rjmp .L198
 283:./tmk_core/common/action.c ****                     }
 1244               		.loc 1 283 25 is_stmt 1 view .LVU304
 1245 01aa 90E0      		ldi r25,0
 1246 01ac 80E0      		ldi r24,0
 1247               	.L198:
 1248 01ae 0E94 0000 		call host_system_send
 1249               	.LVL113:
 1250 01b2 00C0      		rjmp .L86
 1251               	.L91:
 310:./tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1252               		.loc 1 310 13 view .LVU305
 310:./tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1253               		.loc 1 310 39 is_stmt 0 view .LVU306
 1254 01b4 8C2F      		mov r24,r28
 1255 01b6 8370      		andi r24,lo8(3)
 310:./tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1256               		.loc 1 310 16 view .LVU307
 1257 01b8 01F0      		breq .+2
 1258 01ba 00C0      		rjmp .L123
 312:./tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 1259               		.loc 1 312 17 is_stmt 1 view .LVU308
 312:./tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 1260               		.loc 1 312 20 is_stmt 0 view .LVU309
 1261 01bc 1111      		cpse r17,__zero_reg__
 1262 01be 00C0      		rjmp .L86
 1263               	.LBB11:
 313:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1264               		.loc 1 313 21 is_stmt 1 view .LVU310
 1265               	.LVL114:
 314:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1266               		.loc 1 314 21 view .LVU311
 313:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1267               		.loc 1 313 55 is_stmt 0 view .LVU312
 1268 01c0 2D2F      		mov r18,r29
 1269 01c2 2295      		swap r18
 1270 01c4 2695      		lsr r18
 1271 01c6 2770      		andi r18,lo8(7)
 313:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1272               		.loc 1 313 29 view .LVU313
 1273 01c8 220F      		lsl r18
 1274 01ca 220F      		lsl r18
 314:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1275               		.loc 1 314 66 view .LVU314
 1276 01cc 6D2F      		mov r22,r29
 1277 01ce 6F70      		andi r22,lo8(15)
 314:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1278               		.loc 1 314 38 view .LVU315
 1279 01d0 862E      		mov r8,r22
 1280 01d2 912C      		mov r9,__zero_reg__
 1281 01d4 B12C      		mov r11,__zero_reg__
 1282 01d6 A12C      		mov r10,__zero_reg__
 314:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1283               		.loc 1 314 30 view .LVU316
 1284 01d8 022E      		mov r0,r18
 1285 01da 00C0      		rjmp 2f
 1286               		1:
 1287 01dc 880C      		lsl r8
 1288 01de 991C      		rol r9
 1289 01e0 AA1C      		rol r10
 1290 01e2 BB1C      		rol r11
 1291               		2:
 1292 01e4 0A94      		dec r0
 1293 01e6 02F4      		brpl 1b
 1294               	.LVL115:
 315:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1295               		.loc 1 315 21 is_stmt 1 view .LVU317
 315:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1296               		.loc 1 315 91 is_stmt 0 view .LVU318
 1297 01e8 60E0      		ldi r22,0
 1298 01ea 70E0      		ldi r23,0
 1299 01ec CB01      		movw r24,r22
 1300 01ee D4FF      		sbrs r29,4
 1301 01f0 00C0      		rjmp .L124
 315:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1302               		.loc 1 315 82 discriminator 1 view .LVU319
 1303 01f2 6FE0      		ldi r22,lo8(15)
 1304 01f4 70E0      		ldi r23,0
 1305 01f6 80E0      		ldi r24,0
 1306 01f8 90E0      		ldi r25,0
 1307 01fa 00C0      		rjmp 2f
 1308               		1:
 1309 01fc 660F      		lsl r22
 1310 01fe 771F      		rol r23
 1311 0200 881F      		rol r24
 1312 0202 991F      		rol r25
 1313               		2:
 1314 0204 2A95      		dec r18
 1315 0206 02F4      		brpl 1b
 315:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1316               		.loc 1 315 91 discriminator 1 view .LVU320
 1317 0208 6095      		com r22
 1318 020a 7095      		com r23
 1319 020c 8095      		com r24
 1320 020e 9095      		com r25
 1321               	.L124:
 1322               	.LVL116:
 316:./tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1323               		.loc 1 316 21 is_stmt 1 discriminator 4 view .LVU321
 316:./tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1324               		.loc 1 316 47 is_stmt 0 discriminator 4 view .LVU322
 1325 0210 C695      		lsr r28
 1326 0212 C695      		lsr r28
 1327               	.LVL117:
 316:./tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1328               		.loc 1 316 47 discriminator 4 view .LVU323
 1329 0214 C370      		andi r28,lo8(3)
 1330 0216 C230      		cpi r28,lo8(2)
 1331 0218 01F0      		breq .L125
 1332 021a 00F4      		brsh .L126
 1333 021c 6829      		or r22,r8
 1334               	.LVL118:
 316:./tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1335               		.loc 1 316 47 discriminator 4 view .LVU324
 1336 021e 7929      		or r23,r9
 1337 0220 8A29      		or r24,r10
 1338 0222 9B29      		or r25,r11
 1339 0224 C130      		cpi r28,lo8(1)
 1340 0226 01F0      		breq .L207
 317:./tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 1341               		.loc 1 317 42 is_stmt 1 view .LVU325
 1342 0228 0E94 0000 		call default_layer_and
 1343               	.LVL119:
 317:./tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 1344               		.loc 1 317 74 view .LVU326
 317:./tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 1345               		.loc 1 317 25 is_stmt 0 view .LVU327
 1346 022c 00C0      		rjmp .L86
 1347               	.LVL120:
 1348               	.L125:
 319:./tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1349               		.loc 1 319 42 is_stmt 1 view .LVU328
 1350 022e 6829      		or r22,r8
 1351               	.LVL121:
 319:./tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1352               		.loc 1 319 42 is_stmt 0 view .LVU329
 1353 0230 7929      		or r23,r9
 1354 0232 8A29      		or r24,r10
 1355 0234 9B29      		or r25,r11
 1356 0236 0E94 0000 		call default_layer_xor
 1357               	.LVL122:
 319:./tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1358               		.loc 1 319 74 is_stmt 1 view .LVU330
 319:./tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1359               		.loc 1 319 25 is_stmt 0 view .LVU331
 1360 023a 00C0      		rjmp .L86
 1361               	.LVL123:
 1362               	.L126:
 320:./tmk_core/common/action.c ****                     }
 1363               		.loc 1 320 42 is_stmt 1 view .LVU332
 1364 023c 0E94 0000 		call default_layer_and
 1365               	.LVL124:
 320:./tmk_core/common/action.c ****                     }
 1366               		.loc 1 320 67 view .LVU333
 1367 0240 C501      		movw r24,r10
 1368 0242 B401      		movw r22,r8
 1369               	.L207:
 1370 0244 0E94 0000 		call default_layer_or
 1371               	.LVL125:
 320:./tmk_core/common/action.c ****                     }
 1372               		.loc 1 320 91 view .LVU334
 320:./tmk_core/common/action.c ****                     }
 1373               		.loc 1 320 25 is_stmt 0 view .LVU335
 1374 0248 00C0      		rjmp .L86
 1375               	.LVL126:
 1376               	.L123:
 320:./tmk_core/common/action.c ****                     }
 1377               		.loc 1 320 25 view .LVU336
 1378               	.LBE11:
 325:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1379               		.loc 1 325 17 is_stmt 1 view .LVU337
 325:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1380               		.loc 1 325 21 is_stmt 0 view .LVU338
 1381 024a 8695      		lsr r24
 1382 024c 1123      		tst r17
 1383 024e 01F0      		breq .L129
 325:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1384               		.loc 1 325 21 discriminator 1 view .LVU339
 1385 0250 8C2F      		mov r24,r28
 1386 0252 8170      		andi r24,lo8(1)
 1387               	.L129:
 325:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1388               		.loc 1 325 20 discriminator 4 view .LVU340
 1389 0254 8823      		tst r24
 1390 0256 01F4      		brne .+2
 1391 0258 00C0      		rjmp .L86
 1392               	.LBB12:
 327:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1393               		.loc 1 327 21 is_stmt 1 view .LVU341
 1394               	.LVL127:
 328:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1395               		.loc 1 328 21 view .LVU342
 327:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1396               		.loc 1 327 55 is_stmt 0 view .LVU343
 1397 025a 2D2F      		mov r18,r29
 1398 025c 2295      		swap r18
 1399 025e 2695      		lsr r18
 1400 0260 2770      		andi r18,lo8(7)
 327:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1401               		.loc 1 327 29 view .LVU344
 1402 0262 220F      		lsl r18
 1403 0264 220F      		lsl r18
 328:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1404               		.loc 1 328 66 view .LVU345
 1405 0266 6D2F      		mov r22,r29
 1406 0268 6F70      		andi r22,lo8(15)
 328:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1407               		.loc 1 328 38 view .LVU346
 1408 026a 862E      		mov r8,r22
 1409 026c 912C      		mov r9,__zero_reg__
 1410 026e B12C      		mov r11,__zero_reg__
 1411 0270 A12C      		mov r10,__zero_reg__
 328:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1412               		.loc 1 328 30 view .LVU347
 1413 0272 022E      		mov r0,r18
 1414 0274 00C0      		rjmp 2f
 1415               		1:
 1416 0276 880C      		lsl r8
 1417 0278 991C      		rol r9
 1418 027a AA1C      		rol r10
 1419 027c BB1C      		rol r11
 1420               		2:
 1421 027e 0A94      		dec r0
 1422 0280 02F4      		brpl 1b
 1423               	.LVL128:
 329:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1424               		.loc 1 329 21 is_stmt 1 view .LVU348
 329:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1425               		.loc 1 329 91 is_stmt 0 view .LVU349
 1426 0282 60E0      		ldi r22,0
 1427 0284 70E0      		ldi r23,0
 1428 0286 CB01      		movw r24,r22
 1429 0288 D4FF      		sbrs r29,4
 1430 028a 00C0      		rjmp .L130
 329:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1431               		.loc 1 329 82 discriminator 1 view .LVU350
 1432 028c 6FE0      		ldi r22,lo8(15)
 1433 028e 70E0      		ldi r23,0
 1434 0290 80E0      		ldi r24,0
 1435 0292 90E0      		ldi r25,0
 1436 0294 00C0      		rjmp 2f
 1437               		1:
 1438 0296 660F      		lsl r22
 1439 0298 771F      		rol r23
 1440 029a 881F      		rol r24
 1441 029c 991F      		rol r25
 1442               		2:
 1443 029e 2A95      		dec r18
 1444 02a0 02F4      		brpl 1b
 329:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1445               		.loc 1 329 91 discriminator 1 view .LVU351
 1446 02a2 6095      		com r22
 1447 02a4 7095      		com r23
 1448 02a6 8095      		com r24
 1449 02a8 9095      		com r25
 1450               	.L130:
 1451               	.LVL129:
 330:./tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1452               		.loc 1 330 21 is_stmt 1 discriminator 4 view .LVU352
 330:./tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1453               		.loc 1 330 47 is_stmt 0 discriminator 4 view .LVU353
 1454 02aa C695      		lsr r28
 1455 02ac C695      		lsr r28
 1456               	.LVL130:
 330:./tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1457               		.loc 1 330 47 discriminator 4 view .LVU354
 1458 02ae C370      		andi r28,lo8(3)
 1459 02b0 C230      		cpi r28,lo8(2)
 1460 02b2 01F0      		breq .L131
 1461 02b4 00F4      		brsh .L132
 1462 02b6 6829      		or r22,r8
 1463               	.LVL131:
 330:./tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1464               		.loc 1 330 47 discriminator 4 view .LVU355
 1465 02b8 7929      		or r23,r9
 1466 02ba 8A29      		or r24,r10
 1467 02bc 9B29      		or r25,r11
 1468 02be C130      		cpi r28,lo8(1)
 1469 02c0 01F0      		breq .L208
 331:./tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 1470               		.loc 1 331 42 is_stmt 1 view .LVU356
 1471 02c2 0E94 0000 		call layer_and
 1472               	.LVL132:
 331:./tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 1473               		.loc 1 331 66 view .LVU357
 331:./tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 1474               		.loc 1 331 25 is_stmt 0 view .LVU358
 1475 02c6 00C0      		rjmp .L86
 1476               	.LVL133:
 1477               	.L131:
 333:./tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1478               		.loc 1 333 42 is_stmt 1 view .LVU359
 1479 02c8 6829      		or r22,r8
 1480               	.LVL134:
 333:./tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1481               		.loc 1 333 42 is_stmt 0 view .LVU360
 1482 02ca 7929      		or r23,r9
 1483 02cc 8A29      		or r24,r10
 1484 02ce 9B29      		or r25,r11
 1485 02d0 0E94 0000 		call layer_xor
 1486               	.LVL135:
 333:./tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1487               		.loc 1 333 66 is_stmt 1 view .LVU361
 333:./tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1488               		.loc 1 333 25 is_stmt 0 view .LVU362
 1489 02d4 00C0      		rjmp .L86
 1490               	.LVL136:
 1491               	.L132:
 334:./tmk_core/common/action.c ****                     }
 1492               		.loc 1 334 42 is_stmt 1 view .LVU363
 1493 02d6 0E94 0000 		call layer_and
 1494               	.LVL137:
 334:./tmk_core/common/action.c ****                     }
 1495               		.loc 1 334 59 view .LVU364
 1496 02da C501      		movw r24,r10
 1497 02dc B401      		movw r22,r8
 1498               	.L208:
 1499 02de 0E94 0000 		call layer_or
 1500               	.LVL138:
 334:./tmk_core/common/action.c ****                     }
 1501               		.loc 1 334 75 view .LVU365
 334:./tmk_core/common/action.c ****                     }
 1502               		.loc 1 334 25 is_stmt 0 view .LVU366
 1503 02e2 00C0      		rjmp .L86
 1504               	.LVL139:
 1505               	.L90:
 334:./tmk_core/common/action.c ****                     }
 1506               		.loc 1 334 25 view .LVU367
 1507               	.LBE12:
 342:./tmk_core/common/action.c ****                 case 0xe0 ... 0xef:
 1508               		.loc 1 342 13 is_stmt 1 view .LVU368
 1509 02e4 E0E2      		ldi r30,lo8(32)
 1510 02e6 ED0F      		add r30,r29
 1511 02e8 E531      		cpi r30,lo8(21)
 1512 02ea 00F0      		brlo .+2
 1513 02ec 00C0      		rjmp .L134
 1514 02ee F0E0      		ldi r31,0
 1515 02f0 E050      		subi r30,lo8(-(gs(.L136)))
 1516 02f2 F040      		sbci r31,hi8(-(gs(.L136)))
 1517 02f4 0C94 0000 		jmp __tablejump2__
 1518               		.section	.jumptables.gcc.process_action,"a",@progbits
 1519               		.p2align	1
 1520               	.L136:
 1521 0020 0000      		.word gs(.L141)
 1522 0022 0000      		.word gs(.L141)
 1523 0024 0000      		.word gs(.L141)
 1524 0026 0000      		.word gs(.L141)
 1525 0028 0000      		.word gs(.L141)
 1526 002a 0000      		.word gs(.L141)
 1527 002c 0000      		.word gs(.L141)
 1528 002e 0000      		.word gs(.L141)
 1529 0030 0000      		.word gs(.L141)
 1530 0032 0000      		.word gs(.L141)
 1531 0034 0000      		.word gs(.L141)
 1532 0036 0000      		.word gs(.L141)
 1533 0038 0000      		.word gs(.L141)
 1534 003a 0000      		.word gs(.L141)
 1535 003c 0000      		.word gs(.L141)
 1536 003e 0000      		.word gs(.L141)
 1537 0040 0000      		.word gs(.L140)
 1538 0042 0000      		.word gs(.L139)
 1539 0044 0000      		.word gs(.L138)
 1540 0046 0000      		.word gs(.L137)
 1541 0048 0000      		.word gs(.L135)
 1542               		.section	.text.process_action
 1543               	.L141:
 345:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1544               		.loc 1 345 21 view .LVU369
 1545 02f8 DF70      		andi r29,lo8(15)
 1546               	.LVL140:
 345:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1547               		.loc 1 345 21 is_stmt 0 view .LVU370
 1548 02fa 8C2F      		mov r24,r28
 1549 02fc 8F71      		andi r24,lo8(31)
 345:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1550               		.loc 1 345 24 view .LVU371
 1551 02fe 1123      		tst r17
 1552 0300 01F0      		breq .L142
 346:./tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 1553               		.loc 1 346 25 is_stmt 1 view .LVU372
 1554 0302 0E94 0000 		call layer_on
 1555               	.LVL141:
 347:./tmk_core/common/action.c ****                     } else {
 1556               		.loc 1 347 25 view .LVU373
 1557 0306 8D2F      		mov r24,r29
 1558 0308 00C0      		rjmp .L201
 1559               	.L142:
 349:./tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 1560               		.loc 1 349 25 view .LVU374
 1561 030a 0E94 0000 		call layer_off
 1562               	.LVL142:
 350:./tmk_core/common/action.c ****                     }
 1563               		.loc 1 350 25 view .LVU375
 1564 030e 8D2F      		mov r24,r29
 1565 0310 00C0      		rjmp .L203
 1566               	.LVL143:
 1567               	.L140:
 355:./tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1568               		.loc 1 355 21 view .LVU376
 355:./tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1569               		.loc 1 355 24 is_stmt 0 view .LVU377
 1570 0312 1123      		tst r17
 1571 0314 01F0      		breq .L143
 356:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1572               		.loc 1 356 25 is_stmt 1 view .LVU378
 356:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1573               		.loc 1 356 28 is_stmt 0 view .LVU379
 1574 0316 0111      		cpse r16,__zero_reg__
 1575 0318 00C0      		rjmp .L86
 1576               	.L144:
 357:./tmk_core/common/action.c ****                         }
 1577               		.loc 1 357 29 is_stmt 1 view .LVU380
 1578 031a 8C2F      		mov r24,r28
 1579 031c 8F71      		andi r24,lo8(31)
 1580 031e 0E94 0000 		call layer_invert
 1581               	.LVL144:
 1582 0322 00C0      		rjmp .L86
 1583               	.L143:
 360:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1584               		.loc 1 360 25 view .LVU381
 360:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1585               		.loc 1 360 28 is_stmt 0 view .LVU382
 1586 0324 0230      		cpi r16,lo8(2)
 1587 0326 00F0      		brlo .+2
 1588 0328 00C0      		rjmp .L86
 1589 032a 00C0      		rjmp .L144
 1590               	.L139:
 366:./tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1591               		.loc 1 366 21 is_stmt 1 view .LVU383
 1592 032c 8C2F      		mov r24,r28
 1593 032e 8F71      		andi r24,lo8(31)
 366:./tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1594               		.loc 1 366 68 is_stmt 0 view .LVU384
 1595 0330 1123      		tst r17
 1596 0332 01F0      		breq .L197
 1597               	.L199:
 423:./tmk_core/common/action.c ****                         }
 1598               		.loc 1 423 29 view .LVU385
 1599 0334 0E94 0000 		call layer_on
 1600               	.LVL145:
 1601 0338 00C0      		rjmp .L86
 1602               	.L138:
 370:./tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 1603               		.loc 1 370 21 is_stmt 1 view .LVU386
 1604 033a 8C2F      		mov r24,r28
 1605 033c 8F71      		andi r24,lo8(31)
 370:./tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 1606               		.loc 1 370 69 is_stmt 0 view .LVU387
 1607 033e 1123      		tst r17
 1608 0340 01F0      		breq .L199
 1609               	.L197:
 431:./tmk_core/common/action.c ****                         }
 1610               		.loc 1 431 29 view .LVU388
 1611 0342 0E94 0000 		call layer_off
 1612               	.LVL146:
 1613 0346 00C0      		rjmp .L86
 1614               	.L137:
 374:./tmk_core/common/action.c ****                                     layer_clear();
 1615               		.loc 1 374 21 is_stmt 1 view .LVU389
 374:./tmk_core/common/action.c ****                                     layer_clear();
 1616               		.loc 1 374 70 is_stmt 0 view .LVU390
 1617 0348 1123      		tst r17
 1618 034a 01F0      		breq .L147
 374:./tmk_core/common/action.c ****                                     layer_clear();
 1619               		.loc 1 374 37 discriminator 1 view .LVU391
 1620 034c 8C2F      		mov r24,r28
 1621 034e 8F71      		andi r24,lo8(31)
 1622 0350 0E94 0000 		call layer_move
 1623               	.LVL147:
 1624 0354 00C0      		rjmp .L86
 1625               	.L147:
 375:./tmk_core/common/action.c ****                     break;
 1626               		.loc 1 375 37 view .LVU392
 1627 0356 0E94 0000 		call layer_clear
 1628               	.LVL148:
 1629 035a 00C0      		rjmp .L86
 1630               	.L135:
 403:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1631               		.loc 1 403 21 is_stmt 1 view .LVU393
 403:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1632               		.loc 1 403 24 is_stmt 0 view .LVU394
 1633 035c 1123      		tst r17
 1634 035e 01F0      		breq .L148
 404:./tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 1635               		.loc 1 404 25 is_stmt 1 view .LVU395
 404:./tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 1636               		.loc 1 404 50 is_stmt 0 view .LVU396
 1637 0360 CF71      		andi r28,lo8(31)
 1638               	.LVL149:
 404:./tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 1639               		.loc 1 404 25 view .LVU397
 1640 0362 8C2F      		mov r24,r28
 1641 0364 0E94 0000 		call layer_on
 1642               	.LVL150:
 405:./tmk_core/common/action.c ****                     } else {
 1643               		.loc 1 405 25 is_stmt 1 view .LVU398
 1644 0368 63E0      		ldi r22,lo8(3)
 1645 036a 8C2F      		mov r24,r28
 1646 036c 0E94 0000 		call set_oneshot_layer
 1647               	.LVL151:
 1648 0370 00C0      		rjmp .L86
 1649               	.LVL152:
 1650               	.L148:
 407:./tmk_core/common/action.c ****                         if (tap_count > 1) {
 1651               		.loc 1 407 25 view .LVU399
 1652 0372 81E0      		ldi r24,lo8(1)
 1653 0374 0E94 0000 		call clear_oneshot_layer_state
 1654               	.LVL153:
 408:./tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1655               		.loc 1 408 25 view .LVU400
 408:./tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1656               		.loc 1 408 28 is_stmt 0 view .LVU401
 1657 0378 0230      		cpi r16,lo8(2)
 1658 037a 00F4      		brsh .+2
 1659 037c 00C0      		rjmp .L86
 409:./tmk_core/common/action.c ****                         }
 1660               		.loc 1 409 29 is_stmt 1 view .LVU402
 1661 037e 82E0      		ldi r24,lo8(2)
 1662 0380 0E94 0000 		call clear_oneshot_layer_state
 1663               	.LVL154:
 1664 0384 00C0      		rjmp .L86
 1665               	.L134:
 417:./tmk_core/common/action.c ****                         if (tap_count > 0) {
 1666               		.loc 1 417 21 view .LVU403
 417:./tmk_core/common/action.c ****                         if (tap_count > 0) {
 1667               		.loc 1 417 24 is_stmt 0 view .LVU404
 1668 0386 1123      		tst r17
 1669 0388 01F0      		breq .L149
 418:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 1670               		.loc 1 418 25 is_stmt 1 view .LVU405
 418:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 1671               		.loc 1 418 28 is_stmt 0 view .LVU406
 1672 038a 0111      		cpse r16,__zero_reg__
 1673 038c 00C0      		rjmp .L204
 422:./tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 1674               		.loc 1 422 76 is_stmt 1 view .LVU407
 423:./tmk_core/common/action.c ****                         }
 1675               		.loc 1 423 29 view .LVU408
 1676 038e 8C2F      		mov r24,r28
 1677 0390 8F71      		andi r24,lo8(31)
 1678 0392 00C0      		rjmp .L199
 1679               	.L149:
 426:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 1680               		.loc 1 426 25 view .LVU409
 426:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 1681               		.loc 1 426 28 is_stmt 0 view .LVU410
 1682 0394 0111      		cpse r16,__zero_reg__
 1683 0396 00C0      		rjmp .L202
 430:./tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 1684               		.loc 1 430 79 is_stmt 1 view .LVU411
 431:./tmk_core/common/action.c ****                         }
 1685               		.loc 1 431 29 view .LVU412
 1686 0398 8C2F      		mov r24,r28
 1687 039a 8F71      		andi r24,lo8(31)
 1688 039c 00C0      		rjmp .L197
 1689               	.L89:
 442:./tmk_core/common/action.c ****             break;
 1690               		.loc 1 442 13 view .LVU413
 442:./tmk_core/common/action.c ****             break;
 1691               		.loc 1 442 83 is_stmt 0 view .LVU414
 1692 039e 4C2F      		mov r20,r28
 1693 03a0 4F70      		andi r20,lo8(15)
 442:./tmk_core/common/action.c ****             break;
 1694               		.loc 1 442 13 view .LVU415
 1695 03a2 6D2F      		mov r22,r29
 1696 03a4 C701      		movw r24,r14
 1697 03a6 0E94 0000 		call action_get_macro
 1698               	.LVL155:
 1699 03aa 0E94 0000 		call action_macro_play
 1700               	.LVL156:
 443:./tmk_core/common/action.c **** #endif
 1701               		.loc 1 443 13 is_stmt 1 view .LVU416
 1702 03ae 00C0      		rjmp .L86
 1703               	.L92:
 472:./tmk_core/common/action.c ****                 case OP_SH_TOGGLE:
 1704               		.loc 1 472 13 view .LVU417
 1705 03b0 D23F      		cpi r29,lo8(-14)
 1706 03b2 01F0      		breq .L162
 1707 03b4 00F4      		brsh .L153
 1708 03b6 D03F      		cpi r29,lo8(-16)
 1709 03b8 01F0      		breq .L154
 1710 03ba D13F      		cpi r29,lo8(-15)
 1711 03bc 01F0      		breq .L155
 1712               	.L156:
 506:./tmk_core/common/action.c ****                         if (event.pressed) {
 1713               		.loc 1 506 21 view .LVU418
 506:./tmk_core/common/action.c ****                         if (event.pressed) {
 1714               		.loc 1 506 24 is_stmt 0 view .LVU419
 1715 03be 0023      		tst r16
 1716 03c0 01F0      		breq .L162
 507:./tmk_core/common/action.c ****                             register_code(action.swap.code);
 1717               		.loc 1 507 25 is_stmt 1 view .LVU420
 508:./tmk_core/common/action.c ****                         } else {
 1718               		.loc 1 508 29 is_stmt 0 view .LVU421
 1719 03c2 8D2F      		mov r24,r29
 507:./tmk_core/common/action.c ****                             register_code(action.swap.code);
 1720               		.loc 1 507 28 view .LVU422
 1721 03c4 1123      		tst r17
 1722 03c6 01F0      		breq .L163
 508:./tmk_core/common/action.c ****                         } else {
 1723               		.loc 1 508 29 is_stmt 1 view .LVU423
 1724 03c8 0E94 0000 		call register_code
 1725               	.LVL157:
 1726 03cc 00C0      		rjmp .L87
 1727               	.L153:
 1728 03ce D43F      		cpi r29,lo8(-12)
 1729 03d0 01F0      		breq .L157
 1730 03d2 00F0      		brlo .L158
 1731 03d4 D53F      		cpi r29,lo8(-11)
 1732 03d6 01F4      		brne .L156
 485:./tmk_core/common/action.c ****                         swap_hands = true;
 1733               		.loc 1 485 21 view .LVU424
 485:./tmk_core/common/action.c ****                         swap_hands = true;
 1734               		.loc 1 485 24 is_stmt 0 view .LVU425
 1735 03d8 1111      		cpse r17,__zero_reg__
 1736 03da 00C0      		rjmp .L87
 486:./tmk_core/common/action.c ****                     }
 1737               		.loc 1 486 25 is_stmt 1 view .LVU426
 486:./tmk_core/common/action.c ****                     }
 1738               		.loc 1 486 36 is_stmt 0 view .LVU427
 1739 03dc 81E0      		ldi r24,lo8(1)
 1740 03de 00C0      		rjmp .L196
 1741               	.L154:
 474:./tmk_core/common/action.c ****                         swap_hands = !swap_hands;
 1742               		.loc 1 474 21 is_stmt 1 view .LVU428
 474:./tmk_core/common/action.c ****                         swap_hands = !swap_hands;
 1743               		.loc 1 474 24 is_stmt 0 view .LVU429
 1744 03e0 1123      		tst r17
 1745 03e2 01F0      		breq .L87
 1746               	.L161:
 475:./tmk_core/common/action.c ****                     }
 1747               		.loc 1 475 25 is_stmt 1 view .LVU430
 1748 03e4 8091 0000 		lds r24,swap_hands
 1749 03e8 91E0      		ldi r25,lo8(1)
 1750 03ea 8927      		eor r24,r25
 1751               	.L196:
 486:./tmk_core/common/action.c ****                     }
 1752               		.loc 1 486 36 is_stmt 0 view .LVU431
 1753 03ec 8093 0000 		sts swap_hands,r24
 1754               	.LVL158:
 1755               	.L87:
 520:./tmk_core/common/action.c ****             break;
 1756               		.loc 1 520 13 is_stmt 1 view .LVU432
 520:./tmk_core/common/action.c ****             break;
 1757               		.loc 1 520 64 is_stmt 0 view .LVU433
 1758 03f0 4C2F      		mov r20,r28
 1759 03f2 4F70      		andi r20,lo8(15)
 520:./tmk_core/common/action.c ****             break;
 1760               		.loc 1 520 13 view .LVU434
 1761 03f4 6D2F      		mov r22,r29
 1762 03f6 C701      		movw r24,r14
 1763 03f8 0E94 0000 		call action_function
 1764               	.LVL159:
 521:./tmk_core/common/action.c **** #endif
 1765               		.loc 1 521 13 is_stmt 1 view .LVU435
 1766 03fc 00C0      		rjmp .L86
 1767               	.LVL160:
 1768               	.L158:
 482:./tmk_core/common/action.c ****                     break;
 1769               		.loc 1 482 21 view .LVU436
 1770 03fe 81E0      		ldi r24,lo8(1)
 1771 0400 1827      		eor r17,r24
 1772               	.LVL161:
 1773               	.L162:
 513:./tmk_core/common/action.c ****                     }
 1774               		.loc 1 513 25 view .LVU437
 513:./tmk_core/common/action.c ****                     }
 1775               		.loc 1 513 36 is_stmt 0 view .LVU438
 1776 0402 1093 0000 		sts swap_hands,r17
 1777 0406 00C0      		rjmp .L87
 1778               	.LVL162:
 1779               	.L157:
 490:./tmk_core/common/action.c ****                         swap_hands = false;
 1780               		.loc 1 490 21 is_stmt 1 view .LVU439
 490:./tmk_core/common/action.c ****                         swap_hands = false;
 1781               		.loc 1 490 24 is_stmt 0 view .LVU440
 1782 0408 1111      		cpse r17,__zero_reg__
 1783 040a 00C0      		rjmp .L87
 491:./tmk_core/common/action.c ****                     }
 1784               		.loc 1 491 25 is_stmt 1 view .LVU441
 491:./tmk_core/common/action.c ****                     }
 1785               		.loc 1 491 36 is_stmt 0 view .LVU442
 1786 040c 1092 0000 		sts swap_hands,__zero_reg__
 1787 0410 00C0      		rjmp .L87
 1788               	.L155:
 497:./tmk_core/common/action.c ****                         if (!event.pressed) {
 1789               		.loc 1 497 21 is_stmt 1 view .LVU443
 497:./tmk_core/common/action.c ****                         if (!event.pressed) {
 1790               		.loc 1 497 24 is_stmt 0 view .LVU444
 1791 0412 0023      		tst r16
 1792 0414 01F0      		breq .L162
 498:./tmk_core/common/action.c ****                             swap_hands = !swap_hands;
 1793               		.loc 1 498 25 is_stmt 1 view .LVU445
 498:./tmk_core/common/action.c ****                             swap_hands = !swap_hands;
 1794               		.loc 1 498 28 is_stmt 0 view .LVU446
 1795 0416 1111      		cpse r17,__zero_reg__
 1796 0418 00C0      		rjmp .L87
 1797 041a 00C0      		rjmp .L161
 1798               	.L163:
 510:./tmk_core/common/action.c ****                         }
 1799               		.loc 1 510 29 is_stmt 1 view .LVU447
 1800 041c 0E94 0000 		call unregister_code
 1801               	.LVL163:
 1802 0420 00C0      		rjmp .L87
 1803               	.LVL164:
 1804               	.L83:
 1805               	/* epilogue start */
 538:./tmk_core/common/action.c **** 
 1806               		.loc 1 538 1 is_stmt 0 view .LVU448
 1807 0422 DF91      		pop r29
 1808               	.LVL165:
 538:./tmk_core/common/action.c **** 
 1809               		.loc 1 538 1 view .LVU449
 1810 0424 CF91      		pop r28
 538:./tmk_core/common/action.c **** 
 1811               		.loc 1 538 1 view .LVU450
 1812 0426 1F91      		pop r17
 1813 0428 0F91      		pop r16
 1814 042a FF90      		pop r15
 1815 042c EF90      		pop r14
 1816               	.LVL166:
 538:./tmk_core/common/action.c **** 
 1817               		.loc 1 538 1 view .LVU451
 1818 042e DF90      		pop r13
 1819               	.LVL167:
 538:./tmk_core/common/action.c **** 
 1820               		.loc 1 538 1 view .LVU452
 1821 0430 BF90      		pop r11
 1822 0432 AF90      		pop r10
 1823 0434 9F90      		pop r9
 1824 0436 8F90      		pop r8
 1825 0438 0895      		ret
 1826               		.cfi_endproc
 1827               	.LFE108:
 1829               		.section	.text.process_record,"ax",@progbits
 1830               	.global	process_record
 1832               	process_record:
 1833               	.LVL168:
 1834               	.LFB107:
 104:./tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) { return; }
 1835               		.loc 1 104 1 is_stmt 1 view -0
 1836               		.cfi_startproc
 104:./tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) { return; }
 1837               		.loc 1 104 1 is_stmt 0 view .LVU454
 1838 0000 0F93      		push r16
 1839               	.LCFI18:
 1840               		.cfi_def_cfa_offset 3
 1841               		.cfi_offset 16, -2
 1842 0002 1F93      		push r17
 1843               	.LCFI19:
 1844               		.cfi_def_cfa_offset 4
 1845               		.cfi_offset 17, -3
 1846 0004 CF93      		push r28
 1847               	.LCFI20:
 1848               		.cfi_def_cfa_offset 5
 1849               		.cfi_offset 28, -4
 1850 0006 DF93      		push r29
 1851               	.LCFI21:
 1852               		.cfi_def_cfa_offset 6
 1853               		.cfi_offset 29, -5
 1854               	/* prologue: function */
 1855               	/* frame size = 0 */
 1856               	/* stack size = 4 */
 1857               	.L__stack_usage = 4
 1858 0008 EC01      		movw r28,r24
 105:./tmk_core/common/action.c **** 
 1859               		.loc 1 105 5 is_stmt 1 view .LVU455
 1860               	.LBB15:
 1861               	.LBI15:
 1862               		.loc 2 49 20 view .LVU456
 1863               	.LBB16:
 1864               		.loc 2 49 51 view .LVU457
 1865               		.loc 2 49 74 is_stmt 0 view .LVU458
 1866 000a 8B81      		ldd r24,Y+3
 1867 000c 9C81      		ldd r25,Y+4
 1868               	.LVL169:
 1869               		.loc 2 49 74 view .LVU459
 1870 000e 892B      		or r24,r25
 1871 0010 01F0      		breq .L210
 1872 0012 8881      		ld r24,Y
 1873 0014 9981      		ldd r25,Y+1
 1874 0016 8923      		and r24,r25
 1875 0018 8F3F      		cpi r24,lo8(-1)
 1876 001a 01F4      		brne .L220
 1877               	.L210:
 1878               	/* epilogue start */
 1879               	.LBE16:
 1880               	.LBE15:
 119:./tmk_core/common/action.c **** 
 1881               		.loc 1 119 1 view .LVU460
 1882 001c DF91      		pop r29
 1883 001e CF91      		pop r28
 1884               	.LVL170:
 119:./tmk_core/common/action.c **** 
 1885               		.loc 1 119 1 view .LVU461
 1886 0020 1F91      		pop r17
 1887 0022 0F91      		pop r16
 1888 0024 0895      		ret
 1889               	.LVL171:
 1890               	.L220:
 107:./tmk_core/common/action.c ****         return;
 1891               		.loc 1 107 5 is_stmt 1 view .LVU462
 107:./tmk_core/common/action.c ****         return;
 1892               		.loc 1 107 9 is_stmt 0 view .LVU463
 1893 0026 CE01      		movw r24,r28
 1894 0028 0E94 0000 		call process_record_quantum
 1895               	.LVL172:
 107:./tmk_core/common/action.c ****         return;
 1896               		.loc 1 107 7 view .LVU464
 1897 002c 8823      		tst r24
 1898 002e 01F0      		breq .L210
 110:./tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
 1899               		.loc 1 110 5 is_stmt 1 view .LVU465
 110:./tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
 1900               		.loc 1 110 23 is_stmt 0 view .LVU466
 1901 0030 6881      		ld r22,Y
 1902 0032 7981      		ldd r23,Y+1
 1903 0034 8A81      		ldd r24,Y+2
 1904 0036 0E94 0000 		call store_or_get_action
 1905               	.LVL173:
 1906 003a 8C01      		movw r16,r24
 1907               	.LVL174:
 111:./tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 1908               		.loc 1 111 23 is_stmt 1 view .LVU467
 111:./tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 1909               		.loc 1 111 25 view .LVU468
 113:./tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 1910               		.loc 1 113 29 view .LVU469
 113:./tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 1911               		.loc 1 113 31 view .LVU470
 1912 003c 0E94 0000 		call layer_debug
 1913               	.LVL175:
 114:./tmk_core/common/action.c **** #endif
 1914               		.loc 1 114 37 view .LVU471
 114:./tmk_core/common/action.c **** #endif
 1915               		.loc 1 114 39 view .LVU472
 1916 0040 0E94 0000 		call default_layer_debug
 1917               	.LVL176:
 116:./tmk_core/common/action.c **** 
 1918               		.loc 1 116 15 view .LVU473
 118:./tmk_core/common/action.c **** }
 1919               		.loc 1 118 5 view .LVU474
 118:./tmk_core/common/action.c **** }
 1920               		.loc 1 118 5 is_stmt 0 view .LVU475
 1921 0044 B801      		movw r22,r16
 1922 0046 CE01      		movw r24,r28
 1923               	/* epilogue start */
 119:./tmk_core/common/action.c **** 
 1924               		.loc 1 119 1 view .LVU476
 1925 0048 DF91      		pop r29
 1926 004a CF91      		pop r28
 1927               	.LVL177:
 119:./tmk_core/common/action.c **** 
 1928               		.loc 1 119 1 view .LVU477
 1929 004c 1F91      		pop r17
 1930 004e 0F91      		pop r16
 1931               	.LVL178:
 118:./tmk_core/common/action.c **** }
 1932               		.loc 1 118 5 view .LVU478
 1933 0050 0C94 0000 		jmp process_action
 1934               	.LVL179:
 118:./tmk_core/common/action.c **** }
 1935               		.loc 1 118 5 view .LVU479
 1936               		.cfi_endproc
 1937               	.LFE107:
 1939               		.section	.text.process_record_nocache,"ax",@progbits
 1940               	.global	process_record_nocache
 1942               	process_record_nocache:
 1943               	.LVL180:
 1944               	.LFB105:
  93:./tmk_core/common/action.c ****     process_record(record);
 1945               		.loc 1 93 1 is_stmt 1 view -0
 1946               		.cfi_startproc
 1947               	/* prologue: function */
 1948               	/* frame size = 0 */
 1949               	/* stack size = 0 */
 1950               	.L__stack_usage = 0
  94:./tmk_core/common/action.c **** }
 1951               		.loc 1 94 5 view .LVU481
 1952 0000 0C94 0000 		jmp process_record
 1953               	.LVL181:
  94:./tmk_core/common/action.c **** }
 1954               		.loc 1 94 5 is_stmt 0 view .LVU482
 1955               		.cfi_endproc
 1956               	.LFE105:
 1958               		.section	.text.clear_keyboard_but_mods,"ax",@progbits
 1959               	.global	clear_keyboard_but_mods
 1961               	clear_keyboard_but_mods:
 1962               	.LFB114:
 691:./tmk_core/common/action.c **** 
 692:./tmk_core/common/action.c **** void clear_keyboard(void)
 693:./tmk_core/common/action.c **** {
 694:./tmk_core/common/action.c ****     clear_mods();
 695:./tmk_core/common/action.c ****     clear_keyboard_but_mods();
 696:./tmk_core/common/action.c **** }
 697:./tmk_core/common/action.c **** 
 698:./tmk_core/common/action.c **** void clear_keyboard_but_mods(void)
 699:./tmk_core/common/action.c **** {
 1963               		.loc 1 699 1 is_stmt 1 view -0
 1964               		.cfi_startproc
 1965               	/* prologue: function */
 1966               	/* frame size = 0 */
 1967               	/* stack size = 0 */
 1968               	.L__stack_usage = 0
 700:./tmk_core/common/action.c ****     clear_weak_mods();
 1969               		.loc 1 700 5 view .LVU484
 1970 0000 0E94 0000 		call clear_weak_mods
 1971               	.LVL182:
 701:./tmk_core/common/action.c ****     clear_macro_mods();
 1972               		.loc 1 701 5 view .LVU485
 1973 0004 0E94 0000 		call clear_macro_mods
 1974               	.LVL183:
 702:./tmk_core/common/action.c ****     clear_keys();
 1975               		.loc 1 702 5 view .LVU486
 1976 0008 0E94 0000 		call clear_keys
 1977               	.LVL184:
 703:./tmk_core/common/action.c ****     send_keyboard_report();
 1978               		.loc 1 703 5 view .LVU487
 1979 000c 0E94 0000 		call send_keyboard_report
 1980               	.LVL185:
 704:./tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 705:./tmk_core/common/action.c ****     mousekey_clear();
 706:./tmk_core/common/action.c ****     mousekey_send();
 707:./tmk_core/common/action.c **** #endif
 708:./tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 709:./tmk_core/common/action.c ****     host_system_send(0);
 1981               		.loc 1 709 5 view .LVU488
 1982 0010 90E0      		ldi r25,0
 1983 0012 80E0      		ldi r24,0
 1984 0014 0E94 0000 		call host_system_send
 1985               	.LVL186:
 710:./tmk_core/common/action.c ****     host_consumer_send(0);
 1986               		.loc 1 710 5 view .LVU489
 1987 0018 90E0      		ldi r25,0
 1988 001a 80E0      		ldi r24,0
 1989 001c 0C94 0000 		jmp host_consumer_send
 1990               	.LVL187:
 1991               		.cfi_endproc
 1992               	.LFE114:
 1994               		.section	.text.clear_keyboard,"ax",@progbits
 1995               	.global	clear_keyboard
 1997               	clear_keyboard:
 1998               	.LFB113:
 693:./tmk_core/common/action.c ****     clear_mods();
 1999               		.loc 1 693 1 view -0
 2000               		.cfi_startproc
 2001               	/* prologue: function */
 2002               	/* frame size = 0 */
 2003               	/* stack size = 0 */
 2004               	.L__stack_usage = 0
 694:./tmk_core/common/action.c ****     clear_keyboard_but_mods();
 2005               		.loc 1 694 5 view .LVU491
 2006 0000 0E94 0000 		call clear_mods
 2007               	.LVL188:
 695:./tmk_core/common/action.c **** }
 2008               		.loc 1 695 5 view .LVU492
 2009 0004 0C94 0000 		jmp clear_keyboard_but_mods
 2010               	.LVL189:
 2011               		.cfi_endproc
 2012               	.LFE113:
 2014               		.section	.text.is_tap_key,"ax",@progbits
 2015               	.global	is_tap_key
 2017               	is_tap_key:
 2018               	.LVL190:
 2019               	.LFB115:
 711:./tmk_core/common/action.c **** #endif
 712:./tmk_core/common/action.c **** }
 713:./tmk_core/common/action.c **** 
 714:./tmk_core/common/action.c **** bool is_tap_key(keypos_t key)
 715:./tmk_core/common/action.c **** {
 2020               		.loc 1 715 1 view -0
 2021               		.cfi_startproc
 2022               	/* prologue: function */
 2023               	/* frame size = 0 */
 2024               	/* stack size = 0 */
 2025               	.L__stack_usage = 0
 716:./tmk_core/common/action.c ****     action_t action = layer_switch_get_action(key);
 2026               		.loc 1 716 5 view .LVU494
 2027               		.loc 1 716 23 is_stmt 0 view .LVU495
 2028 0000 0E94 0000 		call layer_switch_get_action
 2029               	.LVL191:
 717:./tmk_core/common/action.c **** 
 718:./tmk_core/common/action.c ****     switch (action.kind.id) {
 2030               		.loc 1 718 5 is_stmt 1 view .LVU496
 2031               		.loc 1 718 24 is_stmt 0 view .LVU497
 2032 0004 E92F      		mov r30,r25
 2033 0006 E295      		swap r30
 2034 0008 EF70      		andi r30,lo8(15)
 2035               		.loc 1 718 5 view .LVU498
 2036 000a E250      		subi r30,lo8(-(-2))
 2037 000c EE30      		cpi r30,lo8(14)
 2038 000e 00F4      		brsh .L233
 2039 0010 F0E0      		ldi r31,0
 2040 0012 E050      		subi r30,lo8(-(gs(.L227)))
 2041 0014 F040      		sbci r31,hi8(-(gs(.L227)))
 2042 0016 0C94 0000 		jmp __tablejump2__
 2043               		.section	.jumptables.gcc.is_tap_key,"a",@progbits
 2044               		.p2align	1
 2045               	.L227:
 2046 0000 0000      		.word gs(.L228)
 2047 0002 0000      		.word gs(.L228)
 2048 0004 0000      		.word gs(.L233)
 2049 0006 0000      		.word gs(.L233)
 2050 0008 0000      		.word gs(.L229)
 2051 000a 0000      		.word gs(.L233)
 2052 000c 0000      		.word gs(.L233)
 2053 000e 0000      		.word gs(.L233)
 2054 0010 0000      		.word gs(.L228)
 2055 0012 0000      		.word gs(.L228)
 2056 0014 0000      		.word gs(.L226)
 2057 0016 0000      		.word gs(.L233)
 2058 0018 0000      		.word gs(.L233)
 2059 001a 0000      		.word gs(.L226)
 2060               		.section	.text.is_tap_key
 2061               	.L228:
 719:./tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 720:./tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 721:./tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 722:./tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 723:./tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 2062               		.loc 1 723 13 is_stmt 1 view .LVU499
 2063 001a 803F      		cpi r24,lo8(-16)
 2064 001c 01F0      		breq .L236
 2065 001e 00F4      		brsh .L230
 2066 0020 803E      		cpi r24,lo8(-32)
 2067 0022 00F4      		brsh .L233
 2068               	.L236:
 724:./tmk_core/common/action.c ****                 case 0x00 ... 0xdf:
 725:./tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 726:./tmk_core/common/action.c ****                 case OP_ONESHOT:
 727:./tmk_core/common/action.c ****                     return true;
 2069               		.loc 1 727 28 is_stmt 0 view .LVU500
 2070 0024 81E0      		ldi r24,lo8(1)
 2071               	.LVL192:
 2072               	/* epilogue start */
 728:./tmk_core/common/action.c ****             }
 729:./tmk_core/common/action.c ****             return false;
 730:./tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 731:./tmk_core/common/action.c ****             switch (action.swap.code) {
 732:./tmk_core/common/action.c ****                 case 0x00 ... 0xdf:
 733:./tmk_core/common/action.c ****                 case OP_SH_TAP_TOGGLE:
 734:./tmk_core/common/action.c ****                     return true;
 735:./tmk_core/common/action.c ****             }
 736:./tmk_core/common/action.c ****             return false;
 737:./tmk_core/common/action.c ****         case ACT_MACRO:
 738:./tmk_core/common/action.c ****         case ACT_FUNCTION:
 739:./tmk_core/common/action.c ****             if (action.func.opt & FUNC_TAP) { return true; }
 740:./tmk_core/common/action.c ****             return false;
 741:./tmk_core/common/action.c ****     }
 742:./tmk_core/common/action.c ****     return false;
 743:./tmk_core/common/action.c **** }
 2073               		.loc 1 743 1 view .LVU501
 2074 0026 0895      		ret
 2075               	.LVL193:
 2076               	.L230:
 2077               		.loc 1 743 1 view .LVU502
 2078 0028 843F      		cpi r24,lo8(-12)
 2079 002a 01F0      		breq .L236
 2080               	.L233:
 729:./tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 2081               		.loc 1 729 20 view .LVU503
 2082 002c 80E0      		ldi r24,0
 2083               	.LVL194:
 729:./tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 2084               		.loc 1 729 20 view .LVU504
 2085 002e 0895      		ret
 2086               	.LVL195:
 2087               	.L229:
 731:./tmk_core/common/action.c ****                 case 0x00 ... 0xdf:
 2088               		.loc 1 731 13 is_stmt 1 view .LVU505
 2089 0030 803E      		cpi r24,lo8(-32)
 2090 0032 00F0      		brlo .L236
 2091 0034 813F      		cpi r24,lo8(-15)
 2092 0036 01F4      		brne .L233
 2093 0038 00C0      		rjmp .L236
 2094               	.L226:
 739:./tmk_core/common/action.c ****             return false;
 2095               		.loc 1 739 13 view .LVU506
 739:./tmk_core/common/action.c ****             return false;
 2096               		.loc 1 739 16 is_stmt 0 view .LVU507
 2097 003a 93FB      		bst r25,3
 2098 003c 8827      		clr r24
 2099 003e 80F9      		bld r24,0
 2100               	.LVL196:
 739:./tmk_core/common/action.c ****             return false;
 2101               		.loc 1 739 16 view .LVU508
 2102 0040 0895      		ret
 2103               		.cfi_endproc
 2104               	.LFE115:
 2106               		.section	.text.debug_event,"ax",@progbits
 2107               	.global	debug_event
 2109               	debug_event:
 2110               	.LFB116:
 744:./tmk_core/common/action.c **** 
 745:./tmk_core/common/action.c **** 
 746:./tmk_core/common/action.c **** /*
 747:./tmk_core/common/action.c ****  * debug print
 748:./tmk_core/common/action.c ****  */
 749:./tmk_core/common/action.c **** void debug_event(keyevent_t event)
 750:./tmk_core/common/action.c **** {
 2111               		.loc 1 750 1 is_stmt 1 view -0
 2112               		.cfi_startproc
 2113 0000 CF93      		push r28
 2114               	.LCFI22:
 2115               		.cfi_def_cfa_offset 3
 2116               		.cfi_offset 28, -2
 2117 0002 DF93      		push r29
 2118               	.LCFI23:
 2119               		.cfi_def_cfa_offset 4
 2120               		.cfi_offset 29, -3
 2121 0004 00D0      		rcall .
 2122 0006 00D0      		rcall .
 2123 0008 0F92      		push __tmp_reg__
 2124               	.LCFI24:
 2125               		.cfi_def_cfa_offset 9
 2126 000a CDB7      		in r28,__SP_L__
 2127 000c DEB7      		in r29,__SP_H__
 2128               	.LCFI25:
 2129               		.cfi_def_cfa_register 28
 2130               	/* prologue: function */
 2131               	/* frame size = 5 */
 2132               	/* stack size = 7 */
 2133               	.L__stack_usage = 7
 751:./tmk_core/common/action.c ****     dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.ti
 2134               		.loc 1 751 103 view .LVU510
 2135               	/* epilogue start */
 752:./tmk_core/common/action.c **** }
 2136               		.loc 1 752 1 is_stmt 0 view .LVU511
 2137 000e 0F90      		pop __tmp_reg__
 2138 0010 0F90      		pop __tmp_reg__
 2139 0012 0F90      		pop __tmp_reg__
 2140 0014 0F90      		pop __tmp_reg__
 2141 0016 0F90      		pop __tmp_reg__
 2142 0018 DF91      		pop r29
 2143 001a CF91      		pop r28
 2144 001c 0895      		ret
 2145               		.cfi_endproc
 2146               	.LFE116:
 2148               		.section	.text.debug_record,"ax",@progbits
 2149               	.global	debug_record
 2151               	debug_record:
 2152               	.LFB117:
 753:./tmk_core/common/action.c **** 
 754:./tmk_core/common/action.c **** void debug_record(keyrecord_t record)
 755:./tmk_core/common/action.c **** {
 2153               		.loc 1 755 1 is_stmt 1 view -0
 2154               		.cfi_startproc
 2155 0000 CF93      		push r28
 2156               	.LCFI26:
 2157               		.cfi_def_cfa_offset 3
 2158               		.cfi_offset 28, -2
 2159 0002 DF93      		push r29
 2160               	.LCFI27:
 2161               		.cfi_def_cfa_offset 4
 2162               		.cfi_offset 29, -3
 2163 0004 00D0      		rcall .
 2164 0006 00D0      		rcall .
 2165 0008 00D0      		rcall .
 2166               	.LCFI28:
 2167               		.cfi_def_cfa_offset 10
 2168 000a CDB7      		in r28,__SP_L__
 2169 000c DEB7      		in r29,__SP_H__
 2170               	.LCFI29:
 2171               		.cfi_def_cfa_register 28
 2172               	/* prologue: function */
 2173               	/* frame size = 6 */
 2174               	/* stack size = 8 */
 2175               	.L__stack_usage = 8
 756:./tmk_core/common/action.c ****     debug_event(record.event);
 2176               		.loc 1 756 5 view .LVU513
 757:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 758:./tmk_core/common/action.c ****     dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
 2177               		.loc 1 758 77 view .LVU514
 2178               	/* epilogue start */
 759:./tmk_core/common/action.c **** #endif
 760:./tmk_core/common/action.c **** }
 2179               		.loc 1 760 1 is_stmt 0 view .LVU515
 2180 000e 2696      		adiw r28,6
 2181 0010 0FB6      		in __tmp_reg__,__SREG__
 2182 0012 F894      		cli
 2183 0014 DEBF      		out __SP_H__,r29
 2184 0016 0FBE      		out __SREG__,__tmp_reg__
 2185 0018 CDBF      		out __SP_L__,r28
 2186 001a DF91      		pop r29
 2187 001c CF91      		pop r28
 2188 001e 0895      		ret
 2189               		.cfi_endproc
 2190               	.LFE117:
 2192               		.section	.text.debug_action,"ax",@progbits
 2193               	.global	debug_action
 2195               	debug_action:
 2196               	.LVL197:
 2197               	.LFB118:
 761:./tmk_core/common/action.c **** 
 762:./tmk_core/common/action.c **** void debug_action(action_t action)
 763:./tmk_core/common/action.c **** {
 2198               		.loc 1 763 1 is_stmt 1 view -0
 2199               		.cfi_startproc
 2200               	/* prologue: function */
 2201               	/* frame size = 0 */
 2202               	/* stack size = 0 */
 2203               	.L__stack_usage = 0
 764:./tmk_core/common/action.c ****     switch (action.kind.id) {
 2204               		.loc 1 764 5 view .LVU517
 765:./tmk_core/common/action.c ****         case ACT_LMODS:             dprint("ACT_LMODS");             break;
 766:./tmk_core/common/action.c ****         case ACT_RMODS:             dprint("ACT_RMODS");             break;
 767:./tmk_core/common/action.c ****         case ACT_LMODS_TAP:         dprint("ACT_LMODS_TAP");         break;
 768:./tmk_core/common/action.c ****         case ACT_RMODS_TAP:         dprint("ACT_RMODS_TAP");         break;
 769:./tmk_core/common/action.c ****         case ACT_USAGE:             dprint("ACT_USAGE");             break;
 770:./tmk_core/common/action.c ****         case ACT_MOUSEKEY:          dprint("ACT_MOUSEKEY");          break;
 771:./tmk_core/common/action.c ****         case ACT_LAYER:             dprint("ACT_LAYER");             break;
 772:./tmk_core/common/action.c ****         case ACT_LAYER_TAP:         dprint("ACT_LAYER_TAP");         break;
 773:./tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:     dprint("ACT_LAYER_TAP_EXT");     break;
 774:./tmk_core/common/action.c ****         case ACT_MACRO:             dprint("ACT_MACRO");             break;
 775:./tmk_core/common/action.c ****         case ACT_COMMAND:           dprint("ACT_COMMAND");           break;
 776:./tmk_core/common/action.c ****         case ACT_FUNCTION:          dprint("ACT_FUNCTION");          break;
 777:./tmk_core/common/action.c ****         case ACT_SWAP_HANDS:        dprint("ACT_SWAP_HANDS");        break;
 778:./tmk_core/common/action.c ****         default:                    dprint("UNKNOWN");               break;
 779:./tmk_core/common/action.c ****     }
 780:./tmk_core/common/action.c ****     dprintf("[%X:%02X]", action.kind.param>>8, action.kind.param&0xff);
 2205               		.loc 1 780 71 view .LVU518
 2206               	/* epilogue start */
 781:./tmk_core/common/action.c **** }
 2207               		.loc 1 781 1 is_stmt 0 view .LVU519
 2208 0000 0895      		ret
 2209               		.cfi_endproc
 2210               	.LFE118:
 2212               		.section	.bss.swap_state.4896,"aw",@nobits
 2215               	swap_state.4896:
 2216 0000 0000 0000 		.zero	14
 2216      0000 0000 
 2216      0000 0000 
 2216      0000 
 2217               	.global	swap_hands
 2218               		.section	.bss.swap_hands,"aw",@nobits
 2221               	swap_hands:
 2222 0000 00        		.zero	1
 2223               		.text
 2224               	.Letext0:
 2225               		.file 3 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/stdint.h"
 2226               		.file 4 "./tmk_core/common/keycode.h"
 2227               		.file 5 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 2228               		.file 6 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 2229               		.file 7 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 2230               		.file 8 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/HostStandardReq.h"
 2231               		.file 9 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/stdio.h"
 2232               		.file 10 "./tmk_core/common/report.h"
 2233               		.file 11 "./tmk_core/common/host.h"
 2234               		.file 12 "./tmk_core/common/mousekey.h"
 2235               		.file 13 "./tmk_core/common/command.h"
 2236               		.file 14 "./tmk_core/common/action_code.h"
 2237               		.file 15 "./tmk_core/common/action.h"
 2238               		.file 16 "./tmk_core/common/action_layer.h"
 2239               		.file 17 "./tmk_core/common/action_util.h"
 2240               		.file 18 "./tmk_core/common/debug.h"
 2241               		.file 19 "./tmk_core/common/action_macro.h"
 2242               		.file 20 "./tmk_core/common/action_tapping.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action.c
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccEAXfUS.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccEAXfUS.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccEAXfUS.s:4      *ABS*:000000000000003f __SREG__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccEAXfUS.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccEAXfUS.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccEAXfUS.s:13     .text.process_hand_swap:0000000000000000 process_hand_swap
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccEAXfUS.s:2215   .bss.swap_state.4896:0000000000000000 swap_state.4896
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccEAXfUS.s:2221   .bss.swap_hands:0000000000000000 swap_hands
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccEAXfUS.s:130    .text.action_exec:0000000000000000 action_exec
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccEAXfUS.s:231    .text.process_record_quantum:0000000000000000 process_record_quantum
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccEAXfUS.s:253    .text.register_code:0000000000000000 register_code
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccEAXfUS.s:568    .text.unregister_code:0000000000000000 unregister_code
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccEAXfUS.s:726    .text.register_mods:0000000000000000 register_mods
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccEAXfUS.s:755    .text.unregister_mods:0000000000000000 unregister_mods
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccEAXfUS.s:784    .text.process_action:0000000000000000 process_action
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccEAXfUS.s:1832   .text.process_record:0000000000000000 process_record
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccEAXfUS.s:1942   .text.process_record_nocache:0000000000000000 process_record_nocache
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccEAXfUS.s:1961   .text.clear_keyboard_but_mods:0000000000000000 clear_keyboard_but_mods
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccEAXfUS.s:1997   .text.clear_keyboard:0000000000000000 clear_keyboard
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccEAXfUS.s:2017   .text.is_tap_key:0000000000000000 is_tap_key
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccEAXfUS.s:2109   .text.debug_event:0000000000000000 debug_event
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccEAXfUS.s:2151   .text.debug_record:0000000000000000 debug_record
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccEAXfUS.s:2195   .text.debug_action:0000000000000000 debug_action

UNDEFINED SYMBOLS
hand_swap_config
action_tapping_process
host_keyboard_leds
add_key
send_keyboard_report
del_key
command_proc
add_mods
host_system_send
host_consumer_send
del_mods
clear_weak_mods
is_oneshot_layer_active
clear_oneshot_layer_state
__tablejump2__
add_weak_mods
get_oneshot_layer_state
get_oneshot_layer
layer_on
layer_off
del_weak_mods
set_oneshot_mods
clear_oneshot_mods
default_layer_and
default_layer_xor
default_layer_or
layer_and
layer_xor
layer_or
layer_invert
layer_move
layer_clear
set_oneshot_layer
action_get_macro
action_macro_play
action_function
store_or_get_action
layer_debug
default_layer_debug
clear_macro_mods
clear_keys
clear_mods
layer_switch_get_action
__do_clear_bss
