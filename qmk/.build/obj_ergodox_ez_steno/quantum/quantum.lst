   1               		.file	"quantum.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.do_code16,"ax",@progbits
  12               	do_code16:
  13               	.LVL0:
  14               	.LFB107:
  15               		.file 1 "quantum/quantum.c"
   1:quantum/quantum.c **** #include "quantum.h"
   2:quantum/quantum.c **** 
   3:quantum/quantum.c **** static void do_code16 (uint16_t code, void (*f) (uint8_t)) {
  16               		.loc 1 3 60 view -0
  17               		.cfi_startproc
  18               		.loc 1 3 60 is_stmt 0 view .LVU1
  19 0000 0F93      		push r16
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 16, -2
  23 0002 1F93      		push r17
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 17, -3
  27 0004 CF93      		push r28
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 28, -4
  31 0006 DF93      		push r29
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 29, -5
  35               	/* prologue: function */
  36               	/* frame size = 0 */
  37               	/* stack size = 4 */
  38               	.L__stack_usage = 4
  39 0008 EC01      		movw r28,r24
  40 000a 8B01      		movw r16,r22
   4:quantum/quantum.c ****   switch (code) {
  41               		.loc 1 4 3 is_stmt 1 view .LVU2
  42 000c 9A95      		dec r25
  43               	.LVL1:
  44               		.loc 1 4 3 is_stmt 0 view .LVU3
  45 000e 8115      		cp r24,__zero_reg__
  46 0010 9F41      		sbci r25,31
  47 0012 00F4      		brsh .L1
   5:quantum/quantum.c ****   case QK_MODS ... QK_MODS_MAX:
   6:quantum/quantum.c ****     break;
  48               		.loc 1 6 5 is_stmt 1 view .LVU4
   7:quantum/quantum.c ****   default:
   8:quantum/quantum.c ****     return;
   9:quantum/quantum.c ****   }
  10:quantum/quantum.c **** 
  11:quantum/quantum.c ****   if (code & QK_LCTL)
  49               		.loc 1 11 3 view .LVU5
  50               		.loc 1 11 6 is_stmt 0 view .LVU6
  51 0014 D0FF      		sbrs r29,0
  52 0016 00C0      		rjmp .L4
  12:quantum/quantum.c ****     f(KC_LCTL);
  53               		.loc 1 12 5 is_stmt 1 view .LVU7
  54 0018 80EE      		ldi r24,lo8(-32)
  55 001a FB01      		movw r30,r22
  56 001c 0995      		icall
  57               	.LVL2:
  58               	.L4:
  13:quantum/quantum.c ****   if (code & QK_LSFT)
  59               		.loc 1 13 3 view .LVU8
  60               		.loc 1 13 6 is_stmt 0 view .LVU9
  61 001e D1FF      		sbrs r29,1
  62 0020 00C0      		rjmp .L5
  14:quantum/quantum.c ****     f(KC_LSFT);
  63               		.loc 1 14 5 is_stmt 1 view .LVU10
  64 0022 81EE      		ldi r24,lo8(-31)
  65 0024 F801      		movw r30,r16
  66 0026 0995      		icall
  67               	.LVL3:
  68               	.L5:
  15:quantum/quantum.c ****   if (code & QK_LALT)
  69               		.loc 1 15 3 view .LVU11
  70               		.loc 1 15 6 is_stmt 0 view .LVU12
  71 0028 D2FF      		sbrs r29,2
  72 002a 00C0      		rjmp .L6
  16:quantum/quantum.c ****     f(KC_LALT);
  73               		.loc 1 16 5 is_stmt 1 view .LVU13
  74 002c 82EE      		ldi r24,lo8(-30)
  75 002e F801      		movw r30,r16
  76 0030 0995      		icall
  77               	.LVL4:
  78               	.L6:
  17:quantum/quantum.c ****   if (code & QK_LGUI)
  79               		.loc 1 17 3 view .LVU14
  80               		.loc 1 17 6 is_stmt 0 view .LVU15
  81 0032 D3FF      		sbrs r29,3
  82 0034 00C0      		rjmp .L7
  18:quantum/quantum.c ****     f(KC_LGUI);
  83               		.loc 1 18 5 is_stmt 1 view .LVU16
  84 0036 83EE      		ldi r24,lo8(-29)
  85 0038 F801      		movw r30,r16
  86 003a 0995      		icall
  87               	.LVL5:
  88               	.L7:
  19:quantum/quantum.c **** 
  20:quantum/quantum.c ****   if (code & QK_RCTL)
  89               		.loc 1 20 3 view .LVU17
  90               		.loc 1 20 12 is_stmt 0 view .LVU18
  91 003c CE01      		movw r24,r28
  92 003e 8827      		clr r24
  93 0040 9171      		andi r25,17
  94               		.loc 1 20 6 view .LVU19
  95 0042 892B      		or r24,r25
  96 0044 01F0      		breq .L8
  21:quantum/quantum.c ****     f(KC_RCTL);
  97               		.loc 1 21 5 is_stmt 1 view .LVU20
  98 0046 84EE      		ldi r24,lo8(-28)
  99 0048 F801      		movw r30,r16
 100 004a 0995      		icall
 101               	.LVL6:
 102               	.L8:
  22:quantum/quantum.c ****   if (code & QK_RSFT)
 103               		.loc 1 22 3 view .LVU21
 104               		.loc 1 22 12 is_stmt 0 view .LVU22
 105 004c CE01      		movw r24,r28
 106 004e 8827      		clr r24
 107 0050 9271      		andi r25,18
 108               		.loc 1 22 6 view .LVU23
 109 0052 892B      		or r24,r25
 110 0054 01F0      		breq .L9
  23:quantum/quantum.c ****     f(KC_RSFT);
 111               		.loc 1 23 5 is_stmt 1 view .LVU24
 112 0056 85EE      		ldi r24,lo8(-27)
 113 0058 F801      		movw r30,r16
 114 005a 0995      		icall
 115               	.LVL7:
 116               	.L9:
  24:quantum/quantum.c ****   if (code & QK_RALT)
 117               		.loc 1 24 3 view .LVU25
 118               		.loc 1 24 12 is_stmt 0 view .LVU26
 119 005c CE01      		movw r24,r28
 120 005e 8827      		clr r24
 121 0060 9471      		andi r25,20
 122               		.loc 1 24 6 view .LVU27
 123 0062 892B      		or r24,r25
 124 0064 01F0      		breq .L10
  25:quantum/quantum.c ****     f(KC_RALT);
 125               		.loc 1 25 5 is_stmt 1 view .LVU28
 126 0066 86EE      		ldi r24,lo8(-26)
 127 0068 F801      		movw r30,r16
 128 006a 0995      		icall
 129               	.LVL8:
 130               	.L10:
  26:quantum/quantum.c ****   if (code & QK_RGUI)
 131               		.loc 1 26 3 view .LVU29
 132               		.loc 1 26 12 is_stmt 0 view .LVU30
 133 006c CC27      		clr r28
 134 006e D871      		andi r29,24
 135               	.LVL9:
 136               		.loc 1 26 6 view .LVU31
 137 0070 CD2B      		or r28,r29
 138 0072 01F0      		breq .L1
  27:quantum/quantum.c ****     f(KC_RGUI);
 139               		.loc 1 27 5 is_stmt 1 view .LVU32
 140 0074 87EE      		ldi r24,lo8(-25)
 141 0076 F801      		movw r30,r16
 142               	/* epilogue start */
  28:quantum/quantum.c **** }
 143               		.loc 1 28 1 is_stmt 0 view .LVU33
 144 0078 DF91      		pop r29
 145 007a CF91      		pop r28
 146 007c 1F91      		pop r17
 147 007e 0F91      		pop r16
 148               	.LVL10:
  27:quantum/quantum.c ****     f(KC_RGUI);
 149               		.loc 1 27 5 view .LVU34
 150 0080 0994      		ijmp
 151               	.LVL11:
 152               	.L1:
 153               	/* epilogue start */
 154               		.loc 1 28 1 view .LVU35
 155 0082 DF91      		pop r29
 156 0084 CF91      		pop r28
 157 0086 1F91      		pop r17
 158 0088 0F91      		pop r16
 159               	.LVL12:
 160               		.loc 1 28 1 view .LVU36
 161 008a 0895      		ret
 162               		.cfi_endproc
 163               	.LFE107:
 165               		.section	.text.register_code16,"ax",@progbits
 166               	.global	register_code16
 168               	register_code16:
 169               	.LVL13:
 170               	.LFB108:
  29:quantum/quantum.c **** 
  30:quantum/quantum.c **** void register_code16 (uint16_t code) {
 171               		.loc 1 30 38 is_stmt 1 view -0
 172               		.cfi_startproc
 173               		.loc 1 30 38 is_stmt 0 view .LVU38
 174 0000 CF93      		push r28
 175               	.LCFI4:
 176               		.cfi_def_cfa_offset 3
 177               		.cfi_offset 28, -2
 178               	/* prologue: function */
 179               	/* frame size = 0 */
 180               	/* stack size = 1 */
 181               	.L__stack_usage = 1
 182 0002 C82F      		mov r28,r24
  31:quantum/quantum.c ****   do_code16 (code, register_code);
 183               		.loc 1 31 3 is_stmt 1 view .LVU39
 184 0004 60E0      		ldi r22,lo8(gs(register_code))
 185 0006 70E0      		ldi r23,hi8(gs(register_code))
 186 0008 0E94 0000 		call do_code16
 187               	.LVL14:
  32:quantum/quantum.c ****   register_code (code);
 188               		.loc 1 32 3 view .LVU40
 189 000c 8C2F      		mov r24,r28
 190               	/* epilogue start */
  33:quantum/quantum.c **** }
 191               		.loc 1 33 1 is_stmt 0 view .LVU41
 192 000e CF91      		pop r28
  32:quantum/quantum.c ****   register_code (code);
 193               		.loc 1 32 3 view .LVU42
 194 0010 0C94 0000 		jmp register_code
 195               	.LVL15:
 196               		.cfi_endproc
 197               	.LFE108:
 199               		.section	.text.unregister_code16,"ax",@progbits
 200               	.global	unregister_code16
 202               	unregister_code16:
 203               	.LVL16:
 204               	.LFB109:
  34:quantum/quantum.c **** 
  35:quantum/quantum.c **** void unregister_code16 (uint16_t code) {
 205               		.loc 1 35 40 is_stmt 1 view -0
 206               		.cfi_startproc
 207               		.loc 1 35 40 is_stmt 0 view .LVU44
 208 0000 CF93      		push r28
 209               	.LCFI5:
 210               		.cfi_def_cfa_offset 3
 211               		.cfi_offset 28, -2
 212 0002 DF93      		push r29
 213               	.LCFI6:
 214               		.cfi_def_cfa_offset 4
 215               		.cfi_offset 29, -3
 216               	/* prologue: function */
 217               	/* frame size = 0 */
 218               	/* stack size = 2 */
 219               	.L__stack_usage = 2
 220 0004 EC01      		movw r28,r24
  36:quantum/quantum.c ****   unregister_code (code);
 221               		.loc 1 36 3 is_stmt 1 view .LVU45
 222 0006 0E94 0000 		call unregister_code
 223               	.LVL17:
  37:quantum/quantum.c ****   do_code16 (code, unregister_code);
 224               		.loc 1 37 3 view .LVU46
 225 000a 60E0      		ldi r22,lo8(gs(unregister_code))
 226 000c 70E0      		ldi r23,hi8(gs(unregister_code))
 227 000e CE01      		movw r24,r28
 228               	/* epilogue start */
  38:quantum/quantum.c **** }
 229               		.loc 1 38 1 is_stmt 0 view .LVU47
 230 0010 DF91      		pop r29
 231 0012 CF91      		pop r28
 232               	.LVL18:
  37:quantum/quantum.c ****   do_code16 (code, unregister_code);
 233               		.loc 1 37 3 view .LVU48
 234 0014 0C94 0000 		jmp do_code16
 235               	.LVL19:
  37:quantum/quantum.c ****   do_code16 (code, unregister_code);
 236               		.loc 1 37 3 view .LVU49
 237               		.cfi_endproc
 238               	.LFE109:
 240               		.section	.text.process_action_kb,"ax",@progbits
 241               		.weak	process_action_kb
 243               	process_action_kb:
 244               	.LVL20:
 245               	.LFB110:
  39:quantum/quantum.c **** 
  40:quantum/quantum.c **** __attribute__ ((weak))
  41:quantum/quantum.c **** bool process_action_kb(keyrecord_t *record) {
 246               		.loc 1 41 45 is_stmt 1 view -0
 247               		.cfi_startproc
 248               	/* prologue: function */
 249               	/* frame size = 0 */
 250               	/* stack size = 0 */
 251               	.L__stack_usage = 0
  42:quantum/quantum.c ****   return true;
 252               		.loc 1 42 3 view .LVU51
  43:quantum/quantum.c **** }
 253               		.loc 1 43 1 is_stmt 0 view .LVU52
 254 0000 81E0      		ldi r24,lo8(1)
 255               	.LVL21:
 256               	/* epilogue start */
 257               		.loc 1 43 1 view .LVU53
 258 0002 0895      		ret
 259               		.cfi_endproc
 260               	.LFE110:
 262               		.section	.text.process_record_user,"ax",@progbits
 263               		.weak	process_record_user
 265               	process_record_user:
 266               	.LVL22:
 267               	.LFB112:
  44:quantum/quantum.c **** 
  45:quantum/quantum.c **** __attribute__ ((weak))
  46:quantum/quantum.c **** bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
  47:quantum/quantum.c ****   return process_record_user(keycode, record);
  48:quantum/quantum.c **** }
  49:quantum/quantum.c **** 
  50:quantum/quantum.c **** __attribute__ ((weak))
  51:quantum/quantum.c **** bool process_record_user(uint16_t keycode, keyrecord_t *record) {
 268               		.loc 1 51 65 is_stmt 1 view -0
 269               		.cfi_startproc
 270               	/* prologue: function */
 271               	/* frame size = 0 */
 272               	/* stack size = 0 */
 273               	.L__stack_usage = 0
  52:quantum/quantum.c ****   return true;
 274               		.loc 1 52 3 view .LVU55
  53:quantum/quantum.c **** }
 275               		.loc 1 53 1 is_stmt 0 view .LVU56
 276 0000 81E0      		ldi r24,lo8(1)
 277               	.LVL23:
 278               	/* epilogue start */
 279               		.loc 1 53 1 view .LVU57
 280 0002 0895      		ret
 281               		.cfi_endproc
 282               	.LFE112:
 284               		.section	.text.process_record_kb,"ax",@progbits
 285               		.weak	process_record_kb
 287               	process_record_kb:
 288               	.LVL24:
 289               	.LFB111:
  46:quantum/quantum.c ****   return process_record_user(keycode, record);
 290               		.loc 1 46 63 is_stmt 1 view -0
 291               		.cfi_startproc
 292               	/* prologue: function */
 293               	/* frame size = 0 */
 294               	/* stack size = 0 */
 295               	.L__stack_usage = 0
  47:quantum/quantum.c **** }
 296               		.loc 1 47 3 view .LVU59
  47:quantum/quantum.c **** }
 297               		.loc 1 47 10 is_stmt 0 view .LVU60
 298 0000 0C94 0000 		jmp process_record_user
 299               	.LVL25:
  47:quantum/quantum.c **** }
 300               		.loc 1 47 10 view .LVU61
 301               		.cfi_endproc
 302               	.LFE111:
 304               		.section	.text.reset_keyboard,"ax",@progbits
 305               	.global	reset_keyboard
 307               	reset_keyboard:
 308               	.LFB113:
  54:quantum/quantum.c **** 
  55:quantum/quantum.c **** void reset_keyboard(void) {
 309               		.loc 1 55 27 is_stmt 1 view -0
 310               		.cfi_startproc
 311               	/* prologue: function */
 312               	/* frame size = 0 */
 313               	/* stack size = 0 */
 314               	.L__stack_usage = 0
  56:quantum/quantum.c ****   clear_keyboard();
 315               		.loc 1 56 3 view .LVU63
 316 0000 0E94 0000 		call clear_keyboard
 317               	.LVL26:
  57:quantum/quantum.c **** #ifdef AUDIO_ENABLE
  58:quantum/quantum.c ****   stop_all_notes();
  59:quantum/quantum.c ****   shutdown_user();
  60:quantum/quantum.c **** #endif
  61:quantum/quantum.c ****   wait_ms(250);
 318               		.loc 1 61 3 view .LVU64
 319               	.LBB4:
 320               	.LBI4:
 321               		.file 2 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** _delay_ms(double __ms)
 322               		.loc 2 166 1 view .LVU65
 323               	.LBB5:
 167:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	double __tmp ;
 324               		.loc 2 168 2 view .LVU66
 169:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 325               		.loc 2 172 2 view .LVU67
 173:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 326               		.loc 2 173 2 view .LVU68
 174:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 327               		.loc 2 174 2 view .LVU69
 175:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 328               		.loc 2 184 3 view .LVU70
 185:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 329               		.loc 2 187 2 view .LVU71
 330 0004 2FEF      		ldi r18,lo8(799999)
 331 0006 84E3      		ldi r24,hi8(799999)
 332 0008 9CE0      		ldi r25,hlo8(799999)
 333 000a 2150      	1:	subi r18,1
 334 000c 8040      		sbci r24,0
 335 000e 9040      		sbci r25,0
 336 0010 01F4      		brne 1b
 337 0012 00C0      		rjmp .
 338 0014 0000      		nop
 339               	.LVL27:
 340               		.loc 2 187 2 is_stmt 0 view .LVU72
 341               	.LBE5:
 342               	.LBE4:
  62:quantum/quantum.c **** #ifdef CATERINA_BOOTLOADER
  63:quantum/quantum.c ****   *(uint16_t *)0x0800 = 0x7777; // these two are a-star-specific
  64:quantum/quantum.c **** #endif
  65:quantum/quantum.c ****   bootloader_jump();
 343               		.loc 1 65 3 is_stmt 1 view .LVU73
 344 0016 0C94 0000 		jmp bootloader_jump
 345               	.LVL28:
 346               		.cfi_endproc
 347               	.LFE113:
 349               		.section	.text.process_record_quantum,"ax",@progbits
 350               	.global	process_record_quantum
 352               	process_record_quantum:
 353               	.LVL29:
 354               	.LFB114:
  66:quantum/quantum.c **** }
  67:quantum/quantum.c **** 
  68:quantum/quantum.c **** // Shift / paren setup
  69:quantum/quantum.c **** 
  70:quantum/quantum.c **** #ifndef LSPO_KEY
  71:quantum/quantum.c ****   #define LSPO_KEY KC_9
  72:quantum/quantum.c **** #endif
  73:quantum/quantum.c **** #ifndef RSPC_KEY
  74:quantum/quantum.c ****   #define RSPC_KEY KC_0
  75:quantum/quantum.c **** #endif
  76:quantum/quantum.c **** 
  77:quantum/quantum.c **** static bool shift_interrupted[2] = {0, 0};
  78:quantum/quantum.c **** 
  79:quantum/quantum.c **** bool process_record_quantum(keyrecord_t *record) {
 355               		.loc 1 79 50 view -0
 356               		.cfi_startproc
 357               		.loc 1 79 50 is_stmt 0 view .LVU75
 358 0000 0F93      		push r16
 359               	.LCFI7:
 360               		.cfi_def_cfa_offset 3
 361               		.cfi_offset 16, -2
 362 0002 1F93      		push r17
 363               	.LCFI8:
 364               		.cfi_def_cfa_offset 4
 365               		.cfi_offset 17, -3
 366 0004 CF93      		push r28
 367               	.LCFI9:
 368               		.cfi_def_cfa_offset 5
 369               		.cfi_offset 28, -4
 370 0006 DF93      		push r29
 371               	.LCFI10:
 372               		.cfi_def_cfa_offset 6
 373               		.cfi_offset 29, -5
 374               	/* prologue: function */
 375               	/* frame size = 0 */
 376               	/* stack size = 4 */
 377               	.L__stack_usage = 4
 378 0008 8C01      		movw r16,r24
  80:quantum/quantum.c **** 
  81:quantum/quantum.c ****   /* This gets the keycode from the key pressed */
  82:quantum/quantum.c ****   keypos_t key = record->event.key;
 379               		.loc 1 82 3 is_stmt 1 view .LVU76
 380               		.loc 1 82 12 is_stmt 0 view .LVU77
 381 000a FC01      		movw r30,r24
 382 000c C081      		ld r28,Z
 383 000e D181      		ldd r29,Z+1
 384               	.LVL30:
  83:quantum/quantum.c ****   uint16_t keycode;
 385               		.loc 1 83 3 is_stmt 1 view .LVU78
  84:quantum/quantum.c **** 
  85:quantum/quantum.c ****   #if !defined(NO_ACTION_LAYER) && defined(PREVENT_STUCK_MODIFIERS)
  86:quantum/quantum.c ****     /* TODO: Use store_or_get_action() or a similar function. */
  87:quantum/quantum.c ****     if (!disable_action_cache) {
  88:quantum/quantum.c ****       uint8_t layer;
  89:quantum/quantum.c **** 
  90:quantum/quantum.c ****       if (record->event.pressed) {
  91:quantum/quantum.c ****         layer = layer_switch_get_layer(key);
  92:quantum/quantum.c ****         update_source_layers_cache(key, layer);
  93:quantum/quantum.c ****       } else {
  94:quantum/quantum.c ****         layer = read_source_layers_cache(key);
  95:quantum/quantum.c ****       }
  96:quantum/quantum.c ****       keycode = keymap_key_to_keycode(layer, key);
  97:quantum/quantum.c ****     } else
  98:quantum/quantum.c ****   #endif
  99:quantum/quantum.c ****     keycode = keymap_key_to_keycode(layer_switch_get_layer(key), key);
 386               		.loc 1 99 5 view .LVU79
 387               		.loc 1 99 37 is_stmt 0 view .LVU80
 388 0010 CE01      		movw r24,r28
 389               	.LVL31:
 390               		.loc 1 99 37 view .LVU81
 391 0012 0E94 0000 		call layer_switch_get_layer
 392               	.LVL32:
 393               		.loc 1 99 15 view .LVU82
 394 0016 BE01      		movw r22,r28
 395 0018 0E94 0000 		call keymap_key_to_keycode
 396               	.LVL33:
 397 001c EC01      		movw r28,r24
 398               	.LVL34:
 100:quantum/quantum.c **** 
 101:quantum/quantum.c ****     // This is how you use actions here
 102:quantum/quantum.c ****     // if (keycode == KC_LEAD) {
 103:quantum/quantum.c ****     //   action_t action;
 104:quantum/quantum.c ****     //   action.code = ACTION_DEFAULT_LAYER_SET(0);
 105:quantum/quantum.c ****     //   process_action(record, action);
 106:quantum/quantum.c ****     //   return false;
 107:quantum/quantum.c ****     // }
 108:quantum/quantum.c **** 
 109:quantum/quantum.c ****   if (!(
 399               		.loc 1 109 3 is_stmt 1 view .LVU83
 110:quantum/quantum.c ****     process_record_kb(keycode, record) &&
 400               		.loc 1 110 5 is_stmt 0 view .LVU84
 401 001e B801      		movw r22,r16
 402 0020 0E94 0000 		call process_record_kb
 403               	.LVL35:
 111:quantum/quantum.c ****   #ifdef MIDI_ENABLE
 112:quantum/quantum.c ****     process_midi(keycode, record) &&
 113:quantum/quantum.c ****   #endif
 114:quantum/quantum.c ****   #ifdef AUDIO_ENABLE
 115:quantum/quantum.c ****     process_music(keycode, record) &&
 116:quantum/quantum.c ****   #endif
 117:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
 118:quantum/quantum.c ****     process_tap_dance(keycode, record) &&
 119:quantum/quantum.c ****   #endif
 120:quantum/quantum.c ****   #ifndef DISABLE_LEADER
 121:quantum/quantum.c ****     process_leader(keycode, record) &&
 404               		.loc 1 121 37 view .LVU85
 405 0024 8823      		tst r24
 406 0026 01F0      		breq .L42
 407               		.loc 1 121 5 discriminator 2 view .LVU86
 408 0028 B801      		movw r22,r16
 409 002a CE01      		movw r24,r28
 410 002c 0E94 0000 		call process_leader
 411               	.LVL36:
 110:quantum/quantum.c ****     process_record_kb(keycode, record) &&
 412               		.loc 1 110 40 discriminator 2 view .LVU87
 413 0030 8823      		tst r24
 414 0032 01F0      		breq .L42
 122:quantum/quantum.c ****   #endif
 123:quantum/quantum.c ****   #ifndef DISABLE_CHORDING
 124:quantum/quantum.c ****     process_chording(keycode, record) &&
 125:quantum/quantum.c ****   #endif
 126:quantum/quantum.c ****   #ifdef UNICODE_ENABLE
 127:quantum/quantum.c ****     process_unicode(keycode, record) &&
 415               		.loc 1 127 5 discriminator 3 view .LVU88
 416 0034 B801      		movw r22,r16
 417 0036 CE01      		movw r24,r28
 418 0038 0E94 0000 		call process_unicode
 419               	.LVL37:
 121:quantum/quantum.c ****   #endif
 420               		.loc 1 121 37 discriminator 3 view .LVU89
 421 003c 8823      		tst r24
 422 003e 01F0      		breq .L42
 128:quantum/quantum.c ****   #endif
 129:quantum/quantum.c ****   #ifdef UCIS_ENABLE
 130:quantum/quantum.c ****     process_ucis(keycode, record) &&
 131:quantum/quantum.c ****   #endif
 132:quantum/quantum.c ****   #ifdef UNICODEMAP_ENABLE
 133:quantum/quantum.c ****     process_unicode_map(keycode, record) &&
 134:quantum/quantum.c ****   #endif
 135:quantum/quantum.c ****       true)) {
 136:quantum/quantum.c ****     return false;
 137:quantum/quantum.c ****   }
 138:quantum/quantum.c **** 
 139:quantum/quantum.c ****   // Shift / paren setup
 140:quantum/quantum.c **** 
 141:quantum/quantum.c ****   switch(keycode) {
 423               		.loc 1 141 3 is_stmt 1 view .LVU90
 424 0040 C531      		cpi r28,21
 425 0042 F0E7      		ldi r31,112
 426 0044 DF07      		cpc r29,r31
 427 0046 00F4      		brsh .L46
 428 0048 C230      		cpi r28,2
 429 004a 80E7      		ldi r24,112
 430 004c D807      		cpc r29,r24
 431 004e 00F4      		brsh .L47
 432 0050 C115      		cp r28,__zero_reg__
 433 0052 E0E7      		ldi r30,112
 434 0054 DE07      		cpc r29,r30
 435 0056 01F0      		breq .L48
 436 0058 C130      		cpi r28,1
 437 005a D047      		sbci r29,112
 438 005c 01F0      		breq .L49
 439               	.L50:
 142:quantum/quantum.c ****     case RESET:
 143:quantum/quantum.c ****       if (record->event.pressed) {
 144:quantum/quantum.c ****         reset_keyboard();
 145:quantum/quantum.c ****       }
 146:quantum/quantum.c **** 	  return false;
 147:quantum/quantum.c ****       break;
 148:quantum/quantum.c ****     case DEBUG:
 149:quantum/quantum.c ****       if (record->event.pressed) {
 150:quantum/quantum.c ****           print("\nDEBUG: enabled.\n");
 151:quantum/quantum.c ****           debug_enable = true;
 152:quantum/quantum.c ****       }
 153:quantum/quantum.c **** 	  return false;
 154:quantum/quantum.c ****       break;
 155:quantum/quantum.c **** 	#ifdef RGBLIGHT_ENABLE
 156:quantum/quantum.c **** 	case RGB_TOG:
 157:quantum/quantum.c **** 		if (record->event.pressed) {
 158:quantum/quantum.c **** 			rgblight_toggle();
 159:quantum/quantum.c ****       }
 160:quantum/quantum.c **** 	  return false;
 161:quantum/quantum.c ****       break;
 162:quantum/quantum.c **** 	case RGB_MOD:
 163:quantum/quantum.c **** 		if (record->event.pressed) {
 164:quantum/quantum.c **** 			rgblight_step();
 165:quantum/quantum.c ****       }
 166:quantum/quantum.c **** 	  return false;
 167:quantum/quantum.c ****       break;
 168:quantum/quantum.c **** 	case RGB_HUI:
 169:quantum/quantum.c **** 		if (record->event.pressed) {
 170:quantum/quantum.c **** 			rgblight_increase_hue();
 171:quantum/quantum.c ****       }
 172:quantum/quantum.c **** 	  return false;
 173:quantum/quantum.c ****       break;
 174:quantum/quantum.c **** 	case RGB_HUD:
 175:quantum/quantum.c **** 		if (record->event.pressed) {
 176:quantum/quantum.c **** 			rgblight_decrease_hue();
 177:quantum/quantum.c ****       }
 178:quantum/quantum.c **** 	  return false;
 179:quantum/quantum.c ****       break;
 180:quantum/quantum.c **** 	case RGB_SAI:
 181:quantum/quantum.c **** 		if (record->event.pressed) {
 182:quantum/quantum.c **** 			rgblight_increase_sat();
 183:quantum/quantum.c ****       }
 184:quantum/quantum.c **** 	  return false;
 185:quantum/quantum.c ****       break;
 186:quantum/quantum.c **** 	case RGB_SAD:
 187:quantum/quantum.c **** 		if (record->event.pressed) {
 188:quantum/quantum.c **** 			rgblight_decrease_sat();
 189:quantum/quantum.c ****       }
 190:quantum/quantum.c **** 	  return false;
 191:quantum/quantum.c ****       break;
 192:quantum/quantum.c **** 	case RGB_VAI:
 193:quantum/quantum.c **** 		if (record->event.pressed) {
 194:quantum/quantum.c **** 			rgblight_increase_val();
 195:quantum/quantum.c ****       }
 196:quantum/quantum.c **** 	  return false;
 197:quantum/quantum.c ****       break;
 198:quantum/quantum.c **** 	case RGB_VAD:
 199:quantum/quantum.c **** 		if (record->event.pressed) {
 200:quantum/quantum.c **** 			rgblight_decrease_val();
 201:quantum/quantum.c ****       }
 202:quantum/quantum.c **** 	  return false;
 203:quantum/quantum.c ****       break;
 204:quantum/quantum.c **** 	#endif
 205:quantum/quantum.c ****     case MAGIC_SWAP_CONTROL_CAPSLOCK ... MAGIC_TOGGLE_NKRO:
 206:quantum/quantum.c ****       if (record->event.pressed) {
 207:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 208:quantum/quantum.c ****         if (!eeconfig_is_enabled()) {
 209:quantum/quantum.c ****             eeconfig_init();
 210:quantum/quantum.c ****         }
 211:quantum/quantum.c ****         /* keymap config */
 212:quantum/quantum.c ****         keymap_config.raw = eeconfig_read_keymap();
 213:quantum/quantum.c ****         switch (keycode)
 214:quantum/quantum.c ****         {
 215:quantum/quantum.c ****           case MAGIC_SWAP_CONTROL_CAPSLOCK:
 216:quantum/quantum.c ****             keymap_config.swap_control_capslock = true;
 217:quantum/quantum.c ****             break;
 218:quantum/quantum.c ****           case MAGIC_CAPSLOCK_TO_CONTROL:
 219:quantum/quantum.c ****             keymap_config.capslock_to_control = true;
 220:quantum/quantum.c ****             break;
 221:quantum/quantum.c ****           case MAGIC_SWAP_LALT_LGUI:
 222:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = true;
 223:quantum/quantum.c ****             break;
 224:quantum/quantum.c ****           case MAGIC_SWAP_RALT_RGUI:
 225:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 226:quantum/quantum.c ****             break;
 227:quantum/quantum.c ****           case MAGIC_NO_GUI:
 228:quantum/quantum.c ****             keymap_config.no_gui = true;
 229:quantum/quantum.c ****             break;
 230:quantum/quantum.c ****           case MAGIC_SWAP_GRAVE_ESC:
 231:quantum/quantum.c ****             keymap_config.swap_grave_esc = true;
 232:quantum/quantum.c ****             break;
 233:quantum/quantum.c ****           case MAGIC_SWAP_BACKSLASH_BACKSPACE:
 234:quantum/quantum.c ****             keymap_config.swap_backslash_backspace = true;
 235:quantum/quantum.c ****             break;
 236:quantum/quantum.c ****           case MAGIC_HOST_NKRO:
 237:quantum/quantum.c ****             keymap_config.nkro = true;
 238:quantum/quantum.c ****             break;
 239:quantum/quantum.c ****           case MAGIC_SWAP_ALT_GUI:
 240:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = true;
 241:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 242:quantum/quantum.c ****             break;
 243:quantum/quantum.c ****           case MAGIC_UNSWAP_CONTROL_CAPSLOCK:
 244:quantum/quantum.c ****             keymap_config.swap_control_capslock = false;
 245:quantum/quantum.c ****             break;
 246:quantum/quantum.c ****           case MAGIC_UNCAPSLOCK_TO_CONTROL:
 247:quantum/quantum.c ****             keymap_config.capslock_to_control = false;
 248:quantum/quantum.c ****             break;
 249:quantum/quantum.c ****           case MAGIC_UNSWAP_LALT_LGUI:
 250:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = false;
 251:quantum/quantum.c ****             break;
 252:quantum/quantum.c ****           case MAGIC_UNSWAP_RALT_RGUI:
 253:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 254:quantum/quantum.c ****             break;
 255:quantum/quantum.c ****           case MAGIC_UNNO_GUI:
 256:quantum/quantum.c ****             keymap_config.no_gui = false;
 257:quantum/quantum.c ****             break;
 258:quantum/quantum.c ****           case MAGIC_UNSWAP_GRAVE_ESC:
 259:quantum/quantum.c ****             keymap_config.swap_grave_esc = false;
 260:quantum/quantum.c ****             break;
 261:quantum/quantum.c ****           case MAGIC_UNSWAP_BACKSLASH_BACKSPACE:
 262:quantum/quantum.c ****             keymap_config.swap_backslash_backspace = false;
 263:quantum/quantum.c ****             break;
 264:quantum/quantum.c ****           case MAGIC_UNHOST_NKRO:
 265:quantum/quantum.c ****             keymap_config.nkro = false;
 266:quantum/quantum.c ****             break;
 267:quantum/quantum.c ****           case MAGIC_UNSWAP_ALT_GUI:
 268:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = false;
 269:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 270:quantum/quantum.c ****             break;
 271:quantum/quantum.c ****           case MAGIC_TOGGLE_NKRO:
 272:quantum/quantum.c ****             keymap_config.nkro = !keymap_config.nkro;
 273:quantum/quantum.c ****             break;
 274:quantum/quantum.c ****           default:
 275:quantum/quantum.c ****             break;
 276:quantum/quantum.c ****         }
 277:quantum/quantum.c ****         eeconfig_update_keymap(keymap_config.raw);
 278:quantum/quantum.c ****         clear_keyboard(); // clear to prevent stuck keys
 279:quantum/quantum.c **** 
 280:quantum/quantum.c ****         return false;
 281:quantum/quantum.c ****       }
 282:quantum/quantum.c ****       break;
 283:quantum/quantum.c ****     case KC_LSPO: {
 284:quantum/quantum.c ****       if (record->event.pressed) {
 285:quantum/quantum.c ****         shift_interrupted[0] = false;
 286:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 287:quantum/quantum.c ****       }
 288:quantum/quantum.c ****       else {
 289:quantum/quantum.c ****         #ifdef DISABLE_SPACE_CADET_ROLLOVER
 290:quantum/quantum.c ****           if (get_mods() & MOD_BIT(KC_RSFT)) {
 291:quantum/quantum.c ****             shift_interrupted[0] = true;
 292:quantum/quantum.c ****             shift_interrupted[1] = true;
 293:quantum/quantum.c ****           }
 294:quantum/quantum.c ****         #endif
 295:quantum/quantum.c ****         if (!shift_interrupted[0]) {
 296:quantum/quantum.c ****           register_code(LSPO_KEY);
 297:quantum/quantum.c ****           unregister_code(LSPO_KEY);
 298:quantum/quantum.c ****         }
 299:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_LSFT));
 300:quantum/quantum.c ****       }
 301:quantum/quantum.c ****       return false;
 302:quantum/quantum.c ****       // break;
 303:quantum/quantum.c ****     }
 304:quantum/quantum.c **** 
 305:quantum/quantum.c ****     case KC_RSPC: {
 306:quantum/quantum.c ****       if (record->event.pressed) {
 307:quantum/quantum.c ****         shift_interrupted[1] = false;
 308:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 309:quantum/quantum.c ****       }
 310:quantum/quantum.c ****       else {
 311:quantum/quantum.c ****         #ifdef DISABLE_SPACE_CADET_ROLLOVER
 312:quantum/quantum.c ****           if (get_mods() & MOD_BIT(KC_LSFT)) {
 313:quantum/quantum.c ****             shift_interrupted[0] = true;
 314:quantum/quantum.c ****             shift_interrupted[1] = true;
 315:quantum/quantum.c ****           }
 316:quantum/quantum.c ****         #endif
 317:quantum/quantum.c ****         if (!shift_interrupted[1]) {
 318:quantum/quantum.c ****           register_code(RSPC_KEY);
 319:quantum/quantum.c ****           unregister_code(RSPC_KEY);
 320:quantum/quantum.c ****         }
 321:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 322:quantum/quantum.c ****       }
 323:quantum/quantum.c ****       return false;
 324:quantum/quantum.c ****       // break;
 325:quantum/quantum.c ****     }
 326:quantum/quantum.c ****     default: {
 327:quantum/quantum.c ****       shift_interrupted[0] = true;
 440               		.loc 1 327 7 view .LVU91
 441               		.loc 1 327 28 is_stmt 0 view .LVU92
 442 005e 81E0      		ldi r24,lo8(1)
 443 0060 8093 0000 		sts shift_interrupted,r24
 328:quantum/quantum.c ****       shift_interrupted[1] = true;
 444               		.loc 1 328 7 is_stmt 1 view .LVU93
 445               		.loc 1 328 28 is_stmt 0 view .LVU94
 446 0064 8093 0000 		sts shift_interrupted+1,r24
 329:quantum/quantum.c ****       break;
 447               		.loc 1 329 7 is_stmt 1 view .LVU95
 448               	.L53:
 330:quantum/quantum.c ****     }
 331:quantum/quantum.c ****   }
 332:quantum/quantum.c **** 
 333:quantum/quantum.c ****   return process_action_kb(record);
 449               		.loc 1 333 3 view .LVU96
 450               		.loc 1 333 10 is_stmt 0 view .LVU97
 451 0068 C801      		movw r24,r16
 452               	/* epilogue start */
 334:quantum/quantum.c **** }
 453               		.loc 1 334 1 view .LVU98
 454 006a DF91      		pop r29
 455 006c CF91      		pop r28
 456               	.LVL38:
 457               		.loc 1 334 1 view .LVU99
 458 006e 1F91      		pop r17
 459 0070 0F91      		pop r16
 460               	.LVL39:
 333:quantum/quantum.c **** }
 461               		.loc 1 333 10 view .LVU100
 462 0072 0C94 0000 		jmp process_action_kb
 463               	.LVL40:
 464               	.L46:
 333:quantum/quantum.c **** }
 465               		.loc 1 333 10 view .LVU101
 466 0076 CC33      		cpi r28,60
 467 0078 80E7      		ldi r24,112
 468 007a D807      		cpc r29,r24
 469 007c 01F4      		brne .+2
 470 007e 00C0      		rjmp .L51
 471 0080 CD33      		cpi r28,61
 472 0082 D047      		sbci r29,112
 473 0084 01F4      		brne .L50
 306:quantum/quantum.c ****         shift_interrupted[1] = false;
 474               		.loc 1 306 7 is_stmt 1 view .LVU102
 306:quantum/quantum.c ****         shift_interrupted[1] = false;
 475               		.loc 1 306 24 is_stmt 0 view .LVU103
 476 0086 F801      		movw r30,r16
 477 0088 8281      		ldd r24,Z+2
 306:quantum/quantum.c ****         shift_interrupted[1] = false;
 478               		.loc 1 306 10 view .LVU104
 479 008a 8823      		tst r24
 480 008c 01F4      		brne .+2
 481 008e 00C0      		rjmp .L78
 307:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 482               		.loc 1 307 9 is_stmt 1 view .LVU105
 307:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 483               		.loc 1 307 30 is_stmt 0 view .LVU106
 484 0090 1092 0000 		sts shift_interrupted+1,__zero_reg__
 308:quantum/quantum.c ****       }
 485               		.loc 1 308 9 is_stmt 1 view .LVU107
 486 0094 80E2      		ldi r24,lo8(32)
 487 0096 00C0      		rjmp .L96
 488               	.L48:
 143:quantum/quantum.c ****         reset_keyboard();
 489               		.loc 1 143 7 view .LVU108
 143:quantum/quantum.c ****         reset_keyboard();
 490               		.loc 1 143 10 is_stmt 0 view .LVU109
 491 0098 F801      		movw r30,r16
 492 009a 8281      		ldd r24,Z+2
 493 009c 8111      		cpse r24,__zero_reg__
 144:quantum/quantum.c ****       }
 494               		.loc 1 144 9 is_stmt 1 view .LVU110
 495 009e 0E94 0000 		call reset_keyboard
 496               	.LVL41:
 497               	.L42:
 498               		.loc 1 334 1 is_stmt 0 view .LVU111
 499 00a2 80E0      		ldi r24,0
 500               	/* epilogue start */
 501 00a4 DF91      		pop r29
 502 00a6 CF91      		pop r28
 503               	.LVL42:
 504               		.loc 1 334 1 view .LVU112
 505 00a8 1F91      		pop r17
 506 00aa 0F91      		pop r16
 507               	.LVL43:
 508               		.loc 1 334 1 view .LVU113
 509 00ac 0895      		ret
 510               	.LVL44:
 511               	.L49:
 147:quantum/quantum.c ****     case DEBUG:
 512               		.loc 1 147 7 is_stmt 1 view .LVU114
 149:quantum/quantum.c ****           print("\nDEBUG: enabled.\n");
 513               		.loc 1 149 7 view .LVU115
 149:quantum/quantum.c ****           print("\nDEBUG: enabled.\n");
 514               		.loc 1 149 10 is_stmt 0 view .LVU116
 515 00ae F801      		movw r30,r16
 516 00b0 8281      		ldd r24,Z+2
 517 00b2 8823      		tst r24
 518 00b4 01F0      		breq .L42
 150:quantum/quantum.c ****           debug_enable = true;
 519               		.loc 1 150 39 is_stmt 1 view .LVU117
 151:quantum/quantum.c ****       }
 520               		.loc 1 151 11 view .LVU118
 151:quantum/quantum.c ****       }
 521               		.loc 1 151 24 is_stmt 0 view .LVU119
 522 00b6 8091 0000 		lds r24,debug_config
 523 00ba 8160      		ori r24,lo8(1<<0)
 524 00bc 8093 0000 		sts debug_config,r24
 525 00c0 00C0      		rjmp .L42
 526               	.L47:
 154:quantum/quantum.c **** 	#ifdef RGBLIGHT_ENABLE
 527               		.loc 1 154 7 is_stmt 1 view .LVU120
 206:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 528               		.loc 1 206 7 view .LVU121
 206:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 529               		.loc 1 206 10 is_stmt 0 view .LVU122
 530 00c2 F801      		movw r30,r16
 531 00c4 8281      		ldd r24,Z+2
 532 00c6 8823      		tst r24
 533 00c8 01F0      		breq .L53
 208:quantum/quantum.c ****             eeconfig_init();
 534               		.loc 1 208 9 is_stmt 1 view .LVU123
 208:quantum/quantum.c ****             eeconfig_init();
 535               		.loc 1 208 14 is_stmt 0 view .LVU124
 536 00ca 0E94 0000 		call eeconfig_is_enabled
 537               	.LVL45:
 208:quantum/quantum.c ****             eeconfig_init();
 538               		.loc 1 208 12 view .LVU125
 539 00ce 8111      		cpse r24,__zero_reg__
 540 00d0 00C0      		rjmp .L54
 209:quantum/quantum.c ****         }
 541               		.loc 1 209 13 is_stmt 1 view .LVU126
 542 00d2 0E94 0000 		call eeconfig_init
 543               	.LVL46:
 544               	.L54:
 212:quantum/quantum.c ****         switch (keycode)
 545               		.loc 1 212 9 view .LVU127
 212:quantum/quantum.c ****         switch (keycode)
 546               		.loc 1 212 29 is_stmt 0 view .LVU128
 547 00d6 0E94 0000 		call eeconfig_read_keymap
 548               	.LVL47:
 549 00da 90E0      		ldi r25,0
 550 00dc 9093 0000 		sts keymap_config+1,r25
 551 00e0 8093 0000 		sts keymap_config,r24
 213:quantum/quantum.c ****         {
 552               		.loc 1 213 9 is_stmt 1 view .LVU129
 553 00e4 FE01      		movw r30,r28
 554 00e6 E350      		subi r30,3
 555 00e8 F047      		sbci r31,112
 216:quantum/quantum.c ****             break;
 556               		.loc 1 216 49 is_stmt 0 view .LVU130
 557 00ea 8091 0000 		lds r24,keymap_config
 558 00ee 8160      		ori r24,lo8(1<<0)
 559 00f0 E231      		cpi r30,18
 560 00f2 F105      		cpc r31,__zero_reg__
 561 00f4 00F4      		brsh .L95
 562 00f6 E050      		subi r30,lo8(-(gs(.L57)))
 563 00f8 F040      		sbci r31,hi8(-(gs(.L57)))
 564 00fa 0C94 0000 		jmp __tablejump2__
 565               		.section	.jumptables.gcc.process_record_quantum,"a",@progbits
 566               		.p2align	1
 567               	.L57:
 568 0000 0000      		.word gs(.L74)
 569 0002 0000      		.word gs(.L73)
 570 0004 0000      		.word gs(.L72)
 571 0006 0000      		.word gs(.L71)
 572 0008 0000      		.word gs(.L70)
 573 000a 0000      		.word gs(.L69)
 574 000c 0000      		.word gs(.L68)
 575 000e 0000      		.word gs(.L67)
 576 0010 0000      		.word gs(.L66)
 577 0012 0000      		.word gs(.L65)
 578 0014 0000      		.word gs(.L64)
 579 0016 0000      		.word gs(.L63)
 580 0018 0000      		.word gs(.L62)
 581 001a 0000      		.word gs(.L61)
 582 001c 0000      		.word gs(.L60)
 583 001e 0000      		.word gs(.L59)
 584 0020 0000      		.word gs(.L58)
 585 0022 0000      		.word gs(.L56)
 586               		.section	.text.process_record_quantum
 587               	.L74:
 219:quantum/quantum.c ****             break;
 588               		.loc 1 219 13 is_stmt 1 view .LVU131
 219:quantum/quantum.c ****             break;
 589               		.loc 1 219 47 is_stmt 0 view .LVU132
 590 00fe 8091 0000 		lds r24,keymap_config
 591 0102 8260      		ori r24,lo8(1<<1)
 592               	.L95:
 272:quantum/quantum.c ****             break;
 593               		.loc 1 272 32 view .LVU133
 594 0104 8093 0000 		sts keymap_config,r24
 273:quantum/quantum.c ****           default:
 595               		.loc 1 273 13 is_stmt 1 view .LVU134
 277:quantum/quantum.c ****         clear_keyboard(); // clear to prevent stuck keys
 596               		.loc 1 277 9 view .LVU135
 597 0108 8091 0000 		lds r24,keymap_config
 598 010c 0E94 0000 		call eeconfig_update_keymap
 599               	.LVL48:
 278:quantum/quantum.c **** 
 600               		.loc 1 278 9 view .LVU136
 601 0110 0E94 0000 		call clear_keyboard
 602               	.LVL49:
 280:quantum/quantum.c ****       }
 603               		.loc 1 280 9 view .LVU137
 280:quantum/quantum.c ****       }
 604               		.loc 1 280 16 is_stmt 0 view .LVU138
 605 0114 00C0      		rjmp .L42
 606               	.L73:
 222:quantum/quantum.c ****             break;
 607               		.loc 1 222 13 is_stmt 1 view .LVU139
 222:quantum/quantum.c ****             break;
 608               		.loc 1 222 42 is_stmt 0 view .LVU140
 609 0116 8091 0000 		lds r24,keymap_config
 610 011a 8460      		ori r24,lo8(1<<2)
 611 011c 00C0      		rjmp .L95
 612               	.L72:
 225:quantum/quantum.c ****             break;
 613               		.loc 1 225 13 is_stmt 1 view .LVU141
 225:quantum/quantum.c ****             break;
 614               		.loc 1 225 42 is_stmt 0 view .LVU142
 615 011e 8091 0000 		lds r24,keymap_config
 616 0122 8860      		ori r24,lo8(1<<3)
 617 0124 00C0      		rjmp .L95
 618               	.L71:
 228:quantum/quantum.c ****             break;
 619               		.loc 1 228 13 is_stmt 1 view .LVU143
 228:quantum/quantum.c ****             break;
 620               		.loc 1 228 34 is_stmt 0 view .LVU144
 621 0126 8091 0000 		lds r24,keymap_config
 622 012a 8061      		ori r24,lo8(1<<4)
 623 012c 00C0      		rjmp .L95
 624               	.L70:
 231:quantum/quantum.c ****             break;
 625               		.loc 1 231 13 is_stmt 1 view .LVU145
 231:quantum/quantum.c ****             break;
 626               		.loc 1 231 42 is_stmt 0 view .LVU146
 627 012e 8091 0000 		lds r24,keymap_config
 628 0132 8062      		ori r24,lo8(1<<5)
 629 0134 00C0      		rjmp .L95
 630               	.L69:
 234:quantum/quantum.c ****             break;
 631               		.loc 1 234 13 is_stmt 1 view .LVU147
 234:quantum/quantum.c ****             break;
 632               		.loc 1 234 52 is_stmt 0 view .LVU148
 633 0136 8091 0000 		lds r24,keymap_config
 634 013a 8064      		ori r24,lo8(1<<6)
 635 013c 00C0      		rjmp .L95
 636               	.L68:
 237:quantum/quantum.c ****             break;
 637               		.loc 1 237 13 is_stmt 1 view .LVU149
 237:quantum/quantum.c ****             break;
 638               		.loc 1 237 32 is_stmt 0 view .LVU150
 639 013e 8091 0000 		lds r24,keymap_config
 640 0142 8068      		ori r24,lo8(1<<7)
 641 0144 00C0      		rjmp .L95
 642               	.L67:
 240:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 643               		.loc 1 240 13 is_stmt 1 view .LVU151
 241:quantum/quantum.c ****             break;
 644               		.loc 1 241 13 view .LVU152
 240:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 645               		.loc 1 240 42 is_stmt 0 view .LVU153
 646 0146 8091 0000 		lds r24,keymap_config
 647 014a 8C60      		ori r24,lo8(12)
 648 014c 00C0      		rjmp .L95
 649               	.L66:
 244:quantum/quantum.c ****             break;
 650               		.loc 1 244 13 is_stmt 1 view .LVU154
 244:quantum/quantum.c ****             break;
 651               		.loc 1 244 49 is_stmt 0 view .LVU155
 652 014e 8091 0000 		lds r24,keymap_config
 653 0152 8E7F      		andi r24,lo8(~(1<<0))
 654 0154 00C0      		rjmp .L95
 655               	.L65:
 247:quantum/quantum.c ****             break;
 656               		.loc 1 247 13 is_stmt 1 view .LVU156
 247:quantum/quantum.c ****             break;
 657               		.loc 1 247 47 is_stmt 0 view .LVU157
 658 0156 8091 0000 		lds r24,keymap_config
 659 015a 8D7F      		andi r24,lo8(~(1<<1))
 660 015c 00C0      		rjmp .L95
 661               	.L64:
 250:quantum/quantum.c ****             break;
 662               		.loc 1 250 13 is_stmt 1 view .LVU158
 250:quantum/quantum.c ****             break;
 663               		.loc 1 250 42 is_stmt 0 view .LVU159
 664 015e 8091 0000 		lds r24,keymap_config
 665 0162 8B7F      		andi r24,lo8(~(1<<2))
 666 0164 00C0      		rjmp .L95
 667               	.L63:
 253:quantum/quantum.c ****             break;
 668               		.loc 1 253 13 is_stmt 1 view .LVU160
 253:quantum/quantum.c ****             break;
 669               		.loc 1 253 42 is_stmt 0 view .LVU161
 670 0166 8091 0000 		lds r24,keymap_config
 671 016a 877F      		andi r24,lo8(~(1<<3))
 672 016c 00C0      		rjmp .L95
 673               	.L62:
 256:quantum/quantum.c ****             break;
 674               		.loc 1 256 13 is_stmt 1 view .LVU162
 256:quantum/quantum.c ****             break;
 675               		.loc 1 256 34 is_stmt 0 view .LVU163
 676 016e 8091 0000 		lds r24,keymap_config
 677 0172 8F7E      		andi r24,lo8(~(1<<4))
 678 0174 00C0      		rjmp .L95
 679               	.L61:
 259:quantum/quantum.c ****             break;
 680               		.loc 1 259 13 is_stmt 1 view .LVU164
 259:quantum/quantum.c ****             break;
 681               		.loc 1 259 42 is_stmt 0 view .LVU165
 682 0176 8091 0000 		lds r24,keymap_config
 683 017a 8F7D      		andi r24,lo8(~(1<<5))
 684 017c 00C0      		rjmp .L95
 685               	.L60:
 262:quantum/quantum.c ****             break;
 686               		.loc 1 262 13 is_stmt 1 view .LVU166
 262:quantum/quantum.c ****             break;
 687               		.loc 1 262 52 is_stmt 0 view .LVU167
 688 017e 8091 0000 		lds r24,keymap_config
 689 0182 8F7B      		andi r24,lo8(~(1<<6))
 690 0184 00C0      		rjmp .L95
 691               	.L59:
 265:quantum/quantum.c ****             break;
 692               		.loc 1 265 13 is_stmt 1 view .LVU168
 265:quantum/quantum.c ****             break;
 693               		.loc 1 265 32 is_stmt 0 view .LVU169
 694 0186 8091 0000 		lds r24,keymap_config
 695 018a 8F77      		andi r24,lo8(~(1<<7))
 696 018c 00C0      		rjmp .L95
 697               	.L58:
 268:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 698               		.loc 1 268 13 is_stmt 1 view .LVU170
 269:quantum/quantum.c ****             break;
 699               		.loc 1 269 13 view .LVU171
 268:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 700               		.loc 1 268 42 is_stmt 0 view .LVU172
 701 018e 8091 0000 		lds r24,keymap_config
 702 0192 837F      		andi r24,lo8(-13)
 703 0194 00C0      		rjmp .L95
 704               	.L56:
 272:quantum/quantum.c ****             break;
 705               		.loc 1 272 13 is_stmt 1 view .LVU173
 272:quantum/quantum.c ****             break;
 706               		.loc 1 272 48 is_stmt 0 view .LVU174
 707 0196 9091 0000 		lds r25,keymap_config
 272:quantum/quantum.c ****             break;
 708               		.loc 1 272 32 view .LVU175
 709 019a 892F      		mov r24,r25
 710 019c 97FB      		bst r25,7
 711 019e 87F9      		bld r24,7
 712 01a0 8058      		subi r24,0x80
 713 01a2 00C0      		rjmp .L95
 714               	.L51:
 284:quantum/quantum.c ****         shift_interrupted[0] = false;
 715               		.loc 1 284 7 is_stmt 1 view .LVU176
 284:quantum/quantum.c ****         shift_interrupted[0] = false;
 716               		.loc 1 284 24 is_stmt 0 view .LVU177
 717 01a4 F801      		movw r30,r16
 718 01a6 8281      		ldd r24,Z+2
 284:quantum/quantum.c ****         shift_interrupted[0] = false;
 719               		.loc 1 284 10 view .LVU178
 720 01a8 8823      		tst r24
 721 01aa 01F0      		breq .L76
 285:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 722               		.loc 1 285 9 is_stmt 1 view .LVU179
 285:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 723               		.loc 1 285 30 is_stmt 0 view .LVU180
 724 01ac 1092 0000 		sts shift_interrupted,__zero_reg__
 286:quantum/quantum.c ****       }
 725               		.loc 1 286 9 is_stmt 1 view .LVU181
 726 01b0 82E0      		ldi r24,lo8(2)
 727               	.L96:
 308:quantum/quantum.c ****       }
 728               		.loc 1 308 9 is_stmt 0 view .LVU182
 729 01b2 0E94 0000 		call register_mods
 730               	.LVL50:
 731 01b6 00C0      		rjmp .L42
 732               	.L76:
 295:quantum/quantum.c ****           register_code(LSPO_KEY);
 733               		.loc 1 295 9 is_stmt 1 view .LVU183
 295:quantum/quantum.c ****           register_code(LSPO_KEY);
 734               		.loc 1 295 12 is_stmt 0 view .LVU184
 735 01b8 8091 0000 		lds r24,shift_interrupted
 736 01bc 8111      		cpse r24,__zero_reg__
 737 01be 00C0      		rjmp .L77
 296:quantum/quantum.c ****           unregister_code(LSPO_KEY);
 738               		.loc 1 296 11 is_stmt 1 view .LVU185
 739 01c0 86E2      		ldi r24,lo8(38)
 740 01c2 0E94 0000 		call register_code
 741               	.LVL51:
 297:quantum/quantum.c ****         }
 742               		.loc 1 297 11 view .LVU186
 743 01c6 86E2      		ldi r24,lo8(38)
 744 01c8 0E94 0000 		call unregister_code
 745               	.LVL52:
 746               	.L77:
 299:quantum/quantum.c ****       }
 747               		.loc 1 299 9 view .LVU187
 748 01cc 82E0      		ldi r24,lo8(2)
 749               	.L97:
 321:quantum/quantum.c ****       }
 750               		.loc 1 321 9 is_stmt 0 view .LVU188
 751 01ce 0E94 0000 		call unregister_mods
 752               	.LVL53:
 753 01d2 00C0      		rjmp .L42
 754               	.L78:
 317:quantum/quantum.c ****           register_code(RSPC_KEY);
 755               		.loc 1 317 9 is_stmt 1 view .LVU189
 317:quantum/quantum.c ****           register_code(RSPC_KEY);
 756               		.loc 1 317 12 is_stmt 0 view .LVU190
 757 01d4 8091 0000 		lds r24,shift_interrupted+1
 758 01d8 8111      		cpse r24,__zero_reg__
 759 01da 00C0      		rjmp .L79
 318:quantum/quantum.c ****           unregister_code(RSPC_KEY);
 760               		.loc 1 318 11 is_stmt 1 view .LVU191
 761 01dc 87E2      		ldi r24,lo8(39)
 762 01de 0E94 0000 		call register_code
 763               	.LVL54:
 319:quantum/quantum.c ****         }
 764               		.loc 1 319 11 view .LVU192
 765 01e2 87E2      		ldi r24,lo8(39)
 766 01e4 0E94 0000 		call unregister_code
 767               	.LVL55:
 768               	.L79:
 321:quantum/quantum.c ****       }
 769               		.loc 1 321 9 view .LVU193
 770 01e8 80E2      		ldi r24,lo8(32)
 771 01ea 00C0      		rjmp .L97
 772               		.cfi_endproc
 773               	.LFE114:
 775               		.section	.text.send_string,"ax",@progbits
 776               	.global	send_string
 778               	send_string:
 779               	.LVL56:
 780               	.LFB115:
 335:quantum/quantum.c **** 
 336:quantum/quantum.c **** const bool ascii_to_qwerty_shift_lut[0x80] PROGMEM = {
 337:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 338:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 339:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 340:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 341:quantum/quantum.c ****     0, 1, 1, 1, 1, 1, 1, 0,
 342:quantum/quantum.c ****     1, 1, 1, 1, 0, 0, 0, 0,
 343:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 344:quantum/quantum.c ****     0, 0, 1, 0, 1, 0, 1, 1,
 345:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 346:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 347:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 348:quantum/quantum.c ****     1, 1, 1, 0, 0, 0, 1, 1,
 349:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 350:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 351:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 352:quantum/quantum.c ****     0, 0, 0, 1, 1, 1, 1, 0
 353:quantum/quantum.c **** };
 354:quantum/quantum.c **** 
 355:quantum/quantum.c **** const uint8_t ascii_to_qwerty_keycode_lut[0x80] PROGMEM = {
 356:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 357:quantum/quantum.c ****     KC_BSPC, KC_TAB, KC_ENT, 0, 0, 0, 0, 0,
 358:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 359:quantum/quantum.c ****     0, 0, 0, KC_ESC, 0, 0, 0, 0,
 360:quantum/quantum.c ****     KC_SPC, KC_1, KC_QUOT, KC_3, KC_4, KC_5, KC_7, KC_QUOT,
 361:quantum/quantum.c ****     KC_9, KC_0, KC_8, KC_EQL, KC_COMM, KC_MINS, KC_DOT, KC_SLSH,
 362:quantum/quantum.c ****     KC_0, KC_1, KC_2, KC_3, KC_4, KC_5, KC_6, KC_7,
 363:quantum/quantum.c ****     KC_8, KC_9, KC_SCLN, KC_SCLN, KC_COMM, KC_EQL, KC_DOT, KC_SLSH,
 364:quantum/quantum.c ****     KC_2, KC_A, KC_B, KC_C, KC_D, KC_E, KC_F, KC_G,
 365:quantum/quantum.c ****     KC_H, KC_I, KC_J, KC_K, KC_L, KC_M, KC_N, KC_O,
 366:quantum/quantum.c ****     KC_P, KC_Q, KC_R, KC_S, KC_T, KC_U, KC_V, KC_W,
 367:quantum/quantum.c ****     KC_X, KC_Y, KC_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_6, KC_MINS,
 368:quantum/quantum.c ****     KC_GRV, KC_A, KC_B, KC_C, KC_D, KC_E, KC_F, KC_G,
 369:quantum/quantum.c ****     KC_H, KC_I, KC_J, KC_K, KC_L, KC_M, KC_N, KC_O,
 370:quantum/quantum.c ****     KC_P, KC_Q, KC_R, KC_S, KC_T, KC_U, KC_V, KC_W,
 371:quantum/quantum.c ****     KC_X, KC_Y, KC_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_GRV, KC_DEL
 372:quantum/quantum.c **** };
 373:quantum/quantum.c **** 
 374:quantum/quantum.c **** /* for users whose OSes are set to Colemak */
 375:quantum/quantum.c **** #if 0
 376:quantum/quantum.c **** #include "keymap_colemak.h"
 377:quantum/quantum.c **** 
 378:quantum/quantum.c **** const bool ascii_to_colemak_shift_lut[0x80] PROGMEM = {
 379:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 380:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 381:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 382:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 383:quantum/quantum.c ****     0, 1, 1, 1, 1, 1, 1, 0,
 384:quantum/quantum.c ****     1, 1, 1, 1, 0, 0, 0, 0,
 385:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 386:quantum/quantum.c ****     0, 0, 1, 0, 1, 0, 1, 1,
 387:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 388:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 389:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 390:quantum/quantum.c ****     1, 1, 1, 0, 0, 0, 1, 1,
 391:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 392:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 393:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 394:quantum/quantum.c ****     0, 0, 0, 1, 1, 1, 1, 0
 395:quantum/quantum.c **** };
 396:quantum/quantum.c **** 
 397:quantum/quantum.c **** const uint8_t ascii_to_colemak_keycode_lut[0x80] PROGMEM = {
 398:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 399:quantum/quantum.c ****     KC_BSPC, KC_TAB, KC_ENT, 0, 0, 0, 0, 0,
 400:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 401:quantum/quantum.c ****     0, 0, 0, KC_ESC, 0, 0, 0, 0,
 402:quantum/quantum.c ****     KC_SPC, KC_1, KC_QUOT, KC_3, KC_4, KC_5, KC_7, KC_QUOT,
 403:quantum/quantum.c ****     KC_9, KC_0, KC_8, KC_EQL, KC_COMM, KC_MINS, KC_DOT, KC_SLSH,
 404:quantum/quantum.c ****     KC_0, KC_1, KC_2, KC_3, KC_4, KC_5, KC_6, KC_7,
 405:quantum/quantum.c ****     KC_8, KC_9, CM_SCLN, CM_SCLN, KC_COMM, KC_EQL, KC_DOT, KC_SLSH,
 406:quantum/quantum.c ****     KC_2, CM_A, CM_B, CM_C, CM_D, CM_E, CM_F, CM_G,
 407:quantum/quantum.c ****     CM_H, CM_I, CM_J, CM_K, CM_L, CM_M, CM_N, CM_O,
 408:quantum/quantum.c ****     CM_P, CM_Q, CM_R, CM_S, CM_T, CM_U, CM_V, CM_W,
 409:quantum/quantum.c ****     CM_X, CM_Y, CM_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_6, KC_MINS,
 410:quantum/quantum.c ****     KC_GRV, CM_A, CM_B, CM_C, CM_D, CM_E, CM_F, CM_G,
 411:quantum/quantum.c ****     CM_H, CM_I, CM_J, CM_K, CM_L, CM_M, CM_N, CM_O,
 412:quantum/quantum.c ****     CM_P, CM_Q, CM_R, CM_S, CM_T, CM_U, CM_V, CM_W,
 413:quantum/quantum.c ****     CM_X, CM_Y, CM_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_GRV, KC_DEL
 414:quantum/quantum.c **** };
 415:quantum/quantum.c **** 
 416:quantum/quantum.c **** #endif
 417:quantum/quantum.c **** 
 418:quantum/quantum.c **** void send_string(const char *str) {
 781               		.loc 1 418 35 view -0
 782               		.cfi_startproc
 783               		.loc 1 418 35 is_stmt 0 view .LVU195
 784 0000 0F93      		push r16
 785               	.LCFI11:
 786               		.cfi_def_cfa_offset 3
 787               		.cfi_offset 16, -2
 788 0002 1F93      		push r17
 789               	.LCFI12:
 790               		.cfi_def_cfa_offset 4
 791               		.cfi_offset 17, -3
 792 0004 CF93      		push r28
 793               	.LCFI13:
 794               		.cfi_def_cfa_offset 5
 795               		.cfi_offset 28, -4
 796               	/* prologue: function */
 797               	/* frame size = 0 */
 798               	/* stack size = 3 */
 799               	.L__stack_usage = 3
 800 0006 8C01      		movw r16,r24
 801               	.LVL57:
 802               	.L102:
 419:quantum/quantum.c ****     while (1) {
 803               		.loc 1 419 5 is_stmt 1 view .LVU196
 804               	.LBB6:
 420:quantum/quantum.c ****         uint8_t keycode;
 805               		.loc 1 420 9 view .LVU197
 421:quantum/quantum.c ****         uint8_t ascii_code = pgm_read_byte(str);
 806               		.loc 1 421 9 view .LVU198
 807               	.LBB7:
 808               		.loc 1 421 30 view .LVU199
 809               		.loc 1 421 30 view .LVU200
 810               		.loc 1 421 30 view .LVU201
 811 0008 F801      		movw r30,r16
 812               	/* #APP */
 813               	 ;  421 "quantum/quantum.c" 1
 814 000a 2491      		lpm r18, Z
 815               		
 816               	 ;  0 "" 2
 817               	.LVL58:
 818               		.loc 1 421 30 view .LVU202
 819               		.loc 1 421 30 is_stmt 0 view .LVU203
 820               	/* #NOAPP */
 821               	.LBE7:
 422:quantum/quantum.c ****         if (!ascii_code) break;
 822               		.loc 1 422 9 is_stmt 1 view .LVU204
 823               		.loc 1 422 12 is_stmt 0 view .LVU205
 824 000c 2223      		tst r18
 825 000e 01F0      		breq .L98
 423:quantum/quantum.c ****         keycode = pgm_read_byte(&ascii_to_qwerty_keycode_lut[ascii_code]);
 826               		.loc 1 423 9 is_stmt 1 view .LVU206
 827               	.LBB8:
 828               		.loc 1 423 19 view .LVU207
 829 0010 30E0      		ldi r19,0
 830               	.LVL59:
 831               		.loc 1 423 19 view .LVU208
 832               		.loc 1 423 19 view .LVU209
 833 0012 F901      		movw r30,r18
 834 0014 E050      		subi r30,lo8(-(ascii_to_qwerty_keycode_lut))
 835 0016 F040      		sbci r31,hi8(-(ascii_to_qwerty_keycode_lut))
 836               	.LVL60:
 837               		.loc 1 423 19 is_stmt 0 view .LVU210
 838               	/* #APP */
 839               	 ;  423 "quantum/quantum.c" 1
 840 0018 C491      		lpm r28, Z
 841               		
 842               	 ;  0 "" 2
 843               	.LVL61:
 844               		.loc 1 423 19 is_stmt 1 view .LVU211
 845               		.loc 1 423 19 is_stmt 0 view .LVU212
 846               	/* #NOAPP */
 847               	.LBE8:
 424:quantum/quantum.c ****         if (pgm_read_byte(&ascii_to_qwerty_shift_lut[ascii_code])) {
 848               		.loc 1 424 9 is_stmt 1 view .LVU213
 849               	.LBB9:
 850               		.loc 1 424 13 view .LVU214
 851               		.loc 1 424 13 view .LVU215
 852               		.loc 1 424 13 view .LVU216
 853 001a 2050      		subi r18,lo8(-(ascii_to_qwerty_shift_lut))
 854 001c 3040      		sbci r19,hi8(-(ascii_to_qwerty_shift_lut))
 855               	.LVL62:
 856               		.loc 1 424 13 is_stmt 0 view .LVU217
 857 001e F901      		movw r30,r18
 858               	.LVL63:
 859               		.loc 1 424 13 view .LVU218
 860               	/* #APP */
 861               	 ;  424 "quantum/quantum.c" 1
 862 0020 2491      		lpm r18, Z
 863               		
 864               	 ;  0 "" 2
 865               	.LVL64:
 866               		.loc 1 424 13 is_stmt 1 view .LVU219
 867               	/* #NOAPP */
 868               	.LBE9:
 869               		.loc 1 424 12 is_stmt 0 view .LVU220
 870 0022 2223      		tst r18
 871 0024 01F0      		breq .L100
 425:quantum/quantum.c ****             register_code(KC_LSFT);
 872               		.loc 1 425 13 is_stmt 1 view .LVU221
 873 0026 81EE      		ldi r24,lo8(-31)
 874 0028 0E94 0000 		call register_code
 875               	.LVL65:
 426:quantum/quantum.c ****             register_code(keycode);
 876               		.loc 1 426 13 view .LVU222
 877 002c 8C2F      		mov r24,r28
 878 002e 0E94 0000 		call register_code
 879               	.LVL66:
 427:quantum/quantum.c ****             unregister_code(keycode);
 880               		.loc 1 427 13 view .LVU223
 881 0032 8C2F      		mov r24,r28
 882 0034 0E94 0000 		call unregister_code
 883               	.LVL67:
 428:quantum/quantum.c ****             unregister_code(KC_LSFT);
 884               		.loc 1 428 13 view .LVU224
 885 0038 81EE      		ldi r24,lo8(-31)
 886               	.L103:
 429:quantum/quantum.c ****         }
 430:quantum/quantum.c ****         else {
 431:quantum/quantum.c ****             register_code(keycode);
 432:quantum/quantum.c ****             unregister_code(keycode);
 887               		.loc 1 432 13 is_stmt 0 view .LVU225
 888 003a 0E94 0000 		call unregister_code
 889               	.LVL68:
 433:quantum/quantum.c ****         }
 434:quantum/quantum.c ****         ++str;
 890               		.loc 1 434 9 is_stmt 1 view .LVU226
 891 003e 0F5F      		subi r16,-1
 892 0040 1F4F      		sbci r17,-1
 893               	.LVL69:
 894               		.loc 1 434 9 is_stmt 0 view .LVU227
 895               	.LBE6:
 419:quantum/quantum.c ****         uint8_t keycode;
 896               		.loc 1 419 15 view .LVU228
 897 0042 00C0      		rjmp .L102
 898               	.LVL70:
 899               	.L100:
 900               	.LBB10:
 431:quantum/quantum.c ****             unregister_code(keycode);
 901               		.loc 1 431 13 is_stmt 1 view .LVU229
 902 0044 8C2F      		mov r24,r28
 903 0046 0E94 0000 		call register_code
 904               	.LVL71:
 432:quantum/quantum.c ****         }
 905               		.loc 1 432 13 view .LVU230
 906 004a 8C2F      		mov r24,r28
 907 004c 00C0      		rjmp .L103
 908               	.LVL72:
 909               	.L98:
 910               	/* epilogue start */
 432:quantum/quantum.c ****         }
 911               		.loc 1 432 13 is_stmt 0 view .LVU231
 912               	.LBE10:
 435:quantum/quantum.c ****     }
 436:quantum/quantum.c **** }
 913               		.loc 1 436 1 view .LVU232
 914 004e CF91      		pop r28
 915 0050 1F91      		pop r17
 916 0052 0F91      		pop r16
 917               	.LVL73:
 918               		.loc 1 436 1 view .LVU233
 919 0054 0895      		ret
 920               		.cfi_endproc
 921               	.LFE115:
 923               		.section	.text.update_tri_layer,"ax",@progbits
 924               	.global	update_tri_layer
 926               	update_tri_layer:
 927               	.LVL74:
 928               	.LFB116:
 437:quantum/quantum.c **** 
 438:quantum/quantum.c **** void update_tri_layer(uint8_t layer1, uint8_t layer2, uint8_t layer3) {
 929               		.loc 1 438 71 is_stmt 1 view -0
 930               		.cfi_startproc
 931               		.loc 1 438 71 is_stmt 0 view .LVU235
 932 0000 8F92      		push r8
 933               	.LCFI14:
 934               		.cfi_def_cfa_offset 3
 935               		.cfi_offset 8, -2
 936 0002 9F92      		push r9
 937               	.LCFI15:
 938               		.cfi_def_cfa_offset 4
 939               		.cfi_offset 9, -3
 940 0004 AF92      		push r10
 941               	.LCFI16:
 942               		.cfi_def_cfa_offset 5
 943               		.cfi_offset 10, -4
 944 0006 BF92      		push r11
 945               	.LCFI17:
 946               		.cfi_def_cfa_offset 6
 947               		.cfi_offset 11, -5
 948 0008 CF92      		push r12
 949               	.LCFI18:
 950               		.cfi_def_cfa_offset 7
 951               		.cfi_offset 12, -6
 952 000a DF92      		push r13
 953               	.LCFI19:
 954               		.cfi_def_cfa_offset 8
 955               		.cfi_offset 13, -7
 956 000c EF92      		push r14
 957               	.LCFI20:
 958               		.cfi_def_cfa_offset 9
 959               		.cfi_offset 14, -8
 960 000e FF92      		push r15
 961               	.LCFI21:
 962               		.cfi_def_cfa_offset 10
 963               		.cfi_offset 15, -9
 964 0010 0F93      		push r16
 965               	.LCFI22:
 966               		.cfi_def_cfa_offset 11
 967               		.cfi_offset 16, -10
 968 0012 1F93      		push r17
 969               	.LCFI23:
 970               		.cfi_def_cfa_offset 12
 971               		.cfi_offset 17, -11
 972               	/* prologue: function */
 973               	/* frame size = 0 */
 974               	/* stack size = 10 */
 975               	.L__stack_usage = 10
 439:quantum/quantum.c ****   if (IS_LAYER_ON(layer1) && IS_LAYER_ON(layer2)) {
 976               		.loc 1 439 3 is_stmt 1 view .LVU236
 977 0014 C12C      		mov r12,__zero_reg__
 978 0016 D12C      		mov r13,__zero_reg__
 979 0018 7601      		movw r14,r12
 980 001a C394      		inc r12
 981 001c 9701      		movw r18,r14
 982 001e 8601      		movw r16,r12
 983 0020 00C0      		rjmp 2f
 984               		1:
 985 0022 000F      		lsl r16
 986 0024 111F      		rol r17
 987 0026 221F      		rol r18
 988 0028 331F      		rol r19
 989               		2:
 990 002a 6A95      		dec r22
 991 002c 02F4      		brpl 1b
 992 002e 4601      		movw r8,r12
 993 0030 5701      		movw r10,r14
 994 0032 00C0      		rjmp 2f
 995               		1:
 996 0034 880C      		lsl r8
 997 0036 991C      		rol r9
 998 0038 AA1C      		rol r10
 999 003a BB1C      		rol r11
 1000               		2:
 1001 003c 8A95      		dec r24
 1002 003e 02F4      		brpl 1b
 1003 0040 D501      		movw r26,r10
 1004 0042 C401      		movw r24,r8
 1005               	.LVL75:
 1006               		.loc 1 439 3 is_stmt 0 view .LVU237
 1007 0044 802B      		or r24,r16
 1008 0046 912B      		or r25,r17
 1009 0048 A22B      		or r26,r18
 1010 004a B32B      		or r27,r19
 1011               		.loc 1 439 27 view .LVU238
 1012 004c 0091 0000 		lds r16,layer_state
 1013 0050 1091 0000 		lds r17,layer_state+1
 1014 0054 2091 0000 		lds r18,layer_state+2
 1015 0058 3091 0000 		lds r19,layer_state+3
 1016 005c 0823      		and r16,r24
 1017 005e 1923      		and r17,r25
 1018 0060 2A23      		and r18,r26
 1019 0062 3B23      		and r19,r27
 1020 0064 8017      		cp r24,r16
 1021 0066 9107      		cpc r25,r17
 1022 0068 A207      		cpc r26,r18
 1023 006a B307      		cpc r27,r19
 1024 006c 01F4      		brne .L105
 440:quantum/quantum.c ****     layer_on(layer3);
 1025               		.loc 1 440 5 is_stmt 1 view .LVU239
 1026 006e 842F      		mov r24,r20
 1027               	/* epilogue start */
 441:quantum/quantum.c ****   } else {
 442:quantum/quantum.c ****     layer_off(layer3);
 443:quantum/quantum.c ****   }
 444:quantum/quantum.c **** }
 1028               		.loc 1 444 1 is_stmt 0 view .LVU240
 1029 0070 1F91      		pop r17
 1030 0072 0F91      		pop r16
 1031 0074 FF90      		pop r15
 1032 0076 EF90      		pop r14
 1033 0078 DF90      		pop r13
 1034 007a CF90      		pop r12
 1035 007c BF90      		pop r11
 1036 007e AF90      		pop r10
 1037 0080 9F90      		pop r9
 1038 0082 8F90      		pop r8
 440:quantum/quantum.c ****     layer_on(layer3);
 1039               		.loc 1 440 5 view .LVU241
 1040 0084 0C94 0000 		jmp layer_on
 1041               	.LVL76:
 1042               	.L105:
 442:quantum/quantum.c ****   }
 1043               		.loc 1 442 5 is_stmt 1 view .LVU242
 1044 0088 842F      		mov r24,r20
 1045               	/* epilogue start */
 1046               		.loc 1 444 1 is_stmt 0 view .LVU243
 1047 008a 1F91      		pop r17
 1048 008c 0F91      		pop r16
 1049 008e FF90      		pop r15
 1050 0090 EF90      		pop r14
 1051 0092 DF90      		pop r13
 1052 0094 CF90      		pop r12
 1053 0096 BF90      		pop r11
 1054 0098 AF90      		pop r10
 1055 009a 9F90      		pop r9
 1056 009c 8F90      		pop r8
 442:quantum/quantum.c ****   }
 1057               		.loc 1 442 5 view .LVU244
 1058 009e 0C94 0000 		jmp layer_off
 1059               	.LVL77:
 442:quantum/quantum.c ****   }
 1060               		.loc 1 442 5 view .LVU245
 1061               		.cfi_endproc
 1062               	.LFE116:
 1064               		.section	.text.tap_random_base64,"ax",@progbits
 1065               	.global	tap_random_base64
 1067               	tap_random_base64:
 1068               	.LFB117:
 445:quantum/quantum.c **** 
 446:quantum/quantum.c **** void tap_random_base64(void) {
 1069               		.loc 1 446 30 is_stmt 1 view -0
 1070               		.cfi_startproc
 1071 0000 CF93      		push r28
 1072               	.LCFI24:
 1073               		.cfi_def_cfa_offset 3
 1074               		.cfi_offset 28, -2
 1075 0002 DF93      		push r29
 1076               	.LCFI25:
 1077               		.cfi_def_cfa_offset 4
 1078               		.cfi_offset 29, -3
 1079               	/* prologue: function */
 1080               	/* frame size = 0 */
 1081               	/* stack size = 2 */
 1082               	.L__stack_usage = 2
 447:quantum/quantum.c ****   #if defined(__AVR_ATmega32U4__)
 448:quantum/quantum.c ****     uint8_t key = (TCNT0 + TCNT1 + TCNT3 + TCNT4) % 64;
 1083               		.loc 1 448 5 view .LVU247
 1084               		.loc 1 448 20 is_stmt 0 view .LVU248
 1085 0004 46B5      		in r20,0x26
 1086               		.loc 1 448 28 view .LVU249
 1087 0006 2091 8400 		lds r18,132
 1088 000a 3091 8500 		lds r19,132+1
 1089               		.loc 1 448 36 view .LVU250
 1090 000e C091 9400 		lds r28,148
 1091 0012 D091 9500 		lds r29,148+1
 1092               		.loc 1 448 44 view .LVU251
 1093 0016 8091 BE00 		lds r24,190
 1094 001a 9091 BF00 		lds r25,190+1
 1095               		.loc 1 448 34 view .LVU252
 1096 001e C20F      		add r28,r18
 1097 0020 C40F      		add r28,r20
 1098               		.loc 1 448 42 view .LVU253
 1099 0022 C80F      		add r28,r24
 1100               		.loc 1 448 13 view .LVU254
 1101 0024 CF73      		andi r28,lo8(63)
 1102               	.LVL78:
 449:quantum/quantum.c ****   #else
 450:quantum/quantum.c ****     uint8_t key = rand() % 64;
 451:quantum/quantum.c ****   #endif
 452:quantum/quantum.c ****   switch (key) {
 1103               		.loc 1 452 3 is_stmt 1 view .LVU255
 1104 0026 CE33      		cpi r28,lo8(62)
 1105 0028 00F4      		brsh .L107
 1106 002a C533      		cpi r28,lo8(53)
 1107 002c 00F4      		brsh .L108
 1108 002e CA31      		cpi r28,lo8(26)
 1109 0030 00F0      		brlo .L109
 1110 0032 C433      		cpi r28,lo8(52)
 1111 0034 00F4      		brsh .L114
 453:quantum/quantum.c ****     case 0 ... 25:
 454:quantum/quantum.c ****       register_code(KC_LSFT);
 455:quantum/quantum.c ****       register_code(key + KC_A);
 456:quantum/quantum.c ****       unregister_code(key + KC_A);
 457:quantum/quantum.c ****       unregister_code(KC_LSFT);
 458:quantum/quantum.c ****       break;
 459:quantum/quantum.c ****     case 26 ... 51:
 460:quantum/quantum.c ****       register_code(key - 26 + KC_A);
 1112               		.loc 1 460 7 view .LVU256
 1113 0036 C651      		subi r28,lo8(-(-22))
 1114               	.LVL79:
 1115               	.L117:
 461:quantum/quantum.c ****       unregister_code(key - 26 + KC_A);
 462:quantum/quantum.c ****       break;
 463:quantum/quantum.c ****     case 52:
 464:quantum/quantum.c ****       register_code(KC_0);
 465:quantum/quantum.c ****       unregister_code(KC_0);
 466:quantum/quantum.c ****       break;
 467:quantum/quantum.c ****     case 53 ... 61:
 468:quantum/quantum.c ****       register_code(key - 53 + KC_1);
 1116               		.loc 1 468 7 is_stmt 0 view .LVU257
 1117 0038 8C2F      		mov r24,r28
 1118 003a 0E94 0000 		call register_code
 1119               	.LVL80:
 469:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 1120               		.loc 1 469 7 is_stmt 1 view .LVU258
 1121 003e 8C2F      		mov r24,r28
 1122 0040 00C0      		rjmp .L115
 1123               	.LVL81:
 1124               	.L107:
 1125               		.loc 1 469 7 is_stmt 0 view .LVU259
 1126 0042 CE33      		cpi r28,lo8(62)
 1127 0044 01F0      		breq .L112
 1128 0046 CF33      		cpi r28,lo8(63)
 1129 0048 01F0      		breq .L113
 1130               	.L109:
 454:quantum/quantum.c ****       register_code(key + KC_A);
 1131               		.loc 1 454 7 is_stmt 1 view .LVU260
 1132 004a 81EE      		ldi r24,lo8(-31)
 1133 004c 0E94 0000 		call register_code
 1134               	.LVL82:
 455:quantum/quantum.c ****       unregister_code(key + KC_A);
 1135               		.loc 1 455 7 view .LVU261
 1136 0050 CC5F      		subi r28,lo8(-(4))
 1137               	.LVL83:
 455:quantum/quantum.c ****       unregister_code(key + KC_A);
 1138               		.loc 1 455 7 is_stmt 0 view .LVU262
 1139 0052 8C2F      		mov r24,r28
 1140 0054 0E94 0000 		call register_code
 1141               	.LVL84:
 456:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1142               		.loc 1 456 7 is_stmt 1 view .LVU263
 1143 0058 8C2F      		mov r24,r28
 1144               	.LVL85:
 1145               	.L116:
 470:quantum/quantum.c ****       break;
 471:quantum/quantum.c ****     case 62:
 472:quantum/quantum.c ****       register_code(KC_LSFT);
 473:quantum/quantum.c ****       register_code(KC_EQL);
 474:quantum/quantum.c ****       unregister_code(KC_EQL);
 1146               		.loc 1 474 7 is_stmt 0 view .LVU264
 1147 005a 0E94 0000 		call unregister_code
 1148               	.LVL86:
 475:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1149               		.loc 1 475 7 is_stmt 1 view .LVU265
 1150 005e 81EE      		ldi r24,lo8(-31)
 1151 0060 00C0      		rjmp .L115
 1152               	.LVL87:
 1153               	.L114:
 464:quantum/quantum.c ****       unregister_code(KC_0);
 1154               		.loc 1 464 7 view .LVU266
 1155 0062 87E2      		ldi r24,lo8(39)
 1156 0064 0E94 0000 		call register_code
 1157               	.LVL88:
 465:quantum/quantum.c ****       break;
 1158               		.loc 1 465 7 view .LVU267
 1159 0068 87E2      		ldi r24,lo8(39)
 1160               	.LVL89:
 1161               	.L115:
 1162               	/* epilogue start */
 476:quantum/quantum.c ****       break;
 477:quantum/quantum.c ****     case 63:
 478:quantum/quantum.c ****       register_code(KC_SLSH);
 479:quantum/quantum.c ****       unregister_code(KC_SLSH);
 480:quantum/quantum.c ****       break;
 481:quantum/quantum.c ****   }
 482:quantum/quantum.c **** }
 1163               		.loc 1 482 1 is_stmt 0 view .LVU268
 1164 006a DF91      		pop r29
 1165 006c CF91      		pop r28
 479:quantum/quantum.c ****       break;
 1166               		.loc 1 479 7 view .LVU269
 1167 006e 0C94 0000 		jmp unregister_code
 1168               	.LVL90:
 1169               	.L108:
 468:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 1170               		.loc 1 468 7 is_stmt 1 view .LVU270
 1171 0072 C751      		subi r28,lo8(-(-23))
 1172               	.LVL91:
 468:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 1173               		.loc 1 468 7 is_stmt 0 view .LVU271
 1174 0074 00C0      		rjmp .L117
 1175               	.LVL92:
 1176               	.L112:
 472:quantum/quantum.c ****       register_code(KC_EQL);
 1177               		.loc 1 472 7 is_stmt 1 view .LVU272
 1178 0076 81EE      		ldi r24,lo8(-31)
 1179 0078 0E94 0000 		call register_code
 1180               	.LVL93:
 473:quantum/quantum.c ****       unregister_code(KC_EQL);
 1181               		.loc 1 473 7 view .LVU273
 1182 007c 8EE2      		ldi r24,lo8(46)
 1183 007e 0E94 0000 		call register_code
 1184               	.LVL94:
 474:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1185               		.loc 1 474 7 view .LVU274
 1186 0082 8EE2      		ldi r24,lo8(46)
 1187 0084 00C0      		rjmp .L116
 1188               	.L113:
 478:quantum/quantum.c ****       unregister_code(KC_SLSH);
 1189               		.loc 1 478 7 view .LVU275
 1190 0086 88E3      		ldi r24,lo8(56)
 1191 0088 0E94 0000 		call register_code
 1192               	.LVL95:
 479:quantum/quantum.c ****       break;
 1193               		.loc 1 479 7 view .LVU276
 1194 008c 88E3      		ldi r24,lo8(56)
 1195 008e 00C0      		rjmp .L115
 1196               		.cfi_endproc
 1197               	.LFE117:
 1199               		.section	.text.matrix_init_quantum,"ax",@progbits
 1200               	.global	matrix_init_quantum
 1202               	matrix_init_quantum:
 1203               	.LFB118:
 483:quantum/quantum.c **** 
 484:quantum/quantum.c **** void matrix_init_quantum() {
 1204               		.loc 1 484 28 view -0
 1205               		.cfi_startproc
 1206               	/* prologue: function */
 1207               	/* frame size = 0 */
 1208               	/* stack size = 0 */
 1209               	.L__stack_usage = 0
 485:quantum/quantum.c ****   #ifdef BACKLIGHT_ENABLE
 486:quantum/quantum.c ****     backlight_init_ports();
 487:quantum/quantum.c ****   #endif
 488:quantum/quantum.c ****   matrix_init_kb();
 1210               		.loc 1 488 3 view .LVU278
 1211 0000 0C94 0000 		jmp matrix_init_kb
 1212               	.LVL96:
 1213               		.cfi_endproc
 1214               	.LFE118:
 1216               		.section	.text.matrix_scan_quantum,"ax",@progbits
 1217               	.global	matrix_scan_quantum
 1219               	matrix_scan_quantum:
 1220               	.LFB119:
 489:quantum/quantum.c **** }
 490:quantum/quantum.c **** 
 491:quantum/quantum.c **** void matrix_scan_quantum() {
 1221               		.loc 1 491 28 view -0
 1222               		.cfi_startproc
 1223               	/* prologue: function */
 1224               	/* frame size = 0 */
 1225               	/* stack size = 0 */
 1226               	.L__stack_usage = 0
 492:quantum/quantum.c ****   #ifdef AUDIO_ENABLE
 493:quantum/quantum.c ****     matrix_scan_music();
 494:quantum/quantum.c ****   #endif
 495:quantum/quantum.c **** 
 496:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
 497:quantum/quantum.c ****     matrix_scan_tap_dance();
 498:quantum/quantum.c ****   #endif
 499:quantum/quantum.c ****   matrix_scan_kb();
 1227               		.loc 1 499 3 view .LVU280
 1228 0000 0C94 0000 		jmp matrix_scan_kb
 1229               	.LVL97:
 1230               		.cfi_endproc
 1231               	.LFE119:
 1233               		.section	.text.backlight_init_ports,"ax",@progbits
 1234               		.weak	backlight_init_ports
 1236               	backlight_init_ports:
 1237               	.LFB133:
 1238               		.cfi_startproc
 1239               	/* prologue: function */
 1240               	/* frame size = 0 */
 1241               	/* stack size = 0 */
 1242               	.L__stack_usage = 0
 1243               	/* epilogue start */
 1244 0000 0895      		ret
 1245               		.cfi_endproc
 1246               	.LFE133:
 1248               		.section	.text.led_set_user,"ax",@progbits
 1249               		.weak	led_set_user
 1251               	led_set_user:
 1252               	.LVL98:
 1253               	.LFB122:
 500:quantum/quantum.c **** }
 501:quantum/quantum.c **** 
 502:quantum/quantum.c **** #if defined(BACKLIGHT_ENABLE) && defined(BACKLIGHT_PIN)
 503:quantum/quantum.c **** 
 504:quantum/quantum.c **** static const uint8_t backlight_pin = BACKLIGHT_PIN;
 505:quantum/quantum.c **** 
 506:quantum/quantum.c **** #if BACKLIGHT_PIN == B7
 507:quantum/quantum.c **** #  define COM1x1 COM1C1
 508:quantum/quantum.c **** #  define OCR1x  OCR1C
 509:quantum/quantum.c **** #elif BACKLIGHT_PIN == B6
 510:quantum/quantum.c **** #  define COM1x1 COM1B1
 511:quantum/quantum.c **** #  define OCR1x  OCR1B
 512:quantum/quantum.c **** #elif BACKLIGHT_PIN == B5
 513:quantum/quantum.c **** #  define COM1x1 COM1A1
 514:quantum/quantum.c **** #  define OCR1x  OCR1A
 515:quantum/quantum.c **** #else
 516:quantum/quantum.c **** #  error "Backlight pin not supported - use B5, B6, or B7"
 517:quantum/quantum.c **** #endif
 518:quantum/quantum.c **** 
 519:quantum/quantum.c **** __attribute__ ((weak))
 520:quantum/quantum.c **** void backlight_init_ports(void)
 521:quantum/quantum.c **** {
 522:quantum/quantum.c **** 
 523:quantum/quantum.c ****   // Setup backlight pin as output and output low.
 524:quantum/quantum.c ****   // DDRx |= n
 525:quantum/quantum.c ****   _SFR_IO8((backlight_pin >> 4) + 1) |= _BV(backlight_pin & 0xF);
 526:quantum/quantum.c ****   // PORTx &= ~n
 527:quantum/quantum.c ****   _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 528:quantum/quantum.c **** 
 529:quantum/quantum.c ****   // Use full 16-bit resolution.
 530:quantum/quantum.c ****   ICR1 = 0xFFFF;
 531:quantum/quantum.c **** 
 532:quantum/quantum.c ****   // I could write a wall of text here to explain... but TL;DW
 533:quantum/quantum.c ****   // Go read the ATmega32u4 datasheet.
 534:quantum/quantum.c ****   // And this: http://blog.saikoled.com/post/43165849837/secret-konami-cheat-code-to-high-resolutio
 535:quantum/quantum.c **** 
 536:quantum/quantum.c ****   // Pin PB7 = OCR1C (Timer 1, Channel C)
 537:quantum/quantum.c ****   // Compare Output Mode = Clear on compare match, Channel C = COM1C1=1 COM1C0=0
 538:quantum/quantum.c ****   // (i.e. start high, go low when counter matches.)
 539:quantum/quantum.c ****   // WGM Mode 14 (Fast PWM) = WGM13=1 WGM12=1 WGM11=1 WGM10=0
 540:quantum/quantum.c ****   // Clock Select = clk/1 (no prescaling) = CS12=0 CS11=0 CS10=1
 541:quantum/quantum.c **** 
 542:quantum/quantum.c ****   TCCR1A = _BV(COM1x1) | _BV(WGM11); // = 0b00001010;
 543:quantum/quantum.c ****   TCCR1B = _BV(WGM13) | _BV(WGM12) | _BV(CS10); // = 0b00011001;
 544:quantum/quantum.c **** 
 545:quantum/quantum.c ****   backlight_init();
 546:quantum/quantum.c ****   #ifdef BACKLIGHT_BREATHING
 547:quantum/quantum.c ****     breathing_defaults();
 548:quantum/quantum.c ****   #endif
 549:quantum/quantum.c **** }
 550:quantum/quantum.c **** 
 551:quantum/quantum.c **** __attribute__ ((weak))
 552:quantum/quantum.c **** void backlight_set(uint8_t level)
 553:quantum/quantum.c **** {
 554:quantum/quantum.c ****   // Prevent backlight blink on lowest level
 555:quantum/quantum.c ****   // PORTx &= ~n
 556:quantum/quantum.c ****   _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 557:quantum/quantum.c **** 
 558:quantum/quantum.c ****   if ( level == 0 ) {
 559:quantum/quantum.c ****     // Turn off PWM control on backlight pin, revert to output low.
 560:quantum/quantum.c ****     TCCR1A &= ~(_BV(COM1x1));
 561:quantum/quantum.c ****     OCR1x = 0x0;
 562:quantum/quantum.c ****   } else if ( level == BACKLIGHT_LEVELS ) {
 563:quantum/quantum.c ****     // Turn on PWM control of backlight pin
 564:quantum/quantum.c ****     TCCR1A |= _BV(COM1x1);
 565:quantum/quantum.c ****     // Set the brightness
 566:quantum/quantum.c ****     OCR1x = 0xFFFF;
 567:quantum/quantum.c ****   } else {
 568:quantum/quantum.c ****     // Turn on PWM control of backlight pin
 569:quantum/quantum.c ****     TCCR1A |= _BV(COM1x1);
 570:quantum/quantum.c ****     // Set the brightness
 571:quantum/quantum.c ****     OCR1x = 0xFFFF >> ((BACKLIGHT_LEVELS - level) * ((BACKLIGHT_LEVELS + 1) / 2));
 572:quantum/quantum.c ****   }
 573:quantum/quantum.c **** 
 574:quantum/quantum.c ****   #ifdef BACKLIGHT_BREATHING
 575:quantum/quantum.c ****     breathing_intensity_default();
 576:quantum/quantum.c ****   #endif
 577:quantum/quantum.c **** }
 578:quantum/quantum.c **** 
 579:quantum/quantum.c **** 
 580:quantum/quantum.c **** #ifdef BACKLIGHT_BREATHING
 581:quantum/quantum.c **** 
 582:quantum/quantum.c **** #define BREATHING_NO_HALT  0
 583:quantum/quantum.c **** #define BREATHING_HALT_OFF 1
 584:quantum/quantum.c **** #define BREATHING_HALT_ON  2
 585:quantum/quantum.c **** 
 586:quantum/quantum.c **** static uint8_t breath_intensity;
 587:quantum/quantum.c **** static uint8_t breath_speed;
 588:quantum/quantum.c **** static uint16_t breathing_index;
 589:quantum/quantum.c **** static uint8_t breathing_halt;
 590:quantum/quantum.c **** 
 591:quantum/quantum.c **** void breathing_enable(void)
 592:quantum/quantum.c **** {
 593:quantum/quantum.c ****     if (get_backlight_level() == 0)
 594:quantum/quantum.c ****     {
 595:quantum/quantum.c ****         breathing_index = 0;
 596:quantum/quantum.c ****     }
 597:quantum/quantum.c ****     else
 598:quantum/quantum.c ****     {
 599:quantum/quantum.c ****         // Set breathing_index to be at the midpoint (brightest point)
 600:quantum/quantum.c ****         breathing_index = 0x20 << breath_speed;
 601:quantum/quantum.c ****     }
 602:quantum/quantum.c **** 
 603:quantum/quantum.c ****     breathing_halt = BREATHING_NO_HALT;
 604:quantum/quantum.c **** 
 605:quantum/quantum.c ****     // Enable breathing interrupt
 606:quantum/quantum.c ****     TIMSK1 |= _BV(OCIE1A);
 607:quantum/quantum.c **** }
 608:quantum/quantum.c **** 
 609:quantum/quantum.c **** void breathing_pulse(void)
 610:quantum/quantum.c **** {
 611:quantum/quantum.c ****     if (get_backlight_level() == 0)
 612:quantum/quantum.c ****     {
 613:quantum/quantum.c ****         breathing_index = 0;
 614:quantum/quantum.c ****     }
 615:quantum/quantum.c ****     else
 616:quantum/quantum.c ****     {
 617:quantum/quantum.c ****         // Set breathing_index to be at the midpoint + 1 (brightest point)
 618:quantum/quantum.c ****         breathing_index = 0x21 << breath_speed;
 619:quantum/quantum.c ****     }
 620:quantum/quantum.c **** 
 621:quantum/quantum.c ****     breathing_halt = BREATHING_HALT_ON;
 622:quantum/quantum.c **** 
 623:quantum/quantum.c ****     // Enable breathing interrupt
 624:quantum/quantum.c ****     TIMSK1 |= _BV(OCIE1A);
 625:quantum/quantum.c **** }
 626:quantum/quantum.c **** 
 627:quantum/quantum.c **** void breathing_disable(void)
 628:quantum/quantum.c **** {
 629:quantum/quantum.c ****     // Disable breathing interrupt
 630:quantum/quantum.c ****     TIMSK1 &= ~_BV(OCIE1A);
 631:quantum/quantum.c ****     backlight_set(get_backlight_level());
 632:quantum/quantum.c **** }
 633:quantum/quantum.c **** 
 634:quantum/quantum.c **** void breathing_self_disable(void)
 635:quantum/quantum.c **** {
 636:quantum/quantum.c ****     if (get_backlight_level() == 0)
 637:quantum/quantum.c ****     {
 638:quantum/quantum.c ****         breathing_halt = BREATHING_HALT_OFF;
 639:quantum/quantum.c ****     }
 640:quantum/quantum.c ****     else
 641:quantum/quantum.c ****     {
 642:quantum/quantum.c ****         breathing_halt = BREATHING_HALT_ON;
 643:quantum/quantum.c ****     }
 644:quantum/quantum.c **** 
 645:quantum/quantum.c ****     //backlight_set(get_backlight_level());
 646:quantum/quantum.c **** }
 647:quantum/quantum.c **** 
 648:quantum/quantum.c **** void breathing_toggle(void)
 649:quantum/quantum.c **** {
 650:quantum/quantum.c ****     if (!is_breathing())
 651:quantum/quantum.c ****     {
 652:quantum/quantum.c ****         if (get_backlight_level() == 0)
 653:quantum/quantum.c ****         {
 654:quantum/quantum.c ****             breathing_index = 0;
 655:quantum/quantum.c ****         }
 656:quantum/quantum.c ****         else
 657:quantum/quantum.c ****         {
 658:quantum/quantum.c ****             // Set breathing_index to be at the midpoint + 1 (brightest point)
 659:quantum/quantum.c ****             breathing_index = 0x21 << breath_speed;
 660:quantum/quantum.c ****         }
 661:quantum/quantum.c **** 
 662:quantum/quantum.c ****         breathing_halt = BREATHING_NO_HALT;
 663:quantum/quantum.c ****     }
 664:quantum/quantum.c **** 
 665:quantum/quantum.c ****     // Toggle breathing interrupt
 666:quantum/quantum.c ****     TIMSK1 ^= _BV(OCIE1A);
 667:quantum/quantum.c **** 
 668:quantum/quantum.c ****     // Restore backlight level
 669:quantum/quantum.c ****     if (!is_breathing())
 670:quantum/quantum.c ****     {
 671:quantum/quantum.c ****         backlight_set(get_backlight_level());
 672:quantum/quantum.c ****     }
 673:quantum/quantum.c **** }
 674:quantum/quantum.c **** 
 675:quantum/quantum.c **** bool is_breathing(void)
 676:quantum/quantum.c **** {
 677:quantum/quantum.c ****     return (TIMSK1 && _BV(OCIE1A));
 678:quantum/quantum.c **** }
 679:quantum/quantum.c **** 
 680:quantum/quantum.c **** void breathing_intensity_default(void)
 681:quantum/quantum.c **** {
 682:quantum/quantum.c ****     //breath_intensity = (uint8_t)((uint16_t)100 * (uint16_t)get_backlight_level() / (uint16_t)BACK
 683:quantum/quantum.c ****     breath_intensity = ((BACKLIGHT_LEVELS - get_backlight_level()) * ((BACKLIGHT_LEVELS + 1) / 2));
 684:quantum/quantum.c **** }
 685:quantum/quantum.c **** 
 686:quantum/quantum.c **** void breathing_intensity_set(uint8_t value)
 687:quantum/quantum.c **** {
 688:quantum/quantum.c ****     breath_intensity = value;
 689:quantum/quantum.c **** }
 690:quantum/quantum.c **** 
 691:quantum/quantum.c **** void breathing_speed_default(void)
 692:quantum/quantum.c **** {
 693:quantum/quantum.c ****     breath_speed = 4;
 694:quantum/quantum.c **** }
 695:quantum/quantum.c **** 
 696:quantum/quantum.c **** void breathing_speed_set(uint8_t value)
 697:quantum/quantum.c **** {
 698:quantum/quantum.c ****     bool is_breathing_now = is_breathing();
 699:quantum/quantum.c ****     uint8_t old_breath_speed = breath_speed;
 700:quantum/quantum.c **** 
 701:quantum/quantum.c ****     if (is_breathing_now)
 702:quantum/quantum.c ****     {
 703:quantum/quantum.c ****         // Disable breathing interrupt
 704:quantum/quantum.c ****         TIMSK1 &= ~_BV(OCIE1A);
 705:quantum/quantum.c ****     }
 706:quantum/quantum.c **** 
 707:quantum/quantum.c ****     breath_speed = value;
 708:quantum/quantum.c **** 
 709:quantum/quantum.c ****     if (is_breathing_now)
 710:quantum/quantum.c ****     {
 711:quantum/quantum.c ****         // Adjust index to account for new speed
 712:quantum/quantum.c ****         breathing_index = (( (uint8_t)( (breathing_index) >> old_breath_speed ) ) & 0x3F) << breath
 713:quantum/quantum.c **** 
 714:quantum/quantum.c ****         // Enable breathing interrupt
 715:quantum/quantum.c ****         TIMSK1 |= _BV(OCIE1A);
 716:quantum/quantum.c ****     }
 717:quantum/quantum.c **** 
 718:quantum/quantum.c **** }
 719:quantum/quantum.c **** 
 720:quantum/quantum.c **** void breathing_speed_inc(uint8_t value)
 721:quantum/quantum.c **** {
 722:quantum/quantum.c ****     if ((uint16_t)(breath_speed - value) > 10 )
 723:quantum/quantum.c ****     {
 724:quantum/quantum.c ****         breathing_speed_set(0);
 725:quantum/quantum.c ****     }
 726:quantum/quantum.c ****     else
 727:quantum/quantum.c ****     {
 728:quantum/quantum.c ****         breathing_speed_set(breath_speed - value);
 729:quantum/quantum.c ****     }
 730:quantum/quantum.c **** }
 731:quantum/quantum.c **** 
 732:quantum/quantum.c **** void breathing_speed_dec(uint8_t value)
 733:quantum/quantum.c **** {
 734:quantum/quantum.c ****     if ((uint16_t)(breath_speed + value) > 10 )
 735:quantum/quantum.c ****     {
 736:quantum/quantum.c ****         breathing_speed_set(10);
 737:quantum/quantum.c ****     }
 738:quantum/quantum.c ****     else
 739:quantum/quantum.c ****     {
 740:quantum/quantum.c ****         breathing_speed_set(breath_speed + value);
 741:quantum/quantum.c ****     }
 742:quantum/quantum.c **** }
 743:quantum/quantum.c **** 
 744:quantum/quantum.c **** void breathing_defaults(void)
 745:quantum/quantum.c **** {
 746:quantum/quantum.c ****     breathing_intensity_default();
 747:quantum/quantum.c ****     breathing_speed_default();
 748:quantum/quantum.c ****     breathing_halt = BREATHING_NO_HALT;
 749:quantum/quantum.c **** }
 750:quantum/quantum.c **** 
 751:quantum/quantum.c **** /* Breathing Sleep LED brighness(PWM On period) table
 752:quantum/quantum.c ****  * (64[steps] * 4[duration]) / 64[PWM periods/s] = 4 second breath cycle
 753:quantum/quantum.c ****  *
 754:quantum/quantum.c ****  * http://www.wolframalpha.com/input/?i=%28sin%28+x%2F64*pi%29**8+*+255%2C+x%3D0+to+63
 755:quantum/quantum.c ****  * (0..63).each {|x| p ((sin(x/64.0*PI)**8)*255).to_i }
 756:quantum/quantum.c ****  */
 757:quantum/quantum.c **** static const uint8_t breathing_table[64] PROGMEM = {
 758:quantum/quantum.c ****   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   2,   4,   6,  10,
 759:quantum/quantum.c ****  15,  23,  32,  44,  58,  74,  93, 113, 135, 157, 179, 199, 218, 233, 245, 252,
 760:quantum/quantum.c **** 255, 252, 245, 233, 218, 199, 179, 157, 135, 113,  93,  74,  58,  44,  32,  23,
 761:quantum/quantum.c ****  15,  10,   6,   4,   2,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 762:quantum/quantum.c **** };
 763:quantum/quantum.c **** 
 764:quantum/quantum.c **** ISR(TIMER1_COMPA_vect)
 765:quantum/quantum.c **** {
 766:quantum/quantum.c ****     // OCR1x = (pgm_read_byte(&breathing_table[ ( (uint8_t)( (breathing_index++) >> breath_speed ) 
 767:quantum/quantum.c **** 
 768:quantum/quantum.c **** 
 769:quantum/quantum.c ****     uint8_t local_index = ( (uint8_t)( (breathing_index++) >> breath_speed ) ) & 0x3F;
 770:quantum/quantum.c **** 
 771:quantum/quantum.c ****     if (((breathing_halt == BREATHING_HALT_ON) && (local_index == 0x20)) || ((breathing_halt == BRE
 772:quantum/quantum.c ****     {
 773:quantum/quantum.c ****         // Disable breathing interrupt
 774:quantum/quantum.c ****         TIMSK1 &= ~_BV(OCIE1A);
 775:quantum/quantum.c ****     }
 776:quantum/quantum.c **** 
 777:quantum/quantum.c ****     OCR1x = (uint16_t)(((uint16_t)pgm_read_byte(&breathing_table[local_index]) * 257)) >> breath_in
 778:quantum/quantum.c **** 
 779:quantum/quantum.c **** }
 780:quantum/quantum.c **** 
 781:quantum/quantum.c **** 
 782:quantum/quantum.c **** 
 783:quantum/quantum.c **** #endif // breathing
 784:quantum/quantum.c **** 
 785:quantum/quantum.c **** #else // backlight
 786:quantum/quantum.c **** 
 787:quantum/quantum.c **** __attribute__ ((weak))
 788:quantum/quantum.c **** void backlight_init_ports(void)
 789:quantum/quantum.c **** {
 790:quantum/quantum.c **** 
 791:quantum/quantum.c **** }
 792:quantum/quantum.c **** 
 793:quantum/quantum.c **** __attribute__ ((weak))
 794:quantum/quantum.c **** void backlight_set(uint8_t level)
 795:quantum/quantum.c **** {
 796:quantum/quantum.c **** 
 797:quantum/quantum.c **** }
 798:quantum/quantum.c **** 
 799:quantum/quantum.c **** #endif // backlight
 800:quantum/quantum.c **** 
 801:quantum/quantum.c **** 
 802:quantum/quantum.c **** 
 803:quantum/quantum.c **** __attribute__ ((weak))
 804:quantum/quantum.c **** void led_set_user(uint8_t usb_led) {
 1254               		.loc 1 804 36 view -0
 1255               		.cfi_startproc
 1256               	/* prologue: function */
 1257               	/* frame size = 0 */
 1258               	/* stack size = 0 */
 1259               	.L__stack_usage = 0
 805:quantum/quantum.c **** 
 806:quantum/quantum.c **** }
 1260               		.loc 1 806 1 view .LVU282
 1261               	/* epilogue start */
 1262 0000 0895      		ret
 1263               		.cfi_endproc
 1264               	.LFE122:
 1266               		.set	led_set_user.localalias.1,led_set_user
 1267               		.section	.text.backlight_set,"ax",@progbits
 1268               		.weak	backlight_set
 1270               	backlight_set:
 1271               	.LFB135:
 1272               		.cfi_startproc
 1273               	/* prologue: function */
 1274               	/* frame size = 0 */
 1275               	/* stack size = 0 */
 1276               	.L__stack_usage = 0
 1277               	/* epilogue start */
 1278 0000 0895      		ret
 1279               		.cfi_endproc
 1280               	.LFE135:
 1282               		.section	.text.led_set_kb,"ax",@progbits
 1283               		.weak	led_set_kb
 1285               	led_set_kb:
 1286               	.LVL99:
 1287               	.LFB123:
 807:quantum/quantum.c **** 
 808:quantum/quantum.c **** __attribute__ ((weak))
 809:quantum/quantum.c **** void led_set_kb(uint8_t usb_led) {
 1288               		.loc 1 809 34 view -0
 1289               		.cfi_startproc
 1290               	/* prologue: function */
 1291               	/* frame size = 0 */
 1292               	/* stack size = 0 */
 1293               	.L__stack_usage = 0
 810:quantum/quantum.c ****     led_set_user(usb_led);
 1294               		.loc 1 810 5 view .LVU284
 1295 0000 0C94 0000 		jmp led_set_user
 1296               	.LVL100:
 1297               		.loc 1 810 5 is_stmt 0 view .LVU285
 1298               		.cfi_endproc
 1299               	.LFE123:
 1301               		.section	.text.led_init_ports,"ax",@progbits
 1302               		.weak	led_init_ports
 1304               	led_init_ports:
 1305               	.LFB124:
 811:quantum/quantum.c **** }
 812:quantum/quantum.c **** 
 813:quantum/quantum.c **** __attribute__ ((weak))
 814:quantum/quantum.c **** void led_init_ports(void)
 815:quantum/quantum.c **** {
 1306               		.loc 1 815 1 is_stmt 1 view -0
 1307               		.cfi_startproc
 1308               	/* prologue: function */
 1309               	/* frame size = 0 */
 1310               	/* stack size = 0 */
 1311               	.L__stack_usage = 0
 816:quantum/quantum.c **** 
 817:quantum/quantum.c **** }
 1312               		.loc 1 817 1 view .LVU287
 1313               	/* epilogue start */
 1314 0000 0895      		ret
 1315               		.cfi_endproc
 1316               	.LFE124:
 1318               		.section	.text.led_set,"ax",@progbits
 1319               		.weak	led_set
 1321               	led_set:
 1322               	.LVL101:
 1323               	.LFB125:
 818:quantum/quantum.c **** 
 819:quantum/quantum.c **** __attribute__ ((weak))
 820:quantum/quantum.c **** void led_set(uint8_t usb_led)
 821:quantum/quantum.c **** {
 1324               		.loc 1 821 1 view -0
 1325               		.cfi_startproc
 1326               	/* prologue: function */
 1327               	/* frame size = 0 */
 1328               	/* stack size = 0 */
 1329               	.L__stack_usage = 0
 822:quantum/quantum.c **** 
 823:quantum/quantum.c ****   // Example LED Code
 824:quantum/quantum.c ****   //
 825:quantum/quantum.c ****     // // Using PE6 Caps Lock LED
 826:quantum/quantum.c ****     // if (usb_led & (1<<USB_LED_CAPS_LOCK))
 827:quantum/quantum.c ****     // {
 828:quantum/quantum.c ****     //     // Output high.
 829:quantum/quantum.c ****     //     DDRE |= (1<<6);
 830:quantum/quantum.c ****     //     PORTE |= (1<<6);
 831:quantum/quantum.c ****     // }
 832:quantum/quantum.c ****     // else
 833:quantum/quantum.c ****     // {
 834:quantum/quantum.c ****     //     // Output low.
 835:quantum/quantum.c ****     //     DDRE &= ~(1<<6);
 836:quantum/quantum.c ****     //     PORTE &= ~(1<<6);
 837:quantum/quantum.c ****     // }
 838:quantum/quantum.c **** 
 839:quantum/quantum.c ****   led_set_kb(usb_led);
 1330               		.loc 1 839 3 view .LVU289
 1331 0000 0C94 0000 		jmp led_set_kb
 1332               	.LVL102:
 1333               		.loc 1 839 3 is_stmt 0 view .LVU290
 1334               		.cfi_endproc
 1335               	.LFE125:
 1337               		.section	.text.startup_user,"ax",@progbits
 1338               		.weak	startup_user
 1340               	startup_user:
 1341               	.LFB129:
 1342               		.cfi_startproc
 1343               	/* prologue: function */
 1344               	/* frame size = 0 */
 1345               	/* stack size = 0 */
 1346               	.L__stack_usage = 0
 1347               	/* epilogue start */
 1348 0000 0895      		ret
 1349               		.cfi_endproc
 1350               	.LFE129:
 1352               		.section	.text.shutdown_user,"ax",@progbits
 1353               		.weak	shutdown_user
 1355               	shutdown_user:
 1356               	.LFB131:
 1357               		.cfi_startproc
 1358               	/* prologue: function */
 1359               	/* frame size = 0 */
 1360               	/* stack size = 0 */
 1361               	.L__stack_usage = 0
 1362               	/* epilogue start */
 1363 0000 0895      		ret
 1364               		.cfi_endproc
 1365               	.LFE131:
 1367               	.global	ascii_to_qwerty_keycode_lut
 1368               		.section	.progmem.data.ascii_to_qwerty_keycode_lut,"a",@progbits
 1371               	ascii_to_qwerty_keycode_lut:
 1372 0000 00        		.byte	0
 1373 0001 00        		.byte	0
 1374 0002 00        		.byte	0
 1375 0003 00        		.byte	0
 1376 0004 00        		.byte	0
 1377 0005 00        		.byte	0
 1378 0006 00        		.byte	0
 1379 0007 00        		.byte	0
 1380 0008 2A        		.byte	42
 1381 0009 2B        		.byte	43
 1382 000a 28        		.byte	40
 1383 000b 00        		.byte	0
 1384 000c 00        		.byte	0
 1385 000d 00        		.byte	0
 1386 000e 00        		.byte	0
 1387 000f 00        		.byte	0
 1388 0010 00        		.byte	0
 1389 0011 00        		.byte	0
 1390 0012 00        		.byte	0
 1391 0013 00        		.byte	0
 1392 0014 00        		.byte	0
 1393 0015 00        		.byte	0
 1394 0016 00        		.byte	0
 1395 0017 00        		.byte	0
 1396 0018 00        		.byte	0
 1397 0019 00        		.byte	0
 1398 001a 00        		.byte	0
 1399 001b 29        		.byte	41
 1400 001c 00        		.byte	0
 1401 001d 00        		.byte	0
 1402 001e 00        		.byte	0
 1403 001f 00        		.byte	0
 1404 0020 2C        		.byte	44
 1405 0021 1E        		.byte	30
 1406 0022 34        		.byte	52
 1407 0023 20        		.byte	32
 1408 0024 21        		.byte	33
 1409 0025 22        		.byte	34
 1410 0026 24        		.byte	36
 1411 0027 34        		.byte	52
 1412 0028 26        		.byte	38
 1413 0029 27        		.byte	39
 1414 002a 25        		.byte	37
 1415 002b 2E        		.byte	46
 1416 002c 36        		.byte	54
 1417 002d 2D        		.byte	45
 1418 002e 37        		.byte	55
 1419 002f 38        		.byte	56
 1420 0030 27        		.byte	39
 1421 0031 1E        		.byte	30
 1422 0032 1F        		.byte	31
 1423 0033 20        		.byte	32
 1424 0034 21        		.byte	33
 1425 0035 22        		.byte	34
 1426 0036 23        		.byte	35
 1427 0037 24        		.byte	36
 1428 0038 25        		.byte	37
 1429 0039 26        		.byte	38
 1430 003a 33        		.byte	51
 1431 003b 33        		.byte	51
 1432 003c 36        		.byte	54
 1433 003d 2E        		.byte	46
 1434 003e 37        		.byte	55
 1435 003f 38        		.byte	56
 1436 0040 1F        		.byte	31
 1437 0041 04        		.byte	4
 1438 0042 05        		.byte	5
 1439 0043 06        		.byte	6
 1440 0044 07        		.byte	7
 1441 0045 08        		.byte	8
 1442 0046 09        		.byte	9
 1443 0047 0A        		.byte	10
 1444 0048 0B        		.byte	11
 1445 0049 0C        		.byte	12
 1446 004a 0D        		.byte	13
 1447 004b 0E        		.byte	14
 1448 004c 0F        		.byte	15
 1449 004d 10        		.byte	16
 1450 004e 11        		.byte	17
 1451 004f 12        		.byte	18
 1452 0050 13        		.byte	19
 1453 0051 14        		.byte	20
 1454 0052 15        		.byte	21
 1455 0053 16        		.byte	22
 1456 0054 17        		.byte	23
 1457 0055 18        		.byte	24
 1458 0056 19        		.byte	25
 1459 0057 1A        		.byte	26
 1460 0058 1B        		.byte	27
 1461 0059 1C        		.byte	28
 1462 005a 1D        		.byte	29
 1463 005b 2F        		.byte	47
 1464 005c 31        		.byte	49
 1465 005d 30        		.byte	48
 1466 005e 23        		.byte	35
 1467 005f 2D        		.byte	45
 1468 0060 35        		.byte	53
 1469 0061 04        		.byte	4
 1470 0062 05        		.byte	5
 1471 0063 06        		.byte	6
 1472 0064 07        		.byte	7
 1473 0065 08        		.byte	8
 1474 0066 09        		.byte	9
 1475 0067 0A        		.byte	10
 1476 0068 0B        		.byte	11
 1477 0069 0C        		.byte	12
 1478 006a 0D        		.byte	13
 1479 006b 0E        		.byte	14
 1480 006c 0F        		.byte	15
 1481 006d 10        		.byte	16
 1482 006e 11        		.byte	17
 1483 006f 12        		.byte	18
 1484 0070 13        		.byte	19
 1485 0071 14        		.byte	20
 1486 0072 15        		.byte	21
 1487 0073 16        		.byte	22
 1488 0074 17        		.byte	23
 1489 0075 18        		.byte	24
 1490 0076 19        		.byte	25
 1491 0077 1A        		.byte	26
 1492 0078 1B        		.byte	27
 1493 0079 1C        		.byte	28
 1494 007a 1D        		.byte	29
 1495 007b 2F        		.byte	47
 1496 007c 31        		.byte	49
 1497 007d 30        		.byte	48
 1498 007e 35        		.byte	53
 1499 007f 4C        		.byte	76
 1500               	.global	ascii_to_qwerty_shift_lut
 1501               		.section	.progmem.data.ascii_to_qwerty_shift_lut,"a",@progbits
 1504               	ascii_to_qwerty_shift_lut:
 1505 0000 00        		.byte	0
 1506 0001 00        		.byte	0
 1507 0002 00        		.byte	0
 1508 0003 00        		.byte	0
 1509 0004 00        		.byte	0
 1510 0005 00        		.byte	0
 1511 0006 00        		.byte	0
 1512 0007 00        		.byte	0
 1513 0008 00        		.byte	0
 1514 0009 00        		.byte	0
 1515 000a 00        		.byte	0
 1516 000b 00        		.byte	0
 1517 000c 00        		.byte	0
 1518 000d 00        		.byte	0
 1519 000e 00        		.byte	0
 1520 000f 00        		.byte	0
 1521 0010 00        		.byte	0
 1522 0011 00        		.byte	0
 1523 0012 00        		.byte	0
 1524 0013 00        		.byte	0
 1525 0014 00        		.byte	0
 1526 0015 00        		.byte	0
 1527 0016 00        		.byte	0
 1528 0017 00        		.byte	0
 1529 0018 00        		.byte	0
 1530 0019 00        		.byte	0
 1531 001a 00        		.byte	0
 1532 001b 00        		.byte	0
 1533 001c 00        		.byte	0
 1534 001d 00        		.byte	0
 1535 001e 00        		.byte	0
 1536 001f 00        		.byte	0
 1537 0020 00        		.byte	0
 1538 0021 01        		.byte	1
 1539 0022 01        		.byte	1
 1540 0023 01        		.byte	1
 1541 0024 01        		.byte	1
 1542 0025 01        		.byte	1
 1543 0026 01        		.byte	1
 1544 0027 00        		.byte	0
 1545 0028 01        		.byte	1
 1546 0029 01        		.byte	1
 1547 002a 01        		.byte	1
 1548 002b 01        		.byte	1
 1549 002c 00        		.byte	0
 1550 002d 00        		.byte	0
 1551 002e 00        		.byte	0
 1552 002f 00        		.byte	0
 1553 0030 00        		.byte	0
 1554 0031 00        		.byte	0
 1555 0032 00        		.byte	0
 1556 0033 00        		.byte	0
 1557 0034 00        		.byte	0
 1558 0035 00        		.byte	0
 1559 0036 00        		.byte	0
 1560 0037 00        		.byte	0
 1561 0038 00        		.byte	0
 1562 0039 00        		.byte	0
 1563 003a 01        		.byte	1
 1564 003b 00        		.byte	0
 1565 003c 01        		.byte	1
 1566 003d 00        		.byte	0
 1567 003e 01        		.byte	1
 1568 003f 01        		.byte	1
 1569 0040 01        		.byte	1
 1570 0041 01        		.byte	1
 1571 0042 01        		.byte	1
 1572 0043 01        		.byte	1
 1573 0044 01        		.byte	1
 1574 0045 01        		.byte	1
 1575 0046 01        		.byte	1
 1576 0047 01        		.byte	1
 1577 0048 01        		.byte	1
 1578 0049 01        		.byte	1
 1579 004a 01        		.byte	1
 1580 004b 01        		.byte	1
 1581 004c 01        		.byte	1
 1582 004d 01        		.byte	1
 1583 004e 01        		.byte	1
 1584 004f 01        		.byte	1
 1585 0050 01        		.byte	1
 1586 0051 01        		.byte	1
 1587 0052 01        		.byte	1
 1588 0053 01        		.byte	1
 1589 0054 01        		.byte	1
 1590 0055 01        		.byte	1
 1591 0056 01        		.byte	1
 1592 0057 01        		.byte	1
 1593 0058 01        		.byte	1
 1594 0059 01        		.byte	1
 1595 005a 01        		.byte	1
 1596 005b 00        		.byte	0
 1597 005c 00        		.byte	0
 1598 005d 00        		.byte	0
 1599 005e 01        		.byte	1
 1600 005f 01        		.byte	1
 1601 0060 00        		.byte	0
 1602 0061 00        		.byte	0
 1603 0062 00        		.byte	0
 1604 0063 00        		.byte	0
 1605 0064 00        		.byte	0
 1606 0065 00        		.byte	0
 1607 0066 00        		.byte	0
 1608 0067 00        		.byte	0
 1609 0068 00        		.byte	0
 1610 0069 00        		.byte	0
 1611 006a 00        		.byte	0
 1612 006b 00        		.byte	0
 1613 006c 00        		.byte	0
 1614 006d 00        		.byte	0
 1615 006e 00        		.byte	0
 1616 006f 00        		.byte	0
 1617 0070 00        		.byte	0
 1618 0071 00        		.byte	0
 1619 0072 00        		.byte	0
 1620 0073 00        		.byte	0
 1621 0074 00        		.byte	0
 1622 0075 00        		.byte	0
 1623 0076 00        		.byte	0
 1624 0077 00        		.byte	0
 1625 0078 00        		.byte	0
 1626 0079 00        		.byte	0
 1627 007a 00        		.byte	0
 1628 007b 01        		.byte	1
 1629 007c 01        		.byte	1
 1630 007d 01        		.byte	1
 1631 007e 01        		.byte	1
 1632 007f 00        		.byte	0
 1633               		.section	.bss.shift_interrupted,"aw",@nobits
 1636               	shift_interrupted:
 1637 0000 0000      		.zero	2
 1638               		.text
 1639               	.Letext0:
 1640               		.file 3 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/stdint.h"
 1641               		.file 4 "/usr/local/Cellar/avr-gcc/8.1.0/lib/avr-gcc/8/gcc/avr/8.1.0/include/stddef.h"
 1642               		.file 5 "./tmk_core/common/keyboard.h"
 1643               		.file 6 "./tmk_core/common/action.h"
 1644               		.file 7 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 1645               		.file 8 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 1646               		.file 9 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 1647               		.file 10 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/HostStandardReq.h"
 1648               		.file 11 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/stdio.h"
 1649               		.file 12 "./tmk_core/common/report.h"
 1650               		.file 13 "./tmk_core/common/host.h"
 1651               		.file 14 "./tmk_core/common/debug.h"
 1652               		.file 15 "quantum/keycode_config.h"
 1653               		.file 16 "quantum/keymap.h"
 1654               		.file 17 "./tmk_core/common/keycode.h"
 1655               		.file 18 "./tmk_core/common/action_layer.h"
 1656               		.file 19 "./tmk_core/common/timer.h"
 1657               		.file 20 "./tmk_core/common/action_util.h"
 1658               		.file 21 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/stdlib.h"
 1659               		.file 22 "quantum/quantum.h"
 1660               		.file 23 "./quantum/process_keycode/process_leader.h"
 1661               		.file 24 "./quantum/process_keycode/process_unicode.h"
 1662               		.file 25 "./tmk_core/common/eeconfig.h"
 1663               		.file 26 "./tmk_core/common/bootloader.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 quantum.c
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczUBjga.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczUBjga.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczUBjga.s:4      *ABS*:000000000000003f __SREG__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczUBjga.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczUBjga.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczUBjga.s:12     .text.do_code16:0000000000000000 do_code16
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczUBjga.s:168    .text.register_code16:0000000000000000 register_code16
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczUBjga.s:202    .text.unregister_code16:0000000000000000 unregister_code16
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczUBjga.s:243    .text.process_action_kb:0000000000000000 process_action_kb
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczUBjga.s:265    .text.process_record_user:0000000000000000 process_record_user
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczUBjga.s:287    .text.process_record_kb:0000000000000000 process_record_kb
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczUBjga.s:307    .text.reset_keyboard:0000000000000000 reset_keyboard
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczUBjga.s:352    .text.process_record_quantum:0000000000000000 process_record_quantum
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczUBjga.s:1636   .bss.shift_interrupted:0000000000000000 shift_interrupted
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczUBjga.s:778    .text.send_string:0000000000000000 send_string
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczUBjga.s:1371   .progmem.data.ascii_to_qwerty_keycode_lut:0000000000000000 ascii_to_qwerty_keycode_lut
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczUBjga.s:1504   .progmem.data.ascii_to_qwerty_shift_lut:0000000000000000 ascii_to_qwerty_shift_lut
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczUBjga.s:926    .text.update_tri_layer:0000000000000000 update_tri_layer
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczUBjga.s:1067   .text.tap_random_base64:0000000000000000 tap_random_base64
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczUBjga.s:1202   .text.matrix_init_quantum:0000000000000000 matrix_init_quantum
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczUBjga.s:1219   .text.matrix_scan_quantum:0000000000000000 matrix_scan_quantum
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczUBjga.s:1236   .text.backlight_init_ports:0000000000000000 backlight_init_ports
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczUBjga.s:1251   .text.led_set_user:0000000000000000 led_set_user
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczUBjga.s:1251   .text.led_set_user:0000000000000000 led_set_user.localalias.1
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczUBjga.s:1270   .text.backlight_set:0000000000000000 backlight_set
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczUBjga.s:1285   .text.led_set_kb:0000000000000000 led_set_kb
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczUBjga.s:1304   .text.led_init_ports:0000000000000000 led_init_ports
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczUBjga.s:1321   .text.led_set:0000000000000000 led_set
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczUBjga.s:1340   .text.startup_user:0000000000000000 startup_user
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cczUBjga.s:1355   .text.shutdown_user:0000000000000000 shutdown_user

UNDEFINED SYMBOLS
register_code
unregister_code
clear_keyboard
bootloader_jump
layer_switch_get_layer
keymap_key_to_keycode
process_leader
process_unicode
debug_config
eeconfig_is_enabled
eeconfig_init
eeconfig_read_keymap
keymap_config
__tablejump2__
eeconfig_update_keymap
register_mods
unregister_mods
layer_state
layer_on
layer_off
matrix_init_kb
matrix_scan_kb
__do_clear_bss
