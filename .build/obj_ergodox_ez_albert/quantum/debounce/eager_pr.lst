   1               		.file	"eager_pr.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.debounce_init,"ax",@progbits
  11               	.global	debounce_init
  13               	debounce_init:
  14               	.LVL0:
  15               	.LFB111:
  16               		.file 1 "quantum/debounce/eager_pr.c"
   1:quantum/debounce/eager_pr.c **** /*
   2:quantum/debounce/eager_pr.c **** Copyright 2019 Alex Ong<the.onga@gmail.com>
   3:quantum/debounce/eager_pr.c **** This program is free software: you can redistribute it and/or modify
   4:quantum/debounce/eager_pr.c **** it under the terms of the GNU General Public License as published by
   5:quantum/debounce/eager_pr.c **** the Free Software Foundation, either version 2 of the License, or
   6:quantum/debounce/eager_pr.c **** (at your option) any later version.
   7:quantum/debounce/eager_pr.c **** This program is distributed in the hope that it will be useful,
   8:quantum/debounce/eager_pr.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
   9:quantum/debounce/eager_pr.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  10:quantum/debounce/eager_pr.c **** GNU General Public License for more details.
  11:quantum/debounce/eager_pr.c **** You should have received a copy of the GNU General Public License
  12:quantum/debounce/eager_pr.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  13:quantum/debounce/eager_pr.c **** */
  14:quantum/debounce/eager_pr.c **** 
  15:quantum/debounce/eager_pr.c **** /*
  16:quantum/debounce/eager_pr.c **** Basic per-row algorithm. Uses an 8-bit counter per row.
  17:quantum/debounce/eager_pr.c **** After pressing a key, it immediately changes state, and sets a counter.
  18:quantum/debounce/eager_pr.c **** No further inputs are accepted until DEBOUNCE milliseconds have occurred.
  19:quantum/debounce/eager_pr.c **** */
  20:quantum/debounce/eager_pr.c **** 
  21:quantum/debounce/eager_pr.c **** #include "matrix.h"
  22:quantum/debounce/eager_pr.c **** #include "timer.h"
  23:quantum/debounce/eager_pr.c **** #include "quantum.h"
  24:quantum/debounce/eager_pr.c **** #include <stdlib.h>
  25:quantum/debounce/eager_pr.c **** 
  26:quantum/debounce/eager_pr.c **** #ifndef DEBOUNCE
  27:quantum/debounce/eager_pr.c **** #  define DEBOUNCE 5
  28:quantum/debounce/eager_pr.c **** #endif
  29:quantum/debounce/eager_pr.c **** 
  30:quantum/debounce/eager_pr.c **** #define debounce_counter_t uint8_t
  31:quantum/debounce/eager_pr.c **** 
  32:quantum/debounce/eager_pr.c **** static debounce_counter_t *debounce_counters;
  33:quantum/debounce/eager_pr.c **** static bool                counters_need_update;
  34:quantum/debounce/eager_pr.c **** 
  35:quantum/debounce/eager_pr.c **** #define DEBOUNCE_ELAPSED 251
  36:quantum/debounce/eager_pr.c **** #define MAX_DEBOUNCE (DEBOUNCE_ELAPSED - 1)
  37:quantum/debounce/eager_pr.c **** 
  38:quantum/debounce/eager_pr.c **** void update_debounce_counters(uint8_t num_rows, uint8_t current_time);
  39:quantum/debounce/eager_pr.c **** void transfer_matrix_values(matrix_row_t raw[], matrix_row_t cooked[], uint8_t num_rows, uint8_t cu
  40:quantum/debounce/eager_pr.c **** 
  41:quantum/debounce/eager_pr.c **** // we use num_rows rather than MATRIX_ROWS to support split keyboards
  42:quantum/debounce/eager_pr.c **** void debounce_init(uint8_t num_rows) {
  17               		.loc 1 42 38 view -0
  18               		.cfi_startproc
  19               		.loc 1 42 38 is_stmt 0 view .LVU1
  20 0000 CF93      		push r28
  21               	.LCFI0:
  22               		.cfi_def_cfa_offset 3
  23               		.cfi_offset 28, -2
  24               	/* prologue: function */
  25               	/* frame size = 0 */
  26               	/* stack size = 1 */
  27               	.L__stack_usage = 1
  28 0002 C82F      		mov r28,r24
  43:quantum/debounce/eager_pr.c ****   debounce_counters = (debounce_counter_t *)malloc(num_rows * sizeof(debounce_counter_t));
  29               		.loc 1 43 3 is_stmt 1 view .LVU2
  30               		.loc 1 43 45 is_stmt 0 view .LVU3
  31 0004 90E0      		ldi r25,0
  32 0006 0E94 0000 		call malloc
  33               	.LVL1:
  34               		.loc 1 43 21 view .LVU4
  35 000a 8093 0000 		sts debounce_counters,r24
  36 000e 9093 0000 		sts debounce_counters+1,r25
  44:quantum/debounce/eager_pr.c ****   for (uint8_t r = 0; r < num_rows; r++) {
  37               		.loc 1 44 3 is_stmt 1 view .LVU5
  38               	.LBB2:
  39               		.loc 1 44 8 view .LVU6
  40               	.LVL2:
  41               		.loc 1 44 8 is_stmt 0 view .LVU7
  42 0012 282F      		mov r18,r24
  43               		.loc 1 44 3 view .LVU8
  44 0014 FC01      		movw r30,r24
  45:quantum/debounce/eager_pr.c ****     debounce_counters[r] = DEBOUNCE_ELAPSED;
  45               		.loc 1 45 26 view .LVU9
  46 0016 9BEF      		ldi r25,lo8(-5)
  47               	.LVL3:
  48               	.L2:
  44:quantum/debounce/eager_pr.c ****   for (uint8_t r = 0; r < num_rows; r++) {
  49               		.loc 1 44 3 discriminator 1 view .LVU10
  50 0018 8E2F      		mov r24,r30
  51 001a 821B      		sub r24,r18
  52 001c 8C17      		cp r24,r28
  53 001e 00F0      		brlo .L3
  54               	/* epilogue start */
  55               	.LBE2:
  46:quantum/debounce/eager_pr.c ****   }
  47:quantum/debounce/eager_pr.c **** }
  56               		.loc 1 47 1 view .LVU11
  57 0020 CF91      		pop r28
  58               	.LVL4:
  59               		.loc 1 47 1 view .LVU12
  60 0022 0895      		ret
  61               	.LVL5:
  62               	.L3:
  63               	.LBB3:
  45:quantum/debounce/eager_pr.c ****     debounce_counters[r] = DEBOUNCE_ELAPSED;
  64               		.loc 1 45 5 is_stmt 1 discriminator 3 view .LVU13
  45:quantum/debounce/eager_pr.c ****     debounce_counters[r] = DEBOUNCE_ELAPSED;
  65               		.loc 1 45 26 is_stmt 0 discriminator 3 view .LVU14
  66 0024 9193      		st Z+,r25
  67               	.LVL6:
  45:quantum/debounce/eager_pr.c ****     debounce_counters[r] = DEBOUNCE_ELAPSED;
  68               		.loc 1 45 26 discriminator 3 view .LVU15
  69 0026 00C0      		rjmp .L2
  70               	.LBE3:
  71               		.cfi_endproc
  72               	.LFE111:
  74               		.section	.text.update_debounce_counters,"ax",@progbits
  75               	.global	update_debounce_counters
  77               	update_debounce_counters:
  78               	.LVL7:
  79               	.LFB113:
  48:quantum/debounce/eager_pr.c **** 
  49:quantum/debounce/eager_pr.c **** void debounce(matrix_row_t raw[], matrix_row_t cooked[], uint8_t num_rows, bool changed) {
  50:quantum/debounce/eager_pr.c ****   uint8_t current_time = timer_read() % MAX_DEBOUNCE;
  51:quantum/debounce/eager_pr.c ****   bool needed_update = counters_need_update;
  52:quantum/debounce/eager_pr.c ****   if (counters_need_update) {
  53:quantum/debounce/eager_pr.c ****     update_debounce_counters(num_rows, current_time);
  54:quantum/debounce/eager_pr.c ****   }
  55:quantum/debounce/eager_pr.c **** 
  56:quantum/debounce/eager_pr.c ****   if (changed || (needed_update && !counters_need_update)) {
  57:quantum/debounce/eager_pr.c ****     transfer_matrix_values(raw, cooked, num_rows, current_time);
  58:quantum/debounce/eager_pr.c ****   }
  59:quantum/debounce/eager_pr.c **** }
  60:quantum/debounce/eager_pr.c **** 
  61:quantum/debounce/eager_pr.c **** // If the current time is > debounce counter, set the counter to enable input.
  62:quantum/debounce/eager_pr.c **** void update_debounce_counters(uint8_t num_rows, uint8_t current_time) {
  80               		.loc 1 62 71 is_stmt 1 view -0
  81               		.cfi_startproc
  82               		.loc 1 62 71 is_stmt 0 view .LVU17
  83 0000 EF92      		push r14
  84               	.LCFI1:
  85               		.cfi_def_cfa_offset 3
  86               		.cfi_offset 14, -2
  87 0002 FF92      		push r15
  88               	.LCFI2:
  89               		.cfi_def_cfa_offset 4
  90               		.cfi_offset 15, -3
  91 0004 0F93      		push r16
  92               	.LCFI3:
  93               		.cfi_def_cfa_offset 5
  94               		.cfi_offset 16, -4
  95 0006 1F93      		push r17
  96               	.LCFI4:
  97               		.cfi_def_cfa_offset 6
  98               		.cfi_offset 17, -5
  99 0008 CF93      		push r28
 100               	.LCFI5:
 101               		.cfi_def_cfa_offset 7
 102               		.cfi_offset 28, -6
 103 000a DF93      		push r29
 104               	.LCFI6:
 105               		.cfi_def_cfa_offset 8
 106               		.cfi_offset 29, -7
 107               	/* prologue: function */
 108               	/* frame size = 0 */
 109               	/* stack size = 6 */
 110               	.L__stack_usage = 6
  63:quantum/debounce/eager_pr.c ****   counters_need_update                 = false;
 111               		.loc 1 63 3 is_stmt 1 view .LVU18
 112               		.loc 1 63 40 is_stmt 0 view .LVU19
 113 000c 1092 0000 		sts counters_need_update,__zero_reg__
  64:quantum/debounce/eager_pr.c ****   debounce_counter_t *debounce_pointer = debounce_counters;
 114               		.loc 1 64 3 is_stmt 1 view .LVU20
 115               	.LVL8:
  65:quantum/debounce/eager_pr.c ****   for (uint8_t row = 0; row < num_rows; row++) {
 116               		.loc 1 65 3 view .LVU21
 117               	.LBB4:
 118               		.loc 1 65 8 view .LVU22
 119               		.loc 1 65 8 is_stmt 0 view .LVU23
 120 0010 5091 0000 		lds r21,debounce_counters
 121               		.loc 1 65 3 view .LVU24
 122 0014 E52F      		mov r30,r21
 123 0016 F091 0000 		lds r31,debounce_counters+1
 124 001a 40E0      		ldi r20,0
 125 001c A62F      		mov r26,r22
 126 001e B0E0      		ldi r27,0
  66:quantum/debounce/eager_pr.c ****     if (*debounce_pointer != DEBOUNCE_ELAPSED) {
  67:quantum/debounce/eager_pr.c ****       if (TIMER_DIFF(current_time, *debounce_pointer, MAX_DEBOUNCE) >= DEBOUNCE) {
  68:quantum/debounce/eager_pr.c ****         *debounce_pointer = DEBOUNCE_ELAPSED;
 127               		.loc 1 68 27 view .LVU25
 128 0020 7BEF      		ldi r23,lo8(-5)
  67:quantum/debounce/eager_pr.c ****         *debounce_pointer = DEBOUNCE_ELAPSED;
 129               		.loc 1 67 11 view .LVU26
 130 0022 9AEF      		ldi r25,lo8(-6)
 131 0024 E92E      		mov r14,r25
 132 0026 F12C      		mov r15,__zero_reg__
 133               	.LVL9:
 134               	.L5:
  65:quantum/debounce/eager_pr.c ****   for (uint8_t row = 0; row < num_rows; row++) {
 135               		.loc 1 65 3 discriminator 1 view .LVU27
 136 0028 9E2F      		mov r25,r30
 137 002a 951B      		sub r25,r21
 138 002c 9817      		cp r25,r24
 139 002e 00F0      		brlo .L11
 140 0030 4093 0000 		sts counters_need_update,r20
 141               	/* epilogue start */
 142               	.LBE4:
  69:quantum/debounce/eager_pr.c ****       } else {
  70:quantum/debounce/eager_pr.c ****         counters_need_update = true;
  71:quantum/debounce/eager_pr.c ****       }
  72:quantum/debounce/eager_pr.c ****     }
  73:quantum/debounce/eager_pr.c ****     debounce_pointer++;
  74:quantum/debounce/eager_pr.c ****   }
  75:quantum/debounce/eager_pr.c **** }
 143               		.loc 1 75 1 view .LVU28
 144 0034 DF91      		pop r29
 145 0036 CF91      		pop r28
 146 0038 1F91      		pop r17
 147 003a 0F91      		pop r16
 148 003c FF90      		pop r15
 149 003e EF90      		pop r14
 150 0040 0895      		ret
 151               	.L11:
 152               	.LBB5:
  66:quantum/debounce/eager_pr.c ****       if (TIMER_DIFF(current_time, *debounce_pointer, MAX_DEBOUNCE) >= DEBOUNCE) {
 153               		.loc 1 66 5 is_stmt 1 view .LVU29
  66:quantum/debounce/eager_pr.c ****       if (TIMER_DIFF(current_time, *debounce_pointer, MAX_DEBOUNCE) >= DEBOUNCE) {
 154               		.loc 1 66 9 is_stmt 0 view .LVU30
 155 0042 9191      		ld r25,Z+
 156               	.LVL10:
  66:quantum/debounce/eager_pr.c ****       if (TIMER_DIFF(current_time, *debounce_pointer, MAX_DEBOUNCE) >= DEBOUNCE) {
 157               		.loc 1 66 8 view .LVU31
 158 0044 9B3F      		cpi r25,lo8(-5)
 159 0046 01F0      		breq .L5
  67:quantum/debounce/eager_pr.c ****         *debounce_pointer = DEBOUNCE_ELAPSED;
 160               		.loc 1 67 7 is_stmt 1 view .LVU32
 161 0048 292F      		mov r18,r25
 162 004a 30E0      		ldi r19,0
  67:quantum/debounce/eager_pr.c ****         *debounce_pointer = DEBOUNCE_ELAPSED;
 163               		.loc 1 67 69 is_stmt 0 view .LVU33
 164 004c 6917      		cp r22,r25
 165 004e 00F0      		brlo .L7
  67:quantum/debounce/eager_pr.c ****         *debounce_pointer = DEBOUNCE_ELAPSED;
 166               		.loc 1 67 11 discriminator 1 view .LVU34
 167 0050 8D01      		movw r16,r26
 168 0052 021B      		sub r16,r18
 169 0054 130B      		sbc r17,r19
 170 0056 9801      		movw r18,r16
 171               	.L17:
  67:quantum/debounce/eager_pr.c ****         *debounce_pointer = DEBOUNCE_ELAPSED;
 172               		.loc 1 67 69 discriminator 2 view .LVU35
 173 0058 2530      		cpi r18,5
 174 005a 3105      		cpc r19,__zero_reg__
 175 005c 04F0      		brlt .L12
  68:quantum/debounce/eager_pr.c ****       } else {
 176               		.loc 1 68 9 is_stmt 1 view .LVU36
  68:quantum/debounce/eager_pr.c ****       } else {
 177               		.loc 1 68 27 is_stmt 0 view .LVU37
 178 005e 9F01      		movw r18,r30
 179 0060 2150      		subi r18,1
 180 0062 3109      		sbc r19,__zero_reg__
 181 0064 E901      		movw r28,r18
 182 0066 7883      		st Y,r23
 183 0068 00C0      		rjmp .L5
 184               	.L7:
  67:quantum/debounce/eager_pr.c ****         *debounce_pointer = DEBOUNCE_ELAPSED;
 185               		.loc 1 67 11 discriminator 2 view .LVU38
 186 006a E701      		movw r28,r14
 187 006c C21B      		sub r28,r18
 188 006e D30B      		sbc r29,r19
 189 0070 9E01      		movw r18,r28
 190 0072 2A0F      		add r18,r26
 191 0074 3B1F      		adc r19,r27
 192 0076 00C0      		rjmp .L17
 193               	.L12:
  70:quantum/debounce/eager_pr.c ****       }
 194               		.loc 1 70 30 view .LVU39
 195 0078 41E0      		ldi r20,lo8(1)
  73:quantum/debounce/eager_pr.c ****   }
 196               		.loc 1 73 5 is_stmt 1 view .LVU40
 197               	.LVL11:
  73:quantum/debounce/eager_pr.c ****   }
 198               		.loc 1 73 5 is_stmt 0 view .LVU41
 199 007a 00C0      		rjmp .L5
 200               	.LBE5:
 201               		.cfi_endproc
 202               	.LFE113:
 204               		.section	.text.transfer_matrix_values,"ax",@progbits
 205               	.global	transfer_matrix_values
 207               	transfer_matrix_values:
 208               	.LVL12:
 209               	.LFB114:
  76:quantum/debounce/eager_pr.c **** 
  77:quantum/debounce/eager_pr.c **** // upload from raw_matrix to final matrix;
  78:quantum/debounce/eager_pr.c **** void transfer_matrix_values(matrix_row_t raw[], matrix_row_t cooked[], uint8_t num_rows, uint8_t cu
 210               		.loc 1 78 112 is_stmt 1 view -0
 211               		.cfi_startproc
 212               		.loc 1 78 112 is_stmt 0 view .LVU43
 213 0000 AF92      		push r10
 214               	.LCFI7:
 215               		.cfi_def_cfa_offset 3
 216               		.cfi_offset 10, -2
 217 0002 BF92      		push r11
 218               	.LCFI8:
 219               		.cfi_def_cfa_offset 4
 220               		.cfi_offset 11, -3
 221 0004 CF92      		push r12
 222               	.LCFI9:
 223               		.cfi_def_cfa_offset 5
 224               		.cfi_offset 12, -4
 225 0006 DF92      		push r13
 226               	.LCFI10:
 227               		.cfi_def_cfa_offset 6
 228               		.cfi_offset 13, -5
 229 0008 EF92      		push r14
 230               	.LCFI11:
 231               		.cfi_def_cfa_offset 7
 232               		.cfi_offset 14, -6
 233 000a FF92      		push r15
 234               	.LCFI12:
 235               		.cfi_def_cfa_offset 8
 236               		.cfi_offset 15, -7
 237 000c 0F93      		push r16
 238               	.LCFI13:
 239               		.cfi_def_cfa_offset 9
 240               		.cfi_offset 16, -8
 241 000e 1F93      		push r17
 242               	.LCFI14:
 243               		.cfi_def_cfa_offset 10
 244               		.cfi_offset 17, -9
 245 0010 CF93      		push r28
 246               	.LCFI15:
 247               		.cfi_def_cfa_offset 11
 248               		.cfi_offset 28, -10
 249 0012 DF93      		push r29
 250               	.LCFI16:
 251               		.cfi_def_cfa_offset 12
 252               		.cfi_offset 29, -11
 253               	/* prologue: function */
 254               	/* frame size = 0 */
 255               	/* stack size = 10 */
 256               	.L__stack_usage = 10
 257 0014 7C01      		movw r14,r24
  79:quantum/debounce/eager_pr.c ****   debounce_counter_t *debounce_pointer = debounce_counters;
 258               		.loc 1 79 3 is_stmt 1 view .LVU44
 259               		.loc 1 79 23 is_stmt 0 view .LVU45
 260 0016 0091 0000 		lds r16,debounce_counters
 261 001a 1091 0000 		lds r17,debounce_counters+1
 262               	.LVL13:
  80:quantum/debounce/eager_pr.c ****   for (uint8_t row = 0; row < num_rows; row++) {
 263               		.loc 1 80 3 is_stmt 1 view .LVU46
 264               	.LBB6:
 265               		.loc 1 80 8 view .LVU47
 266               		.loc 1 80 8 is_stmt 0 view .LVU48
 267 001e 9091 0000 		lds r25,counters_need_update
 268               		.loc 1 80 3 view .LVU49
 269 0022 F0E0      		ldi r31,0
 270 0024 E0E0      		ldi r30,0
 271               	.LVL14:
 272               	.L19:
 273               		.loc 1 80 3 discriminator 1 view .LVU50
 274 0026 E417      		cp r30,r20
 275 0028 00F0      		brlo .L21
 276 002a 9093 0000 		sts counters_need_update,r25
 277               	/* epilogue start */
 278               	.LBE6:
  81:quantum/debounce/eager_pr.c ****     matrix_row_t existing_row = cooked[row];
  82:quantum/debounce/eager_pr.c ****     matrix_row_t raw_row      = raw[row];
  83:quantum/debounce/eager_pr.c **** 
  84:quantum/debounce/eager_pr.c ****     // determine new value basd on debounce pointer + raw value
  85:quantum/debounce/eager_pr.c ****     if (*debounce_pointer == DEBOUNCE_ELAPSED && (existing_row != raw_row)) {
  86:quantum/debounce/eager_pr.c ****       *debounce_pointer    = current_time;
  87:quantum/debounce/eager_pr.c ****       cooked[row]          = raw_row;
  88:quantum/debounce/eager_pr.c ****       counters_need_update = true;
  89:quantum/debounce/eager_pr.c ****     }
  90:quantum/debounce/eager_pr.c **** 
  91:quantum/debounce/eager_pr.c ****     debounce_pointer++;
  92:quantum/debounce/eager_pr.c ****   }
  93:quantum/debounce/eager_pr.c **** }
 279               		.loc 1 93 1 view .LVU51
 280 002e DF91      		pop r29
 281 0030 CF91      		pop r28
 282 0032 1F91      		pop r17
 283 0034 0F91      		pop r16
 284               	.LVL15:
 285               		.loc 1 93 1 view .LVU52
 286 0036 FF90      		pop r15
 287 0038 EF90      		pop r14
 288               	.LVL16:
 289               		.loc 1 93 1 view .LVU53
 290 003a DF90      		pop r13
 291 003c CF90      		pop r12
 292 003e BF90      		pop r11
 293 0040 AF90      		pop r10
 294 0042 0895      		ret
 295               	.LVL17:
 296               	.L21:
 297               	.LBB8:
 298               	.LBB7:
  81:quantum/debounce/eager_pr.c ****     matrix_row_t existing_row = cooked[row];
 299               		.loc 1 81 5 is_stmt 1 view .LVU54
  82:quantum/debounce/eager_pr.c **** 
 300               		.loc 1 82 5 view .LVU55
  85:quantum/debounce/eager_pr.c ****       *debounce_pointer    = current_time;
 301               		.loc 1 85 5 view .LVU56
 302 0044 E801      		movw r28,r16
 303 0046 CE0F      		add r28,r30
 304 0048 DF1F      		adc r29,r31
  85:quantum/debounce/eager_pr.c ****       *debounce_pointer    = current_time;
 305               		.loc 1 85 8 is_stmt 0 view .LVU57
 306 004a 8881      		ld r24,Y
 307 004c 8B3F      		cpi r24,lo8(-5)
 308 004e 01F4      		brne .L20
 309 0050 5B01      		movw r10,r22
 310 0052 AE0E      		add r10,r30
 311 0054 BF1E      		adc r11,r31
  82:quantum/debounce/eager_pr.c **** 
 312               		.loc 1 82 18 discriminator 1 view .LVU58
 313 0056 6701      		movw r12,r14
 314 0058 CE0E      		add r12,r30
 315 005a DF1E      		adc r13,r31
 316 005c D601      		movw r26,r12
 317 005e 3C91      		ld r19,X
  85:quantum/debounce/eager_pr.c ****       *debounce_pointer    = current_time;
 318               		.loc 1 85 47 discriminator 1 view .LVU59
 319 0060 D501      		movw r26,r10
 320 0062 8C91      		ld r24,X
 321 0064 8317      		cp r24,r19
 322 0066 01F0      		breq .L20
  86:quantum/debounce/eager_pr.c ****       cooked[row]          = raw_row;
 323               		.loc 1 86 7 is_stmt 1 view .LVU60
  86:quantum/debounce/eager_pr.c ****       cooked[row]          = raw_row;
 324               		.loc 1 86 28 is_stmt 0 view .LVU61
 325 0068 2883      		st Y,r18
 326               	.LVL18:
  87:quantum/debounce/eager_pr.c ****       counters_need_update = true;
 327               		.loc 1 87 7 is_stmt 1 view .LVU62
  87:quantum/debounce/eager_pr.c ****       counters_need_update = true;
 328               		.loc 1 87 28 is_stmt 0 view .LVU63
 329 006a 3C93      		st X,r19
  88:quantum/debounce/eager_pr.c ****     }
 330               		.loc 1 88 7 is_stmt 1 view .LVU64
  88:quantum/debounce/eager_pr.c ****     }
 331               		.loc 1 88 28 is_stmt 0 view .LVU65
 332 006c 91E0      		ldi r25,lo8(1)
 333               	.L20:
  91:quantum/debounce/eager_pr.c ****   }
 334               		.loc 1 91 5 is_stmt 1 discriminator 2 view .LVU66
 335               	.LVL19:
  91:quantum/debounce/eager_pr.c ****   }
 336               		.loc 1 91 5 is_stmt 0 discriminator 2 view .LVU67
 337 006e 3196      		adiw r30,1
 338               	.LVL20:
  91:quantum/debounce/eager_pr.c ****   }
 339               		.loc 1 91 5 discriminator 2 view .LVU68
 340 0070 00C0      		rjmp .L19
 341               	.LBE7:
 342               	.LBE8:
 343               		.cfi_endproc
 344               	.LFE114:
 346               		.section	.text.debounce,"ax",@progbits
 347               	.global	debounce
 349               	debounce:
 350               	.LVL21:
 351               	.LFB112:
  49:quantum/debounce/eager_pr.c ****   uint8_t current_time = timer_read() % MAX_DEBOUNCE;
 352               		.loc 1 49 90 is_stmt 1 view -0
 353               		.cfi_startproc
  49:quantum/debounce/eager_pr.c ****   uint8_t current_time = timer_read() % MAX_DEBOUNCE;
 354               		.loc 1 49 90 is_stmt 0 view .LVU70
 355 0000 CF92      		push r12
 356               	.LCFI17:
 357               		.cfi_def_cfa_offset 3
 358               		.cfi_offset 12, -2
 359 0002 DF92      		push r13
 360               	.LCFI18:
 361               		.cfi_def_cfa_offset 4
 362               		.cfi_offset 13, -3
 363 0004 EF92      		push r14
 364               	.LCFI19:
 365               		.cfi_def_cfa_offset 5
 366               		.cfi_offset 14, -4
 367 0006 FF92      		push r15
 368               	.LCFI20:
 369               		.cfi_def_cfa_offset 6
 370               		.cfi_offset 15, -5
 371 0008 1F93      		push r17
 372               	.LCFI21:
 373               		.cfi_def_cfa_offset 7
 374               		.cfi_offset 17, -6
 375 000a CF93      		push r28
 376               	.LCFI22:
 377               		.cfi_def_cfa_offset 8
 378               		.cfi_offset 28, -7
 379 000c DF93      		push r29
 380               	.LCFI23:
 381               		.cfi_def_cfa_offset 9
 382               		.cfi_offset 29, -8
 383               	/* prologue: function */
 384               	/* frame size = 0 */
 385               	/* stack size = 7 */
 386               	.L__stack_usage = 7
 387 000e 7C01      		movw r14,r24
 388 0010 6B01      		movw r12,r22
 389 0012 D42F      		mov r29,r20
 390 0014 C22F      		mov r28,r18
  50:quantum/debounce/eager_pr.c ****   bool needed_update = counters_need_update;
 391               		.loc 1 50 3 is_stmt 1 view .LVU71
  50:quantum/debounce/eager_pr.c ****   bool needed_update = counters_need_update;
 392               		.loc 1 50 26 is_stmt 0 view .LVU72
 393 0016 0E94 0000 		call timer_read
 394               	.LVL22:
  50:quantum/debounce/eager_pr.c ****   bool needed_update = counters_need_update;
 395               		.loc 1 50 39 view .LVU73
 396 001a 6AEF      		ldi r22,lo8(-6)
 397 001c 70E0      		ldi r23,0
 398 001e 0E94 0000 		call __udivmodhi4
 399 0022 182F      		mov r17,r24
 400               	.LVL23:
  51:quantum/debounce/eager_pr.c ****   if (counters_need_update) {
 401               		.loc 1 51 3 is_stmt 1 view .LVU74
  52:quantum/debounce/eager_pr.c ****     update_debounce_counters(num_rows, current_time);
 402               		.loc 1 52 3 view .LVU75
  52:quantum/debounce/eager_pr.c ****     update_debounce_counters(num_rows, current_time);
 403               		.loc 1 52 6 is_stmt 0 view .LVU76
 404 0024 8091 0000 		lds r24,counters_need_update
 405 0028 8823      		tst r24
 406 002a 01F0      		breq .L23
  53:quantum/debounce/eager_pr.c ****   }
 407               		.loc 1 53 5 is_stmt 1 view .LVU77
 408 002c 612F      		mov r22,r17
 409 002e 8D2F      		mov r24,r29
 410 0030 0E94 0000 		call update_debounce_counters
 411               	.LVL24:
  56:quantum/debounce/eager_pr.c ****     transfer_matrix_values(raw, cooked, num_rows, current_time);
 412               		.loc 1 56 3 view .LVU78
  56:quantum/debounce/eager_pr.c ****     transfer_matrix_values(raw, cooked, num_rows, current_time);
 413               		.loc 1 56 6 is_stmt 0 view .LVU79
 414 0034 CC23      		tst r28
 415 0036 01F0      		breq .L24
 416               	.L25:
  57:quantum/debounce/eager_pr.c ****   }
 417               		.loc 1 57 5 is_stmt 1 view .LVU80
 418 0038 212F      		mov r18,r17
 419 003a 4D2F      		mov r20,r29
 420 003c B601      		movw r22,r12
 421 003e C701      		movw r24,r14
 422               	/* epilogue start */
  59:quantum/debounce/eager_pr.c **** 
 423               		.loc 1 59 1 is_stmt 0 view .LVU81
 424 0040 DF91      		pop r29
 425               	.LVL25:
  59:quantum/debounce/eager_pr.c **** 
 426               		.loc 1 59 1 view .LVU82
 427 0042 CF91      		pop r28
 428               	.LVL26:
  59:quantum/debounce/eager_pr.c **** 
 429               		.loc 1 59 1 view .LVU83
 430 0044 1F91      		pop r17
 431               	.LVL27:
  59:quantum/debounce/eager_pr.c **** 
 432               		.loc 1 59 1 view .LVU84
 433 0046 FF90      		pop r15
 434 0048 EF90      		pop r14
 435               	.LVL28:
  59:quantum/debounce/eager_pr.c **** 
 436               		.loc 1 59 1 view .LVU85
 437 004a DF90      		pop r13
 438 004c CF90      		pop r12
 439               	.LVL29:
  57:quantum/debounce/eager_pr.c ****   }
 440               		.loc 1 57 5 view .LVU86
 441 004e 0C94 0000 		jmp transfer_matrix_values
 442               	.LVL30:
 443               	.L24:
  56:quantum/debounce/eager_pr.c ****     transfer_matrix_values(raw, cooked, num_rows, current_time);
 444               		.loc 1 56 33 discriminator 2 view .LVU87
 445 0052 8091 0000 		lds r24,counters_need_update
 446 0056 8823      		tst r24
 447 0058 01F0      		breq .L25
 448               	.L22:
 449               	/* epilogue start */
  59:quantum/debounce/eager_pr.c **** 
 450               		.loc 1 59 1 view .LVU88
 451 005a DF91      		pop r29
 452               	.LVL31:
  59:quantum/debounce/eager_pr.c **** 
 453               		.loc 1 59 1 view .LVU89
 454 005c CF91      		pop r28
 455               	.LVL32:
  59:quantum/debounce/eager_pr.c **** 
 456               		.loc 1 59 1 view .LVU90
 457 005e 1F91      		pop r17
 458               	.LVL33:
  59:quantum/debounce/eager_pr.c **** 
 459               		.loc 1 59 1 view .LVU91
 460 0060 FF90      		pop r15
 461 0062 EF90      		pop r14
 462               	.LVL34:
  59:quantum/debounce/eager_pr.c **** 
 463               		.loc 1 59 1 view .LVU92
 464 0064 DF90      		pop r13
 465 0066 CF90      		pop r12
 466               	.LVL35:
  59:quantum/debounce/eager_pr.c **** 
 467               		.loc 1 59 1 view .LVU93
 468 0068 0895      		ret
 469               	.LVL36:
 470               	.L23:
  56:quantum/debounce/eager_pr.c ****     transfer_matrix_values(raw, cooked, num_rows, current_time);
 471               		.loc 1 56 3 is_stmt 1 view .LVU94
  56:quantum/debounce/eager_pr.c ****     transfer_matrix_values(raw, cooked, num_rows, current_time);
 472               		.loc 1 56 6 is_stmt 0 view .LVU95
 473 006a C111      		cpse r28,__zero_reg__
 474 006c 00C0      		rjmp .L25
 475 006e 00C0      		rjmp .L22
 476               		.cfi_endproc
 477               	.LFE112:
 479               		.section	.text.debounce_active,"ax",@progbits
 480               	.global	debounce_active
 482               	debounce_active:
 483               	.LFB115:
  94:quantum/debounce/eager_pr.c **** 
  95:quantum/debounce/eager_pr.c **** bool debounce_active(void) { return true; }
 484               		.loc 1 95 28 is_stmt 1 view -0
 485               		.cfi_startproc
 486               	/* prologue: function */
 487               	/* frame size = 0 */
 488               	/* stack size = 0 */
 489               	.L__stack_usage = 0
 490               		.loc 1 95 30 view .LVU97
 491               		.loc 1 95 1 is_stmt 0 view .LVU98
 492 0000 81E0      		ldi r24,lo8(1)
 493               	/* epilogue start */
 494 0002 0895      		ret
 495               		.cfi_endproc
 496               	.LFE115:
 498               		.section	.bss.counters_need_update,"aw",@nobits
 501               	counters_need_update:
 502 0000 00        		.zero	1
 503               		.section	.bss.debounce_counters,"aw",@nobits
 506               	debounce_counters:
 507 0000 0000      		.zero	2
 508               		.text
 509               	.Letext0:
 510               		.file 2 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/stdint.h"
 511               		.file 3 "tmk_core/common/matrix.h"
 512               		.file 4 "/usr/local/Cellar/avr-gcc/8.1.0/lib/avr-gcc/8/gcc/avr/8.1.0/include/stddef.h"
 513               		.file 5 "tmk_core/common/keyboard.h"
 514               		.file 6 "tmk_core/common/timer.h"
 515               		.file 7 "tmk_core/common/action.h"
 516               		.file 8 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 517               		.file 9 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 518               		.file 10 "lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 519               		.file 11 "lib/lufa/LUFA/Drivers/USB/Core/HostStandardReq.h"
 520               		.file 12 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/stdio.h"
 521               		.file 13 "tmk_core/common/report.h"
 522               		.file 14 "tmk_core/common/host.h"
 523               		.file 15 "tmk_core/common/debug.h"
 524               		.file 16 "quantum/keycode_config.h"
 525               		.file 17 "quantum/keymap.h"
 526               		.file 18 "quantum/rgblight_types.h"
 527               		.file 19 "quantum/rgblight.h"
 528               		.file 20 "tmk_core/common/action_layer.h"
 529               		.file 21 "tmk_core/common/action_util.h"
 530               		.file 22 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/stdlib.h"
 531               		.file 23 "quantum/process_keycode/process_unicode_common.h"
 532               		.file 24 "quantum/quantum.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 eager_pr.c
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cchi0z8S.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cchi0z8S.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cchi0z8S.s:4      *ABS*:000000000000003f __SREG__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cchi0z8S.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cchi0z8S.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cchi0z8S.s:13     .text.debounce_init:0000000000000000 debounce_init
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cchi0z8S.s:506    .bss.debounce_counters:0000000000000000 debounce_counters
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cchi0z8S.s:77     .text.update_debounce_counters:0000000000000000 update_debounce_counters
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cchi0z8S.s:501    .bss.counters_need_update:0000000000000000 counters_need_update
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cchi0z8S.s:207    .text.transfer_matrix_values:0000000000000000 transfer_matrix_values
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cchi0z8S.s:349    .text.debounce:0000000000000000 debounce
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cchi0z8S.s:482    .text.debounce_active:0000000000000000 debounce_active

UNDEFINED SYMBOLS
malloc
timer_read
__udivmodhi4
__do_clear_bss
