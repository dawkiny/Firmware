   1               		.file	"action.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.process_hand_swap,"ax",@progbits
  11               	.global	process_hand_swap
  13               	process_hand_swap:
  14               	.LVL0:
  15               	.LFB107:
  16               		.file 1 "tmk_core/common/action.c"
   1:tmk_core/common/action.c **** /*
   2:tmk_core/common/action.c **** Copyright 2012,2013 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/action.c **** 
   4:tmk_core/common/action.c **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/action.c **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/action.c **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/action.c **** (at your option) any later version.
   8:tmk_core/common/action.c **** 
   9:tmk_core/common/action.c **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/action.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/action.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/action.c **** GNU General Public License for more details.
  13:tmk_core/common/action.c **** 
  14:tmk_core/common/action.c **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/action.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/action.c **** */
  17:tmk_core/common/action.c **** #include "host.h"
  18:tmk_core/common/action.c **** #include "keycode.h"
  19:tmk_core/common/action.c **** #include "keyboard.h"
  20:tmk_core/common/action.c **** #include "mousekey.h"
  21:tmk_core/common/action.c **** #include "command.h"
  22:tmk_core/common/action.c **** #include "led.h"
  23:tmk_core/common/action.c **** #include "backlight.h"
  24:tmk_core/common/action.c **** #include "action_layer.h"
  25:tmk_core/common/action.c **** #include "action_tapping.h"
  26:tmk_core/common/action.c **** #include "action_macro.h"
  27:tmk_core/common/action.c **** #include "action_util.h"
  28:tmk_core/common/action.c **** #include "action.h"
  29:tmk_core/common/action.c **** #include "wait.h"
  30:tmk_core/common/action.c **** 
  31:tmk_core/common/action.c **** #ifdef DEBUG_ACTION
  32:tmk_core/common/action.c **** #include "debug.h"
  33:tmk_core/common/action.c **** #else
  34:tmk_core/common/action.c **** #include "nodebug.h"
  35:tmk_core/common/action.c **** #endif
  36:tmk_core/common/action.c **** 
  37:tmk_core/common/action.c **** int tp_buttons;
  38:tmk_core/common/action.c **** 
  39:tmk_core/common/action.c **** #ifdef RETRO_TAPPING
  40:tmk_core/common/action.c **** int retro_tapping_counter = 0;
  41:tmk_core/common/action.c **** #endif
  42:tmk_core/common/action.c **** 
  43:tmk_core/common/action.c **** #ifdef FAUXCLICKY_ENABLE
  44:tmk_core/common/action.c **** #include <fauxclicky.h>
  45:tmk_core/common/action.c **** #endif
  46:tmk_core/common/action.c **** 
  47:tmk_core/common/action.c **** /** \brief Called to execute an action.
  48:tmk_core/common/action.c ****  *
  49:tmk_core/common/action.c ****  * FIXME: Needs documentation.
  50:tmk_core/common/action.c ****  */
  51:tmk_core/common/action.c **** void action_exec(keyevent_t event)
  52:tmk_core/common/action.c **** {
  53:tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  54:tmk_core/common/action.c ****         dprint("\n---- action_exec: start -----\n");
  55:tmk_core/common/action.c ****         dprint("EVENT: "); debug_event(event); dprintln();
  56:tmk_core/common/action.c **** #ifdef RETRO_TAPPING
  57:tmk_core/common/action.c ****         retro_tapping_counter++;
  58:tmk_core/common/action.c **** #endif
  59:tmk_core/common/action.c ****     }
  60:tmk_core/common/action.c **** 
  61:tmk_core/common/action.c **** #ifdef FAUXCLICKY_ENABLE
  62:tmk_core/common/action.c ****     if (IS_PRESSED(event)) {
  63:tmk_core/common/action.c ****         FAUXCLICKY_ACTION_PRESS;
  64:tmk_core/common/action.c ****     }
  65:tmk_core/common/action.c ****     if (IS_RELEASED(event)) {
  66:tmk_core/common/action.c ****         FAUXCLICKY_ACTION_RELEASE;
  67:tmk_core/common/action.c ****     }
  68:tmk_core/common/action.c ****     fauxclicky_check();
  69:tmk_core/common/action.c **** #endif
  70:tmk_core/common/action.c **** 
  71:tmk_core/common/action.c **** #ifdef SWAP_HANDS_ENABLE
  72:tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  73:tmk_core/common/action.c ****         process_hand_swap(&event);
  74:tmk_core/common/action.c ****     }
  75:tmk_core/common/action.c **** #endif
  76:tmk_core/common/action.c **** 
  77:tmk_core/common/action.c ****     keyrecord_t record = { .event = event };
  78:tmk_core/common/action.c **** 
  79:tmk_core/common/action.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  80:tmk_core/common/action.c ****     if (has_oneshot_layer_timed_out()) {
  81:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
  82:tmk_core/common/action.c ****     }
  83:tmk_core/common/action.c ****     if (has_oneshot_mods_timed_out()) {
  84:tmk_core/common/action.c ****         clear_oneshot_mods();
  85:tmk_core/common/action.c ****     }
  86:tmk_core/common/action.c **** #endif
  87:tmk_core/common/action.c **** 
  88:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
  89:tmk_core/common/action.c ****     action_tapping_process(record);
  90:tmk_core/common/action.c **** #else
  91:tmk_core/common/action.c ****     process_record(&record);
  92:tmk_core/common/action.c ****     if (!IS_NOEVENT(record.event)) {
  93:tmk_core/common/action.c ****         dprint("processed: "); debug_record(record); dprintln();
  94:tmk_core/common/action.c ****     }
  95:tmk_core/common/action.c **** #endif
  96:tmk_core/common/action.c **** }
  97:tmk_core/common/action.c **** 
  98:tmk_core/common/action.c **** #ifdef SWAP_HANDS_ENABLE
  99:tmk_core/common/action.c **** bool swap_hands = false;
 100:tmk_core/common/action.c **** bool swap_held = false;
 101:tmk_core/common/action.c **** 
 102:tmk_core/common/action.c **** /** \brief Process Hand Swap
 103:tmk_core/common/action.c ****  *
 104:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 105:tmk_core/common/action.c ****  */
 106:tmk_core/common/action.c **** void process_hand_swap(keyevent_t *event) {
  17               		.loc 1 106 43 view -0
  18               		.cfi_startproc
  19               		.loc 1 106 43 is_stmt 0 view .LVU1
  20 0000 CF93      		push r28
  21               	.LCFI0:
  22               		.cfi_def_cfa_offset 3
  23               		.cfi_offset 28, -2
  24 0002 DF93      		push r29
  25               	.LCFI1:
  26               		.cfi_def_cfa_offset 4
  27               		.cfi_offset 29, -3
  28               	/* prologue: function */
  29               	/* frame size = 0 */
  30               	/* stack size = 2 */
  31               	.L__stack_usage = 2
  32 0004 DC01      		movw r26,r24
 107:tmk_core/common/action.c ****     static swap_state_row_t swap_state[MATRIX_ROWS];
  33               		.loc 1 107 5 is_stmt 1 view .LVU2
 108:tmk_core/common/action.c **** 
 109:tmk_core/common/action.c ****     keypos_t pos = event->key;
  34               		.loc 1 109 5 view .LVU3
  35               	.LVL1:
 110:tmk_core/common/action.c ****     swap_state_row_t col_bit = (swap_state_row_t)1<<pos.col;
  36               		.loc 1 110 5 view .LVU4
  37               		.loc 1 110 56 is_stmt 0 view .LVU5
  38 0006 8C91      		ld r24,X
  39               	.LVL2:
  40               		.loc 1 110 56 view .LVU6
  41 0008 682F      		mov r22,r24
  42 000a 70E0      		ldi r23,0
  43               		.loc 1 110 51 view .LVU7
  44 000c 21E0      		ldi r18,lo8(1)
  45 000e 30E0      		ldi r19,0
  46 0010 00C0      		rjmp 2f
  47               		1:
  48 0012 220F      		lsl r18
  49               		2:
  50 0014 8A95      		dec r24
  51 0016 02F4      		brpl 1b
  52               	.LVL3:
 111:tmk_core/common/action.c ****     bool do_swap = event->pressed ? swap_hands :
  53               		.loc 1 111 5 is_stmt 1 view .LVU8
  54 0018 1196      		adiw r26,1
  55 001a 4C91      		ld r20,X
  56 001c 1197      		sbiw r26,1
  57 001e 50E0      		ldi r21,0
  58 0020 EA01      		movw r28,r20
  59 0022 C050      		subi r28,lo8(-(swap_state.4986))
  60 0024 D040      		sbci r29,hi8(-(swap_state.4986))
  61 0026 9881      		ld r25,Y
  62               		.loc 1 111 48 is_stmt 0 view .LVU9
  63 0028 1296      		adiw r26,2
  64 002a 8C91      		ld r24,X
  65 002c 1297      		sbiw r26,2
  66               	.LVL4:
  67               		.loc 1 111 48 view .LVU10
  68 002e 8823      		tst r24
  69 0030 01F0      		breq .L2
  70               		.loc 1 111 48 discriminator 1 view .LVU11
  71 0032 8091 0000 		lds r24,swap_hands
  72               	.LVL5:
 112:tmk_core/common/action.c ****                                     swap_state[pos.row] & (col_bit);
 113:tmk_core/common/action.c **** 
 114:tmk_core/common/action.c ****     if (do_swap) {
  73               		.loc 1 114 5 is_stmt 1 discriminator 1 view .LVU12
  74               	.L11:
 111:tmk_core/common/action.c ****     bool do_swap = event->pressed ? swap_hands :
  75               		.loc 1 111 48 is_stmt 0 discriminator 2 view .LVU13
  76 0036 8823      		tst r24
  77 0038 01F0      		breq .L5
 115:tmk_core/common/action.c ****         event->key = hand_swap_config[pos.row][pos.col];
  78               		.loc 1 115 9 is_stmt 1 view .LVU14
  79               		.loc 1 115 20 is_stmt 0 view .LVU15
  80 003a 86E0      		ldi r24,lo8(6)
  81 003c 849F      		mul r24,r20
  82 003e F001      		movw r30,r0
  83 0040 859F      		mul r24,r21
  84 0042 F00D      		add r31,r0
  85 0044 1124      		clr __zero_reg__
  86 0046 E60F      		add r30,r22
  87 0048 F71F      		adc r31,r23
  88 004a EE0F      		lsl r30
  89 004c FF1F      		rol r31
  90 004e E050      		subi r30,lo8(-(hand_swap_config))
  91 0050 F040      		sbci r31,hi8(-(hand_swap_config))
  92 0052 4081      		ld r20,Z
  93 0054 5181      		ldd r21,Z+1
  94 0056 4D93      		st X+,r20
  95 0058 5C93      		st X,r21
  96               	.LVL6:
 116:tmk_core/common/action.c ****         swap_state[pos.row] |= col_bit;
  97               		.loc 1 116 9 is_stmt 1 view .LVU16
  98               		.loc 1 116 29 is_stmt 0 view .LVU17
  99 005a 292B      		or r18,r25
 100               	.LVL7:
 101               	.L12:
 117:tmk_core/common/action.c ****     } else {
 118:tmk_core/common/action.c ****         swap_state[pos.row] &= ~(col_bit);
 102               		.loc 1 118 29 view .LVU18
 103 005c 2883      		st Y,r18
 104               	.LVL8:
 105               	/* epilogue start */
 119:tmk_core/common/action.c ****     }
 120:tmk_core/common/action.c **** }
 106               		.loc 1 120 1 view .LVU19
 107 005e DF91      		pop r29
 108 0060 CF91      		pop r28
 109 0062 0895      		ret
 110               	.LVL9:
 111               	.L2:
 111:tmk_core/common/action.c ****                                     swap_state[pos.row] & (col_bit);
 112               		.loc 1 111 48 discriminator 2 view .LVU20
 113 0064 892F      		mov r24,r25
 114 0066 8223      		and r24,r18
 115 0068 00C0      		rjmp .L11
 116               	.L5:
 118:tmk_core/common/action.c ****     }
 117               		.loc 1 118 9 is_stmt 1 view .LVU21
 118:tmk_core/common/action.c ****     }
 118               		.loc 1 118 29 is_stmt 0 view .LVU22
 119 006a 2095      		com r18
 120               	.LVL10:
 118:tmk_core/common/action.c ****     }
 121               		.loc 1 118 29 view .LVU23
 122 006c 2923      		and r18,r25
 123 006e 00C0      		rjmp .L12
 124               		.cfi_endproc
 125               	.LFE107:
 127               		.section	.text.action_exec,"ax",@progbits
 128               	.global	action_exec
 130               	action_exec:
 131               	.LFB106:
  52:tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
 132               		.loc 1 52 1 is_stmt 1 view -0
 133               		.cfi_startproc
 134 0000 CF93      		push r28
 135               	.LCFI2:
 136               		.cfi_def_cfa_offset 3
 137               		.cfi_offset 28, -2
 138 0002 DF93      		push r29
 139               	.LCFI3:
 140               		.cfi_def_cfa_offset 4
 141               		.cfi_offset 29, -3
 142 0004 CDB7      		in r28,__SP_L__
 143 0006 DEB7      		in r29,__SP_H__
 144               	.LCFI4:
 145               		.cfi_def_cfa_register 28
 146 0008 2B97      		sbiw r28,11
 147               	.LCFI5:
 148               		.cfi_def_cfa_offset 15
 149 000a 0FB6      		in __tmp_reg__,__SREG__
 150 000c F894      		cli
 151 000e DEBF      		out __SP_H__,r29
 152 0010 0FBE      		out __SREG__,__tmp_reg__
 153 0012 CDBF      		out __SP_L__,r28
 154               	/* prologue: function */
 155               	/* frame size = 11 */
 156               	/* stack size = 13 */
 157               	.L__stack_usage = 13
 158 0014 4F83      		std Y+7,r20
 159 0016 5887      		std Y+8,r21
 160 0018 6987      		std Y+9,r22
 161 001a 7A87      		std Y+10,r23
 162 001c 8B87      		std Y+11,r24
  53:tmk_core/common/action.c ****         dprint("\n---- action_exec: start -----\n");
 163               		.loc 1 53 5 view .LVU25
 164               	.LBB16:
 165               	.LBI16:
 166               		.file 2 "tmk_core/common/keyboard.h"
   1:tmk_core/common/keyboard.h **** /*
   2:tmk_core/common/keyboard.h **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/keyboard.h **** 
   4:tmk_core/common/keyboard.h **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/keyboard.h **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/keyboard.h **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/keyboard.h **** (at your option) any later version.
   8:tmk_core/common/keyboard.h **** 
   9:tmk_core/common/keyboard.h **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/keyboard.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/keyboard.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/keyboard.h **** GNU General Public License for more details.
  13:tmk_core/common/keyboard.h **** 
  14:tmk_core/common/keyboard.h **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/keyboard.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/keyboard.h **** */
  17:tmk_core/common/keyboard.h **** 
  18:tmk_core/common/keyboard.h **** #ifndef KEYBOARD_H
  19:tmk_core/common/keyboard.h **** #define KEYBOARD_H
  20:tmk_core/common/keyboard.h **** 
  21:tmk_core/common/keyboard.h **** #include <stdbool.h>
  22:tmk_core/common/keyboard.h **** #include <stdint.h>
  23:tmk_core/common/keyboard.h **** 
  24:tmk_core/common/keyboard.h **** 
  25:tmk_core/common/keyboard.h **** #ifdef __cplusplus
  26:tmk_core/common/keyboard.h **** extern "C" {
  27:tmk_core/common/keyboard.h **** #endif
  28:tmk_core/common/keyboard.h **** 
  29:tmk_core/common/keyboard.h **** /* key matrix position */
  30:tmk_core/common/keyboard.h **** typedef struct {
  31:tmk_core/common/keyboard.h ****     uint8_t col;
  32:tmk_core/common/keyboard.h ****     uint8_t row;
  33:tmk_core/common/keyboard.h **** } keypos_t;
  34:tmk_core/common/keyboard.h **** 
  35:tmk_core/common/keyboard.h **** /* key event */
  36:tmk_core/common/keyboard.h **** typedef struct {
  37:tmk_core/common/keyboard.h ****     keypos_t key;
  38:tmk_core/common/keyboard.h ****     bool     pressed;
  39:tmk_core/common/keyboard.h ****     uint16_t time;
  40:tmk_core/common/keyboard.h **** } keyevent_t;
  41:tmk_core/common/keyboard.h **** 
  42:tmk_core/common/keyboard.h **** /* equivalent test of keypos_t */
  43:tmk_core/common/keyboard.h **** #define KEYEQ(keya, keyb)       ((keya).row == (keyb).row && (keya).col == (keyb).col)
  44:tmk_core/common/keyboard.h **** 
  45:tmk_core/common/keyboard.h **** /* Rules for No Event:
  46:tmk_core/common/keyboard.h ****  * 1) (time == 0) to handle (keyevent_t){} as empty event
  47:tmk_core/common/keyboard.h ****  * 2) Matrix(255, 255) to make TICK event available
  48:tmk_core/common/keyboard.h ****  */
  49:tmk_core/common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
 167               		.loc 2 49 20 view .LVU26
 168               	.LBB17:
 169               		.loc 2 49 51 view .LVU27
 170               		.loc 2 49 74 is_stmt 0 view .LVU28
 171 001e 8A85      		ldd r24,Y+10
 172 0020 9B85      		ldd r25,Y+11
 173 0022 892B      		or r24,r25
 174 0024 01F0      		breq .L14
 175 0026 CA01      		movw r24,r20
 176 0028 8923      		and r24,r25
 177 002a 8F3F      		cpi r24,lo8(-1)
 178 002c 01F4      		brne .L15
 179               	.L14:
 180               	.LBE17:
 181               	.LBE16:
  77:tmk_core/common/action.c **** 
 182               		.loc 1 77 5 is_stmt 1 view .LVU29
  77:tmk_core/common/action.c **** 
 183               		.loc 1 77 17 is_stmt 0 view .LVU30
 184 002e 1E82      		std Y+6,__zero_reg__
 185 0030 1D82      		std Y+5,__zero_reg__
 186 0032 85E0      		ldi r24,lo8(5)
 187 0034 FE01      		movw r30,r28
 188 0036 3796      		adiw r30,7
 189 0038 DE01      		movw r26,r28
 190 003a 1196      		adiw r26,1
 191               		0:
 192 003c 0190      		ld r0,Z+
 193 003e 0D92      		st X+,r0
 194 0040 8A95      		dec r24
 195 0042 01F4      		brne 0b
  89:tmk_core/common/action.c **** #else
 196               		.loc 1 89 5 is_stmt 1 view .LVU31
 197 0044 4981      		ldd r20,Y+1
 198 0046 5A81      		ldd r21,Y+2
 199 0048 6B81      		ldd r22,Y+3
 200 004a 7C81      		ldd r23,Y+4
 201 004c 8D81      		ldd r24,Y+5
 202 004e 9E81      		ldd r25,Y+6
 203 0050 0E94 0000 		call action_tapping_process
 204               	.LVL11:
 205               	/* epilogue start */
  96:tmk_core/common/action.c **** 
 206               		.loc 1 96 1 is_stmt 0 view .LVU32
 207 0054 2B96      		adiw r28,11
 208 0056 0FB6      		in __tmp_reg__,__SREG__
 209 0058 F894      		cli
 210 005a DEBF      		out __SP_H__,r29
 211 005c 0FBE      		out __SREG__,__tmp_reg__
 212 005e CDBF      		out __SP_L__,r28
 213 0060 DF91      		pop r29
 214 0062 CF91      		pop r28
 215 0064 0895      		ret
 216               	.L15:
  55:tmk_core/common/action.c **** #ifdef RETRO_TAPPING
 217               		.loc 1 55 58 is_stmt 1 view .LVU33
  72:tmk_core/common/action.c ****         process_hand_swap(&event);
 218               		.loc 1 72 5 view .LVU34
  73:tmk_core/common/action.c ****     }
 219               		.loc 1 73 9 view .LVU35
 220 0066 CE01      		movw r24,r28
 221 0068 0796      		adiw r24,7
 222 006a 0E94 0000 		call process_hand_swap
 223               	.LVL12:
 224 006e 00C0      		rjmp .L14
 225               		.cfi_endproc
 226               	.LFE106:
 228               		.section	.text.process_record_quantum,"ax",@progbits
 229               		.weak	process_record_quantum
 231               	process_record_quantum:
 232               	.LVL13:
 233               	.LFB109:
 121:tmk_core/common/action.c **** #endif
 122:tmk_core/common/action.c **** 
 123:tmk_core/common/action.c **** #if !defined(NO_ACTION_LAYER) && !defined(STRICT_LAYER_RELEASE)
 124:tmk_core/common/action.c **** bool disable_action_cache = false;
 125:tmk_core/common/action.c **** 
 126:tmk_core/common/action.c **** void process_record_nocache(keyrecord_t *record)
 127:tmk_core/common/action.c **** {
 128:tmk_core/common/action.c ****     disable_action_cache = true;
 129:tmk_core/common/action.c ****     process_record(record);
 130:tmk_core/common/action.c ****     disable_action_cache = false;
 131:tmk_core/common/action.c **** }
 132:tmk_core/common/action.c **** #else
 133:tmk_core/common/action.c **** void process_record_nocache(keyrecord_t *record)
 134:tmk_core/common/action.c **** {
 135:tmk_core/common/action.c ****     process_record(record);
 136:tmk_core/common/action.c **** }
 137:tmk_core/common/action.c **** #endif
 138:tmk_core/common/action.c **** 
 139:tmk_core/common/action.c **** __attribute__ ((weak))
 140:tmk_core/common/action.c **** bool process_record_quantum(keyrecord_t *record) {
 234               		.loc 1 140 50 view -0
 235               		.cfi_startproc
 236               	/* prologue: function */
 237               	/* frame size = 0 */
 238               	/* stack size = 0 */
 239               	.L__stack_usage = 0
 141:tmk_core/common/action.c ****     return true;
 240               		.loc 1 141 5 view .LVU37
 142:tmk_core/common/action.c **** }
 241               		.loc 1 142 1 is_stmt 0 view .LVU38
 242 0000 81E0      		ldi r24,lo8(1)
 243               	.LVL14:
 244               	/* epilogue start */
 245               		.loc 1 142 1 view .LVU39
 246 0002 0895      		ret
 247               		.cfi_endproc
 248               	.LFE109:
 250               		.section	.text.process_record_tap_hint,"ax",@progbits
 251               	.global	process_record_tap_hint
 253               	process_record_tap_hint:
 254               	.LVL15:
 255               	.LFB110:
 143:tmk_core/common/action.c **** 
 144:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 145:tmk_core/common/action.c **** /** \brief Allows for handling tap-hold actions immediately instead of waiting for TAPPING_TERM or 
 146:tmk_core/common/action.c ****  *
 147:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 148:tmk_core/common/action.c ****  */
 149:tmk_core/common/action.c **** void process_record_tap_hint(keyrecord_t *record)
 150:tmk_core/common/action.c **** {
 256               		.loc 1 150 1 is_stmt 1 view -0
 257               		.cfi_startproc
 258               	/* prologue: function */
 259               	/* frame size = 0 */
 260               	/* stack size = 0 */
 261               	.L__stack_usage = 0
 151:tmk_core/common/action.c ****     action_t action = layer_switch_get_action(record->event.key);
 262               		.loc 1 151 5 view .LVU41
 263               		.loc 1 151 23 is_stmt 0 view .LVU42
 264 0000 FC01      		movw r30,r24
 265 0002 8081      		ld r24,Z
 266 0004 9181      		ldd r25,Z+1
 267               	.LVL16:
 268               		.loc 1 151 23 view .LVU43
 269 0006 0E94 0000 		call layer_switch_get_action
 270               	.LVL17:
 152:tmk_core/common/action.c **** 
 153:tmk_core/common/action.c ****     switch (action.kind.id) {
 271               		.loc 1 153 5 is_stmt 1 view .LVU44
 272               		.loc 1 153 24 is_stmt 0 view .LVU45
 273 000a 9295      		swap r25
 274 000c 9F70      		andi r25,lo8(15)
 275               		.loc 1 153 5 view .LVU46
 276 000e 9630      		cpi r25,lo8(6)
 277 0010 01F4      		brne .L21
 154:tmk_core/common/action.c **** #ifdef SWAP_HANDS_ENABLE
 155:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 156:tmk_core/common/action.c ****             switch (action.swap.code) {
 278               		.loc 1 156 13 is_stmt 1 view .LVU47
 157:tmk_core/common/action.c ****                 case OP_SH_TAP_TOGGLE:
 158:tmk_core/common/action.c ****                 default:
 159:tmk_core/common/action.c ****                     swap_hands = !swap_hands;
 279               		.loc 1 159 21 view .LVU48
 280 0012 8091 0000 		lds r24,swap_hands
 281 0016 91E0      		ldi r25,lo8(1)
 282 0018 8927      		eor r24,r25
 283               		.loc 1 159 32 is_stmt 0 view .LVU49
 284 001a 8093 0000 		sts swap_hands,r24
 160:tmk_core/common/action.c ****                     swap_held = true;
 285               		.loc 1 160 21 is_stmt 1 view .LVU50
 286               		.loc 1 160 31 is_stmt 0 view .LVU51
 287 001e 9093 0000 		sts swap_held,r25
 161:tmk_core/common/action.c ****             }
 162:tmk_core/common/action.c ****             break;
 288               		.loc 1 162 13 is_stmt 1 view .LVU52
 289               	.L21:
 290               	/* epilogue start */
 163:tmk_core/common/action.c **** #endif
 164:tmk_core/common/action.c ****     }
 165:tmk_core/common/action.c **** }
 291               		.loc 1 165 1 is_stmt 0 view .LVU53
 292 0022 0895      		ret
 293               		.cfi_endproc
 294               	.LFE110:
 296               		.section	.text.register_code,"ax",@progbits
 297               	.global	register_code
 299               	register_code:
 300               	.LVL18:
 301               	.LFB113:
 166:tmk_core/common/action.c **** #endif
 167:tmk_core/common/action.c **** 
 168:tmk_core/common/action.c **** /** \brief Take a key event (key press or key release) and processes it.
 169:tmk_core/common/action.c ****  *
 170:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 171:tmk_core/common/action.c ****  */
 172:tmk_core/common/action.c **** void process_record(keyrecord_t *record)
 173:tmk_core/common/action.c **** {
 174:tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) { return; }
 175:tmk_core/common/action.c **** 
 176:tmk_core/common/action.c ****     if(!process_record_quantum(record))
 177:tmk_core/common/action.c ****         return;
 178:tmk_core/common/action.c **** 
 179:tmk_core/common/action.c ****     action_t action = store_or_get_action(record->event.pressed, record->event.key);
 180:tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
 181:tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 182:tmk_core/common/action.c ****     dprint(" layer_state: "); layer_debug();
 183:tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 184:tmk_core/common/action.c **** #endif
 185:tmk_core/common/action.c ****     dprintln();
 186:tmk_core/common/action.c **** 
 187:tmk_core/common/action.c ****     process_action(record, action);
 188:tmk_core/common/action.c **** }
 189:tmk_core/common/action.c **** 
 190:tmk_core/common/action.c **** /** \brief Take an action and processes it.
 191:tmk_core/common/action.c ****  *
 192:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 193:tmk_core/common/action.c ****  */
 194:tmk_core/common/action.c **** void process_action(keyrecord_t *record, action_t action)
 195:tmk_core/common/action.c **** {
 196:tmk_core/common/action.c ****     keyevent_t event = record->event;
 197:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 198:tmk_core/common/action.c ****     uint8_t tap_count = record->tap.count;
 199:tmk_core/common/action.c **** #endif
 200:tmk_core/common/action.c **** 
 201:tmk_core/common/action.c ****     if (event.pressed) {
 202:tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 203:tmk_core/common/action.c ****         clear_weak_mods();
 204:tmk_core/common/action.c ****     }
 205:tmk_core/common/action.c **** 
 206:tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 207:tmk_core/common/action.c ****     bool do_release_oneshot = false;
 208:tmk_core/common/action.c ****     // notice we only clear the one shot layer if the pressed key is not a modifier.
 209:tmk_core/common/action.c ****     if (is_oneshot_layer_active() && event.pressed && !IS_MOD(action.key.code)) {
 210:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 211:tmk_core/common/action.c ****         do_release_oneshot = !is_oneshot_layer_active();
 212:tmk_core/common/action.c ****     }
 213:tmk_core/common/action.c **** #endif
 214:tmk_core/common/action.c **** 
 215:tmk_core/common/action.c ****     switch (action.kind.id) {
 216:tmk_core/common/action.c ****         /* Key and Mods */
 217:tmk_core/common/action.c ****         case ACT_LMODS:
 218:tmk_core/common/action.c ****         case ACT_RMODS:
 219:tmk_core/common/action.c ****             {
 220:tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
 221:tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 222:tmk_core/common/action.c ****                 if (event.pressed) {
 223:tmk_core/common/action.c ****                     if (mods) {
 224:tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 225:tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 226:tmk_core/common/action.c ****                             // This also makes LSFT(KC_LGUI) behave exactly the same as LGUI(KC_LSF
 227:tmk_core/common/action.c ****                             // Same applies for some keys like KC_MEH which are declared as MEH(KC_
 228:tmk_core/common/action.c ****                             add_mods(mods);
 229:tmk_core/common/action.c ****                         } else {
 230:tmk_core/common/action.c ****                             add_weak_mods(mods);
 231:tmk_core/common/action.c ****                         }
 232:tmk_core/common/action.c ****                         send_keyboard_report();
 233:tmk_core/common/action.c ****                     }
 234:tmk_core/common/action.c ****                     register_code(action.key.code);
 235:tmk_core/common/action.c ****                 } else {
 236:tmk_core/common/action.c ****                     unregister_code(action.key.code);
 237:tmk_core/common/action.c ****                     if (mods) {
 238:tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 239:tmk_core/common/action.c ****                             del_mods(mods);
 240:tmk_core/common/action.c ****                         } else {
 241:tmk_core/common/action.c ****                             del_weak_mods(mods);
 242:tmk_core/common/action.c ****                         }
 243:tmk_core/common/action.c ****                         send_keyboard_report();
 244:tmk_core/common/action.c ****                     }
 245:tmk_core/common/action.c ****                 }
 246:tmk_core/common/action.c ****             }
 247:tmk_core/common/action.c ****             break;
 248:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 249:tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 250:tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 251:tmk_core/common/action.c ****             {
 252:tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 253:tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 254:tmk_core/common/action.c ****                 switch (action.layer_tap.code) {
 255:tmk_core/common/action.c ****     #ifndef NO_ACTION_ONESHOT
 256:tmk_core/common/action.c ****                     case MODS_ONESHOT:
 257:tmk_core/common/action.c ****                         // Oneshot modifier
 258:tmk_core/common/action.c ****                         if (event.pressed) {
 259:tmk_core/common/action.c ****                             if (tap_count == 0) {
 260:tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: 0\n");
 261:tmk_core/common/action.c ****                                 register_mods(mods | get_oneshot_mods());
 262:tmk_core/common/action.c ****                             } else if (tap_count == 1) {
 263:tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 264:tmk_core/common/action.c ****                                 set_oneshot_mods(mods | get_oneshot_mods());
 265:tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 266:tmk_core/common/action.c ****                             } else if (tap_count == ONESHOT_TAP_TOGGLE) {
 267:tmk_core/common/action.c ****                                 dprint("MODS_TAP: Toggling oneshot");
 268:tmk_core/common/action.c ****                                 clear_oneshot_mods();
 269:tmk_core/common/action.c ****                                 set_oneshot_locked_mods(mods);
 270:tmk_core/common/action.c ****                                 register_mods(mods);
 271:tmk_core/common/action.c ****                     #endif
 272:tmk_core/common/action.c ****                             } else {
 273:tmk_core/common/action.c ****                                 register_mods(mods | get_oneshot_mods());
 274:tmk_core/common/action.c ****                             }
 275:tmk_core/common/action.c ****                         } else {
 276:tmk_core/common/action.c ****                             if (tap_count == 0) {
 277:tmk_core/common/action.c ****                                 clear_oneshot_mods();
 278:tmk_core/common/action.c ****                                 unregister_mods(mods);
 279:tmk_core/common/action.c ****                             } else if (tap_count == 1) {
 280:tmk_core/common/action.c ****                                 // Retain Oneshot mods
 281:tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 282:tmk_core/common/action.c ****                                 if (mods & get_mods()) {
 283:tmk_core/common/action.c ****                                     clear_oneshot_locked_mods();
 284:tmk_core/common/action.c ****                                     clear_oneshot_mods();
 285:tmk_core/common/action.c ****                                     unregister_mods(mods);
 286:tmk_core/common/action.c ****                                 }
 287:tmk_core/common/action.c ****                             } else if (tap_count == ONESHOT_TAP_TOGGLE) {
 288:tmk_core/common/action.c ****                                 // Toggle Oneshot Layer
 289:tmk_core/common/action.c ****                     #endif
 290:tmk_core/common/action.c ****                             } else {
 291:tmk_core/common/action.c ****                                 clear_oneshot_mods();
 292:tmk_core/common/action.c ****                                 unregister_mods(mods);
 293:tmk_core/common/action.c ****                             }
 294:tmk_core/common/action.c ****                         }
 295:tmk_core/common/action.c ****                         break;
 296:tmk_core/common/action.c ****     #endif
 297:tmk_core/common/action.c ****                     case MODS_TAP_TOGGLE:
 298:tmk_core/common/action.c ****                         if (event.pressed) {
 299:tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 300:tmk_core/common/action.c ****                                 register_mods(mods);
 301:tmk_core/common/action.c ****                             }
 302:tmk_core/common/action.c ****                         } else {
 303:tmk_core/common/action.c ****                             if (tap_count < TAPPING_TOGGLE) {
 304:tmk_core/common/action.c ****                                 unregister_mods(mods);
 305:tmk_core/common/action.c ****                             }
 306:tmk_core/common/action.c ****                         }
 307:tmk_core/common/action.c ****                         break;
 308:tmk_core/common/action.c ****                     default:
 309:tmk_core/common/action.c ****                         if (event.pressed) {
 310:tmk_core/common/action.c ****                             if (tap_count > 0) {
 311:tmk_core/common/action.c **** #ifndef IGNORE_MOD_TAP_INTERRUPT
 312:tmk_core/common/action.c ****                                 if (record->tap.interrupted) {
 313:tmk_core/common/action.c ****                                     dprint("mods_tap: tap: cancel: add_mods\n");
 314:tmk_core/common/action.c ****                                     // ad hoc: set 0 to cancel tap
 315:tmk_core/common/action.c ****                                     record->tap.count = 0;
 316:tmk_core/common/action.c ****                                     register_mods(mods);
 317:tmk_core/common/action.c ****                                 } else
 318:tmk_core/common/action.c **** #endif
 319:tmk_core/common/action.c ****                                 {
 320:tmk_core/common/action.c ****                                     dprint("MODS_TAP: Tap: register_code\n");
 321:tmk_core/common/action.c ****                                     register_code(action.key.code);
 322:tmk_core/common/action.c ****                                 }
 323:tmk_core/common/action.c ****                             } else {
 324:tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 325:tmk_core/common/action.c ****                                 register_mods(mods);
 326:tmk_core/common/action.c ****                             }
 327:tmk_core/common/action.c ****                         } else {
 328:tmk_core/common/action.c ****                             if (tap_count > 0) {
 329:tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 330:tmk_core/common/action.c ****                                 unregister_code(action.key.code);
 331:tmk_core/common/action.c ****                             } else {
 332:tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 333:tmk_core/common/action.c ****                                 unregister_mods(mods);
 334:tmk_core/common/action.c ****                             }
 335:tmk_core/common/action.c ****                         }
 336:tmk_core/common/action.c ****                         break;
 337:tmk_core/common/action.c ****                 }
 338:tmk_core/common/action.c ****             }
 339:tmk_core/common/action.c ****             break;
 340:tmk_core/common/action.c **** #endif
 341:tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 342:tmk_core/common/action.c ****         /* other HID usage */
 343:tmk_core/common/action.c ****         case ACT_USAGE:
 344:tmk_core/common/action.c ****             switch (action.usage.page) {
 345:tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 346:tmk_core/common/action.c ****                     if (event.pressed) {
 347:tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 348:tmk_core/common/action.c ****                     } else {
 349:tmk_core/common/action.c ****                         host_system_send(0);
 350:tmk_core/common/action.c ****                     }
 351:tmk_core/common/action.c ****                     break;
 352:tmk_core/common/action.c ****                 case PAGE_CONSUMER:
 353:tmk_core/common/action.c ****                     if (event.pressed) {
 354:tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 355:tmk_core/common/action.c ****                     } else {
 356:tmk_core/common/action.c ****                         host_consumer_send(0);
 357:tmk_core/common/action.c ****                     }
 358:tmk_core/common/action.c ****                     break;
 359:tmk_core/common/action.c ****             }
 360:tmk_core/common/action.c ****             break;
 361:tmk_core/common/action.c **** #endif
 362:tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 363:tmk_core/common/action.c ****         /* Mouse key */
 364:tmk_core/common/action.c ****         case ACT_MOUSEKEY:
 365:tmk_core/common/action.c ****             if (event.pressed) {
 366:tmk_core/common/action.c ****                 switch (action.key.code) {
 367:tmk_core/common/action.c ****                     case KC_MS_BTN1:
 368:tmk_core/common/action.c ****                         tp_buttons |= (1<<0);
 369:tmk_core/common/action.c ****                         break;
 370:tmk_core/common/action.c ****                     case KC_MS_BTN2:
 371:tmk_core/common/action.c ****                         tp_buttons |= (1<<1);
 372:tmk_core/common/action.c ****                         break;
 373:tmk_core/common/action.c ****                     case KC_MS_BTN3:
 374:tmk_core/common/action.c ****                         tp_buttons |= (1<<2);
 375:tmk_core/common/action.c ****                         break;
 376:tmk_core/common/action.c ****                     default:
 377:tmk_core/common/action.c ****                         break;
 378:tmk_core/common/action.c ****                 }
 379:tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 380:tmk_core/common/action.c ****                 mousekey_send();
 381:tmk_core/common/action.c ****             } else {
 382:tmk_core/common/action.c ****                 switch (action.key.code) {
 383:tmk_core/common/action.c ****                     case KC_MS_BTN1:
 384:tmk_core/common/action.c ****                         tp_buttons &= ~(1<<0);
 385:tmk_core/common/action.c ****                         break;
 386:tmk_core/common/action.c ****                     case KC_MS_BTN2:
 387:tmk_core/common/action.c ****                         tp_buttons &= ~(1<<1);
 388:tmk_core/common/action.c ****                         break;
 389:tmk_core/common/action.c ****                     case KC_MS_BTN3:
 390:tmk_core/common/action.c ****                         tp_buttons &= ~(1<<2);
 391:tmk_core/common/action.c ****                         break;
 392:tmk_core/common/action.c ****                     default:
 393:tmk_core/common/action.c ****                         break;
 394:tmk_core/common/action.c ****                 }
 395:tmk_core/common/action.c ****                 mousekey_off(action.key.code);
 396:tmk_core/common/action.c ****                 mousekey_send();
 397:tmk_core/common/action.c ****             }
 398:tmk_core/common/action.c ****             break;
 399:tmk_core/common/action.c **** #endif
 400:tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 401:tmk_core/common/action.c ****         case ACT_LAYER:
 402:tmk_core/common/action.c ****             if (action.layer_bitop.on == 0) {
 403:tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 404:tmk_core/common/action.c ****                 if (!event.pressed) {
 405:tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 406:tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 407:tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 408:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 409:tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 410:tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 411:tmk_core/common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 412:tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 413:tmk_core/common/action.c ****                     }
 414:tmk_core/common/action.c ****                 }
 415:tmk_core/common/action.c ****             } else {
 416:tmk_core/common/action.c ****                 /* Layer Bitwise Operation */
 417:tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 418:tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 419:tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 420:tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 421:tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 422:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 423:tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 424:tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 425:tmk_core/common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 426:tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 427:tmk_core/common/action.c ****                     }
 428:tmk_core/common/action.c ****                 }
 429:tmk_core/common/action.c ****             }
 430:tmk_core/common/action.c ****             break;
 431:tmk_core/common/action.c ****     #ifndef NO_ACTION_TAPPING
 432:tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 433:tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 434:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 435:tmk_core/common/action.c ****                 case 0xe0 ... 0xef:
 436:tmk_core/common/action.c ****                     /* layer On/Off with modifiers(left only) */
 437:tmk_core/common/action.c ****                     if (event.pressed) {
 438:tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 439:tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 440:tmk_core/common/action.c ****                     } else {
 441:tmk_core/common/action.c ****                         layer_off(action.layer_tap.val);
 442:tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 443:tmk_core/common/action.c ****                     }
 444:tmk_core/common/action.c ****                     break;
 445:tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 446:tmk_core/common/action.c ****                     /* tap toggle */
 447:tmk_core/common/action.c ****                     if (event.pressed) {
 448:tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 449:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 450:tmk_core/common/action.c ****                         }
 451:tmk_core/common/action.c ****                     } else {
 452:tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 453:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 454:tmk_core/common/action.c ****                         }
 455:tmk_core/common/action.c ****                     }
 456:tmk_core/common/action.c ****                     break;
 457:tmk_core/common/action.c ****                 case OP_ON_OFF:
 458:tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 459:tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 460:tmk_core/common/action.c ****                     break;
 461:tmk_core/common/action.c ****                 case OP_OFF_ON:
 462:tmk_core/common/action.c ****                     event.pressed ? layer_off(action.layer_tap.val) :
 463:tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 464:tmk_core/common/action.c ****                     break;
 465:tmk_core/common/action.c ****                 case OP_SET_CLEAR:
 466:tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 467:tmk_core/common/action.c ****                                     layer_clear();
 468:tmk_core/common/action.c ****                     break;
 469:tmk_core/common/action.c ****             #ifndef NO_ACTION_ONESHOT
 470:tmk_core/common/action.c ****                 case OP_ONESHOT:
 471:tmk_core/common/action.c ****                     // Oneshot modifier
 472:tmk_core/common/action.c ****                 #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 473:tmk_core/common/action.c ****                     do_release_oneshot = false;
 474:tmk_core/common/action.c ****                     if (event.pressed) {
 475:tmk_core/common/action.c ****                         del_mods(get_oneshot_locked_mods());
 476:tmk_core/common/action.c ****                         if (get_oneshot_layer_state() == ONESHOT_TOGGLED) {
 477:tmk_core/common/action.c ****                             reset_oneshot_layer();
 478:tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 479:tmk_core/common/action.c ****                             break;
 480:tmk_core/common/action.c ****                         } else if (tap_count < ONESHOT_TAP_TOGGLE) {
 481:tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 482:tmk_core/common/action.c ****                             set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 483:tmk_core/common/action.c ****                         }
 484:tmk_core/common/action.c ****                     } else {
 485:tmk_core/common/action.c ****                         add_mods(get_oneshot_locked_mods());
 486:tmk_core/common/action.c ****                         if (tap_count >= ONESHOT_TAP_TOGGLE) {
 487:tmk_core/common/action.c ****                             reset_oneshot_layer();
 488:tmk_core/common/action.c ****                             clear_oneshot_locked_mods();
 489:tmk_core/common/action.c ****                             set_oneshot_layer(action.layer_tap.val, ONESHOT_TOGGLED);
 490:tmk_core/common/action.c ****                         } else {
 491:tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_PRESSED);
 492:tmk_core/common/action.c ****                         }
 493:tmk_core/common/action.c ****                     }
 494:tmk_core/common/action.c ****                 #else
 495:tmk_core/common/action.c ****                     if (event.pressed) {
 496:tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 497:tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 498:tmk_core/common/action.c ****                     } else {
 499:tmk_core/common/action.c ****                         clear_oneshot_layer_state(ONESHOT_PRESSED);
 500:tmk_core/common/action.c ****                         if (tap_count > 1) {
 501:tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 502:tmk_core/common/action.c ****                         }
 503:tmk_core/common/action.c ****                     }
 504:tmk_core/common/action.c ****                 #endif
 505:tmk_core/common/action.c ****                     break;
 506:tmk_core/common/action.c ****             #endif
 507:tmk_core/common/action.c ****                 default:
 508:tmk_core/common/action.c ****                     /* tap key */
 509:tmk_core/common/action.c ****                     if (event.pressed) {
 510:tmk_core/common/action.c ****                         if (tap_count > 0) {
 511:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 512:tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 513:tmk_core/common/action.c ****                         } else {
 514:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
 515:tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 516:tmk_core/common/action.c ****                         }
 517:tmk_core/common/action.c ****                     } else {
 518:tmk_core/common/action.c ****                         if (tap_count > 0) {
 519:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 520:tmk_core/common/action.c ****                             if (action.layer_tap.code == KC_CAPS) {
 521:tmk_core/common/action.c ****                                 wait_ms(80);
 522:tmk_core/common/action.c ****                             }
 523:tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 524:tmk_core/common/action.c ****                         } else {
 525:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: Off on release\n");
 526:tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 527:tmk_core/common/action.c ****                         }
 528:tmk_core/common/action.c ****                     }
 529:tmk_core/common/action.c ****                     break;
 530:tmk_core/common/action.c ****             }
 531:tmk_core/common/action.c ****             break;
 532:tmk_core/common/action.c ****     #endif
 533:tmk_core/common/action.c **** #endif
 534:tmk_core/common/action.c ****         /* Extentions */
 535:tmk_core/common/action.c **** #ifndef NO_ACTION_MACRO
 536:tmk_core/common/action.c ****         case ACT_MACRO:
 537:tmk_core/common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 538:tmk_core/common/action.c ****             break;
 539:tmk_core/common/action.c **** #endif
 540:tmk_core/common/action.c **** #if defined(BACKLIGHT_ENABLE) | defined(LED_MATRIX_ENABLE)
 541:tmk_core/common/action.c ****         case ACT_BACKLIGHT:
 542:tmk_core/common/action.c ****             if (!event.pressed) {
 543:tmk_core/common/action.c ****                 switch (action.backlight.opt) {
 544:tmk_core/common/action.c ****                     case BACKLIGHT_INCREASE:
 545:tmk_core/common/action.c ****                         backlight_increase();
 546:tmk_core/common/action.c ****                         break;
 547:tmk_core/common/action.c ****                     case BACKLIGHT_DECREASE:
 548:tmk_core/common/action.c ****                         backlight_decrease();
 549:tmk_core/common/action.c ****                         break;
 550:tmk_core/common/action.c ****                     case BACKLIGHT_TOGGLE:
 551:tmk_core/common/action.c ****                         backlight_toggle();
 552:tmk_core/common/action.c ****                         break;
 553:tmk_core/common/action.c ****                     case BACKLIGHT_STEP:
 554:tmk_core/common/action.c ****                         backlight_step();
 555:tmk_core/common/action.c ****                         break;
 556:tmk_core/common/action.c ****                     case BACKLIGHT_ON:
 557:tmk_core/common/action.c ****                         backlight_level(BACKLIGHT_LEVELS);
 558:tmk_core/common/action.c ****                         break;
 559:tmk_core/common/action.c ****                     case BACKLIGHT_OFF:
 560:tmk_core/common/action.c ****                         backlight_level(0);
 561:tmk_core/common/action.c ****                         break;
 562:tmk_core/common/action.c ****                 }
 563:tmk_core/common/action.c ****             }
 564:tmk_core/common/action.c ****             break;
 565:tmk_core/common/action.c **** #endif
 566:tmk_core/common/action.c ****         case ACT_COMMAND:
 567:tmk_core/common/action.c ****             break;
 568:tmk_core/common/action.c **** #ifdef SWAP_HANDS_ENABLE
 569:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 570:tmk_core/common/action.c ****             switch (action.swap.code) {
 571:tmk_core/common/action.c ****                 case OP_SH_TOGGLE:
 572:tmk_core/common/action.c ****                     if (event.pressed) {
 573:tmk_core/common/action.c ****                         swap_hands = !swap_hands;
 574:tmk_core/common/action.c ****                     }
 575:tmk_core/common/action.c ****                     break;
 576:tmk_core/common/action.c ****                 case OP_SH_ON_OFF:
 577:tmk_core/common/action.c ****                     swap_hands = event.pressed;
 578:tmk_core/common/action.c ****                     break;
 579:tmk_core/common/action.c ****                 case OP_SH_OFF_ON:
 580:tmk_core/common/action.c ****                     swap_hands = !event.pressed;
 581:tmk_core/common/action.c ****                     break;
 582:tmk_core/common/action.c ****                 case OP_SH_ON:
 583:tmk_core/common/action.c ****                     if (!event.pressed) {
 584:tmk_core/common/action.c ****                         swap_hands = true;
 585:tmk_core/common/action.c ****                     }
 586:tmk_core/common/action.c ****                     break;
 587:tmk_core/common/action.c ****                 case OP_SH_OFF:
 588:tmk_core/common/action.c ****                     if (!event.pressed) {
 589:tmk_core/common/action.c ****                         swap_hands = false;
 590:tmk_core/common/action.c ****                     }
 591:tmk_core/common/action.c ****                     break;
 592:tmk_core/common/action.c ****     #ifndef NO_ACTION_TAPPING
 593:tmk_core/common/action.c ****                 case OP_SH_TAP_TOGGLE:
 594:tmk_core/common/action.c ****                     /* tap toggle */
 595:tmk_core/common/action.c **** 
 596:tmk_core/common/action.c ****                     if (event.pressed) {
 597:tmk_core/common/action.c ****                         if (swap_held) {
 598:tmk_core/common/action.c ****                             swap_held = false;
 599:tmk_core/common/action.c ****                         } else {
 600:tmk_core/common/action.c ****                             swap_hands = !swap_hands;
 601:tmk_core/common/action.c ****                         }
 602:tmk_core/common/action.c ****                     } else {
 603:tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 604:tmk_core/common/action.c ****                             swap_hands = !swap_hands;
 605:tmk_core/common/action.c ****                         }
 606:tmk_core/common/action.c ****                     }
 607:tmk_core/common/action.c ****                     break;
 608:tmk_core/common/action.c ****                 default:
 609:tmk_core/common/action.c ****                     /* tap key */
 610:tmk_core/common/action.c ****                     if (tap_count > 0) {
 611:tmk_core/common/action.c ****                         if (swap_held) {
 612:tmk_core/common/action.c ****                             swap_hands = !swap_hands; // undo hold set up in _tap_hint
 613:tmk_core/common/action.c ****                             swap_held = false;
 614:tmk_core/common/action.c ****                         }
 615:tmk_core/common/action.c ****                         if (event.pressed) {
 616:tmk_core/common/action.c ****                             register_code(action.swap.code);
 617:tmk_core/common/action.c ****                         } else {
 618:tmk_core/common/action.c ****                             unregister_code(action.swap.code);
 619:tmk_core/common/action.c ****                             *record = (keyrecord_t){}; // hack: reset tap mode
 620:tmk_core/common/action.c ****                         }
 621:tmk_core/common/action.c ****                     } else {
 622:tmk_core/common/action.c ****                         if (swap_held && !event.pressed) {
 623:tmk_core/common/action.c ****                             swap_hands = !swap_hands; // undo hold set up in _tap_hint
 624:tmk_core/common/action.c ****                             swap_held = false;
 625:tmk_core/common/action.c ****                         }
 626:tmk_core/common/action.c ****                     }
 627:tmk_core/common/action.c ****     #endif
 628:tmk_core/common/action.c ****             }
 629:tmk_core/common/action.c **** #endif
 630:tmk_core/common/action.c **** #ifndef NO_ACTION_FUNCTION
 631:tmk_core/common/action.c ****         case ACT_FUNCTION:
 632:tmk_core/common/action.c ****             action_function(record, action.func.id, action.func.opt);
 633:tmk_core/common/action.c ****             break;
 634:tmk_core/common/action.c **** #endif
 635:tmk_core/common/action.c ****         default:
 636:tmk_core/common/action.c ****             break;
 637:tmk_core/common/action.c ****     }
 638:tmk_core/common/action.c **** 
 639:tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 640:tmk_core/common/action.c ****     // if this event is a layer action, update the leds
 641:tmk_core/common/action.c ****     switch (action.kind.id) {
 642:tmk_core/common/action.c ****         case ACT_LAYER:
 643:tmk_core/common/action.c ****         #ifndef NO_ACTION_TAPPING
 644:tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 645:tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 646:tmk_core/common/action.c ****         #endif
 647:tmk_core/common/action.c ****             led_set(host_keyboard_leds());
 648:tmk_core/common/action.c ****             break;
 649:tmk_core/common/action.c ****         default:
 650:tmk_core/common/action.c ****             break;
 651:tmk_core/common/action.c ****     }
 652:tmk_core/common/action.c **** #endif
 653:tmk_core/common/action.c **** 
 654:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 655:tmk_core/common/action.c ****   #ifdef RETRO_TAPPING
 656:tmk_core/common/action.c ****   if (!is_tap_action(action)) {
 657:tmk_core/common/action.c ****     retro_tapping_counter = 0;
 658:tmk_core/common/action.c ****   } else {
 659:tmk_core/common/action.c ****     if (event.pressed) {
 660:tmk_core/common/action.c ****         if (tap_count > 0) {
 661:tmk_core/common/action.c ****           retro_tapping_counter = 0;
 662:tmk_core/common/action.c ****         } else {
 663:tmk_core/common/action.c **** 
 664:tmk_core/common/action.c ****         }
 665:tmk_core/common/action.c ****     } else {
 666:tmk_core/common/action.c ****       if (tap_count > 0) {
 667:tmk_core/common/action.c ****         retro_tapping_counter = 0;
 668:tmk_core/common/action.c ****       } else {
 669:tmk_core/common/action.c ****         if (retro_tapping_counter == 2) {
 670:tmk_core/common/action.c ****           register_code(action.layer_tap.code);
 671:tmk_core/common/action.c ****           unregister_code(action.layer_tap.code);
 672:tmk_core/common/action.c ****         }
 673:tmk_core/common/action.c ****         retro_tapping_counter = 0;
 674:tmk_core/common/action.c ****       }
 675:tmk_core/common/action.c ****     }
 676:tmk_core/common/action.c ****   }
 677:tmk_core/common/action.c ****   #endif
 678:tmk_core/common/action.c **** #endif
 679:tmk_core/common/action.c **** 
 680:tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 681:tmk_core/common/action.c ****     /* Because we switch layers after a oneshot event, we need to release the
 682:tmk_core/common/action.c ****      * key before we leave the layer or no key up event will be generated.
 683:tmk_core/common/action.c ****      */
 684:tmk_core/common/action.c ****     if (do_release_oneshot && !(get_oneshot_layer_state() & ONESHOT_PRESSED )   ) {
 685:tmk_core/common/action.c ****         record->event.pressed = false;
 686:tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 687:tmk_core/common/action.c ****         process_record(record);
 688:tmk_core/common/action.c ****         layer_off(get_oneshot_layer());
 689:tmk_core/common/action.c ****     }
 690:tmk_core/common/action.c **** #endif
 691:tmk_core/common/action.c **** }
 692:tmk_core/common/action.c **** 
 693:tmk_core/common/action.c **** 
 694:tmk_core/common/action.c **** 
 695:tmk_core/common/action.c **** 
 696:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 697:tmk_core/common/action.c ****  *
 698:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 699:tmk_core/common/action.c ****  */
 700:tmk_core/common/action.c **** void register_code(uint8_t code)
 701:tmk_core/common/action.c **** {
 302               		.loc 1 701 1 is_stmt 1 view -0
 303               		.cfi_startproc
 304               	/* prologue: function */
 305               	/* frame size = 0 */
 306               	/* stack size = 0 */
 307               	.L__stack_usage = 0
 702:tmk_core/common/action.c ****     if (code == KC_NO) {
 308               		.loc 1 702 5 view .LVU55
 309               		.loc 1 702 8 is_stmt 0 view .LVU56
 310 0000 8823      		tst r24
 311 0002 01F4      		brne .+2
 312 0004 00C0      		rjmp .L23
 703:tmk_core/common/action.c ****         return;
 704:tmk_core/common/action.c ****     }
 705:tmk_core/common/action.c **** 
 706:tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 707:tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 313               		.loc 1 707 10 is_stmt 1 view .LVU57
 314               		.loc 1 707 13 is_stmt 0 view .LVU58
 315 0006 8238      		cpi r24,lo8(-126)
 316 0008 01F4      		brne .L26
 708:tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 709:tmk_core/common/action.c ****         // Resync: ignore if caps lock already is on
 710:tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
 317               		.loc 1 710 9 is_stmt 1 view .LVU59
 318               		.loc 1 710 13 is_stmt 0 view .LVU60
 319 000a 0E94 0000 		call host_keyboard_leds
 320               	.LVL19:
 321               		.loc 1 710 12 view .LVU61
 322 000e 81FD      		sbrc r24,1
 323 0010 00C0      		rjmp .L23
 711:tmk_core/common/action.c **** #endif
 712:tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 324               		.loc 1 712 9 is_stmt 1 view .LVU62
 325 0012 89E3      		ldi r24,lo8(57)
 326 0014 0E94 0000 		call add_key
 327               	.LVL20:
 713:tmk_core/common/action.c ****         send_keyboard_report();
 328               		.loc 1 713 9 view .LVU63
 329 0018 0E94 0000 		call send_keyboard_report
 330               	.LVL21:
 714:tmk_core/common/action.c ****         wait_ms(100);
 331               		.loc 1 714 9 view .LVU64
 332               	.LBB18:
 333               	.LBI18:
 334               		.file 3 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** _delay_ms(double __ms)
 335               		.loc 3 166 1 view .LVU65
 336               	.LBB19:
 167:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	double __tmp ;
 337               		.loc 3 168 2 view .LVU66
 169:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 338               		.loc 3 172 2 view .LVU67
 173:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 339               		.loc 3 173 2 view .LVU68
 174:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 340               		.loc 3 174 2 view .LVU69
 175:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 341               		.loc 3 184 3 view .LVU70
 185:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 342               		.loc 3 187 2 view .LVU71
 343 001c 2FEF      		ldi r18,lo8(319999)
 344 001e 81EE      		ldi r24,hi8(319999)
 345 0020 94E0      		ldi r25,hlo8(319999)
 346 0022 2150      	1:	subi r18,1
 347 0024 8040      		sbci r24,0
 348 0026 9040      		sbci r25,0
 349 0028 01F4      		brne 1b
 350 002a 00C0      		rjmp .
 351 002c 0000      		nop
 352               	.LVL22:
 353               		.loc 3 187 2 is_stmt 0 view .LVU72
 354               	.LBE19:
 355               	.LBE18:
 715:tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 356               		.loc 1 715 9 is_stmt 1 view .LVU73
 357 002e 89E3      		ldi r24,lo8(57)
 358               	.L61:
 716:tmk_core/common/action.c ****         send_keyboard_report();
 717:tmk_core/common/action.c ****     }
 718:tmk_core/common/action.c **** 
 719:tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 720:tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 721:tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
 722:tmk_core/common/action.c **** #endif
 723:tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 724:tmk_core/common/action.c ****         send_keyboard_report();
 725:tmk_core/common/action.c ****         wait_ms(100);
 726:tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 359               		.loc 1 726 9 is_stmt 0 view .LVU74
 360 0030 0E94 0000 		call del_key
 361               	.LVL23:
 362               	.L62:
 727:tmk_core/common/action.c ****         send_keyboard_report();
 363               		.loc 1 727 9 is_stmt 1 view .LVU75
 364 0034 0C94 0000 		jmp send_keyboard_report
 365               	.LVL24:
 366               	.L26:
 719:tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 367               		.loc 1 719 10 view .LVU76
 719:tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 368               		.loc 1 719 13 is_stmt 0 view .LVU77
 369 0038 8338      		cpi r24,lo8(-125)
 370 003a 01F4      		brne .L28
 721:tmk_core/common/action.c **** #endif
 371               		.loc 1 721 9 is_stmt 1 view .LVU78
 721:tmk_core/common/action.c **** #endif
 372               		.loc 1 721 13 is_stmt 0 view .LVU79
 373 003c 0E94 0000 		call host_keyboard_leds
 374               	.LVL25:
 721:tmk_core/common/action.c **** #endif
 375               		.loc 1 721 12 view .LVU80
 376 0040 80FD      		sbrc r24,0
 377 0042 00C0      		rjmp .L23
 723:tmk_core/common/action.c ****         send_keyboard_report();
 378               		.loc 1 723 9 is_stmt 1 view .LVU81
 379 0044 83E5      		ldi r24,lo8(83)
 380 0046 0E94 0000 		call add_key
 381               	.LVL26:
 724:tmk_core/common/action.c ****         wait_ms(100);
 382               		.loc 1 724 9 view .LVU82
 383 004a 0E94 0000 		call send_keyboard_report
 384               	.LVL27:
 725:tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 385               		.loc 1 725 9 view .LVU83
 386               	.LBB20:
 387               	.LBI20:
 166:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** {
 388               		.loc 3 166 1 view .LVU84
 389               	.LBB21:
 168:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 390               		.loc 3 168 2 view .LVU85
 172:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 391               		.loc 3 172 2 view .LVU86
 173:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 392               		.loc 3 173 2 view .LVU87
 174:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 393               		.loc 3 174 2 view .LVU88
 184:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#endif
 394               		.loc 3 184 3 view .LVU89
 395               		.loc 3 187 2 view .LVU90
 396 004e 2FEF      		ldi r18,lo8(319999)
 397 0050 81EE      		ldi r24,hi8(319999)
 398 0052 94E0      		ldi r25,hlo8(319999)
 399 0054 2150      	1:	subi r18,1
 400 0056 8040      		sbci r24,0
 401 0058 9040      		sbci r25,0
 402 005a 01F4      		brne 1b
 403 005c 00C0      		rjmp .
 404 005e 0000      		nop
 405               	.LVL28:
 406               		.loc 3 187 2 is_stmt 0 view .LVU91
 407               	.LBE21:
 408               	.LBE20:
 726:tmk_core/common/action.c ****         send_keyboard_report();
 409               		.loc 1 726 9 is_stmt 1 view .LVU92
 410 0060 83E5      		ldi r24,lo8(83)
 411 0062 00C0      		rjmp .L61
 412               	.LVL29:
 413               	.L28:
 728:tmk_core/common/action.c ****     }
 729:tmk_core/common/action.c **** 
 730:tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 414               		.loc 1 730 10 view .LVU93
 415               		.loc 1 730 13 is_stmt 0 view .LVU94
 416 0064 8438      		cpi r24,lo8(-124)
 417 0066 01F4      		brne .L29
 731:tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 732:tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
 418               		.loc 1 732 9 is_stmt 1 view .LVU95
 419               		.loc 1 732 13 is_stmt 0 view .LVU96
 420 0068 0E94 0000 		call host_keyboard_leds
 421               	.LVL30:
 422               		.loc 1 732 12 view .LVU97
 423 006c 82FD      		sbrc r24,2
 424 006e 00C0      		rjmp .L23
 733:tmk_core/common/action.c **** #endif
 734:tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 425               		.loc 1 734 9 is_stmt 1 view .LVU98
 426 0070 87E4      		ldi r24,lo8(71)
 427 0072 0E94 0000 		call add_key
 428               	.LVL31:
 735:tmk_core/common/action.c ****         send_keyboard_report();
 429               		.loc 1 735 9 view .LVU99
 430 0076 0E94 0000 		call send_keyboard_report
 431               	.LVL32:
 736:tmk_core/common/action.c ****         wait_ms(100);
 432               		.loc 1 736 9 view .LVU100
 433               	.LBB22:
 434               	.LBI22:
 166:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** {
 435               		.loc 3 166 1 view .LVU101
 436               	.LBB23:
 168:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 437               		.loc 3 168 2 view .LVU102
 172:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 438               		.loc 3 172 2 view .LVU103
 173:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 439               		.loc 3 173 2 view .LVU104
 174:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 440               		.loc 3 174 2 view .LVU105
 184:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#endif
 441               		.loc 3 184 3 view .LVU106
 442               		.loc 3 187 2 view .LVU107
 443 007a 2FEF      		ldi r18,lo8(319999)
 444 007c 81EE      		ldi r24,hi8(319999)
 445 007e 94E0      		ldi r25,hlo8(319999)
 446 0080 2150      	1:	subi r18,1
 447 0082 8040      		sbci r24,0
 448 0084 9040      		sbci r25,0
 449 0086 01F4      		brne 1b
 450 0088 00C0      		rjmp .
 451 008a 0000      		nop
 452               	.LVL33:
 453               		.loc 3 187 2 is_stmt 0 view .LVU108
 454               	.LBE23:
 455               	.LBE22:
 737:tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 456               		.loc 1 737 9 is_stmt 1 view .LVU109
 457 008c 87E4      		ldi r24,lo8(71)
 458 008e 00C0      		rjmp .L61
 459               	.LVL34:
 460               	.L29:
 738:tmk_core/common/action.c ****         send_keyboard_report();
 739:tmk_core/common/action.c ****     }
 740:tmk_core/common/action.c **** #endif
 741:tmk_core/common/action.c **** 
 742:tmk_core/common/action.c ****     else if IS_KEY(code) {
 461               		.loc 1 742 10 view .LVU110
 462               		.loc 1 742 13 is_stmt 0 view .LVU111
 463 0090 9CEF      		ldi r25,lo8(-4)
 464 0092 980F      		add r25,r24
 465 0094 913A      		cpi r25,lo8(-95)
 466 0096 00F4      		brsh .L30
 743:tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 744:tmk_core/common/action.c ****         if (command_proc(code)) return;
 467               		.loc 1 744 9 is_stmt 1 view .LVU112
 745:tmk_core/common/action.c **** 
 746:tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 747:tmk_core/common/action.c **** /* TODO: remove
 748:tmk_core/common/action.c ****         if (oneshot_state.mods && !oneshot_state.disabled) {
 749:tmk_core/common/action.c ****             uint8_t tmp_mods = get_mods();
 750:tmk_core/common/action.c ****             add_mods(oneshot_state.mods);
 751:tmk_core/common/action.c **** 
 752:tmk_core/common/action.c ****             add_key(code);
 753:tmk_core/common/action.c ****             send_keyboard_report();
 754:tmk_core/common/action.c **** 
 755:tmk_core/common/action.c ****             set_mods(tmp_mods);
 756:tmk_core/common/action.c ****             send_keyboard_report();
 757:tmk_core/common/action.c ****             oneshot_cancel();
 758:tmk_core/common/action.c ****         } else
 759:tmk_core/common/action.c **** */
 760:tmk_core/common/action.c **** #endif
 761:tmk_core/common/action.c ****         {
 762:tmk_core/common/action.c ****             add_key(code);
 468               		.loc 1 762 13 view .LVU113
 469 0098 0E94 0000 		call add_key
 470               	.LVL35:
 763:tmk_core/common/action.c ****             send_keyboard_report();
 471               		.loc 1 763 13 view .LVU114
 472 009c 00C0      		rjmp .L62
 473               	.LVL36:
 474               	.L30:
 764:tmk_core/common/action.c ****         }
 765:tmk_core/common/action.c ****     }
 766:tmk_core/common/action.c ****     else if IS_MOD(code) {
 475               		.loc 1 766 10 view .LVU115
 476               		.loc 1 766 13 is_stmt 0 view .LVU116
 477 009e 90E2      		ldi r25,lo8(32)
 478 00a0 980F      		add r25,r24
 479 00a2 9830      		cpi r25,lo8(8)
 480 00a4 00F4      		brsh .L31
 767:tmk_core/common/action.c ****         add_mods(MOD_BIT(code));
 481               		.loc 1 767 9 is_stmt 1 view .LVU117
 482               		.loc 1 767 18 is_stmt 0 view .LVU118
 483 00a6 8770      		andi r24,lo8(7)
 484               	.LVL37:
 485               		.loc 1 767 9 view .LVU119
 486 00a8 91E0      		ldi r25,lo8(1)
 487 00aa 00C0      		rjmp 2f
 488               		1:
 489 00ac 990F      		lsl r25
 490               		2:
 491 00ae 8A95      		dec r24
 492 00b0 02F4      		brpl 1b
 493 00b2 892F      		mov r24,r25
 494 00b4 0E94 0000 		call add_mods
 495               	.LVL38:
 768:tmk_core/common/action.c ****         send_keyboard_report();
 496               		.loc 1 768 9 is_stmt 1 view .LVU120
 497 00b8 00C0      		rjmp .L62
 498               	.LVL39:
 499               	.L31:
 769:tmk_core/common/action.c ****     }
 770:tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 500               		.loc 1 770 10 view .LVU121
 501               		.loc 1 770 13 is_stmt 0 view .LVU122
 502 00ba 9BE5      		ldi r25,lo8(91)
 503 00bc 980F      		add r25,r24
 504 00be 9330      		cpi r25,lo8(3)
 505 00c0 00F4      		brsh .L32
 771:tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 506               		.loc 1 771 9 is_stmt 1 view .LVU123
 507 00c2 853A      		cpi r24,lo8(-91)
 508 00c4 01F0      		breq .L36
 509               		.loc 1 771 26 is_stmt 0 discriminator 1 view .LVU124
 510 00c6 863A      		cpi r24,lo8(-90)
 511 00c8 01F0      		breq .L37
 512               		.loc 1 771 26 view .LVU125
 513 00ca 83E8      		ldi r24,lo8(-125)
 514 00cc 90E0      		ldi r25,0
 515               	.LVL40:
 516               	.L33:
 517               		.loc 1 771 9 discriminator 12 view .LVU126
 518 00ce 0C94 0000 		jmp host_system_send
 519               	.LVL41:
 520               	.L36:
 521               		.loc 1 771 9 view .LVU127
 522 00d2 81E8      		ldi r24,lo8(-127)
 523 00d4 90E0      		ldi r25,0
 524               	.LVL42:
 525               		.loc 1 771 9 view .LVU128
 526 00d6 00C0      		rjmp .L33
 527               	.LVL43:
 528               	.L37:
 529               		.loc 1 771 26 view .LVU129
 530 00d8 82E8      		ldi r24,lo8(-126)
 531 00da 90E0      		ldi r25,0
 532               	.LVL44:
 533               		.loc 1 771 26 view .LVU130
 534 00dc 00C0      		rjmp .L33
 535               	.LVL45:
 536               	.L32:
 772:tmk_core/common/action.c ****     }
 773:tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 537               		.loc 1 773 10 is_stmt 1 view .LVU131
 538               		.loc 1 773 13 is_stmt 0 view .LVU132
 539 00de 98E5      		ldi r25,lo8(88)
 540 00e0 980F      		add r25,r24
 541 00e2 9731      		cpi r25,lo8(23)
 542 00e4 00F0      		brlo .+2
 543 00e6 00C0      		rjmp .L34
 774:tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 544               		.loc 1 774 9 is_stmt 1 view .LVU133
 545 00e8 883A      		cpi r24,lo8(-88)
 546 00ea 01F4      		brne .+2
 547 00ec 00C0      		rjmp .L38
 548               		.loc 1 774 28 is_stmt 0 discriminator 1 view .LVU134
 549 00ee 893A      		cpi r24,lo8(-87)
 550 00f0 01F4      		brne .+2
 551 00f2 00C0      		rjmp .L39
 552               		.loc 1 774 28 discriminator 3 view .LVU135
 553 00f4 8A3A      		cpi r24,lo8(-86)
 554 00f6 01F4      		brne .+2
 555 00f8 00C0      		rjmp .L40
 556               		.loc 1 774 28 discriminator 5 view .LVU136
 557 00fa 8B3A      		cpi r24,lo8(-85)
 558 00fc 01F4      		brne .+2
 559 00fe 00C0      		rjmp .L41
 560               		.loc 1 774 28 discriminator 7 view .LVU137
 561 0100 8C3A      		cpi r24,lo8(-84)
 562 0102 01F4      		brne .+2
 563 0104 00C0      		rjmp .L42
 564               		.loc 1 774 28 discriminator 9 view .LVU138
 565 0106 8B3B      		cpi r24,lo8(-69)
 566 0108 01F4      		brne .+2
 567 010a 00C0      		rjmp .L43
 568               		.loc 1 774 28 discriminator 11 view .LVU139
 569 010c 8C3B      		cpi r24,lo8(-68)
 570 010e 01F4      		brne .+2
 571 0110 00C0      		rjmp .L44
 572               		.loc 1 774 28 discriminator 13 view .LVU140
 573 0112 8D3A      		cpi r24,lo8(-83)
 574 0114 01F4      		brne .+2
 575 0116 00C0      		rjmp .L45
 576               		.loc 1 774 28 discriminator 15 view .LVU141
 577 0118 803B      		cpi r24,lo8(-80)
 578 011a 01F4      		brne .+2
 579 011c 00C0      		rjmp .L46
 580               		.loc 1 774 28 discriminator 17 view .LVU142
 581 011e 8E3A      		cpi r24,lo8(-82)
 582 0120 01F4      		brne .+2
 583 0122 00C0      		rjmp .L47
 584               		.loc 1 774 28 discriminator 19 view .LVU143
 585 0124 8F3A      		cpi r24,lo8(-81)
 586 0126 01F4      		brne .+2
 587 0128 00C0      		rjmp .L48
 588               		.loc 1 774 28 discriminator 21 view .LVU144
 589 012a 813B      		cpi r24,lo8(-79)
 590 012c 01F4      		brne .+2
 591 012e 00C0      		rjmp .L49
 592               		.loc 1 774 28 discriminator 23 view .LVU145
 593 0130 823B      		cpi r24,lo8(-78)
 594 0132 01F4      		brne .+2
 595 0134 00C0      		rjmp .L50
 596               		.loc 1 774 28 discriminator 25 view .LVU146
 597 0136 833B      		cpi r24,lo8(-77)
 598 0138 01F4      		brne .+2
 599 013a 00C0      		rjmp .L51
 600               		.loc 1 774 28 discriminator 27 view .LVU147
 601 013c 843B      		cpi r24,lo8(-76)
 602 013e 01F4      		brne .+2
 603 0140 00C0      		rjmp .L52
 604               		.loc 1 774 28 discriminator 29 view .LVU148
 605 0142 853B      		cpi r24,lo8(-75)
 606 0144 01F4      		brne .+2
 607 0146 00C0      		rjmp .L53
 608               		.loc 1 774 28 discriminator 31 view .LVU149
 609 0148 863B      		cpi r24,lo8(-74)
 610 014a 01F4      		brne .+2
 611 014c 00C0      		rjmp .L54
 612               		.loc 1 774 28 discriminator 33 view .LVU150
 613 014e 873B      		cpi r24,lo8(-73)
 614 0150 01F4      		brne .+2
 615 0152 00C0      		rjmp .L55
 616               		.loc 1 774 28 discriminator 35 view .LVU151
 617 0154 883B      		cpi r24,lo8(-72)
 618 0156 01F4      		brne .+2
 619 0158 00C0      		rjmp .L56
 620               		.loc 1 774 28 discriminator 37 view .LVU152
 621 015a 893B      		cpi r24,lo8(-71)
 622 015c 01F4      		brne .+2
 623 015e 00C0      		rjmp .L57
 624               		.loc 1 774 28 discriminator 39 view .LVU153
 625 0160 8D3B      		cpi r24,lo8(-67)
 626 0162 01F4      		brne .+2
 627 0164 00C0      		rjmp .L58
 628               		.loc 1 774 28 discriminator 41 view .LVU154
 629 0166 8E3B      		cpi r24,lo8(-66)
 630 0168 01F4      		brne .+2
 631 016a 00C0      		rjmp .L59
 632               		.loc 1 774 28 discriminator 43 view .LVU155
 633 016c 8A3B      		cpi r24,lo8(-70)
 634 016e 01F4      		brne .+2
 635 0170 00C0      		rjmp .L60
 636               		.loc 1 774 28 view .LVU156
 637 0172 90E0      		ldi r25,0
 638 0174 80E0      		ldi r24,0
 639               	.LVL46:
 640               	.L35:
 641               		.loc 1 774 9 discriminator 92 view .LVU157
 642 0176 0C94 0000 		jmp host_consumer_send
 643               	.LVL47:
 644               	.L38:
 645               		.loc 1 774 9 view .LVU158
 646 017a 82EE      		ldi r24,lo8(-30)
 647 017c 90E0      		ldi r25,0
 648               	.LVL48:
 649               		.loc 1 774 9 view .LVU159
 650 017e 00C0      		rjmp .L35
 651               	.LVL49:
 652               	.L39:
 653               		.loc 1 774 28 view .LVU160
 654 0180 89EE      		ldi r24,lo8(-23)
 655 0182 90E0      		ldi r25,0
 656               	.LVL50:
 657               		.loc 1 774 28 view .LVU161
 658 0184 00C0      		rjmp .L35
 659               	.LVL51:
 660               	.L40:
 661               		.loc 1 774 28 view .LVU162
 662 0186 8AEE      		ldi r24,lo8(-22)
 663 0188 90E0      		ldi r25,0
 664               	.LVL52:
 665               		.loc 1 774 28 view .LVU163
 666 018a 00C0      		rjmp .L35
 667               	.LVL53:
 668               	.L41:
 669               		.loc 1 774 28 view .LVU164
 670 018c 85EB      		ldi r24,lo8(-75)
 671 018e 90E0      		ldi r25,0
 672               	.LVL54:
 673               		.loc 1 774 28 view .LVU165
 674 0190 00C0      		rjmp .L35
 675               	.LVL55:
 676               	.L42:
 677               		.loc 1 774 28 view .LVU166
 678 0192 86EB      		ldi r24,lo8(-74)
 679 0194 90E0      		ldi r25,0
 680               	.LVL56:
 681               		.loc 1 774 28 view .LVU167
 682 0196 00C0      		rjmp .L35
 683               	.LVL57:
 684               	.L43:
 685               		.loc 1 774 28 view .LVU168
 686 0198 83EB      		ldi r24,lo8(-77)
 687 019a 90E0      		ldi r25,0
 688               	.LVL58:
 689               		.loc 1 774 28 view .LVU169
 690 019c 00C0      		rjmp .L35
 691               	.LVL59:
 692               	.L44:
 693               		.loc 1 774 28 view .LVU170
 694 019e 84EB      		ldi r24,lo8(-76)
 695 01a0 90E0      		ldi r25,0
 696               	.LVL60:
 697               		.loc 1 774 28 view .LVU171
 698 01a2 00C0      		rjmp .L35
 699               	.LVL61:
 700               	.L45:
 701               		.loc 1 774 28 view .LVU172
 702 01a4 87EB      		ldi r24,lo8(-73)
 703 01a6 90E0      		ldi r25,0
 704               	.LVL62:
 705               		.loc 1 774 28 view .LVU173
 706 01a8 00C0      		rjmp .L35
 707               	.LVL63:
 708               	.L46:
 709               		.loc 1 774 28 view .LVU174
 710 01aa 8CEC      		ldi r24,lo8(-52)
 711 01ac 90E0      		ldi r25,0
 712               	.LVL64:
 713               		.loc 1 774 28 view .LVU175
 714 01ae 00C0      		rjmp .L35
 715               	.LVL65:
 716               	.L47:
 717               		.loc 1 774 28 view .LVU176
 718 01b0 8DEC      		ldi r24,lo8(-51)
 719 01b2 90E0      		ldi r25,0
 720               	.LVL66:
 721               		.loc 1 774 28 view .LVU177
 722 01b4 00C0      		rjmp .L35
 723               	.LVL67:
 724               	.L48:
 725               		.loc 1 774 28 view .LVU178
 726 01b6 83E8      		ldi r24,lo8(-125)
 727 01b8 91E0      		ldi r25,lo8(1)
 728               	.LVL68:
 729               		.loc 1 774 28 view .LVU179
 730 01ba 00C0      		rjmp .L35
 731               	.LVL69:
 732               	.L49:
 733               		.loc 1 774 28 view .LVU180
 734 01bc 8AE8      		ldi r24,lo8(-118)
 735 01be 91E0      		ldi r25,lo8(1)
 736               	.LVL70:
 737               		.loc 1 774 28 view .LVU181
 738 01c0 00C0      		rjmp .L35
 739               	.LVL71:
 740               	.L50:
 741               		.loc 1 774 28 view .LVU182
 742 01c2 82E9      		ldi r24,lo8(-110)
 743 01c4 91E0      		ldi r25,lo8(1)
 744               	.LVL72:
 745               		.loc 1 774 28 view .LVU183
 746 01c6 00C0      		rjmp .L35
 747               	.LVL73:
 748               	.L51:
 749               		.loc 1 774 28 view .LVU184
 750 01c8 84E9      		ldi r24,lo8(-108)
 751 01ca 91E0      		ldi r25,lo8(1)
 752               	.LVL74:
 753               		.loc 1 774 28 view .LVU185
 754 01cc 00C0      		rjmp .L35
 755               	.LVL75:
 756               	.L52:
 757               		.loc 1 774 28 view .LVU186
 758 01ce 81E2      		ldi r24,lo8(33)
 759 01d0 92E0      		ldi r25,lo8(2)
 760               	.LVL76:
 761               		.loc 1 774 28 view .LVU187
 762 01d2 00C0      		rjmp .L35
 763               	.LVL77:
 764               	.L53:
 765               		.loc 1 774 28 view .LVU188
 766 01d4 83E2      		ldi r24,lo8(35)
 767 01d6 92E0      		ldi r25,lo8(2)
 768               	.LVL78:
 769               		.loc 1 774 28 view .LVU189
 770 01d8 00C0      		rjmp .L35
 771               	.LVL79:
 772               	.L54:
 773               		.loc 1 774 28 view .LVU190
 774 01da 84E2      		ldi r24,lo8(36)
 775 01dc 92E0      		ldi r25,lo8(2)
 776               	.LVL80:
 777               		.loc 1 774 28 view .LVU191
 778 01de 00C0      		rjmp .L35
 779               	.LVL81:
 780               	.L55:
 781               		.loc 1 774 28 view .LVU192
 782 01e0 85E2      		ldi r24,lo8(37)
 783 01e2 92E0      		ldi r25,lo8(2)
 784               	.LVL82:
 785               		.loc 1 774 28 view .LVU193
 786 01e4 00C0      		rjmp .L35
 787               	.LVL83:
 788               	.L56:
 789               		.loc 1 774 28 view .LVU194
 790 01e6 86E2      		ldi r24,lo8(38)
 791 01e8 92E0      		ldi r25,lo8(2)
 792               	.LVL84:
 793               		.loc 1 774 28 view .LVU195
 794 01ea 00C0      		rjmp .L35
 795               	.LVL85:
 796               	.L57:
 797               		.loc 1 774 28 view .LVU196
 798 01ec 87E2      		ldi r24,lo8(39)
 799 01ee 92E0      		ldi r25,lo8(2)
 800               	.LVL86:
 801               		.loc 1 774 28 view .LVU197
 802 01f0 00C0      		rjmp .L35
 803               	.LVL87:
 804               	.L58:
 805               		.loc 1 774 28 view .LVU198
 806 01f2 8FE6      		ldi r24,lo8(111)
 807 01f4 90E0      		ldi r25,0
 808               	.LVL88:
 809               		.loc 1 774 28 view .LVU199
 810 01f6 00C0      		rjmp .L35
 811               	.LVL89:
 812               	.L59:
 813               		.loc 1 774 28 view .LVU200
 814 01f8 80E7      		ldi r24,lo8(112)
 815 01fa 90E0      		ldi r25,0
 816               	.LVL90:
 817               		.loc 1 774 28 view .LVU201
 818 01fc 00C0      		rjmp .L35
 819               	.LVL91:
 820               	.L60:
 821               		.loc 1 774 28 view .LVU202
 822 01fe 8AE2      		ldi r24,lo8(42)
 823 0200 92E0      		ldi r25,lo8(2)
 824               	.LVL92:
 825               		.loc 1 774 28 view .LVU203
 826 0202 00C0      		rjmp .L35
 827               	.LVL93:
 828               	.L34:
 775:tmk_core/common/action.c ****     }
 776:tmk_core/common/action.c **** 
 777:tmk_core/common/action.c ****     #ifdef MOUSEKEY_ENABLE
 778:tmk_core/common/action.c ****       else if IS_MOUSEKEY(code) {
 829               		.loc 1 778 12 is_stmt 1 view .LVU204
 830               		.loc 1 778 15 is_stmt 0 view .LVU205
 831 0204 803F      		cpi r24,lo8(-16)
 832 0206 00F0      		brlo .L23
 779:tmk_core/common/action.c ****         mousekey_on(code);
 833               		.loc 1 779 9 is_stmt 1 view .LVU206
 834 0208 0E94 0000 		call mousekey_on
 835               	.LVL94:
 780:tmk_core/common/action.c ****         mousekey_send();
 836               		.loc 1 780 9 view .LVU207
 837 020c 0C94 0000 		jmp mousekey_send
 838               	.LVL95:
 839               	.L23:
 840               	/* epilogue start */
 781:tmk_core/common/action.c ****       }
 782:tmk_core/common/action.c ****     #endif
 783:tmk_core/common/action.c **** }
 841               		.loc 1 783 1 is_stmt 0 view .LVU208
 842 0210 0895      		ret
 843               		.cfi_endproc
 844               	.LFE113:
 846               		.section	.text.unregister_code,"ax",@progbits
 847               	.global	unregister_code
 849               	unregister_code:
 850               	.LVL96:
 851               	.LFB114:
 784:tmk_core/common/action.c **** 
 785:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 786:tmk_core/common/action.c ****  *
 787:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 788:tmk_core/common/action.c ****  */
 789:tmk_core/common/action.c **** void unregister_code(uint8_t code)
 790:tmk_core/common/action.c **** {
 852               		.loc 1 790 1 is_stmt 1 view -0
 853               		.cfi_startproc
 854               	/* prologue: function */
 855               	/* frame size = 0 */
 856               	/* stack size = 0 */
 857               	.L__stack_usage = 0
 791:tmk_core/common/action.c ****     if (code == KC_NO) {
 858               		.loc 1 791 5 view .LVU210
 859               		.loc 1 791 8 is_stmt 0 view .LVU211
 860 0000 8823      		tst r24
 861 0002 01F4      		brne .+2
 862 0004 00C0      		rjmp .L63
 792:tmk_core/common/action.c ****         return;
 793:tmk_core/common/action.c ****     }
 794:tmk_core/common/action.c **** 
 795:tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 796:tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 863               		.loc 1 796 10 is_stmt 1 view .LVU212
 864               		.loc 1 796 13 is_stmt 0 view .LVU213
 865 0006 8238      		cpi r24,lo8(-126)
 866 0008 01F4      		brne .L66
 797:tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 798:tmk_core/common/action.c ****         // Resync: ignore if caps lock already is off
 799:tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
 867               		.loc 1 799 9 is_stmt 1 view .LVU214
 868               		.loc 1 799 15 is_stmt 0 view .LVU215
 869 000a 0E94 0000 		call host_keyboard_leds
 870               	.LVL97:
 871               		.loc 1 799 12 view .LVU216
 872 000e 81FF      		sbrs r24,1
 873 0010 00C0      		rjmp .L63
 800:tmk_core/common/action.c **** #endif
 801:tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 874               		.loc 1 801 9 is_stmt 1 view .LVU217
 875 0012 89E3      		ldi r24,lo8(57)
 876 0014 0E94 0000 		call add_key
 877               	.LVL98:
 802:tmk_core/common/action.c ****         send_keyboard_report();
 878               		.loc 1 802 9 view .LVU218
 879 0018 0E94 0000 		call send_keyboard_report
 880               	.LVL99:
 803:tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 881               		.loc 1 803 9 view .LVU219
 882 001c 89E3      		ldi r24,lo8(57)
 883               	.L83:
 804:tmk_core/common/action.c ****         send_keyboard_report();
 805:tmk_core/common/action.c ****     }
 806:tmk_core/common/action.c **** 
 807:tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 808:tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 809:tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
 810:tmk_core/common/action.c **** #endif
 811:tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 812:tmk_core/common/action.c ****         send_keyboard_report();
 813:tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 884               		.loc 1 813 9 is_stmt 0 view .LVU220
 885 001e 0E94 0000 		call del_key
 886               	.LVL100:
 887               	.L84:
 814:tmk_core/common/action.c ****         send_keyboard_report();
 888               		.loc 1 814 9 is_stmt 1 view .LVU221
 889 0022 0C94 0000 		jmp send_keyboard_report
 890               	.LVL101:
 891               	.L66:
 807:tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 892               		.loc 1 807 10 view .LVU222
 807:tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 893               		.loc 1 807 13 is_stmt 0 view .LVU223
 894 0026 8338      		cpi r24,lo8(-125)
 895 0028 01F4      		brne .L68
 809:tmk_core/common/action.c **** #endif
 896               		.loc 1 809 9 is_stmt 1 view .LVU224
 809:tmk_core/common/action.c **** #endif
 897               		.loc 1 809 15 is_stmt 0 view .LVU225
 898 002a 0E94 0000 		call host_keyboard_leds
 899               	.LVL102:
 809:tmk_core/common/action.c **** #endif
 900               		.loc 1 809 12 view .LVU226
 901 002e 80FF      		sbrs r24,0
 902 0030 00C0      		rjmp .L63
 811:tmk_core/common/action.c ****         send_keyboard_report();
 903               		.loc 1 811 9 is_stmt 1 view .LVU227
 904 0032 83E5      		ldi r24,lo8(83)
 905 0034 0E94 0000 		call add_key
 906               	.LVL103:
 812:tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 907               		.loc 1 812 9 view .LVU228
 908 0038 0E94 0000 		call send_keyboard_report
 909               	.LVL104:
 813:tmk_core/common/action.c ****         send_keyboard_report();
 910               		.loc 1 813 9 view .LVU229
 911 003c 83E5      		ldi r24,lo8(83)
 912 003e 00C0      		rjmp .L83
 913               	.LVL105:
 914               	.L68:
 815:tmk_core/common/action.c ****     }
 816:tmk_core/common/action.c **** 
 817:tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 915               		.loc 1 817 10 view .LVU230
 916               		.loc 1 817 13 is_stmt 0 view .LVU231
 917 0040 8438      		cpi r24,lo8(-124)
 918 0042 01F4      		brne .L69
 818:tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 819:tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
 919               		.loc 1 819 9 is_stmt 1 view .LVU232
 920               		.loc 1 819 15 is_stmt 0 view .LVU233
 921 0044 0E94 0000 		call host_keyboard_leds
 922               	.LVL106:
 923               		.loc 1 819 12 view .LVU234
 924 0048 82FF      		sbrs r24,2
 925 004a 00C0      		rjmp .L63
 820:tmk_core/common/action.c **** #endif
 821:tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 926               		.loc 1 821 9 is_stmt 1 view .LVU235
 927 004c 87E4      		ldi r24,lo8(71)
 928 004e 0E94 0000 		call add_key
 929               	.LVL107:
 822:tmk_core/common/action.c ****         send_keyboard_report();
 930               		.loc 1 822 9 view .LVU236
 931 0052 0E94 0000 		call send_keyboard_report
 932               	.LVL108:
 823:tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 933               		.loc 1 823 9 view .LVU237
 934 0056 87E4      		ldi r24,lo8(71)
 935 0058 00C0      		rjmp .L83
 936               	.LVL109:
 937               	.L69:
 824:tmk_core/common/action.c ****         send_keyboard_report();
 825:tmk_core/common/action.c ****     }
 826:tmk_core/common/action.c **** #endif
 827:tmk_core/common/action.c **** 
 828:tmk_core/common/action.c ****     else if IS_KEY(code) {
 938               		.loc 1 828 10 view .LVU238
 939               		.loc 1 828 13 is_stmt 0 view .LVU239
 940 005a 9CEF      		ldi r25,lo8(-4)
 941 005c 980F      		add r25,r24
 942 005e 913A      		cpi r25,lo8(-95)
 943 0060 00F0      		brlo .L83
 829:tmk_core/common/action.c ****         del_key(code);
 830:tmk_core/common/action.c ****         send_keyboard_report();
 831:tmk_core/common/action.c ****     }
 832:tmk_core/common/action.c ****     else if IS_MOD(code) {
 944               		.loc 1 832 10 is_stmt 1 view .LVU240
 945               		.loc 1 832 13 is_stmt 0 view .LVU241
 946 0062 90E2      		ldi r25,lo8(32)
 947 0064 980F      		add r25,r24
 948 0066 9830      		cpi r25,lo8(8)
 949 0068 00F4      		brsh .L71
 833:tmk_core/common/action.c ****         del_mods(MOD_BIT(code));
 950               		.loc 1 833 9 is_stmt 1 view .LVU242
 951               		.loc 1 833 18 is_stmt 0 view .LVU243
 952 006a 8770      		andi r24,lo8(7)
 953               	.LVL110:
 954               		.loc 1 833 9 view .LVU244
 955 006c 91E0      		ldi r25,lo8(1)
 956 006e 00C0      		rjmp 2f
 957               		1:
 958 0070 990F      		lsl r25
 959               		2:
 960 0072 8A95      		dec r24
 961 0074 02F4      		brpl 1b
 962 0076 892F      		mov r24,r25
 963 0078 0E94 0000 		call del_mods
 964               	.LVL111:
 834:tmk_core/common/action.c ****         send_keyboard_report();
 965               		.loc 1 834 9 is_stmt 1 view .LVU245
 966 007c 00C0      		rjmp .L84
 967               	.LVL112:
 968               	.L71:
 835:tmk_core/common/action.c ****     }
 836:tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 969               		.loc 1 836 10 view .LVU246
 970               		.loc 1 836 13 is_stmt 0 view .LVU247
 971 007e 9BE5      		ldi r25,lo8(91)
 972 0080 980F      		add r25,r24
 973 0082 9330      		cpi r25,lo8(3)
 974 0084 00F4      		brsh .L72
 837:tmk_core/common/action.c ****         host_system_send(0);
 975               		.loc 1 837 9 is_stmt 1 view .LVU248
 976 0086 90E0      		ldi r25,0
 977 0088 80E0      		ldi r24,0
 978               	.LVL113:
 979               		.loc 1 837 9 is_stmt 0 view .LVU249
 980 008a 0C94 0000 		jmp host_system_send
 981               	.LVL114:
 982               	.L72:
 838:tmk_core/common/action.c ****     }
 839:tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 983               		.loc 1 839 10 is_stmt 1 view .LVU250
 984               		.loc 1 839 13 is_stmt 0 view .LVU251
 985 008e 98E5      		ldi r25,lo8(88)
 986 0090 980F      		add r25,r24
 987 0092 9731      		cpi r25,lo8(23)
 988 0094 00F4      		brsh .L73
 840:tmk_core/common/action.c ****         host_consumer_send(0);
 989               		.loc 1 840 9 is_stmt 1 view .LVU252
 990 0096 90E0      		ldi r25,0
 991 0098 80E0      		ldi r24,0
 992               	.LVL115:
 993               		.loc 1 840 9 is_stmt 0 view .LVU253
 994 009a 0C94 0000 		jmp host_consumer_send
 995               	.LVL116:
 996               	.L73:
 841:tmk_core/common/action.c ****     }
 842:tmk_core/common/action.c ****     #ifdef MOUSEKEY_ENABLE
 843:tmk_core/common/action.c ****       else if IS_MOUSEKEY(code) {
 997               		.loc 1 843 12 is_stmt 1 view .LVU254
 998               		.loc 1 843 15 is_stmt 0 view .LVU255
 999 009e 803F      		cpi r24,lo8(-16)
 1000 00a0 00F0      		brlo .L63
 844:tmk_core/common/action.c ****         mousekey_off(code);
 1001               		.loc 1 844 9 is_stmt 1 view .LVU256
 1002 00a2 0E94 0000 		call mousekey_off
 1003               	.LVL117:
 845:tmk_core/common/action.c ****         mousekey_send();
 1004               		.loc 1 845 9 view .LVU257
 1005 00a6 0C94 0000 		jmp mousekey_send
 1006               	.LVL118:
 1007               	.L63:
 1008               	/* epilogue start */
 846:tmk_core/common/action.c ****       }
 847:tmk_core/common/action.c ****     #endif
 848:tmk_core/common/action.c **** }
 1009               		.loc 1 848 1 is_stmt 0 view .LVU258
 1010 00aa 0895      		ret
 1011               		.cfi_endproc
 1012               	.LFE114:
 1014               		.section	.text.tap_code,"ax",@progbits
 1015               	.global	tap_code
 1017               	tap_code:
 1018               	.LVL119:
 1019               	.LFB115:
 849:tmk_core/common/action.c **** 
 850:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 851:tmk_core/common/action.c ****  *
 852:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 853:tmk_core/common/action.c ****  */
 854:tmk_core/common/action.c **** void tap_code(uint8_t code) {
 1020               		.loc 1 854 29 is_stmt 1 view -0
 1021               		.cfi_startproc
 1022               		.loc 1 854 29 is_stmt 0 view .LVU260
 1023 0000 CF93      		push r28
 1024               	.LCFI6:
 1025               		.cfi_def_cfa_offset 3
 1026               		.cfi_offset 28, -2
 1027               	/* prologue: function */
 1028               	/* frame size = 0 */
 1029               	/* stack size = 1 */
 1030               	.L__stack_usage = 1
 1031 0002 C82F      		mov r28,r24
 855:tmk_core/common/action.c ****   register_code(code);
 1032               		.loc 1 855 3 is_stmt 1 view .LVU261
 1033 0004 0E94 0000 		call register_code
 1034               	.LVL120:
 856:tmk_core/common/action.c ****   #if TAP_CODE_DELAY > 0
 857:tmk_core/common/action.c ****     wait_ms(TAP_CODE_DELAY);
 858:tmk_core/common/action.c ****   #endif
 859:tmk_core/common/action.c ****   unregister_code(code);
 1035               		.loc 1 859 3 view .LVU262
 1036 0008 8C2F      		mov r24,r28
 1037               	/* epilogue start */
 860:tmk_core/common/action.c **** }
 1038               		.loc 1 860 1 is_stmt 0 view .LVU263
 1039 000a CF91      		pop r28
 1040               	.LVL121:
 859:tmk_core/common/action.c **** }
 1041               		.loc 1 859 3 view .LVU264
 1042 000c 0C94 0000 		jmp unregister_code
 1043               	.LVL122:
 859:tmk_core/common/action.c **** }
 1044               		.loc 1 859 3 view .LVU265
 1045               		.cfi_endproc
 1046               	.LFE115:
 1048               		.section	.text.register_mods,"ax",@progbits
 1049               	.global	register_mods
 1051               	register_mods:
 1052               	.LVL123:
 1053               	.LFB116:
 861:tmk_core/common/action.c **** 
 862:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 863:tmk_core/common/action.c ****  *
 864:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 865:tmk_core/common/action.c ****  */
 866:tmk_core/common/action.c **** void register_mods(uint8_t mods)
 867:tmk_core/common/action.c **** {
 1054               		.loc 1 867 1 is_stmt 1 view -0
 1055               		.cfi_startproc
 1056               	/* prologue: function */
 1057               	/* frame size = 0 */
 1058               	/* stack size = 0 */
 1059               	.L__stack_usage = 0
 868:tmk_core/common/action.c ****     if (mods) {
 1060               		.loc 1 868 5 view .LVU267
 1061               		.loc 1 868 8 is_stmt 0 view .LVU268
 1062 0000 8823      		tst r24
 1063 0002 01F0      		breq .L86
 869:tmk_core/common/action.c ****         add_mods(mods);
 1064               		.loc 1 869 9 is_stmt 1 view .LVU269
 1065 0004 0E94 0000 		call add_mods
 1066               	.LVL124:
 870:tmk_core/common/action.c ****         send_keyboard_report();
 1067               		.loc 1 870 9 view .LVU270
 1068 0008 0C94 0000 		jmp send_keyboard_report
 1069               	.LVL125:
 1070               	.L86:
 1071               	/* epilogue start */
 871:tmk_core/common/action.c ****     }
 872:tmk_core/common/action.c **** }
 1072               		.loc 1 872 1 is_stmt 0 view .LVU271
 1073 000c 0895      		ret
 1074               		.cfi_endproc
 1075               	.LFE116:
 1077               		.section	.text.unregister_mods,"ax",@progbits
 1078               	.global	unregister_mods
 1080               	unregister_mods:
 1081               	.LVL126:
 1082               	.LFB117:
 873:tmk_core/common/action.c **** 
 874:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 875:tmk_core/common/action.c ****  *
 876:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 877:tmk_core/common/action.c ****  */
 878:tmk_core/common/action.c **** void unregister_mods(uint8_t mods)
 879:tmk_core/common/action.c **** {
 1083               		.loc 1 879 1 is_stmt 1 view -0
 1084               		.cfi_startproc
 1085               	/* prologue: function */
 1086               	/* frame size = 0 */
 1087               	/* stack size = 0 */
 1088               	.L__stack_usage = 0
 880:tmk_core/common/action.c ****     if (mods) {
 1089               		.loc 1 880 5 view .LVU273
 1090               		.loc 1 880 8 is_stmt 0 view .LVU274
 1091 0000 8823      		tst r24
 1092 0002 01F0      		breq .L88
 881:tmk_core/common/action.c ****         del_mods(mods);
 1093               		.loc 1 881 9 is_stmt 1 view .LVU275
 1094 0004 0E94 0000 		call del_mods
 1095               	.LVL127:
 882:tmk_core/common/action.c ****         send_keyboard_report();
 1096               		.loc 1 882 9 view .LVU276
 1097 0008 0C94 0000 		jmp send_keyboard_report
 1098               	.LVL128:
 1099               	.L88:
 1100               	/* epilogue start */
 883:tmk_core/common/action.c ****     }
 884:tmk_core/common/action.c **** }
 1101               		.loc 1 884 1 is_stmt 0 view .LVU277
 1102 000c 0895      		ret
 1103               		.cfi_endproc
 1104               	.LFE117:
 1106               		.section	.text.process_action,"ax",@progbits
 1107               	.global	process_action
 1109               	process_action:
 1110               	.LVL129:
 1111               	.LFB112:
 195:tmk_core/common/action.c ****     keyevent_t event = record->event;
 1112               		.loc 1 195 1 is_stmt 1 view -0
 1113               		.cfi_startproc
 195:tmk_core/common/action.c ****     keyevent_t event = record->event;
 1114               		.loc 1 195 1 is_stmt 0 view .LVU279
 1115 0000 8F92      		push r8
 1116               	.LCFI7:
 1117               		.cfi_def_cfa_offset 3
 1118               		.cfi_offset 8, -2
 1119 0002 9F92      		push r9
 1120               	.LCFI8:
 1121               		.cfi_def_cfa_offset 4
 1122               		.cfi_offset 9, -3
 1123 0004 AF92      		push r10
 1124               	.LCFI9:
 1125               		.cfi_def_cfa_offset 5
 1126               		.cfi_offset 10, -4
 1127 0006 BF92      		push r11
 1128               	.LCFI10:
 1129               		.cfi_def_cfa_offset 6
 1130               		.cfi_offset 11, -5
 1131 0008 CF92      		push r12
 1132               	.LCFI11:
 1133               		.cfi_def_cfa_offset 7
 1134               		.cfi_offset 12, -6
 1135 000a DF92      		push r13
 1136               	.LCFI12:
 1137               		.cfi_def_cfa_offset 8
 1138               		.cfi_offset 13, -7
 1139 000c EF92      		push r14
 1140               	.LCFI13:
 1141               		.cfi_def_cfa_offset 9
 1142               		.cfi_offset 14, -8
 1143 000e FF92      		push r15
 1144               	.LCFI14:
 1145               		.cfi_def_cfa_offset 10
 1146               		.cfi_offset 15, -9
 1147 0010 0F93      		push r16
 1148               	.LCFI15:
 1149               		.cfi_def_cfa_offset 11
 1150               		.cfi_offset 16, -10
 1151 0012 1F93      		push r17
 1152               	.LCFI16:
 1153               		.cfi_def_cfa_offset 12
 1154               		.cfi_offset 17, -11
 1155 0014 CF93      		push r28
 1156               	.LCFI17:
 1157               		.cfi_def_cfa_offset 13
 1158               		.cfi_offset 28, -12
 1159 0016 DF93      		push r29
 1160               	.LCFI18:
 1161               		.cfi_def_cfa_offset 14
 1162               		.cfi_offset 29, -13
 1163               	/* prologue: function */
 1164               	/* frame size = 0 */
 1165               	/* stack size = 12 */
 1166               	.L__stack_usage = 12
 1167 0018 7C01      		movw r14,r24
 1168 001a D62F      		mov r29,r22
 195:tmk_core/common/action.c ****     keyevent_t event = record->event;
 1169               		.loc 1 195 1 view .LVU280
 1170 001c C72F      		mov r28,r23
 196:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 1171               		.loc 1 196 5 is_stmt 1 view .LVU281
 1172               	.LVL130:
 198:tmk_core/common/action.c **** #endif
 1173               		.loc 1 198 5 view .LVU282
 198:tmk_core/common/action.c **** #endif
 1174               		.loc 1 198 36 is_stmt 0 view .LVU283
 1175 001e FC01      		movw r30,r24
 1176 0020 0581      		ldd r16,Z+5
 1177 0022 0295      		swap r16
 1178 0024 0F70      		andi r16,lo8(15)
 1179               	.LVL131:
 201:tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 1180               		.loc 1 201 5 is_stmt 1 view .LVU284
 201:tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 1181               		.loc 1 201 14 is_stmt 0 view .LVU285
 1182 0026 1281      		ldd r17,Z+2
 201:tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 1183               		.loc 1 201 8 view .LVU286
 1184 0028 1111      		cpse r17,__zero_reg__
 203:tmk_core/common/action.c ****     }
 1185               		.loc 1 203 9 is_stmt 1 view .LVU287
 1186 002a 0E94 0000 		call clear_weak_mods
 1187               	.LVL132:
 1188               	.L91:
 207:tmk_core/common/action.c ****     // notice we only clear the one shot layer if the pressed key is not a modifier.
 1189               		.loc 1 207 5 view .LVU288
 209:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1190               		.loc 1 209 5 view .LVU289
 209:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1191               		.loc 1 209 9 is_stmt 0 view .LVU290
 1192 002e 0E94 0000 		call is_oneshot_layer_active
 1193               	.LVL133:
 209:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1194               		.loc 1 209 9 view .LVU291
 1195 0032 C82E      		mov r12,r24
 209:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1196               		.loc 1 209 8 view .LVU292
 1197 0034 8823      		tst r24
 1198 0036 01F0      		breq .L92
 209:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1199               		.loc 1 209 35 discriminator 1 view .LVU293
 1200 0038 1123      		tst r17
 1201 003a 01F0      		breq .L187
 209:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1202               		.loc 1 209 55 discriminator 2 view .LVU294
 1203 003c 80E2      		ldi r24,lo8(32)
 209:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1204               		.loc 1 209 55 discriminator 2 view .LVU295
 1205 003e 8D0F      		add r24,r29
 209:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1206               		.loc 1 209 52 discriminator 2 view .LVU296
 1207 0040 8830      		cpi r24,lo8(8)
 1208 0042 00F0      		brlo .L187
 210:tmk_core/common/action.c ****         do_release_oneshot = !is_oneshot_layer_active();
 1209               		.loc 1 210 9 is_stmt 1 view .LVU297
 1210 0044 82E0      		ldi r24,lo8(2)
 1211 0046 0E94 0000 		call clear_oneshot_layer_state
 1212               	.LVL134:
 211:tmk_core/common/action.c ****     }
 1213               		.loc 1 211 9 view .LVU298
 211:tmk_core/common/action.c ****     }
 1214               		.loc 1 211 31 is_stmt 0 view .LVU299
 1215 004a 0E94 0000 		call is_oneshot_layer_active
 1216               	.LVL135:
 211:tmk_core/common/action.c ****     }
 1217               		.loc 1 211 9 view .LVU300
 1218 004e 91E0      		ldi r25,lo8(1)
 1219 0050 C82E      		mov r12,r24
 1220 0052 C926      		eor r12,r25
 1221               	.LVL136:
 1222               	.L92:
 215:tmk_core/common/action.c ****         /* Key and Mods */
 1223               		.loc 1 215 5 is_stmt 1 view .LVU301
 215:tmk_core/common/action.c ****         /* Key and Mods */
 1224               		.loc 1 215 24 is_stmt 0 view .LVU302
 1225 0054 DC2E      		mov r13,r28
 1226 0056 D294      		swap r13
 1227 0058 9FE0      		ldi r25,lo8(15)
 1228 005a D922      		and r13,r25
 215:tmk_core/common/action.c ****         /* Key and Mods */
 1229               		.loc 1 215 5 view .LVU303
 1230 005c ED2D      		mov r30,r13
 1231 005e F0E0      		ldi r31,0
 1232 0060 E050      		subi r30,lo8(-(gs(.L95)))
 1233 0062 F040      		sbci r31,hi8(-(gs(.L95)))
 1234 0064 0C94 0000 		jmp __tablejump2__
 1235               		.section	.jumptables.gcc.process_action,"a",@progbits
 1236               		.p2align	1
 1237               	.L95:
 1238 0000 0000      		.word gs(.L103)
 1239 0002 0000      		.word gs(.L103)
 1240 0004 0000      		.word gs(.L102)
 1241 0006 0000      		.word gs(.L102)
 1242 0008 0000      		.word gs(.L101)
 1243 000a 0000      		.word gs(.L100)
 1244 000c 0000      		.word gs(.L99)
 1245 000e 0000      		.word gs(.L93)
 1246 0010 0000      		.word gs(.L98)
 1247 0012 0000      		.word gs(.L93)
 1248 0014 0000      		.word gs(.L97)
 1249 0016 0000      		.word gs(.L97)
 1250 0018 0000      		.word gs(.L96)
 1251 001a 0000      		.word gs(.L93)
 1252 001c 0000      		.word gs(.L93)
 1253 001e 0000      		.word gs(.L94)
 1254               		.section	.text.process_action
 1255               	.LVL137:
 1256               	.L187:
 207:tmk_core/common/action.c ****     // notice we only clear the one shot layer if the pressed key is not a modifier.
 1257               		.loc 1 207 10 view .LVU304
 1258 0068 C12C      		mov r12,__zero_reg__
 1259 006a 00C0      		rjmp .L92
 1260               	.LVL138:
 1261               	.L103:
 1262               	.LBB24:
 220:tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 1263               		.loc 1 220 17 is_stmt 1 view .LVU305
 1264 006c 0C2F      		mov r16,r28
 1265               	.LVL139:
 220:tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 1266               		.loc 1 220 17 is_stmt 0 view .LVU306
 1267 006e 0F70      		andi r16,lo8(15)
 220:tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 1268               		.loc 1 220 48 view .LVU307
 1269 0070 C07F      		andi r28,lo8(-16)
 1270               	.LVL140:
 220:tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 1271               		.loc 1 220 25 view .LVU308
 1272 0072 01F0      		breq .L104
 220:tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 1273               		.loc 1 220 25 discriminator 2 view .LVU309
 1274 0074 0295      		swap r16
 1275 0076 007F      		andi r16,lo8(-16)
 1276               	.L104:
 1277               	.LVL141:
 222:tmk_core/common/action.c ****                     if (mods) {
 1278               		.loc 1 222 17 is_stmt 1 discriminator 4 view .LVU310
 222:tmk_core/common/action.c ****                     if (mods) {
 1279               		.loc 1 222 20 is_stmt 0 discriminator 4 view .LVU311
 1280 0078 1123      		tst r17
 1281 007a 01F0      		breq .L105
 223:tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 1282               		.loc 1 223 21 is_stmt 1 view .LVU312
 223:tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 1283               		.loc 1 223 24 is_stmt 0 view .LVU313
 1284 007c 0023      		tst r16
 1285 007e 01F0      		breq .L242
 224:tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 1286               		.loc 1 224 25 is_stmt 1 view .LVU314
 224:tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 1287               		.loc 1 224 29 is_stmt 0 view .LVU315
 1288 0080 80E2      		ldi r24,lo8(32)
 1289 0082 8D0F      		add r24,r29
 224:tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 1290               		.loc 1 224 28 view .LVU316
 1291 0084 8830      		cpi r24,lo8(8)
 1292 0086 00F0      		brlo .L107
 224:tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 1293               		.loc 1 224 53 discriminator 1 view .LVU317
 1294 0088 D111      		cpse r29,__zero_reg__
 1295 008a 00C0      		rjmp .L108
 1296               	.L107:
 228:tmk_core/common/action.c ****                         } else {
 1297               		.loc 1 228 29 is_stmt 1 view .LVU318
 1298 008c 802F      		mov r24,r16
 1299 008e 0E94 0000 		call add_mods
 1300               	.LVL142:
 1301               	.L109:
 232:tmk_core/common/action.c ****                     }
 1302               		.loc 1 232 25 view .LVU319
 1303 0092 0E94 0000 		call send_keyboard_report
 1304               	.LVL143:
 234:tmk_core/common/action.c ****                 } else {
 1305               		.loc 1 234 21 view .LVU320
 1306               	.L242:
 234:tmk_core/common/action.c ****                 } else {
 1307               		.loc 1 234 21 is_stmt 0 view .LVU321
 1308               	.LBE24:
 511:tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 1309               		.loc 1 511 75 is_stmt 1 view .LVU322
 512:tmk_core/common/action.c ****                         } else {
 1310               		.loc 1 512 29 view .LVU323
 1311 0096 8D2F      		mov r24,r29
 1312 0098 0E94 0000 		call register_code
 1313               	.LVL144:
 1314 009c 00C0      		rjmp .L93
 1315               	.LVL145:
 1316               	.L108:
 1317               	.LBB25:
 230:tmk_core/common/action.c ****                         }
 1318               		.loc 1 230 29 view .LVU324
 1319 009e 802F      		mov r24,r16
 1320 00a0 0E94 0000 		call add_weak_mods
 1321               	.LVL146:
 1322 00a4 00C0      		rjmp .L109
 1323               	.L105:
 236:tmk_core/common/action.c ****                     if (mods) {
 1324               		.loc 1 236 21 view .LVU325
 1325 00a6 8D2F      		mov r24,r29
 1326 00a8 0E94 0000 		call unregister_code
 1327               	.LVL147:
 237:tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 1328               		.loc 1 237 21 view .LVU326
 237:tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 1329               		.loc 1 237 24 is_stmt 0 view .LVU327
 1330 00ac 0023      		tst r16
 1331 00ae 01F0      		breq .L93
 238:tmk_core/common/action.c ****                             del_mods(mods);
 1332               		.loc 1 238 25 is_stmt 1 view .LVU328
 238:tmk_core/common/action.c ****                             del_mods(mods);
 1333               		.loc 1 238 29 is_stmt 0 view .LVU329
 1334 00b0 80E2      		ldi r24,lo8(32)
 1335 00b2 8D0F      		add r24,r29
 238:tmk_core/common/action.c ****                             del_mods(mods);
 1336               		.loc 1 238 28 view .LVU330
 1337 00b4 8830      		cpi r24,lo8(8)
 1338 00b6 00F0      		brlo .L111
 238:tmk_core/common/action.c ****                             del_mods(mods);
 1339               		.loc 1 238 53 discriminator 1 view .LVU331
 1340 00b8 D111      		cpse r29,__zero_reg__
 1341 00ba 00C0      		rjmp .L112
 1342               	.L111:
 239:tmk_core/common/action.c ****                         } else {
 1343               		.loc 1 239 29 is_stmt 1 view .LVU332
 1344 00bc 802F      		mov r24,r16
 1345 00be 0E94 0000 		call del_mods
 1346               	.LVL148:
 1347               	.L113:
 243:tmk_core/common/action.c ****                     }
 1348               		.loc 1 243 25 view .LVU333
 1349 00c2 0E94 0000 		call send_keyboard_report
 1350               	.LVL149:
 1351               	.L93:
 243:tmk_core/common/action.c ****                     }
 1352               		.loc 1 243 25 is_stmt 0 view .LVU334
 1353               	.LBE25:
 641:tmk_core/common/action.c ****         case ACT_LAYER:
 1354               		.loc 1 641 5 is_stmt 1 view .LVU335
 1355 00c6 F8E0      		ldi r31,lo8(8)
 1356 00c8 DF16      		cp r13,r31
 1357 00ca 01F0      		breq .L181
 1358 00cc DF16      		cp r13,r31
 1359 00ce 00F0      		brlo .L182
 1360 00d0 86EF      		ldi r24,lo8(-10)
 1361 00d2 8D0D      		add r24,r13
 1362 00d4 8F70      		andi r24,lo8(15)
 1363 00d6 8230      		cpi r24,lo8(2)
 1364 00d8 00F4      		brsh .L182
 1365               	.L181:
 647:tmk_core/common/action.c ****             break;
 1366               		.loc 1 647 13 view .LVU336
 1367 00da 0E94 0000 		call host_keyboard_leds
 1368               	.LVL150:
 1369 00de 0E94 0000 		call led_set
 1370               	.LVL151:
 648:tmk_core/common/action.c ****         default:
 1371               		.loc 1 648 13 view .LVU337
 1372               	.L182:
 684:tmk_core/common/action.c ****         record->event.pressed = false;
 1373               		.loc 1 684 5 view .LVU338
 684:tmk_core/common/action.c ****         record->event.pressed = false;
 1374               		.loc 1 684 8 is_stmt 0 view .LVU339
 1375 00e2 CC20      		tst r12
 1376 00e4 01F4      		brne .+2
 1377 00e6 00C0      		rjmp .L90
 684:tmk_core/common/action.c ****         record->event.pressed = false;
 1378               		.loc 1 684 33 discriminator 1 view .LVU340
 1379 00e8 0E94 0000 		call get_oneshot_layer_state
 1380               	.LVL152:
 684:tmk_core/common/action.c ****         record->event.pressed = false;
 1381               		.loc 1 684 28 discriminator 1 view .LVU341
 1382 00ec 80FD      		sbrc r24,0
 1383 00ee 00C0      		rjmp .L90
 685:tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 1384               		.loc 1 685 9 is_stmt 1 view .LVU342
 685:tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 1385               		.loc 1 685 31 is_stmt 0 view .LVU343
 1386 00f0 F701      		movw r30,r14
 1387 00f2 1282      		std Z+2,__zero_reg__
 686:tmk_core/common/action.c ****         process_record(record);
 1388               		.loc 1 686 9 is_stmt 1 view .LVU344
 1389 00f4 0E94 0000 		call get_oneshot_layer
 1390               	.LVL153:
 1391 00f8 0E94 0000 		call layer_on
 1392               	.LVL154:
 687:tmk_core/common/action.c ****         layer_off(get_oneshot_layer());
 1393               		.loc 1 687 9 view .LVU345
 1394 00fc C701      		movw r24,r14
 1395 00fe 0E94 0000 		call process_record
 1396               	.LVL155:
 688:tmk_core/common/action.c ****     }
 1397               		.loc 1 688 9 view .LVU346
 1398 0102 0E94 0000 		call get_oneshot_layer
 1399               	.LVL156:
 1400               	/* epilogue start */
 691:tmk_core/common/action.c **** 
 1401               		.loc 1 691 1 is_stmt 0 view .LVU347
 1402 0106 DF91      		pop r29
 1403               	.LVL157:
 691:tmk_core/common/action.c **** 
 1404               		.loc 1 691 1 view .LVU348
 1405 0108 CF91      		pop r28
 691:tmk_core/common/action.c **** 
 1406               		.loc 1 691 1 view .LVU349
 1407 010a 1F91      		pop r17
 1408 010c 0F91      		pop r16
 1409 010e FF90      		pop r15
 1410 0110 EF90      		pop r14
 1411               	.LVL158:
 691:tmk_core/common/action.c **** 
 1412               		.loc 1 691 1 view .LVU350
 1413 0112 DF90      		pop r13
 1414 0114 CF90      		pop r12
 1415               	.LVL159:
 691:tmk_core/common/action.c **** 
 1416               		.loc 1 691 1 view .LVU351
 1417 0116 BF90      		pop r11
 1418 0118 AF90      		pop r10
 1419 011a 9F90      		pop r9
 1420 011c 8F90      		pop r8
 688:tmk_core/common/action.c ****     }
 1421               		.loc 1 688 9 view .LVU352
 1422 011e 0C94 0000 		jmp layer_off
 1423               	.LVL160:
 1424               	.L112:
 1425               	.LBB26:
 241:tmk_core/common/action.c ****                         }
 1426               		.loc 1 241 29 is_stmt 1 view .LVU353
 1427 0122 802F      		mov r24,r16
 1428 0124 0E94 0000 		call del_weak_mods
 1429               	.LVL161:
 1430 0128 00C0      		rjmp .L113
 1431               	.LVL162:
 1432               	.L102:
 241:tmk_core/common/action.c ****                         }
 1433               		.loc 1 241 29 is_stmt 0 view .LVU354
 1434               	.LBE26:
 1435               	.LBB27:
 252:tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 1436               		.loc 1 252 17 is_stmt 1 view .LVU355
 1437 012a FC2F      		mov r31,r28
 1438 012c FF70      		andi r31,lo8(15)
 1439 012e BF2E      		mov r11,r31
 252:tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 1440               		.loc 1 252 48 is_stmt 0 view .LVU356
 1441 0130 C07F      		andi r28,lo8(-16)
 1442               	.LVL163:
 252:tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 1443               		.loc 1 252 25 view .LVU357
 1444 0132 C032      		cpi r28,lo8(32)
 1445 0134 01F0      		breq .L114
 252:tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 1446               		.loc 1 252 25 discriminator 2 view .LVU358
 1447 0136 B294      		swap r11
 1448 0138 80EF      		ldi r24,lo8(-16)
 1449 013a B822      		and r11,r24
 1450               	.L114:
 1451               	.LVL164:
 254:tmk_core/common/action.c ****     #ifndef NO_ACTION_ONESHOT
 1452               		.loc 1 254 17 is_stmt 1 discriminator 4 view .LVU359
 1453 013c DD23      		tst r29
 1454 013e 01F0      		breq .L115
 1455 0140 D130      		cpi r29,lo8(1)
 1456 0142 01F0      		breq .L116
 309:tmk_core/common/action.c ****                             if (tap_count > 0) {
 1457               		.loc 1 309 25 view .LVU360
 309:tmk_core/common/action.c ****                             if (tap_count > 0) {
 1458               		.loc 1 309 28 is_stmt 0 view .LVU361
 1459 0144 1123      		tst r17
 1460 0146 01F0      		breq .L124
 310:tmk_core/common/action.c **** #ifndef IGNORE_MOD_TAP_INTERRUPT
 1461               		.loc 1 310 29 is_stmt 1 view .LVU362
 310:tmk_core/common/action.c **** #ifndef IGNORE_MOD_TAP_INTERRUPT
 1462               		.loc 1 310 32 is_stmt 0 view .LVU363
 1463 0148 0023      		tst r16
 1464 014a 01F0      		breq .L243
 1465 014c 00C0      		rjmp .L242
 1466               	.L115:
 258:tmk_core/common/action.c ****                             if (tap_count == 0) {
 1467               		.loc 1 258 25 is_stmt 1 view .LVU364
 258:tmk_core/common/action.c ****                             if (tap_count == 0) {
 1468               		.loc 1 258 28 is_stmt 0 view .LVU365
 1469 014e 1123      		tst r17
 1470 0150 01F0      		breq .L118
 259:tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: 0\n");
 1471               		.loc 1 259 29 is_stmt 1 view .LVU366
 259:tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: 0\n");
 1472               		.loc 1 259 32 is_stmt 0 view .LVU367
 1473 0152 0111      		cpse r16,__zero_reg__
 1474 0154 00C0      		rjmp .L119
 1475               	.L120:
 273:tmk_core/common/action.c ****                             }
 1476               		.loc 1 273 33 is_stmt 1 view .LVU368
 273:tmk_core/common/action.c ****                             }
 1477               		.loc 1 273 54 is_stmt 0 view .LVU369
 1478 0156 0E94 0000 		call get_oneshot_mods
 1479               	.LVL165:
 273:tmk_core/common/action.c ****                             }
 1480               		.loc 1 273 33 view .LVU370
 1481 015a 8B29      		or r24,r11
 1482               	.LVL166:
 1483               	.L240:
 300:tmk_core/common/action.c ****                             }
 1484               		.loc 1 300 33 view .LVU371
 1485 015c 0E94 0000 		call register_mods
 1486               	.LVL167:
 1487 0160 00C0      		rjmp .L93
 1488               	.LVL168:
 1489               	.L119:
 262:tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 1490               		.loc 1 262 36 is_stmt 1 view .LVU372
 262:tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 1491               		.loc 1 262 39 is_stmt 0 view .LVU373
 1492 0162 0130      		cpi r16,lo8(1)
 1493 0164 01F4      		brne .L120
 263:tmk_core/common/action.c ****                                 set_oneshot_mods(mods | get_oneshot_mods());
 1494               		.loc 1 263 69 is_stmt 1 view .LVU374
 264:tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 1495               		.loc 1 264 33 view .LVU375
 264:tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 1496               		.loc 1 264 57 is_stmt 0 view .LVU376
 1497 0166 0E94 0000 		call get_oneshot_mods
 1498               	.LVL169:
 264:tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 1499               		.loc 1 264 33 view .LVU377
 1500 016a 8B29      		or r24,r11
 1501 016c 0E94 0000 		call set_oneshot_mods
 1502               	.LVL170:
 1503 0170 00C0      		rjmp .L93
 1504               	.L118:
 276:tmk_core/common/action.c ****                                 clear_oneshot_mods();
 1505               		.loc 1 276 29 is_stmt 1 view .LVU378
 276:tmk_core/common/action.c ****                                 clear_oneshot_mods();
 1506               		.loc 1 276 32 is_stmt 0 view .LVU379
 1507 0172 0111      		cpse r16,__zero_reg__
 1508 0174 00C0      		rjmp .L121
 1509               	.L247:
 291:tmk_core/common/action.c ****                                 unregister_mods(mods);
 1510               		.loc 1 291 33 is_stmt 1 view .LVU380
 1511 0176 0E94 0000 		call clear_oneshot_mods
 1512               	.LVL171:
 292:tmk_core/common/action.c ****                             }
 1513               		.loc 1 292 33 view .LVU381
 1514               	.L126:
 332:tmk_core/common/action.c ****                                 unregister_mods(mods);
 1515               		.loc 1 332 71 view .LVU382
 333:tmk_core/common/action.c ****                             }
 1516               		.loc 1 333 33 view .LVU383
 1517 017a 8B2D      		mov r24,r11
 1518               	.LVL172:
 1519               	.L241:
 333:tmk_core/common/action.c ****                             }
 1520               		.loc 1 333 33 is_stmt 0 view .LVU384
 1521               	.LBE27:
 442:tmk_core/common/action.c ****                     }
 1522               		.loc 1 442 25 view .LVU385
 1523 017c 0E94 0000 		call unregister_mods
 1524               	.LVL173:
 1525 0180 00C0      		rjmp .L93
 1526               	.LVL174:
 1527               	.L121:
 1528               	.LBB28:
 279:tmk_core/common/action.c ****                                 // Retain Oneshot mods
 1529               		.loc 1 279 36 is_stmt 1 view .LVU386
 279:tmk_core/common/action.c ****                                 // Retain Oneshot mods
 1530               		.loc 1 279 39 is_stmt 0 view .LVU387
 1531 0182 0130      		cpi r16,lo8(1)
 1532 0184 01F4      		brne .+2
 1533 0186 00C0      		rjmp .L93
 1534 0188 00C0      		rjmp .L247
 1535               	.L116:
 298:tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 1536               		.loc 1 298 25 is_stmt 1 view .LVU388
 298:tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 1537               		.loc 1 298 28 is_stmt 0 view .LVU389
 1538 018a 1123      		tst r17
 1539 018c 01F0      		breq .L123
 299:tmk_core/common/action.c ****                                 register_mods(mods);
 1540               		.loc 1 299 29 is_stmt 1 view .LVU390
 299:tmk_core/common/action.c ****                                 register_mods(mods);
 1541               		.loc 1 299 32 is_stmt 0 view .LVU391
 1542 018e 0230      		cpi r16,lo8(2)
 1543 0190 00F0      		brlo .+2
 1544 0192 00C0      		rjmp .L93
 1545               	.L243:
 300:tmk_core/common/action.c ****                             }
 1546               		.loc 1 300 33 is_stmt 1 view .LVU392
 1547 0194 8B2D      		mov r24,r11
 1548 0196 00C0      		rjmp .L240
 1549               	.L123:
 303:tmk_core/common/action.c ****                                 unregister_mods(mods);
 1550               		.loc 1 303 29 view .LVU393
 303:tmk_core/common/action.c ****                                 unregister_mods(mods);
 1551               		.loc 1 303 32 is_stmt 0 view .LVU394
 1552 0198 0111      		cpse r16,__zero_reg__
 1553 019a 00C0      		rjmp .L93
 1554 019c 00C0      		rjmp .L126
 1555               	.L124:
 328:tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 1556               		.loc 1 328 29 is_stmt 1 view .LVU395
 328:tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 1557               		.loc 1 328 32 is_stmt 0 view .LVU396
 1558 019e 0023      		tst r16
 1559 01a0 01F0      		breq .L126
 1560               	.LVL175:
 1561               	.L167:
 328:tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 1562               		.loc 1 328 32 view .LVU397
 1563               	.LBE28:
 523:tmk_core/common/action.c ****                         } else {
 1564               		.loc 1 523 29 is_stmt 1 view .LVU398
 1565 01a2 8D2F      		mov r24,r29
 1566 01a4 0E94 0000 		call unregister_code
 1567               	.LVL176:
 1568 01a8 00C0      		rjmp .L93
 1569               	.L101:
 344:tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 1570               		.loc 1 344 13 view .LVU399
 344:tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 1571               		.loc 1 344 33 is_stmt 0 view .LVU400
 1572 01aa 8C2F      		mov r24,r28
 1573 01ac 8695      		lsr r24
 1574 01ae 8695      		lsr r24
 1575 01b0 8370      		andi r24,lo8(3)
 1576 01b2 01F0      		breq .L127
 1577 01b4 8130      		cpi r24,lo8(1)
 1578 01b6 01F0      		breq .+2
 1579 01b8 00C0      		rjmp .L93
 353:tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 1580               		.loc 1 353 21 is_stmt 1 view .LVU401
 354:tmk_core/common/action.c ****                     } else {
 1581               		.loc 1 354 25 is_stmt 0 view .LVU402
 1582 01ba 8D2F      		mov r24,r29
 1583 01bc 9C2F      		mov r25,r28
 1584 01be 9370      		andi r25,lo8(3)
 353:tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 1585               		.loc 1 353 24 view .LVU403
 1586 01c0 1111      		cpse r17,__zero_reg__
 1587 01c2 00C0      		rjmp .L244
 356:tmk_core/common/action.c ****                     }
 1588               		.loc 1 356 25 is_stmt 1 view .LVU404
 1589 01c4 90E0      		ldi r25,0
 1590 01c6 80E0      		ldi r24,0
 1591               	.L244:
 1592 01c8 0E94 0000 		call host_consumer_send
 1593               	.LVL177:
 1594 01cc 00C0      		rjmp .L93
 1595               	.L127:
 346:tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 1596               		.loc 1 346 21 view .LVU405
 347:tmk_core/common/action.c ****                     } else {
 1597               		.loc 1 347 25 is_stmt 0 view .LVU406
 1598 01ce 8D2F      		mov r24,r29
 1599 01d0 9C2F      		mov r25,r28
 1600 01d2 9370      		andi r25,lo8(3)
 346:tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 1601               		.loc 1 346 24 view .LVU407
 1602 01d4 1111      		cpse r17,__zero_reg__
 1603 01d6 00C0      		rjmp .L236
 349:tmk_core/common/action.c ****                     }
 1604               		.loc 1 349 25 is_stmt 1 view .LVU408
 1605 01d8 90E0      		ldi r25,0
 1606 01da 80E0      		ldi r24,0
 1607               	.L236:
 1608 01dc 0E94 0000 		call host_system_send
 1609               	.LVL178:
 1610 01e0 00C0      		rjmp .L93
 1611               	.L100:
 365:tmk_core/common/action.c ****                 switch (action.key.code) {
 1612               		.loc 1 365 13 view .LVU409
 365:tmk_core/common/action.c ****                 switch (action.key.code) {
 1613               		.loc 1 365 16 is_stmt 0 view .LVU410
 1614 01e2 1123      		tst r17
 1615 01e4 01F0      		breq .L131
 366:tmk_core/common/action.c ****                     case KC_MS_BTN1:
 1616               		.loc 1 366 17 is_stmt 1 view .LVU411
 1617 01e6 D53F      		cpi r29,lo8(-11)
 1618 01e8 01F0      		breq .L132
 1619 01ea D63F      		cpi r29,lo8(-10)
 1620 01ec 01F0      		breq .L133
 1621 01ee D43F      		cpi r29,lo8(-12)
 1622 01f0 01F4      		brne .L134
 368:tmk_core/common/action.c ****                         break;
 1623               		.loc 1 368 25 view .LVU412
 368:tmk_core/common/action.c ****                         break;
 1624               		.loc 1 368 36 is_stmt 0 view .LVU413
 1625 01f2 8091 0000 		lds r24,tp_buttons
 1626 01f6 9091 0000 		lds r25,tp_buttons+1
 1627 01fa 8160      		ori r24,1
 1628               	.L230:
 374:tmk_core/common/action.c ****                         break;
 1629               		.loc 1 374 36 view .LVU414
 1630 01fc 9093 0000 		sts tp_buttons+1,r25
 1631 0200 8093 0000 		sts tp_buttons,r24
 375:tmk_core/common/action.c ****                     default:
 1632               		.loc 1 375 25 is_stmt 1 view .LVU415
 1633               	.L134:
 379:tmk_core/common/action.c ****                 mousekey_send();
 1634               		.loc 1 379 17 view .LVU416
 1635 0204 8D2F      		mov r24,r29
 1636 0206 0E94 0000 		call mousekey_on
 1637               	.LVL179:
 380:tmk_core/common/action.c ****             } else {
 1638               		.loc 1 380 17 view .LVU417
 1639               	.L237:
 396:tmk_core/common/action.c ****             }
 1640               		.loc 1 396 17 view .LVU418
 1641 020a 0E94 0000 		call mousekey_send
 1642               	.LVL180:
 1643 020e 00C0      		rjmp .L93
 1644               	.L132:
 371:tmk_core/common/action.c ****                         break;
 1645               		.loc 1 371 25 view .LVU419
 371:tmk_core/common/action.c ****                         break;
 1646               		.loc 1 371 36 is_stmt 0 view .LVU420
 1647 0210 8091 0000 		lds r24,tp_buttons
 1648 0214 9091 0000 		lds r25,tp_buttons+1
 1649 0218 8260      		ori r24,2
 1650 021a 00C0      		rjmp .L230
 1651               	.L133:
 374:tmk_core/common/action.c ****                         break;
 1652               		.loc 1 374 25 is_stmt 1 view .LVU421
 374:tmk_core/common/action.c ****                         break;
 1653               		.loc 1 374 36 is_stmt 0 view .LVU422
 1654 021c 8091 0000 		lds r24,tp_buttons
 1655 0220 9091 0000 		lds r25,tp_buttons+1
 1656 0224 8460      		ori r24,4
 1657 0226 00C0      		rjmp .L230
 1658               	.L131:
 382:tmk_core/common/action.c ****                     case KC_MS_BTN1:
 1659               		.loc 1 382 17 is_stmt 1 view .LVU423
 1660 0228 D53F      		cpi r29,lo8(-11)
 1661 022a 01F0      		breq .L135
 1662 022c D63F      		cpi r29,lo8(-10)
 1663 022e 01F0      		breq .L136
 1664 0230 D43F      		cpi r29,lo8(-12)
 1665 0232 01F4      		brne .L137
 384:tmk_core/common/action.c ****                         break;
 1666               		.loc 1 384 25 view .LVU424
 384:tmk_core/common/action.c ****                         break;
 1667               		.loc 1 384 36 is_stmt 0 view .LVU425
 1668 0234 8091 0000 		lds r24,tp_buttons
 1669 0238 9091 0000 		lds r25,tp_buttons+1
 1670 023c 8E7F      		andi r24,254
 1671               	.L231:
 390:tmk_core/common/action.c ****                         break;
 1672               		.loc 1 390 36 view .LVU426
 1673 023e 9093 0000 		sts tp_buttons+1,r25
 1674 0242 8093 0000 		sts tp_buttons,r24
 391:tmk_core/common/action.c ****                     default:
 1675               		.loc 1 391 25 is_stmt 1 view .LVU427
 1676               	.L137:
 395:tmk_core/common/action.c ****                 mousekey_send();
 1677               		.loc 1 395 17 view .LVU428
 1678 0246 8D2F      		mov r24,r29
 1679 0248 0E94 0000 		call mousekey_off
 1680               	.LVL181:
 1681 024c 00C0      		rjmp .L237
 1682               	.L135:
 387:tmk_core/common/action.c ****                         break;
 1683               		.loc 1 387 25 view .LVU429
 387:tmk_core/common/action.c ****                         break;
 1684               		.loc 1 387 36 is_stmt 0 view .LVU430
 1685 024e 8091 0000 		lds r24,tp_buttons
 1686 0252 9091 0000 		lds r25,tp_buttons+1
 1687 0256 8D7F      		andi r24,253
 1688 0258 00C0      		rjmp .L231
 1689               	.L136:
 390:tmk_core/common/action.c ****                         break;
 1690               		.loc 1 390 25 is_stmt 1 view .LVU431
 390:tmk_core/common/action.c ****                         break;
 1691               		.loc 1 390 36 is_stmt 0 view .LVU432
 1692 025a 8091 0000 		lds r24,tp_buttons
 1693 025e 9091 0000 		lds r25,tp_buttons+1
 1694 0262 8B7F      		andi r24,251
 1695 0264 00C0      		rjmp .L231
 1696               	.L98:
 402:tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1697               		.loc 1 402 13 is_stmt 1 view .LVU433
 402:tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1698               		.loc 1 402 39 is_stmt 0 view .LVU434
 1699 0266 8C2F      		mov r24,r28
 1700 0268 8370      		andi r24,lo8(3)
 402:tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1701               		.loc 1 402 16 view .LVU435
 1702 026a 01F0      		breq .+2
 1703 026c 00C0      		rjmp .L138
 404:tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 1704               		.loc 1 404 17 is_stmt 1 view .LVU436
 404:tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 1705               		.loc 1 404 20 is_stmt 0 view .LVU437
 1706 026e 1111      		cpse r17,__zero_reg__
 1707 0270 00C0      		rjmp .L93
 1708               	.LBB29:
 405:tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1709               		.loc 1 405 21 is_stmt 1 view .LVU438
 1710               	.LVL182:
 406:tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1711               		.loc 1 406 21 view .LVU439
 405:tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1712               		.loc 1 405 55 is_stmt 0 view .LVU440
 1713 0272 2D2F      		mov r18,r29
 1714 0274 2295      		swap r18
 1715 0276 2695      		lsr r18
 1716 0278 2770      		andi r18,lo8(7)
 405:tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1717               		.loc 1 405 29 view .LVU441
 1718 027a 220F      		lsl r18
 1719 027c 220F      		lsl r18
 406:tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1720               		.loc 1 406 66 view .LVU442
 1721 027e 6D2F      		mov r22,r29
 1722 0280 6F70      		andi r22,lo8(15)
 406:tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1723               		.loc 1 406 38 view .LVU443
 1724 0282 862E      		mov r8,r22
 1725 0284 912C      		mov r9,__zero_reg__
 1726 0286 B12C      		mov r11,__zero_reg__
 1727 0288 A12C      		mov r10,__zero_reg__
 406:tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1728               		.loc 1 406 30 view .LVU444
 1729 028a 022E      		mov r0,r18
 1730 028c 00C0      		rjmp 2f
 1731               		1:
 1732 028e 880C      		lsl r8
 1733 0290 991C      		rol r9
 1734 0292 AA1C      		rol r10
 1735 0294 BB1C      		rol r11
 1736               		2:
 1737 0296 0A94      		dec r0
 1738 0298 02F4      		brpl 1b
 1739               	.LVL183:
 407:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1740               		.loc 1 407 21 is_stmt 1 view .LVU445
 407:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1741               		.loc 1 407 91 is_stmt 0 view .LVU446
 1742 029a 60E0      		ldi r22,0
 1743 029c 70E0      		ldi r23,0
 1744 029e CB01      		movw r24,r22
 1745 02a0 D4FF      		sbrs r29,4
 1746 02a2 00C0      		rjmp .L139
 407:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1747               		.loc 1 407 82 discriminator 1 view .LVU447
 1748 02a4 6FE0      		ldi r22,lo8(15)
 1749 02a6 70E0      		ldi r23,0
 1750 02a8 80E0      		ldi r24,0
 1751 02aa 90E0      		ldi r25,0
 1752 02ac 00C0      		rjmp 2f
 1753               		1:
 1754 02ae 660F      		lsl r22
 1755 02b0 771F      		rol r23
 1756 02b2 881F      		rol r24
 1757 02b4 991F      		rol r25
 1758               		2:
 1759 02b6 2A95      		dec r18
 1760 02b8 02F4      		brpl 1b
 407:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1761               		.loc 1 407 91 discriminator 1 view .LVU448
 1762 02ba 6095      		com r22
 1763 02bc 7095      		com r23
 1764 02be 8095      		com r24
 1765 02c0 9095      		com r25
 1766               	.L139:
 1767               	.LVL184:
 408:tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1768               		.loc 1 408 21 is_stmt 1 discriminator 4 view .LVU449
 408:tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1769               		.loc 1 408 47 is_stmt 0 discriminator 4 view .LVU450
 1770 02c2 C695      		lsr r28
 1771 02c4 C695      		lsr r28
 1772               	.LVL185:
 408:tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1773               		.loc 1 408 47 discriminator 4 view .LVU451
 1774 02c6 C370      		andi r28,lo8(3)
 1775 02c8 C230      		cpi r28,lo8(2)
 1776 02ca 01F0      		breq .L140
 1777 02cc 00F4      		brsh .L141
 1778 02ce 6829      		or r22,r8
 1779               	.LVL186:
 408:tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1780               		.loc 1 408 47 discriminator 4 view .LVU452
 1781 02d0 7929      		or r23,r9
 1782 02d2 8A29      		or r24,r10
 1783 02d4 9B29      		or r25,r11
 1784 02d6 C130      		cpi r28,lo8(1)
 1785 02d8 01F0      		breq .L245
 409:tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 1786               		.loc 1 409 42 is_stmt 1 view .LVU453
 1787 02da 0E94 0000 		call default_layer_and
 1788               	.LVL187:
 409:tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 1789               		.loc 1 409 74 view .LVU454
 409:tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 1790               		.loc 1 409 25 is_stmt 0 view .LVU455
 1791 02de 00C0      		rjmp .L93
 1792               	.LVL188:
 1793               	.L140:
 411:tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1794               		.loc 1 411 42 is_stmt 1 view .LVU456
 1795 02e0 6829      		or r22,r8
 1796               	.LVL189:
 411:tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1797               		.loc 1 411 42 is_stmt 0 view .LVU457
 1798 02e2 7929      		or r23,r9
 1799 02e4 8A29      		or r24,r10
 1800 02e6 9B29      		or r25,r11
 1801 02e8 0E94 0000 		call default_layer_xor
 1802               	.LVL190:
 411:tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1803               		.loc 1 411 74 is_stmt 1 view .LVU458
 411:tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1804               		.loc 1 411 25 is_stmt 0 view .LVU459
 1805 02ec 00C0      		rjmp .L93
 1806               	.LVL191:
 1807               	.L141:
 412:tmk_core/common/action.c ****                     }
 1808               		.loc 1 412 42 is_stmt 1 view .LVU460
 1809 02ee 0E94 0000 		call default_layer_and
 1810               	.LVL192:
 412:tmk_core/common/action.c ****                     }
 1811               		.loc 1 412 67 view .LVU461
 1812 02f2 C501      		movw r24,r10
 1813 02f4 B401      		movw r22,r8
 1814               	.L245:
 1815 02f6 0E94 0000 		call default_layer_or
 1816               	.LVL193:
 412:tmk_core/common/action.c ****                     }
 1817               		.loc 1 412 91 view .LVU462
 412:tmk_core/common/action.c ****                     }
 1818               		.loc 1 412 25 is_stmt 0 view .LVU463
 1819 02fa 00C0      		rjmp .L93
 1820               	.LVL194:
 1821               	.L138:
 412:tmk_core/common/action.c ****                     }
 1822               		.loc 1 412 25 view .LVU464
 1823               	.LBE29:
 417:tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1824               		.loc 1 417 17 is_stmt 1 view .LVU465
 417:tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1825               		.loc 1 417 21 is_stmt 0 view .LVU466
 1826 02fc 8695      		lsr r24
 1827 02fe 1123      		tst r17
 1828 0300 01F0      		breq .L144
 417:tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1829               		.loc 1 417 21 discriminator 1 view .LVU467
 1830 0302 8C2F      		mov r24,r28
 1831 0304 8170      		andi r24,lo8(1)
 1832               	.L144:
 417:tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1833               		.loc 1 417 20 discriminator 4 view .LVU468
 1834 0306 8823      		tst r24
 1835 0308 01F4      		brne .+2
 1836 030a 00C0      		rjmp .L93
 1837               	.LBB30:
 419:tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1838               		.loc 1 419 21 is_stmt 1 view .LVU469
 1839               	.LVL195:
 420:tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1840               		.loc 1 420 21 view .LVU470
 419:tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1841               		.loc 1 419 55 is_stmt 0 view .LVU471
 1842 030c 2D2F      		mov r18,r29
 1843 030e 2295      		swap r18
 1844 0310 2695      		lsr r18
 1845 0312 2770      		andi r18,lo8(7)
 419:tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1846               		.loc 1 419 29 view .LVU472
 1847 0314 220F      		lsl r18
 1848 0316 220F      		lsl r18
 420:tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1849               		.loc 1 420 66 view .LVU473
 1850 0318 6D2F      		mov r22,r29
 1851 031a 6F70      		andi r22,lo8(15)
 420:tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1852               		.loc 1 420 38 view .LVU474
 1853 031c 862E      		mov r8,r22
 1854 031e 912C      		mov r9,__zero_reg__
 1855 0320 B12C      		mov r11,__zero_reg__
 1856 0322 A12C      		mov r10,__zero_reg__
 420:tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1857               		.loc 1 420 30 view .LVU475
 1858 0324 022E      		mov r0,r18
 1859 0326 00C0      		rjmp 2f
 1860               		1:
 1861 0328 880C      		lsl r8
 1862 032a 991C      		rol r9
 1863 032c AA1C      		rol r10
 1864 032e BB1C      		rol r11
 1865               		2:
 1866 0330 0A94      		dec r0
 1867 0332 02F4      		brpl 1b
 1868               	.LVL196:
 421:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1869               		.loc 1 421 21 is_stmt 1 view .LVU476
 421:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1870               		.loc 1 421 91 is_stmt 0 view .LVU477
 1871 0334 60E0      		ldi r22,0
 1872 0336 70E0      		ldi r23,0
 1873 0338 CB01      		movw r24,r22
 1874 033a D4FF      		sbrs r29,4
 1875 033c 00C0      		rjmp .L145
 421:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1876               		.loc 1 421 82 discriminator 1 view .LVU478
 1877 033e 6FE0      		ldi r22,lo8(15)
 1878 0340 70E0      		ldi r23,0
 1879 0342 80E0      		ldi r24,0
 1880 0344 90E0      		ldi r25,0
 1881 0346 00C0      		rjmp 2f
 1882               		1:
 1883 0348 660F      		lsl r22
 1884 034a 771F      		rol r23
 1885 034c 881F      		rol r24
 1886 034e 991F      		rol r25
 1887               		2:
 1888 0350 2A95      		dec r18
 1889 0352 02F4      		brpl 1b
 421:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1890               		.loc 1 421 91 discriminator 1 view .LVU479
 1891 0354 6095      		com r22
 1892 0356 7095      		com r23
 1893 0358 8095      		com r24
 1894 035a 9095      		com r25
 1895               	.L145:
 1896               	.LVL197:
 422:tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1897               		.loc 1 422 21 is_stmt 1 discriminator 4 view .LVU480
 422:tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1898               		.loc 1 422 47 is_stmt 0 discriminator 4 view .LVU481
 1899 035c C695      		lsr r28
 1900 035e C695      		lsr r28
 1901               	.LVL198:
 422:tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1902               		.loc 1 422 47 discriminator 4 view .LVU482
 1903 0360 C370      		andi r28,lo8(3)
 1904 0362 C230      		cpi r28,lo8(2)
 1905 0364 01F0      		breq .L146
 1906 0366 00F4      		brsh .L147
 1907 0368 6829      		or r22,r8
 1908               	.LVL199:
 422:tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1909               		.loc 1 422 47 discriminator 4 view .LVU483
 1910 036a 7929      		or r23,r9
 1911 036c 8A29      		or r24,r10
 1912 036e 9B29      		or r25,r11
 1913 0370 C130      		cpi r28,lo8(1)
 1914 0372 01F0      		breq .L246
 423:tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 1915               		.loc 1 423 42 is_stmt 1 view .LVU484
 1916 0374 0E94 0000 		call layer_and
 1917               	.LVL200:
 423:tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 1918               		.loc 1 423 66 view .LVU485
 423:tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 1919               		.loc 1 423 25 is_stmt 0 view .LVU486
 1920 0378 00C0      		rjmp .L93
 1921               	.LVL201:
 1922               	.L146:
 425:tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1923               		.loc 1 425 42 is_stmt 1 view .LVU487
 1924 037a 6829      		or r22,r8
 1925               	.LVL202:
 425:tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1926               		.loc 1 425 42 is_stmt 0 view .LVU488
 1927 037c 7929      		or r23,r9
 1928 037e 8A29      		or r24,r10
 1929 0380 9B29      		or r25,r11
 1930 0382 0E94 0000 		call layer_xor
 1931               	.LVL203:
 425:tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1932               		.loc 1 425 66 is_stmt 1 view .LVU489
 425:tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1933               		.loc 1 425 25 is_stmt 0 view .LVU490
 1934 0386 00C0      		rjmp .L93
 1935               	.LVL204:
 1936               	.L147:
 426:tmk_core/common/action.c ****                     }
 1937               		.loc 1 426 42 is_stmt 1 view .LVU491
 1938 0388 0E94 0000 		call layer_and
 1939               	.LVL205:
 426:tmk_core/common/action.c ****                     }
 1940               		.loc 1 426 59 view .LVU492
 1941 038c C501      		movw r24,r10
 1942 038e B401      		movw r22,r8
 1943               	.L246:
 1944 0390 0E94 0000 		call layer_or
 1945               	.LVL206:
 426:tmk_core/common/action.c ****                     }
 1946               		.loc 1 426 75 view .LVU493
 426:tmk_core/common/action.c ****                     }
 1947               		.loc 1 426 25 is_stmt 0 view .LVU494
 1948 0394 00C0      		rjmp .L93
 1949               	.LVL207:
 1950               	.L97:
 426:tmk_core/common/action.c ****                     }
 1951               		.loc 1 426 25 view .LVU495
 1952               	.LBE30:
 434:tmk_core/common/action.c ****                 case 0xe0 ... 0xef:
 1953               		.loc 1 434 13 is_stmt 1 view .LVU496
 1954 0396 E0E2      		ldi r30,lo8(32)
 1955 0398 ED0F      		add r30,r29
 1956 039a E531      		cpi r30,lo8(21)
 1957 039c 00F0      		brlo .+2
 1958 039e 00C0      		rjmp .L149
 1959 03a0 F0E0      		ldi r31,0
 1960 03a2 E050      		subi r30,lo8(-(gs(.L151)))
 1961 03a4 F040      		sbci r31,hi8(-(gs(.L151)))
 1962 03a6 0C94 0000 		jmp __tablejump2__
 1963               		.section	.jumptables.gcc.process_action,"a",@progbits
 1964               		.p2align	1
 1965               	.L151:
 1966 0020 0000      		.word gs(.L156)
 1967 0022 0000      		.word gs(.L156)
 1968 0024 0000      		.word gs(.L156)
 1969 0026 0000      		.word gs(.L156)
 1970 0028 0000      		.word gs(.L156)
 1971 002a 0000      		.word gs(.L156)
 1972 002c 0000      		.word gs(.L156)
 1973 002e 0000      		.word gs(.L156)
 1974 0030 0000      		.word gs(.L156)
 1975 0032 0000      		.word gs(.L156)
 1976 0034 0000      		.word gs(.L156)
 1977 0036 0000      		.word gs(.L156)
 1978 0038 0000      		.word gs(.L156)
 1979 003a 0000      		.word gs(.L156)
 1980 003c 0000      		.word gs(.L156)
 1981 003e 0000      		.word gs(.L156)
 1982 0040 0000      		.word gs(.L155)
 1983 0042 0000      		.word gs(.L154)
 1984 0044 0000      		.word gs(.L153)
 1985 0046 0000      		.word gs(.L152)
 1986 0048 0000      		.word gs(.L150)
 1987               		.section	.text.process_action
 1988               	.L156:
 437:tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1989               		.loc 1 437 21 view .LVU497
 1990 03aa DF70      		andi r29,lo8(15)
 1991               	.LVL208:
 437:tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1992               		.loc 1 437 21 is_stmt 0 view .LVU498
 1993 03ac 8C2F      		mov r24,r28
 1994 03ae 8F71      		andi r24,lo8(31)
 437:tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1995               		.loc 1 437 24 view .LVU499
 1996 03b0 1123      		tst r17
 1997 03b2 01F0      		breq .L157
 438:tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 1998               		.loc 1 438 25 is_stmt 1 view .LVU500
 1999 03b4 0E94 0000 		call layer_on
 2000               	.LVL209:
 439:tmk_core/common/action.c ****                     } else {
 2001               		.loc 1 439 25 view .LVU501
 2002 03b8 8D2F      		mov r24,r29
 2003 03ba 00C0      		rjmp .L240
 2004               	.L157:
 441:tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 2005               		.loc 1 441 25 view .LVU502
 2006 03bc 0E94 0000 		call layer_off
 2007               	.LVL210:
 442:tmk_core/common/action.c ****                     }
 2008               		.loc 1 442 25 view .LVU503
 2009 03c0 8D2F      		mov r24,r29
 2010 03c2 00C0      		rjmp .L241
 2011               	.LVL211:
 2012               	.L155:
 447:tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 2013               		.loc 1 447 21 view .LVU504
 447:tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 2014               		.loc 1 447 24 is_stmt 0 view .LVU505
 2015 03c4 1123      		tst r17
 2016 03c6 01F0      		breq .L158
 448:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 2017               		.loc 1 448 25 is_stmt 1 view .LVU506
 448:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 2018               		.loc 1 448 28 is_stmt 0 view .LVU507
 2019 03c8 0111      		cpse r16,__zero_reg__
 2020 03ca 00C0      		rjmp .L93
 2021               	.L159:
 449:tmk_core/common/action.c ****                         }
 2022               		.loc 1 449 29 is_stmt 1 view .LVU508
 2023 03cc 8C2F      		mov r24,r28
 2024 03ce 8F71      		andi r24,lo8(31)
 2025 03d0 0E94 0000 		call layer_invert
 2026               	.LVL212:
 2027 03d4 00C0      		rjmp .L93
 2028               	.L158:
 452:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 2029               		.loc 1 452 25 view .LVU509
 452:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 2030               		.loc 1 452 28 is_stmt 0 view .LVU510
 2031 03d6 0230      		cpi r16,lo8(2)
 2032 03d8 00F0      		brlo .+2
 2033 03da 00C0      		rjmp .L93
 2034 03dc 00C0      		rjmp .L159
 2035               	.L154:
 458:tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 2036               		.loc 1 458 21 is_stmt 1 view .LVU511
 2037 03de 8C2F      		mov r24,r28
 2038 03e0 8F71      		andi r24,lo8(31)
 458:tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 2039               		.loc 1 458 68 is_stmt 0 view .LVU512
 2040 03e2 1123      		tst r17
 2041 03e4 01F0      		breq .L235
 2042               	.L238:
 515:tmk_core/common/action.c ****                         }
 2043               		.loc 1 515 29 view .LVU513
 2044 03e6 0E94 0000 		call layer_on
 2045               	.LVL213:
 2046 03ea 00C0      		rjmp .L93
 2047               	.L153:
 462:tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 2048               		.loc 1 462 21 is_stmt 1 view .LVU514
 2049 03ec 8C2F      		mov r24,r28
 2050 03ee 8F71      		andi r24,lo8(31)
 462:tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 2051               		.loc 1 462 69 is_stmt 0 view .LVU515
 2052 03f0 1123      		tst r17
 2053 03f2 01F0      		breq .L238
 2054               	.L235:
 526:tmk_core/common/action.c ****                         }
 2055               		.loc 1 526 29 view .LVU516
 2056 03f4 0E94 0000 		call layer_off
 2057               	.LVL214:
 2058 03f8 00C0      		rjmp .L93
 2059               	.L152:
 466:tmk_core/common/action.c ****                                     layer_clear();
 2060               		.loc 1 466 21 is_stmt 1 view .LVU517
 466:tmk_core/common/action.c ****                                     layer_clear();
 2061               		.loc 1 466 70 is_stmt 0 view .LVU518
 2062 03fa 1123      		tst r17
 2063 03fc 01F0      		breq .L162
 466:tmk_core/common/action.c ****                                     layer_clear();
 2064               		.loc 1 466 37 discriminator 1 view .LVU519
 2065 03fe 8C2F      		mov r24,r28
 2066 0400 8F71      		andi r24,lo8(31)
 2067 0402 0E94 0000 		call layer_move
 2068               	.LVL215:
 2069 0406 00C0      		rjmp .L93
 2070               	.L162:
 467:tmk_core/common/action.c ****                     break;
 2071               		.loc 1 467 37 view .LVU520
 2072 0408 0E94 0000 		call layer_clear
 2073               	.LVL216:
 2074 040c 00C0      		rjmp .L93
 2075               	.L150:
 495:tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 2076               		.loc 1 495 21 is_stmt 1 view .LVU521
 495:tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 2077               		.loc 1 495 24 is_stmt 0 view .LVU522
 2078 040e 1123      		tst r17
 2079 0410 01F0      		breq .L163
 496:tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 2080               		.loc 1 496 25 is_stmt 1 view .LVU523
 496:tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 2081               		.loc 1 496 50 is_stmt 0 view .LVU524
 2082 0412 CF71      		andi r28,lo8(31)
 2083               	.LVL217:
 496:tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 2084               		.loc 1 496 25 view .LVU525
 2085 0414 8C2F      		mov r24,r28
 2086 0416 0E94 0000 		call layer_on
 2087               	.LVL218:
 497:tmk_core/common/action.c ****                     } else {
 2088               		.loc 1 497 25 is_stmt 1 view .LVU526
 2089 041a 63E0      		ldi r22,lo8(3)
 2090 041c 8C2F      		mov r24,r28
 2091 041e 0E94 0000 		call set_oneshot_layer
 2092               	.LVL219:
 2093 0422 00C0      		rjmp .L93
 2094               	.LVL220:
 2095               	.L163:
 499:tmk_core/common/action.c ****                         if (tap_count > 1) {
 2096               		.loc 1 499 25 view .LVU527
 2097 0424 81E0      		ldi r24,lo8(1)
 2098 0426 0E94 0000 		call clear_oneshot_layer_state
 2099               	.LVL221:
 500:tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 2100               		.loc 1 500 25 view .LVU528
 500:tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 2101               		.loc 1 500 28 is_stmt 0 view .LVU529
 2102 042a 0230      		cpi r16,lo8(2)
 2103 042c 00F4      		brsh .+2
 2104 042e 00C0      		rjmp .L93
 501:tmk_core/common/action.c ****                         }
 2105               		.loc 1 501 29 is_stmt 1 view .LVU530
 2106 0430 82E0      		ldi r24,lo8(2)
 2107 0432 0E94 0000 		call clear_oneshot_layer_state
 2108               	.LVL222:
 2109 0436 00C0      		rjmp .L93
 2110               	.L149:
 509:tmk_core/common/action.c ****                         if (tap_count > 0) {
 2111               		.loc 1 509 21 view .LVU531
 509:tmk_core/common/action.c ****                         if (tap_count > 0) {
 2112               		.loc 1 509 24 is_stmt 0 view .LVU532
 2113 0438 1123      		tst r17
 2114 043a 01F0      		breq .L164
 510:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 2115               		.loc 1 510 25 is_stmt 1 view .LVU533
 510:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 2116               		.loc 1 510 28 is_stmt 0 view .LVU534
 2117 043c 0111      		cpse r16,__zero_reg__
 2118 043e 00C0      		rjmp .L242
 514:tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 2119               		.loc 1 514 76 is_stmt 1 view .LVU535
 515:tmk_core/common/action.c ****                         }
 2120               		.loc 1 515 29 view .LVU536
 2121 0440 8C2F      		mov r24,r28
 2122 0442 8F71      		andi r24,lo8(31)
 2123 0444 00C0      		rjmp .L238
 2124               	.L164:
 518:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 2125               		.loc 1 518 25 view .LVU537
 518:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 2126               		.loc 1 518 28 is_stmt 0 view .LVU538
 2127 0446 0023      		tst r16
 2128 0448 01F0      		breq .L166
 519:tmk_core/common/action.c ****                             if (action.layer_tap.code == KC_CAPS) {
 2129               		.loc 1 519 77 is_stmt 1 view .LVU539
 520:tmk_core/common/action.c ****                                 wait_ms(80);
 2130               		.loc 1 520 29 view .LVU540
 520:tmk_core/common/action.c ****                                 wait_ms(80);
 2131               		.loc 1 520 32 is_stmt 0 view .LVU541
 2132 044a D933      		cpi r29,lo8(57)
 2133 044c 01F0      		breq .+2
 2134 044e 00C0      		rjmp .L167
 521:tmk_core/common/action.c ****                             }
 2135               		.loc 1 521 33 is_stmt 1 view .LVU542
 2136               	.LVL223:
 2137               	.LBB31:
 2138               	.LBI31:
 166:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** {
 2139               		.loc 3 166 1 view .LVU543
 2140               	.LBB32:
 168:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 2141               		.loc 3 168 2 view .LVU544
 172:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 2142               		.loc 3 172 2 view .LVU545
 173:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 2143               		.loc 3 173 2 view .LVU546
 174:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 2144               		.loc 3 174 2 view .LVU547
 184:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#endif
 2145               		.loc 3 184 3 view .LVU548
 2146               		.loc 3 187 2 view .LVU549
 2147 0450 2FEF      		ldi r18,lo8(255999)
 2148 0452 87EE      		ldi r24,hi8(255999)
 2149 0454 93E0      		ldi r25,hlo8(255999)
 2150 0456 2150      	1:	subi r18,1
 2151 0458 8040      		sbci r24,0
 2152 045a 9040      		sbci r25,0
 2153 045c 01F4      		brne 1b
 2154 045e 00C0      		rjmp .
 2155 0460 0000      		nop
 2156 0462 00C0      		rjmp .L167
 2157               	.LVL224:
 2158               	.L166:
 2159               		.loc 3 187 2 is_stmt 0 view .LVU550
 2160               	.LBE32:
 2161               	.LBE31:
 525:tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 2162               		.loc 1 525 79 is_stmt 1 view .LVU551
 526:tmk_core/common/action.c ****                         }
 2163               		.loc 1 526 29 view .LVU552
 2164 0464 8C2F      		mov r24,r28
 2165 0466 8F71      		andi r24,lo8(31)
 2166 0468 00C0      		rjmp .L235
 2167               	.L96:
 537:tmk_core/common/action.c ****             break;
 2168               		.loc 1 537 13 view .LVU553
 537:tmk_core/common/action.c ****             break;
 2169               		.loc 1 537 83 is_stmt 0 view .LVU554
 2170 046a 4C2F      		mov r20,r28
 2171 046c 4F70      		andi r20,lo8(15)
 537:tmk_core/common/action.c ****             break;
 2172               		.loc 1 537 13 view .LVU555
 2173 046e 6D2F      		mov r22,r29
 2174 0470 C701      		movw r24,r14
 2175 0472 0E94 0000 		call action_get_macro
 2176               	.LVL225:
 2177 0476 0E94 0000 		call action_macro_play
 2178               	.LVL226:
 538:tmk_core/common/action.c **** #endif
 2179               		.loc 1 538 13 is_stmt 1 view .LVU556
 2180 047a 00C0      		rjmp .L93
 2181               	.L99:
 570:tmk_core/common/action.c ****                 case OP_SH_TOGGLE:
 2182               		.loc 1 570 13 view .LVU557
 2183 047c D23F      		cpi r29,lo8(-14)
 2184 047e 01F0      		breq .L234
 2185 0480 00F4      		brsh .L169
 2186 0482 D03F      		cpi r29,lo8(-16)
 2187 0484 01F0      		breq .L170
 2188 0486 D13F      		cpi r29,lo8(-15)
 2189 0488 01F0      		breq .L171
 2190               	.L172:
 610:tmk_core/common/action.c ****                         if (swap_held) {
 2191               		.loc 1 610 21 view .LVU558
 2192 048a 8091 0000 		lds r24,swap_held
 610:tmk_core/common/action.c ****                         if (swap_held) {
 2193               		.loc 1 610 24 is_stmt 0 view .LVU559
 2194 048e 0023      		tst r16
 2195 0490 01F4      		brne .+2
 2196 0492 00C0      		rjmp .L178
 611:tmk_core/common/action.c ****                             swap_hands = !swap_hands; // undo hold set up in _tap_hint
 2197               		.loc 1 611 25 is_stmt 1 view .LVU560
 611:tmk_core/common/action.c ****                             swap_hands = !swap_hands; // undo hold set up in _tap_hint
 2198               		.loc 1 611 28 is_stmt 0 view .LVU561
 2199 0494 8823      		tst r24
 2200 0496 01F0      		breq .L179
 612:tmk_core/common/action.c ****                             swap_held = false;
 2201               		.loc 1 612 29 is_stmt 1 view .LVU562
 2202 0498 8091 0000 		lds r24,swap_hands
 2203 049c 91E0      		ldi r25,lo8(1)
 2204 049e 8927      		eor r24,r25
 612:tmk_core/common/action.c ****                             swap_held = false;
 2205               		.loc 1 612 40 is_stmt 0 view .LVU563
 2206 04a0 8093 0000 		sts swap_hands,r24
 613:tmk_core/common/action.c ****                         }
 2207               		.loc 1 613 29 is_stmt 1 view .LVU564
 613:tmk_core/common/action.c ****                         }
 2208               		.loc 1 613 39 is_stmt 0 view .LVU565
 2209 04a4 1092 0000 		sts swap_held,__zero_reg__
 2210               	.L179:
 615:tmk_core/common/action.c ****                             register_code(action.swap.code);
 2211               		.loc 1 615 25 is_stmt 1 view .LVU566
 616:tmk_core/common/action.c ****                         } else {
 2212               		.loc 1 616 29 is_stmt 0 view .LVU567
 2213 04a8 8D2F      		mov r24,r29
 615:tmk_core/common/action.c ****                             register_code(action.swap.code);
 2214               		.loc 1 615 28 view .LVU568
 2215 04aa 1123      		tst r17
 2216 04ac 01F0      		breq .L180
 616:tmk_core/common/action.c ****                         } else {
 2217               		.loc 1 616 29 is_stmt 1 view .LVU569
 2218 04ae 0E94 0000 		call register_code
 2219               	.LVL227:
 2220 04b2 00C0      		rjmp .L94
 2221               	.L169:
 2222 04b4 D43F      		cpi r29,lo8(-12)
 2223 04b6 01F0      		breq .L173
 2224 04b8 00F0      		brlo .L174
 2225 04ba D53F      		cpi r29,lo8(-11)
 2226 04bc 01F4      		brne .L172
 583:tmk_core/common/action.c ****                         swap_hands = true;
 2227               		.loc 1 583 21 view .LVU570
 583:tmk_core/common/action.c ****                         swap_hands = true;
 2228               		.loc 1 583 24 is_stmt 0 view .LVU571
 2229 04be 1111      		cpse r17,__zero_reg__
 2230 04c0 00C0      		rjmp .L94
 584:tmk_core/common/action.c ****                     }
 2231               		.loc 1 584 25 is_stmt 1 view .LVU572
 584:tmk_core/common/action.c ****                     }
 2232               		.loc 1 584 36 is_stmt 0 view .LVU573
 2233 04c2 81E0      		ldi r24,lo8(1)
 2234 04c4 00C0      		rjmp .L233
 2235               	.L170:
 572:tmk_core/common/action.c ****                         swap_hands = !swap_hands;
 2236               		.loc 1 572 21 is_stmt 1 view .LVU574
 572:tmk_core/common/action.c ****                         swap_hands = !swap_hands;
 2237               		.loc 1 572 24 is_stmt 0 view .LVU575
 2238 04c6 1123      		tst r17
 2239 04c8 01F0      		breq .L94
 2240               	.L177:
 573:tmk_core/common/action.c ****                     }
 2241               		.loc 1 573 25 is_stmt 1 view .LVU576
 2242 04ca 8091 0000 		lds r24,swap_hands
 2243 04ce 91E0      		ldi r25,lo8(1)
 2244 04d0 8927      		eor r24,r25
 2245               	.L233:
 584:tmk_core/common/action.c ****                     }
 2246               		.loc 1 584 36 is_stmt 0 view .LVU577
 2247 04d2 8093 0000 		sts swap_hands,r24
 2248 04d6 00C0      		rjmp .L94
 2249               	.L174:
 580:tmk_core/common/action.c ****                     break;
 2250               		.loc 1 580 21 is_stmt 1 view .LVU578
 2251 04d8 81E0      		ldi r24,lo8(1)
 2252 04da 1827      		eor r17,r24
 2253               	.LVL228:
 2254               	.L234:
 580:tmk_core/common/action.c ****                     break;
 2255               		.loc 1 580 32 is_stmt 0 view .LVU579
 2256 04dc 1093 0000 		sts swap_hands,r17
 581:tmk_core/common/action.c ****                 case OP_SH_ON:
 2257               		.loc 1 581 21 is_stmt 1 view .LVU580
 2258               	.L94:
 632:tmk_core/common/action.c ****             break;
 2259               		.loc 1 632 13 view .LVU581
 632:tmk_core/common/action.c ****             break;
 2260               		.loc 1 632 64 is_stmt 0 view .LVU582
 2261 04e0 4C2F      		mov r20,r28
 2262 04e2 4F70      		andi r20,lo8(15)
 632:tmk_core/common/action.c ****             break;
 2263               		.loc 1 632 13 view .LVU583
 2264 04e4 6D2F      		mov r22,r29
 2265 04e6 C701      		movw r24,r14
 2266 04e8 0E94 0000 		call action_function
 2267               	.LVL229:
 633:tmk_core/common/action.c **** #endif
 2268               		.loc 1 633 13 is_stmt 1 view .LVU584
 2269 04ec 00C0      		rjmp .L93
 2270               	.LVL230:
 2271               	.L173:
 588:tmk_core/common/action.c ****                         swap_hands = false;
 2272               		.loc 1 588 21 view .LVU585
 588:tmk_core/common/action.c ****                         swap_hands = false;
 2273               		.loc 1 588 24 is_stmt 0 view .LVU586
 2274 04ee 1111      		cpse r17,__zero_reg__
 2275 04f0 00C0      		rjmp .L94
 589:tmk_core/common/action.c ****                     }
 2276               		.loc 1 589 25 is_stmt 1 view .LVU587
 589:tmk_core/common/action.c ****                     }
 2277               		.loc 1 589 36 is_stmt 0 view .LVU588
 2278 04f2 1092 0000 		sts swap_hands,__zero_reg__
 2279 04f6 00C0      		rjmp .L94
 2280               	.L171:
 596:tmk_core/common/action.c ****                         if (swap_held) {
 2281               		.loc 1 596 21 is_stmt 1 view .LVU589
 596:tmk_core/common/action.c ****                         if (swap_held) {
 2282               		.loc 1 596 24 is_stmt 0 view .LVU590
 2283 04f8 1123      		tst r17
 2284 04fa 01F0      		breq .L176
 597:tmk_core/common/action.c ****                             swap_held = false;
 2285               		.loc 1 597 25 is_stmt 1 view .LVU591
 597:tmk_core/common/action.c ****                             swap_held = false;
 2286               		.loc 1 597 28 is_stmt 0 view .LVU592
 2287 04fc 8091 0000 		lds r24,swap_held
 2288 0500 8823      		tst r24
 2289 0502 01F0      		breq .L177
 2290               	.L232:
 624:tmk_core/common/action.c ****                         }
 2291               		.loc 1 624 29 is_stmt 1 view .LVU593
 624:tmk_core/common/action.c ****                         }
 2292               		.loc 1 624 39 is_stmt 0 view .LVU594
 2293 0504 1092 0000 		sts swap_held,__zero_reg__
 2294 0508 00C0      		rjmp .L94
 2295               	.L176:
 603:tmk_core/common/action.c ****                             swap_hands = !swap_hands;
 2296               		.loc 1 603 25 is_stmt 1 view .LVU595
 603:tmk_core/common/action.c ****                             swap_hands = !swap_hands;
 2297               		.loc 1 603 28 is_stmt 0 view .LVU596
 2298 050a 0023      		tst r16
 2299 050c 01F0      		breq .L177
 2300 050e 00C0      		rjmp .L94
 2301               	.L180:
 618:tmk_core/common/action.c ****                             *record = (keyrecord_t){}; // hack: reset tap mode
 2302               		.loc 1 618 29 is_stmt 1 view .LVU597
 2303 0510 0E94 0000 		call unregister_code
 2304               	.LVL231:
 619:tmk_core/common/action.c ****                         }
 2305               		.loc 1 619 29 view .LVU598
 619:tmk_core/common/action.c ****                         }
 2306               		.loc 1 619 37 is_stmt 0 view .LVU599
 2307 0514 86E0      		ldi r24,lo8(6)
 2308 0516 F701      		movw r30,r14
 2309               		0:
 2310 0518 1192      		st Z+,__zero_reg__
 2311 051a 8A95      		dec r24
 2312 051c 01F4      		brne 0b
 2313 051e 00C0      		rjmp .L94
 2314               	.L178:
 622:tmk_core/common/action.c ****                             swap_hands = !swap_hands; // undo hold set up in _tap_hint
 2315               		.loc 1 622 25 is_stmt 1 view .LVU600
 622:tmk_core/common/action.c ****                             swap_hands = !swap_hands; // undo hold set up in _tap_hint
 2316               		.loc 1 622 28 is_stmt 0 view .LVU601
 2317 0520 8823      		tst r24
 2318 0522 01F0      		breq .L94
 622:tmk_core/common/action.c ****                             swap_hands = !swap_hands; // undo hold set up in _tap_hint
 2319               		.loc 1 622 39 discriminator 1 view .LVU602
 2320 0524 1111      		cpse r17,__zero_reg__
 2321 0526 00C0      		rjmp .L94
 623:tmk_core/common/action.c ****                             swap_held = false;
 2322               		.loc 1 623 29 is_stmt 1 view .LVU603
 2323 0528 8091 0000 		lds r24,swap_hands
 2324 052c 91E0      		ldi r25,lo8(1)
 2325 052e 8927      		eor r24,r25
 623:tmk_core/common/action.c ****                             swap_held = false;
 2326               		.loc 1 623 40 is_stmt 0 view .LVU604
 2327 0530 8093 0000 		sts swap_hands,r24
 2328 0534 00C0      		rjmp .L232
 2329               	.LVL232:
 2330               	.L90:
 2331               	/* epilogue start */
 691:tmk_core/common/action.c **** 
 2332               		.loc 1 691 1 view .LVU605
 2333 0536 DF91      		pop r29
 2334               	.LVL233:
 691:tmk_core/common/action.c **** 
 2335               		.loc 1 691 1 view .LVU606
 2336 0538 CF91      		pop r28
 691:tmk_core/common/action.c **** 
 2337               		.loc 1 691 1 view .LVU607
 2338 053a 1F91      		pop r17
 2339 053c 0F91      		pop r16
 2340 053e FF90      		pop r15
 2341 0540 EF90      		pop r14
 2342               	.LVL234:
 691:tmk_core/common/action.c **** 
 2343               		.loc 1 691 1 view .LVU608
 2344 0542 DF90      		pop r13
 2345 0544 CF90      		pop r12
 2346               	.LVL235:
 691:tmk_core/common/action.c **** 
 2347               		.loc 1 691 1 view .LVU609
 2348 0546 BF90      		pop r11
 2349 0548 AF90      		pop r10
 2350 054a 9F90      		pop r9
 2351 054c 8F90      		pop r8
 2352 054e 0895      		ret
 2353               		.cfi_endproc
 2354               	.LFE112:
 2356               		.section	.text.process_record,"ax",@progbits
 2357               	.global	process_record
 2359               	process_record:
 2360               	.LVL236:
 2361               	.LFB111:
 173:tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) { return; }
 2362               		.loc 1 173 1 is_stmt 1 view -0
 2363               		.cfi_startproc
 173:tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) { return; }
 2364               		.loc 1 173 1 is_stmt 0 view .LVU611
 2365 0000 0F93      		push r16
 2366               	.LCFI19:
 2367               		.cfi_def_cfa_offset 3
 2368               		.cfi_offset 16, -2
 2369 0002 1F93      		push r17
 2370               	.LCFI20:
 2371               		.cfi_def_cfa_offset 4
 2372               		.cfi_offset 17, -3
 2373 0004 CF93      		push r28
 2374               	.LCFI21:
 2375               		.cfi_def_cfa_offset 5
 2376               		.cfi_offset 28, -4
 2377 0006 DF93      		push r29
 2378               	.LCFI22:
 2379               		.cfi_def_cfa_offset 6
 2380               		.cfi_offset 29, -5
 2381               	/* prologue: function */
 2382               	/* frame size = 0 */
 2383               	/* stack size = 4 */
 2384               	.L__stack_usage = 4
 2385 0008 EC01      		movw r28,r24
 174:tmk_core/common/action.c **** 
 2386               		.loc 1 174 5 is_stmt 1 view .LVU612
 2387               	.LBB35:
 2388               	.LBI35:
 2389               		.loc 2 49 20 view .LVU613
 2390               	.LBB36:
 2391               		.loc 2 49 51 view .LVU614
 2392               		.loc 2 49 74 is_stmt 0 view .LVU615
 2393 000a 8B81      		ldd r24,Y+3
 2394 000c 9C81      		ldd r25,Y+4
 2395               	.LVL237:
 2396               		.loc 2 49 74 view .LVU616
 2397 000e 892B      		or r24,r25
 2398 0010 01F0      		breq .L248
 2399 0012 8881      		ld r24,Y
 2400 0014 9981      		ldd r25,Y+1
 2401 0016 8923      		and r24,r25
 2402 0018 8F3F      		cpi r24,lo8(-1)
 2403 001a 01F4      		brne .L258
 2404               	.L248:
 2405               	/* epilogue start */
 2406               	.LBE36:
 2407               	.LBE35:
 188:tmk_core/common/action.c **** 
 2408               		.loc 1 188 1 view .LVU617
 2409 001c DF91      		pop r29
 2410 001e CF91      		pop r28
 2411               	.LVL238:
 188:tmk_core/common/action.c **** 
 2412               		.loc 1 188 1 view .LVU618
 2413 0020 1F91      		pop r17
 2414 0022 0F91      		pop r16
 2415 0024 0895      		ret
 2416               	.LVL239:
 2417               	.L258:
 176:tmk_core/common/action.c ****         return;
 2418               		.loc 1 176 5 is_stmt 1 view .LVU619
 176:tmk_core/common/action.c ****         return;
 2419               		.loc 1 176 9 is_stmt 0 view .LVU620
 2420 0026 CE01      		movw r24,r28
 2421 0028 0E94 0000 		call process_record_quantum
 2422               	.LVL240:
 176:tmk_core/common/action.c ****         return;
 2423               		.loc 1 176 7 view .LVU621
 2424 002c 8823      		tst r24
 2425 002e 01F0      		breq .L248
 179:tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
 2426               		.loc 1 179 5 is_stmt 1 view .LVU622
 179:tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
 2427               		.loc 1 179 23 is_stmt 0 view .LVU623
 2428 0030 6881      		ld r22,Y
 2429 0032 7981      		ldd r23,Y+1
 2430 0034 8A81      		ldd r24,Y+2
 2431 0036 0E94 0000 		call store_or_get_action
 2432               	.LVL241:
 2433 003a 8C01      		movw r16,r24
 2434               	.LVL242:
 180:tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 2435               		.loc 1 180 23 is_stmt 1 view .LVU624
 180:tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 2436               		.loc 1 180 25 view .LVU625
 182:tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 2437               		.loc 1 182 29 view .LVU626
 182:tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 2438               		.loc 1 182 31 view .LVU627
 2439 003c 0E94 0000 		call layer_debug
 2440               	.LVL243:
 183:tmk_core/common/action.c **** #endif
 2441               		.loc 1 183 37 view .LVU628
 183:tmk_core/common/action.c **** #endif
 2442               		.loc 1 183 39 view .LVU629
 2443 0040 0E94 0000 		call default_layer_debug
 2444               	.LVL244:
 185:tmk_core/common/action.c **** 
 2445               		.loc 1 185 15 view .LVU630
 187:tmk_core/common/action.c **** }
 2446               		.loc 1 187 5 view .LVU631
 187:tmk_core/common/action.c **** }
 2447               		.loc 1 187 5 is_stmt 0 view .LVU632
 2448 0044 B801      		movw r22,r16
 2449 0046 CE01      		movw r24,r28
 2450               	/* epilogue start */
 188:tmk_core/common/action.c **** 
 2451               		.loc 1 188 1 view .LVU633
 2452 0048 DF91      		pop r29
 2453 004a CF91      		pop r28
 2454               	.LVL245:
 188:tmk_core/common/action.c **** 
 2455               		.loc 1 188 1 view .LVU634
 2456 004c 1F91      		pop r17
 2457 004e 0F91      		pop r16
 2458               	.LVL246:
 187:tmk_core/common/action.c **** }
 2459               		.loc 1 187 5 view .LVU635
 2460 0050 0C94 0000 		jmp process_action
 2461               	.LVL247:
 187:tmk_core/common/action.c **** }
 2462               		.loc 1 187 5 view .LVU636
 2463               		.cfi_endproc
 2464               	.LFE111:
 2466               		.section	.text.process_record_nocache,"ax",@progbits
 2467               	.global	process_record_nocache
 2469               	process_record_nocache:
 2470               	.LVL248:
 2471               	.LFB108:
 127:tmk_core/common/action.c ****     disable_action_cache = true;
 2472               		.loc 1 127 1 is_stmt 1 view -0
 2473               		.cfi_startproc
 2474               	/* prologue: function */
 2475               	/* frame size = 0 */
 2476               	/* stack size = 0 */
 2477               	.L__stack_usage = 0
 128:tmk_core/common/action.c ****     process_record(record);
 2478               		.loc 1 128 5 view .LVU638
 128:tmk_core/common/action.c ****     process_record(record);
 2479               		.loc 1 128 26 is_stmt 0 view .LVU639
 2480 0000 21E0      		ldi r18,lo8(1)
 2481 0002 2093 0000 		sts disable_action_cache,r18
 129:tmk_core/common/action.c ****     disable_action_cache = false;
 2482               		.loc 1 129 5 is_stmt 1 view .LVU640
 2483 0006 0E94 0000 		call process_record
 2484               	.LVL249:
 130:tmk_core/common/action.c **** }
 2485               		.loc 1 130 5 view .LVU641
 130:tmk_core/common/action.c **** }
 2486               		.loc 1 130 26 is_stmt 0 view .LVU642
 2487 000a 1092 0000 		sts disable_action_cache,__zero_reg__
 2488               	/* epilogue start */
 131:tmk_core/common/action.c **** #else
 2489               		.loc 1 131 1 view .LVU643
 2490 000e 0895      		ret
 2491               		.cfi_endproc
 2492               	.LFE108:
 2494               		.section	.text.clear_keyboard_but_mods_and_keys,"ax",@progbits
 2495               	.global	clear_keyboard_but_mods_and_keys
 2497               	clear_keyboard_but_mods_and_keys:
 2498               	.LFB120:
 885:tmk_core/common/action.c **** 
 886:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 887:tmk_core/common/action.c ****  *
 888:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 889:tmk_core/common/action.c ****  */
 890:tmk_core/common/action.c **** void clear_keyboard(void)
 891:tmk_core/common/action.c **** {
 892:tmk_core/common/action.c ****     clear_mods();
 893:tmk_core/common/action.c ****     clear_keyboard_but_mods();
 894:tmk_core/common/action.c **** }
 895:tmk_core/common/action.c **** 
 896:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 897:tmk_core/common/action.c ****  *
 898:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 899:tmk_core/common/action.c ****  */
 900:tmk_core/common/action.c **** void clear_keyboard_but_mods(void)
 901:tmk_core/common/action.c **** {
 902:tmk_core/common/action.c ****     clear_keys();
 903:tmk_core/common/action.c ****     clear_keyboard_but_mods_and_keys();
 904:tmk_core/common/action.c **** }
 905:tmk_core/common/action.c **** 
 906:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 907:tmk_core/common/action.c ****  *
 908:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 909:tmk_core/common/action.c ****  */
 910:tmk_core/common/action.c **** void clear_keyboard_but_mods_and_keys()
 911:tmk_core/common/action.c **** {
 2499               		.loc 1 911 1 is_stmt 1 view -0
 2500               		.cfi_startproc
 2501               	/* prologue: function */
 2502               	/* frame size = 0 */
 2503               	/* stack size = 0 */
 2504               	.L__stack_usage = 0
 912:tmk_core/common/action.c ****     clear_weak_mods();
 2505               		.loc 1 912 5 view .LVU645
 2506 0000 0E94 0000 		call clear_weak_mods
 2507               	.LVL250:
 913:tmk_core/common/action.c ****     clear_macro_mods();
 2508               		.loc 1 913 5 view .LVU646
 2509 0004 0E94 0000 		call clear_macro_mods
 2510               	.LVL251:
 914:tmk_core/common/action.c ****     send_keyboard_report();
 2511               		.loc 1 914 5 view .LVU647
 2512 0008 0E94 0000 		call send_keyboard_report
 2513               	.LVL252:
 915:tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 916:tmk_core/common/action.c ****     mousekey_clear();
 2514               		.loc 1 916 5 view .LVU648
 2515 000c 0E94 0000 		call mousekey_clear
 2516               	.LVL253:
 917:tmk_core/common/action.c ****     mousekey_send();
 2517               		.loc 1 917 5 view .LVU649
 2518 0010 0E94 0000 		call mousekey_send
 2519               	.LVL254:
 918:tmk_core/common/action.c **** #endif
 919:tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 920:tmk_core/common/action.c ****     host_system_send(0);
 2520               		.loc 1 920 5 view .LVU650
 2521 0014 90E0      		ldi r25,0
 2522 0016 80E0      		ldi r24,0
 2523 0018 0E94 0000 		call host_system_send
 2524               	.LVL255:
 921:tmk_core/common/action.c ****     host_consumer_send(0);
 2525               		.loc 1 921 5 view .LVU651
 2526 001c 90E0      		ldi r25,0
 2527 001e 80E0      		ldi r24,0
 2528 0020 0C94 0000 		jmp host_consumer_send
 2529               	.LVL256:
 2530               		.cfi_endproc
 2531               	.LFE120:
 2533               		.section	.text.clear_keyboard_but_mods,"ax",@progbits
 2534               	.global	clear_keyboard_but_mods
 2536               	clear_keyboard_but_mods:
 2537               	.LFB119:
 901:tmk_core/common/action.c ****     clear_keys();
 2538               		.loc 1 901 1 view -0
 2539               		.cfi_startproc
 2540               	/* prologue: function */
 2541               	/* frame size = 0 */
 2542               	/* stack size = 0 */
 2543               	.L__stack_usage = 0
 902:tmk_core/common/action.c ****     clear_keyboard_but_mods_and_keys();
 2544               		.loc 1 902 5 view .LVU653
 2545 0000 0E94 0000 		call clear_keys
 2546               	.LVL257:
 903:tmk_core/common/action.c **** }
 2547               		.loc 1 903 5 view .LVU654
 2548 0004 0C94 0000 		jmp clear_keyboard_but_mods_and_keys
 2549               	.LVL258:
 2550               		.cfi_endproc
 2551               	.LFE119:
 2553               		.section	.text.clear_keyboard,"ax",@progbits
 2554               	.global	clear_keyboard
 2556               	clear_keyboard:
 2557               	.LFB118:
 891:tmk_core/common/action.c ****     clear_mods();
 2558               		.loc 1 891 1 view -0
 2559               		.cfi_startproc
 2560               	/* prologue: function */
 2561               	/* frame size = 0 */
 2562               	/* stack size = 0 */
 2563               	.L__stack_usage = 0
 892:tmk_core/common/action.c ****     clear_keyboard_but_mods();
 2564               		.loc 1 892 5 view .LVU656
 2565 0000 0E94 0000 		call clear_mods
 2566               	.LVL259:
 893:tmk_core/common/action.c **** }
 2567               		.loc 1 893 5 view .LVU657
 2568 0004 0C94 0000 		jmp clear_keyboard_but_mods
 2569               	.LVL260:
 2570               		.cfi_endproc
 2571               	.LFE118:
 2573               		.section	.text.is_tap_action,"ax",@progbits
 2574               	.global	is_tap_action
 2576               	is_tap_action:
 2577               	.LVL261:
 2578               	.LFB122:
 922:tmk_core/common/action.c **** #endif
 923:tmk_core/common/action.c **** }
 924:tmk_core/common/action.c **** 
 925:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 926:tmk_core/common/action.c ****  *
 927:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 928:tmk_core/common/action.c ****  */
 929:tmk_core/common/action.c **** bool is_tap_key(keypos_t key)
 930:tmk_core/common/action.c **** {
 931:tmk_core/common/action.c ****     action_t action = layer_switch_get_action(key);
 932:tmk_core/common/action.c ****     return is_tap_action(action);
 933:tmk_core/common/action.c **** }
 934:tmk_core/common/action.c **** 
 935:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 936:tmk_core/common/action.c ****  *
 937:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 938:tmk_core/common/action.c ****  */
 939:tmk_core/common/action.c **** bool is_tap_action(action_t action)
 940:tmk_core/common/action.c **** {
 2579               		.loc 1 940 1 view -0
 2580               		.cfi_startproc
 2581               	/* prologue: function */
 2582               	/* frame size = 0 */
 2583               	/* stack size = 0 */
 2584               	.L__stack_usage = 0
 941:tmk_core/common/action.c ****     switch (action.kind.id) {
 2585               		.loc 1 941 5 view .LVU659
 2586               		.loc 1 941 24 is_stmt 0 view .LVU660
 2587 0000 E92F      		mov r30,r25
 2588 0002 E295      		swap r30
 2589 0004 EF70      		andi r30,lo8(15)
 2590               		.loc 1 941 5 view .LVU661
 2591 0006 E250      		subi r30,lo8(-(-2))
 2592 0008 EE30      		cpi r30,lo8(14)
 2593 000a 00F4      		brsh .L272
 2594 000c F0E0      		ldi r31,0
 2595 000e E050      		subi r30,lo8(-(gs(.L266)))
 2596 0010 F040      		sbci r31,hi8(-(gs(.L266)))
 2597 0012 0C94 0000 		jmp __tablejump2__
 2598               		.section	.jumptables.gcc.is_tap_action,"a",@progbits
 2599               		.p2align	1
 2600               	.L266:
 2601 0000 0000      		.word gs(.L267)
 2602 0002 0000      		.word gs(.L267)
 2603 0004 0000      		.word gs(.L272)
 2604 0006 0000      		.word gs(.L272)
 2605 0008 0000      		.word gs(.L268)
 2606 000a 0000      		.word gs(.L272)
 2607 000c 0000      		.word gs(.L272)
 2608 000e 0000      		.word gs(.L272)
 2609 0010 0000      		.word gs(.L267)
 2610 0012 0000      		.word gs(.L267)
 2611 0014 0000      		.word gs(.L265)
 2612 0016 0000      		.word gs(.L272)
 2613 0018 0000      		.word gs(.L272)
 2614 001a 0000      		.word gs(.L265)
 2615               		.section	.text.is_tap_action
 2616               	.L267:
 942:tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 943:tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 944:tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 945:tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 946:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 2617               		.loc 1 946 13 is_stmt 1 view .LVU662
 2618 0016 803F      		cpi r24,lo8(-16)
 2619 0018 01F0      		breq .L275
 2620 001a 00F4      		brsh .L269
 2621 001c 803E      		cpi r24,lo8(-32)
 2622 001e 00F4      		brsh .L272
 2623               	.L275:
 947:tmk_core/common/action.c ****                 case 0x00 ... 0xdf:
 948:tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 949:tmk_core/common/action.c ****                 case OP_ONESHOT:
 950:tmk_core/common/action.c ****                     return true;
 2624               		.loc 1 950 28 is_stmt 0 view .LVU663
 2625 0020 81E0      		ldi r24,lo8(1)
 2626               	.LVL262:
 2627               	/* epilogue start */
 951:tmk_core/common/action.c ****             }
 952:tmk_core/common/action.c ****             return false;
 953:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 954:tmk_core/common/action.c ****             switch (action.swap.code) {
 955:tmk_core/common/action.c ****                 case 0x00 ... 0xdf:
 956:tmk_core/common/action.c ****                 case OP_SH_TAP_TOGGLE:
 957:tmk_core/common/action.c ****                     return true;
 958:tmk_core/common/action.c ****             }
 959:tmk_core/common/action.c ****             return false;
 960:tmk_core/common/action.c ****         case ACT_MACRO:
 961:tmk_core/common/action.c ****         case ACT_FUNCTION:
 962:tmk_core/common/action.c ****             if (action.func.opt & FUNC_TAP) { return true; }
 963:tmk_core/common/action.c ****             return false;
 964:tmk_core/common/action.c ****     }
 965:tmk_core/common/action.c ****     return false;
 966:tmk_core/common/action.c **** }
 2628               		.loc 1 966 1 view .LVU664
 2629 0022 0895      		ret
 2630               	.LVL263:
 2631               	.L269:
 2632               		.loc 1 966 1 view .LVU665
 2633 0024 843F      		cpi r24,lo8(-12)
 2634 0026 01F0      		breq .L275
 2635               	.L272:
 952:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 2636               		.loc 1 952 20 view .LVU666
 2637 0028 80E0      		ldi r24,0
 2638               	.LVL264:
 952:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 2639               		.loc 1 952 20 view .LVU667
 2640 002a 0895      		ret
 2641               	.LVL265:
 2642               	.L268:
 954:tmk_core/common/action.c ****                 case 0x00 ... 0xdf:
 2643               		.loc 1 954 13 is_stmt 1 view .LVU668
 2644 002c 803E      		cpi r24,lo8(-32)
 2645 002e 00F0      		brlo .L275
 2646 0030 813F      		cpi r24,lo8(-15)
 2647 0032 01F4      		brne .L272
 2648 0034 00C0      		rjmp .L275
 2649               	.L265:
 962:tmk_core/common/action.c ****             return false;
 2650               		.loc 1 962 13 view .LVU669
 962:tmk_core/common/action.c ****             return false;
 2651               		.loc 1 962 16 is_stmt 0 view .LVU670
 2652 0036 93FB      		bst r25,3
 2653 0038 8827      		clr r24
 2654 003a 80F9      		bld r24,0
 2655               	.LVL266:
 962:tmk_core/common/action.c ****             return false;
 2656               		.loc 1 962 16 view .LVU671
 2657 003c 0895      		ret
 2658               		.cfi_endproc
 2659               	.LFE122:
 2661               		.section	.text.is_tap_key,"ax",@progbits
 2662               	.global	is_tap_key
 2664               	is_tap_key:
 2665               	.LVL267:
 2666               	.LFB121:
 930:tmk_core/common/action.c ****     action_t action = layer_switch_get_action(key);
 2667               		.loc 1 930 1 is_stmt 1 view -0
 2668               		.cfi_startproc
 2669               	/* prologue: function */
 2670               	/* frame size = 0 */
 2671               	/* stack size = 0 */
 2672               	.L__stack_usage = 0
 931:tmk_core/common/action.c ****     return is_tap_action(action);
 2673               		.loc 1 931 5 view .LVU673
 931:tmk_core/common/action.c ****     return is_tap_action(action);
 2674               		.loc 1 931 23 is_stmt 0 view .LVU674
 2675 0000 0E94 0000 		call layer_switch_get_action
 2676               	.LVL268:
 932:tmk_core/common/action.c **** }
 2677               		.loc 1 932 5 is_stmt 1 view .LVU675
 932:tmk_core/common/action.c **** }
 2678               		.loc 1 932 12 is_stmt 0 view .LVU676
 2679 0004 0C94 0000 		jmp is_tap_action
 2680               	.LVL269:
 2681               		.cfi_endproc
 2682               	.LFE121:
 2684               		.section	.text.debug_event,"ax",@progbits
 2685               	.global	debug_event
 2687               	debug_event:
 2688               	.LFB123:
 967:tmk_core/common/action.c **** 
 968:tmk_core/common/action.c **** 
 969:tmk_core/common/action.c **** /** \brief Debug print (FIXME: Needs better description)
 970:tmk_core/common/action.c ****  *
 971:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 972:tmk_core/common/action.c ****  */
 973:tmk_core/common/action.c **** void debug_event(keyevent_t event)
 974:tmk_core/common/action.c **** {
 2689               		.loc 1 974 1 is_stmt 1 view -0
 2690               		.cfi_startproc
 2691 0000 CF93      		push r28
 2692               	.LCFI23:
 2693               		.cfi_def_cfa_offset 3
 2694               		.cfi_offset 28, -2
 2695 0002 DF93      		push r29
 2696               	.LCFI24:
 2697               		.cfi_def_cfa_offset 4
 2698               		.cfi_offset 29, -3
 2699 0004 00D0      		rcall .
 2700 0006 00D0      		rcall .
 2701 0008 0F92      		push __tmp_reg__
 2702               	.LCFI25:
 2703               		.cfi_def_cfa_offset 9
 2704 000a CDB7      		in r28,__SP_L__
 2705 000c DEB7      		in r29,__SP_H__
 2706               	.LCFI26:
 2707               		.cfi_def_cfa_register 28
 2708               	/* prologue: function */
 2709               	/* frame size = 5 */
 2710               	/* stack size = 7 */
 2711               	.L__stack_usage = 7
 975:tmk_core/common/action.c ****     dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.ti
 2712               		.loc 1 975 103 view .LVU678
 2713               	/* epilogue start */
 976:tmk_core/common/action.c **** }
 2714               		.loc 1 976 1 is_stmt 0 view .LVU679
 2715 000e 0F90      		pop __tmp_reg__
 2716 0010 0F90      		pop __tmp_reg__
 2717 0012 0F90      		pop __tmp_reg__
 2718 0014 0F90      		pop __tmp_reg__
 2719 0016 0F90      		pop __tmp_reg__
 2720 0018 DF91      		pop r29
 2721 001a CF91      		pop r28
 2722 001c 0895      		ret
 2723               		.cfi_endproc
 2724               	.LFE123:
 2726               		.section	.text.debug_record,"ax",@progbits
 2727               	.global	debug_record
 2729               	debug_record:
 2730               	.LFB124:
 977:tmk_core/common/action.c **** 
 978:tmk_core/common/action.c **** /** \brief Debug print (FIXME: Needs better description)
 979:tmk_core/common/action.c ****  *
 980:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 981:tmk_core/common/action.c ****  */
 982:tmk_core/common/action.c **** void debug_record(keyrecord_t record)
 983:tmk_core/common/action.c **** {
 2731               		.loc 1 983 1 is_stmt 1 view -0
 2732               		.cfi_startproc
 2733 0000 CF93      		push r28
 2734               	.LCFI27:
 2735               		.cfi_def_cfa_offset 3
 2736               		.cfi_offset 28, -2
 2737 0002 DF93      		push r29
 2738               	.LCFI28:
 2739               		.cfi_def_cfa_offset 4
 2740               		.cfi_offset 29, -3
 2741 0004 00D0      		rcall .
 2742 0006 00D0      		rcall .
 2743 0008 00D0      		rcall .
 2744               	.LCFI29:
 2745               		.cfi_def_cfa_offset 10
 2746 000a CDB7      		in r28,__SP_L__
 2747 000c DEB7      		in r29,__SP_H__
 2748               	.LCFI30:
 2749               		.cfi_def_cfa_register 28
 2750               	/* prologue: function */
 2751               	/* frame size = 6 */
 2752               	/* stack size = 8 */
 2753               	.L__stack_usage = 8
 984:tmk_core/common/action.c ****     debug_event(record.event);
 2754               		.loc 1 984 5 view .LVU681
 985:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 986:tmk_core/common/action.c ****     dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
 2755               		.loc 1 986 77 view .LVU682
 2756               	/* epilogue start */
 987:tmk_core/common/action.c **** #endif
 988:tmk_core/common/action.c **** }
 2757               		.loc 1 988 1 is_stmt 0 view .LVU683
 2758 000e 2696      		adiw r28,6
 2759 0010 0FB6      		in __tmp_reg__,__SREG__
 2760 0012 F894      		cli
 2761 0014 DEBF      		out __SP_H__,r29
 2762 0016 0FBE      		out __SREG__,__tmp_reg__
 2763 0018 CDBF      		out __SP_L__,r28
 2764 001a DF91      		pop r29
 2765 001c CF91      		pop r28
 2766 001e 0895      		ret
 2767               		.cfi_endproc
 2768               	.LFE124:
 2770               		.section	.text.debug_action,"ax",@progbits
 2771               	.global	debug_action
 2773               	debug_action:
 2774               	.LVL270:
 2775               	.LFB125:
 989:tmk_core/common/action.c **** 
 990:tmk_core/common/action.c **** /** \brief Debug print (FIXME: Needs better description)
 991:tmk_core/common/action.c ****  *
 992:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 993:tmk_core/common/action.c ****  */
 994:tmk_core/common/action.c **** void debug_action(action_t action)
 995:tmk_core/common/action.c **** {
 2776               		.loc 1 995 1 is_stmt 1 view -0
 2777               		.cfi_startproc
 2778               	/* prologue: function */
 2779               	/* frame size = 0 */
 2780               	/* stack size = 0 */
 2781               	.L__stack_usage = 0
 996:tmk_core/common/action.c ****     switch (action.kind.id) {
 2782               		.loc 1 996 5 view .LVU685
 997:tmk_core/common/action.c ****         case ACT_LMODS:             dprint("ACT_LMODS");             break;
 998:tmk_core/common/action.c ****         case ACT_RMODS:             dprint("ACT_RMODS");             break;
 999:tmk_core/common/action.c ****         case ACT_LMODS_TAP:         dprint("ACT_LMODS_TAP");         break;
1000:tmk_core/common/action.c ****         case ACT_RMODS_TAP:         dprint("ACT_RMODS_TAP");         break;
1001:tmk_core/common/action.c ****         case ACT_USAGE:             dprint("ACT_USAGE");             break;
1002:tmk_core/common/action.c ****         case ACT_MOUSEKEY:          dprint("ACT_MOUSEKEY");          break;
1003:tmk_core/common/action.c ****         case ACT_LAYER:             dprint("ACT_LAYER");             break;
1004:tmk_core/common/action.c ****         case ACT_LAYER_TAP:         dprint("ACT_LAYER_TAP");         break;
1005:tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:     dprint("ACT_LAYER_TAP_EXT");     break;
1006:tmk_core/common/action.c ****         case ACT_MACRO:             dprint("ACT_MACRO");             break;
1007:tmk_core/common/action.c ****         case ACT_COMMAND:           dprint("ACT_COMMAND");           break;
1008:tmk_core/common/action.c ****         case ACT_FUNCTION:          dprint("ACT_FUNCTION");          break;
1009:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:        dprint("ACT_SWAP_HANDS");        break;
1010:tmk_core/common/action.c ****         default:                    dprint("UNKNOWN");               break;
1011:tmk_core/common/action.c ****     }
1012:tmk_core/common/action.c ****     dprintf("[%X:%02X]", action.kind.param>>8, action.kind.param&0xff);
 2783               		.loc 1 1012 71 view .LVU686
 2784               	/* epilogue start */
1013:tmk_core/common/action.c **** }
 2785               		.loc 1 1013 1 is_stmt 0 view .LVU687
 2786 0000 0895      		ret
 2787               		.cfi_endproc
 2788               	.LFE125:
 2790               		.section	.bss.swap_state.4986,"aw",@nobits
 2793               	swap_state.4986:
 2794 0000 0000 0000 		.zero	14
 2794      0000 0000 
 2794      0000 0000 
 2794      0000 
 2795               	.global	disable_action_cache
 2796               		.section	.bss.disable_action_cache,"aw",@nobits
 2799               	disable_action_cache:
 2800 0000 00        		.zero	1
 2801               	.global	swap_held
 2802               		.section	.bss.swap_held,"aw",@nobits
 2805               	swap_held:
 2806 0000 00        		.zero	1
 2807               	.global	swap_hands
 2808               		.section	.bss.swap_hands,"aw",@nobits
 2811               	swap_hands:
 2812 0000 00        		.zero	1
 2813               		.comm	tp_buttons,2,1
 2814               		.text
 2815               	.Letext0:
 2816               		.file 4 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/stdint.h"
 2817               		.file 5 "tmk_core/common/keycode.h"
 2818               		.file 6 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 2819               		.file 7 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 2820               		.file 8 "lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 2821               		.file 9 "lib/lufa/LUFA/Drivers/USB/Core/HostStandardReq.h"
 2822               		.file 10 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/stdio.h"
 2823               		.file 11 "tmk_core/common/report.h"
 2824               		.file 12 "tmk_core/common/host.h"
 2825               		.file 13 "tmk_core/common/mousekey.h"
 2826               		.file 14 "tmk_core/common/command.h"
 2827               		.file 15 "tmk_core/common/action_code.h"
 2828               		.file 16 "tmk_core/common/action.h"
 2829               		.file 17 "tmk_core/common/action_layer.h"
 2830               		.file 18 "tmk_core/common/action_util.h"
 2831               		.file 19 "tmk_core/common/debug.h"
 2832               		.file 20 "tmk_core/common/led.h"
 2833               		.file 21 "tmk_core/common/action_macro.h"
 2834               		.file 22 "tmk_core/common/action_tapping.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action.c
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccZZmUeq.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccZZmUeq.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccZZmUeq.s:4      *ABS*:000000000000003f __SREG__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccZZmUeq.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccZZmUeq.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccZZmUeq.s:13     .text.process_hand_swap:0000000000000000 process_hand_swap
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccZZmUeq.s:2793   .bss.swap_state.4986:0000000000000000 swap_state.4986
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccZZmUeq.s:2811   .bss.swap_hands:0000000000000000 swap_hands
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccZZmUeq.s:130    .text.action_exec:0000000000000000 action_exec
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccZZmUeq.s:231    .text.process_record_quantum:0000000000000000 process_record_quantum
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccZZmUeq.s:253    .text.process_record_tap_hint:0000000000000000 process_record_tap_hint
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccZZmUeq.s:2805   .bss.swap_held:0000000000000000 swap_held
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccZZmUeq.s:299    .text.register_code:0000000000000000 register_code
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccZZmUeq.s:849    .text.unregister_code:0000000000000000 unregister_code
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccZZmUeq.s:1017   .text.tap_code:0000000000000000 tap_code
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccZZmUeq.s:1051   .text.register_mods:0000000000000000 register_mods
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccZZmUeq.s:1080   .text.unregister_mods:0000000000000000 unregister_mods
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccZZmUeq.s:1109   .text.process_action:0000000000000000 process_action
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccZZmUeq.s:2359   .text.process_record:0000000000000000 process_record
                            *COM*:0000000000000002 tp_buttons
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccZZmUeq.s:2469   .text.process_record_nocache:0000000000000000 process_record_nocache
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccZZmUeq.s:2799   .bss.disable_action_cache:0000000000000000 disable_action_cache
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccZZmUeq.s:2497   .text.clear_keyboard_but_mods_and_keys:0000000000000000 clear_keyboard_but_mods_and_keys
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccZZmUeq.s:2536   .text.clear_keyboard_but_mods:0000000000000000 clear_keyboard_but_mods
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccZZmUeq.s:2556   .text.clear_keyboard:0000000000000000 clear_keyboard
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccZZmUeq.s:2576   .text.is_tap_action:0000000000000000 is_tap_action
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccZZmUeq.s:2664   .text.is_tap_key:0000000000000000 is_tap_key
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccZZmUeq.s:2687   .text.debug_event:0000000000000000 debug_event
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccZZmUeq.s:2729   .text.debug_record:0000000000000000 debug_record
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccZZmUeq.s:2773   .text.debug_action:0000000000000000 debug_action

UNDEFINED SYMBOLS
hand_swap_config
action_tapping_process
layer_switch_get_action
host_keyboard_leds
add_key
send_keyboard_report
del_key
add_mods
host_system_send
host_consumer_send
mousekey_on
mousekey_send
del_mods
mousekey_off
clear_weak_mods
is_oneshot_layer_active
clear_oneshot_layer_state
__tablejump2__
add_weak_mods
led_set
get_oneshot_layer_state
get_oneshot_layer
layer_on
layer_off
del_weak_mods
get_oneshot_mods
set_oneshot_mods
clear_oneshot_mods
default_layer_and
default_layer_xor
default_layer_or
layer_and
layer_xor
layer_or
layer_invert
layer_move
layer_clear
set_oneshot_layer
action_get_macro
action_macro_play
action_function
store_or_get_action
layer_debug
default_layer_debug
clear_macro_mods
mousekey_clear
clear_keys
clear_mods
__do_clear_bss
