   1               		.file	"quantum.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.do_code16,"ax",@progbits
  12               	do_code16:
  13               	.LVL0:
  14               	.LFB122:
  15               		.file 1 "quantum/quantum.c"
   1:quantum/quantum.c **** /* Copyright 2016-2017 Jack Humbert
   2:quantum/quantum.c ****  *
   3:quantum/quantum.c ****  * This program is free software: you can redistribute it and/or modify
   4:quantum/quantum.c ****  * it under the terms of the GNU General Public License as published by
   5:quantum/quantum.c ****  * the Free Software Foundation, either version 2 of the License, or
   6:quantum/quantum.c ****  * (at your option) any later version.
   7:quantum/quantum.c ****  *
   8:quantum/quantum.c ****  * This program is distributed in the hope that it will be useful,
   9:quantum/quantum.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:quantum/quantum.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:quantum/quantum.c ****  * GNU General Public License for more details.
  12:quantum/quantum.c ****  *
  13:quantum/quantum.c ****  * You should have received a copy of the GNU General Public License
  14:quantum/quantum.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  15:quantum/quantum.c ****  */
  16:quantum/quantum.c **** 
  17:quantum/quantum.c **** #include "quantum.h"
  18:quantum/quantum.c **** 
  19:quantum/quantum.c **** #if !defined(RGBLIGHT_ENABLE) && !defined(RGB_MATRIX_ENABLE)
  20:quantum/quantum.c **** 	#include "rgb.h"
  21:quantum/quantum.c **** #endif
  22:quantum/quantum.c **** 
  23:quantum/quantum.c **** #ifdef PROTOCOL_LUFA
  24:quantum/quantum.c **** #include "outputselect.h"
  25:quantum/quantum.c **** #endif
  26:quantum/quantum.c **** 
  27:quantum/quantum.c **** #ifndef BREATHING_PERIOD
  28:quantum/quantum.c **** #define BREATHING_PERIOD 6
  29:quantum/quantum.c **** #endif
  30:quantum/quantum.c **** 
  31:quantum/quantum.c **** #include "backlight.h"
  32:quantum/quantum.c **** extern backlight_config_t backlight_config;
  33:quantum/quantum.c **** 
  34:quantum/quantum.c **** #ifdef FAUXCLICKY_ENABLE
  35:quantum/quantum.c **** #include "fauxclicky.h"
  36:quantum/quantum.c **** #endif
  37:quantum/quantum.c **** 
  38:quantum/quantum.c **** #ifdef API_ENABLE
  39:quantum/quantum.c **** #include "api.h"
  40:quantum/quantum.c **** #endif
  41:quantum/quantum.c **** 
  42:quantum/quantum.c **** #ifdef MIDI_ENABLE
  43:quantum/quantum.c **** #include "process_midi.h"
  44:quantum/quantum.c **** #endif
  45:quantum/quantum.c **** 
  46:quantum/quantum.c **** #ifdef VELOCIKEY_ENABLE
  47:quantum/quantum.c **** #include "velocikey.h"
  48:quantum/quantum.c **** #endif
  49:quantum/quantum.c **** 
  50:quantum/quantum.c **** #ifdef HAPTIC_ENABLE
  51:quantum/quantum.c ****     #include "haptic.h"
  52:quantum/quantum.c **** #endif
  53:quantum/quantum.c **** 
  54:quantum/quantum.c **** #ifdef ENCODER_ENABLE
  55:quantum/quantum.c **** #include "encoder.h"
  56:quantum/quantum.c **** #endif
  57:quantum/quantum.c **** 
  58:quantum/quantum.c **** #ifdef AUDIO_ENABLE
  59:quantum/quantum.c ****   #ifndef GOODBYE_SONG
  60:quantum/quantum.c ****     #define GOODBYE_SONG SONG(GOODBYE_SOUND)
  61:quantum/quantum.c ****   #endif
  62:quantum/quantum.c ****   #ifndef AG_NORM_SONG
  63:quantum/quantum.c ****     #define AG_NORM_SONG SONG(AG_NORM_SOUND)
  64:quantum/quantum.c ****   #endif
  65:quantum/quantum.c ****   #ifndef AG_SWAP_SONG
  66:quantum/quantum.c ****     #define AG_SWAP_SONG SONG(AG_SWAP_SOUND)
  67:quantum/quantum.c ****   #endif
  68:quantum/quantum.c ****   float goodbye_song[][2] = GOODBYE_SONG;
  69:quantum/quantum.c ****   float ag_norm_song[][2] = AG_NORM_SONG;
  70:quantum/quantum.c ****   float ag_swap_song[][2] = AG_SWAP_SONG;
  71:quantum/quantum.c ****   #ifdef DEFAULT_LAYER_SONGS
  72:quantum/quantum.c ****     float default_layer_songs[][16][2] = DEFAULT_LAYER_SONGS;
  73:quantum/quantum.c ****   #endif
  74:quantum/quantum.c **** #endif
  75:quantum/quantum.c **** 
  76:quantum/quantum.c **** static void do_code16 (uint16_t code, void (*f) (uint8_t)) {
  16               		.loc 1 76 60 view -0
  17               		.cfi_startproc
  18               		.loc 1 76 60 is_stmt 0 view .LVU1
  19 0000 0F93      		push r16
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 16, -2
  23 0002 1F93      		push r17
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 17, -3
  27 0004 CF93      		push r28
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 28, -4
  31 0006 DF93      		push r29
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 29, -5
  35               	/* prologue: function */
  36               	/* frame size = 0 */
  37               	/* stack size = 4 */
  38               	.L__stack_usage = 4
  39 0008 8C01      		movw r16,r24
  40 000a EB01      		movw r28,r22
  77:quantum/quantum.c ****   switch (code) {
  41               		.loc 1 77 3 is_stmt 1 view .LVU2
  42 000c 9A95      		dec r25
  43               	.LVL1:
  44               		.loc 1 77 3 is_stmt 0 view .LVU3
  45 000e 8115      		cp r24,__zero_reg__
  46 0010 9F41      		sbci r25,31
  47 0012 00F4      		brsh .L1
  78:quantum/quantum.c ****   case QK_MODS ... QK_MODS_MAX:
  79:quantum/quantum.c ****     break;
  48               		.loc 1 79 5 is_stmt 1 view .LVU4
  80:quantum/quantum.c ****   default:
  81:quantum/quantum.c ****     return;
  82:quantum/quantum.c ****   }
  83:quantum/quantum.c **** 
  84:quantum/quantum.c ****   if (code & QK_LCTL)
  49               		.loc 1 84 3 view .LVU5
  50               		.loc 1 84 6 is_stmt 0 view .LVU6
  51 0014 10FF      		sbrs r17,0
  52 0016 00C0      		rjmp .L4
  85:quantum/quantum.c ****     f(KC_LCTL);
  53               		.loc 1 85 5 is_stmt 1 view .LVU7
  54 0018 80EE      		ldi r24,lo8(-32)
  55 001a FB01      		movw r30,r22
  56 001c 0995      		icall
  57               	.LVL2:
  58               	.L4:
  86:quantum/quantum.c ****   if (code & QK_LSFT)
  59               		.loc 1 86 3 view .LVU8
  60               		.loc 1 86 6 is_stmt 0 view .LVU9
  61 001e 11FF      		sbrs r17,1
  62 0020 00C0      		rjmp .L5
  87:quantum/quantum.c ****     f(KC_LSFT);
  63               		.loc 1 87 5 is_stmt 1 view .LVU10
  64 0022 81EE      		ldi r24,lo8(-31)
  65 0024 FE01      		movw r30,r28
  66 0026 0995      		icall
  67               	.LVL3:
  68               	.L5:
  88:quantum/quantum.c ****   if (code & QK_LALT)
  69               		.loc 1 88 3 view .LVU11
  70               		.loc 1 88 6 is_stmt 0 view .LVU12
  71 0028 12FF      		sbrs r17,2
  72 002a 00C0      		rjmp .L6
  89:quantum/quantum.c ****     f(KC_LALT);
  73               		.loc 1 89 5 is_stmt 1 view .LVU13
  74 002c 82EE      		ldi r24,lo8(-30)
  75 002e FE01      		movw r30,r28
  76 0030 0995      		icall
  77               	.LVL4:
  78               	.L6:
  90:quantum/quantum.c ****   if (code & QK_LGUI)
  79               		.loc 1 90 3 view .LVU14
  80               		.loc 1 90 6 is_stmt 0 view .LVU15
  81 0032 13FF      		sbrs r17,3
  82 0034 00C0      		rjmp .L7
  91:quantum/quantum.c ****     f(KC_LGUI);
  83               		.loc 1 91 5 is_stmt 1 view .LVU16
  84 0036 83EE      		ldi r24,lo8(-29)
  85 0038 FE01      		movw r30,r28
  86 003a 0995      		icall
  87               	.LVL5:
  88               	.L7:
  92:quantum/quantum.c **** 
  93:quantum/quantum.c ****   if (code < QK_RMODS_MIN) return;
  89               		.loc 1 93 3 view .LVU17
  90               		.loc 1 93 6 is_stmt 0 view .LVU18
  91 003c 0115      		cp r16,__zero_reg__
  92 003e 1041      		sbci r17,16
  93 0040 00F0      		brlo .L1
  94:quantum/quantum.c **** 
  95:quantum/quantum.c ****   if (code & QK_RCTL)
  94               		.loc 1 95 3 is_stmt 1 view .LVU19
  96:quantum/quantum.c ****     f(KC_RCTL);
  95               		.loc 1 96 5 view .LVU20
  96 0042 84EE      		ldi r24,lo8(-28)
  97 0044 FE01      		movw r30,r28
  98 0046 0995      		icall
  99               	.LVL6:
  97:quantum/quantum.c ****   if (code & QK_RSFT)
 100               		.loc 1 97 3 view .LVU21
  98:quantum/quantum.c ****     f(KC_RSFT);
 101               		.loc 1 98 5 view .LVU22
 102 0048 85EE      		ldi r24,lo8(-27)
 103 004a FE01      		movw r30,r28
 104 004c 0995      		icall
 105               	.LVL7:
  99:quantum/quantum.c ****   if (code & QK_RALT)
 106               		.loc 1 99 3 view .LVU23
 100:quantum/quantum.c ****     f(KC_RALT);
 107               		.loc 1 100 5 view .LVU24
 108 004e 86EE      		ldi r24,lo8(-26)
 109 0050 FE01      		movw r30,r28
 110 0052 0995      		icall
 111               	.LVL8:
 101:quantum/quantum.c ****   if (code & QK_RGUI)
 112               		.loc 1 101 3 view .LVU25
 102:quantum/quantum.c ****     f(KC_RGUI);
 113               		.loc 1 102 5 view .LVU26
 114 0054 87EE      		ldi r24,lo8(-25)
 115 0056 FE01      		movw r30,r28
 116               	/* epilogue start */
 103:quantum/quantum.c **** }
 117               		.loc 1 103 1 is_stmt 0 view .LVU27
 118 0058 DF91      		pop r29
 119 005a CF91      		pop r28
 120               	.LVL9:
 121               		.loc 1 103 1 view .LVU28
 122 005c 1F91      		pop r17
 123 005e 0F91      		pop r16
 124               	.LVL10:
 102:quantum/quantum.c ****     f(KC_RGUI);
 125               		.loc 1 102 5 view .LVU29
 126 0060 0994      		ijmp
 127               	.LVL11:
 128               	.L1:
 129               	/* epilogue start */
 130               		.loc 1 103 1 view .LVU30
 131 0062 DF91      		pop r29
 132 0064 CF91      		pop r28
 133               	.LVL12:
 134               		.loc 1 103 1 view .LVU31
 135 0066 1F91      		pop r17
 136 0068 0F91      		pop r16
 137               	.LVL13:
 138               		.loc 1 103 1 view .LVU32
 139 006a 0895      		ret
 140               		.cfi_endproc
 141               	.LFE122:
 143               		.section	.text.qk_register_weak_mods,"ax",@progbits
 145               	qk_register_weak_mods:
 146               	.LVL14:
 147               	.LFB123:
 104:quantum/quantum.c **** 
 105:quantum/quantum.c **** static inline void qk_register_weak_mods(uint8_t kc) {
 148               		.loc 1 105 54 is_stmt 1 view -0
 149               		.cfi_startproc
 150               	/* prologue: function */
 151               	/* frame size = 0 */
 152               	/* stack size = 0 */
 153               	.L__stack_usage = 0
 106:quantum/quantum.c ****     add_weak_mods(MOD_BIT(kc));
 154               		.loc 1 106 5 view .LVU34
 155               		.loc 1 106 19 is_stmt 0 view .LVU35
 156 0000 8770      		andi r24,lo8(7)
 157               	.LVL15:
 158               		.loc 1 106 5 view .LVU36
 159 0002 91E0      		ldi r25,lo8(1)
 160 0004 00C0      		rjmp 2f
 161               		1:
 162 0006 990F      		lsl r25
 163               		2:
 164 0008 8A95      		dec r24
 165 000a 02F4      		brpl 1b
 166 000c 892F      		mov r24,r25
 167 000e 0E94 0000 		call add_weak_mods
 168               	.LVL16:
 107:quantum/quantum.c ****     send_keyboard_report();
 169               		.loc 1 107 5 is_stmt 1 view .LVU37
 170 0012 0C94 0000 		jmp send_keyboard_report
 171               	.LVL17:
 172               		.cfi_endproc
 173               	.LFE123:
 175               		.section	.text.qk_register_mods,"ax",@progbits
 177               	qk_register_mods:
 178               	.LFB194:
 179               		.cfi_startproc
 180               	/* prologue: function */
 181               	/* frame size = 0 */
 182               	/* stack size = 0 */
 183               	.L__stack_usage = 0
 184 0000 0C94 0000 		jmp qk_register_weak_mods
 185               		.cfi_endproc
 186               	.LFE194:
 188               		.section	.text.qk_unregister_weak_mods,"ax",@progbits
 190               	qk_unregister_weak_mods:
 191               	.LVL18:
 192               	.LFB124:
 108:quantum/quantum.c **** }
 109:quantum/quantum.c **** 
 110:quantum/quantum.c **** static inline void qk_unregister_weak_mods(uint8_t kc) {
 193               		.loc 1 110 56 view -0
 194               		.cfi_startproc
 195               	/* prologue: function */
 196               	/* frame size = 0 */
 197               	/* stack size = 0 */
 198               	.L__stack_usage = 0
 111:quantum/quantum.c ****     del_weak_mods(MOD_BIT(kc));
 199               		.loc 1 111 5 view .LVU39
 200               		.loc 1 111 19 is_stmt 0 view .LVU40
 201 0000 8770      		andi r24,lo8(7)
 202               	.LVL19:
 203               		.loc 1 111 5 view .LVU41
 204 0002 91E0      		ldi r25,lo8(1)
 205 0004 00C0      		rjmp 2f
 206               		1:
 207 0006 990F      		lsl r25
 208               		2:
 209 0008 8A95      		dec r24
 210 000a 02F4      		brpl 1b
 211 000c 892F      		mov r24,r25
 212 000e 0E94 0000 		call del_weak_mods
 213               	.LVL20:
 112:quantum/quantum.c ****     send_keyboard_report();
 214               		.loc 1 112 5 is_stmt 1 view .LVU42
 215 0012 0C94 0000 		jmp send_keyboard_report
 216               	.LVL21:
 217               		.cfi_endproc
 218               	.LFE124:
 220               		.section	.text.qk_unregister_mods,"ax",@progbits
 222               	qk_unregister_mods:
 223               	.LFB196:
 224               		.cfi_startproc
 225               	/* prologue: function */
 226               	/* frame size = 0 */
 227               	/* stack size = 0 */
 228               	.L__stack_usage = 0
 229 0000 0C94 0000 		jmp qk_unregister_weak_mods
 230               		.cfi_endproc
 231               	.LFE196:
 233               		.section	.text.rgblight_toggle,"ax",@progbits
 234               		.weak	rgblight_toggle
 236               	rgblight_toggle:
 237               	.LFB168:
 238               		.cfi_startproc
 239               	/* prologue: function */
 240               	/* frame size = 0 */
 241               	/* stack size = 0 */
 242               	.L__stack_usage = 0
 243               	/* epilogue start */
 244 0000 0895      		ret
 245               		.cfi_endproc
 246               	.LFE168:
 248               		.section	.text.rgblight_step,"ax",@progbits
 249               		.weak	rgblight_step
 251               	rgblight_step:
 252               	.LFB170:
 253               		.cfi_startproc
 254               	/* prologue: function */
 255               	/* frame size = 0 */
 256               	/* stack size = 0 */
 257               	.L__stack_usage = 0
 258               	/* epilogue start */
 259 0000 0895      		ret
 260               		.cfi_endproc
 261               	.LFE170:
 263               		.section	.text.rgblight_step_reverse,"ax",@progbits
 264               		.weak	rgblight_step_reverse
 266               	rgblight_step_reverse:
 267               	.LFB172:
 268               		.cfi_startproc
 269               	/* prologue: function */
 270               	/* frame size = 0 */
 271               	/* stack size = 0 */
 272               	.L__stack_usage = 0
 273               	/* epilogue start */
 274 0000 0895      		ret
 275               		.cfi_endproc
 276               	.LFE172:
 278               		.section	.text.rgblight_increase_hue,"ax",@progbits
 279               		.weak	rgblight_increase_hue
 281               	rgblight_increase_hue:
 282               	.LFB174:
 283               		.cfi_startproc
 284               	/* prologue: function */
 285               	/* frame size = 0 */
 286               	/* stack size = 0 */
 287               	.L__stack_usage = 0
 288               	/* epilogue start */
 289 0000 0895      		ret
 290               		.cfi_endproc
 291               	.LFE174:
 293               		.section	.text.rgblight_decrease_hue,"ax",@progbits
 294               		.weak	rgblight_decrease_hue
 296               	rgblight_decrease_hue:
 297               	.LFB176:
 298               		.cfi_startproc
 299               	/* prologue: function */
 300               	/* frame size = 0 */
 301               	/* stack size = 0 */
 302               	.L__stack_usage = 0
 303               	/* epilogue start */
 304 0000 0895      		ret
 305               		.cfi_endproc
 306               	.LFE176:
 308               		.section	.text.rgblight_increase_sat,"ax",@progbits
 309               		.weak	rgblight_increase_sat
 311               	rgblight_increase_sat:
 312               	.LFB178:
 313               		.cfi_startproc
 314               	/* prologue: function */
 315               	/* frame size = 0 */
 316               	/* stack size = 0 */
 317               	.L__stack_usage = 0
 318               	/* epilogue start */
 319 0000 0895      		ret
 320               		.cfi_endproc
 321               	.LFE178:
 323               		.section	.text.rgblight_decrease_sat,"ax",@progbits
 324               		.weak	rgblight_decrease_sat
 326               	rgblight_decrease_sat:
 327               	.LFB180:
 328               		.cfi_startproc
 329               	/* prologue: function */
 330               	/* frame size = 0 */
 331               	/* stack size = 0 */
 332               	.L__stack_usage = 0
 333               	/* epilogue start */
 334 0000 0895      		ret
 335               		.cfi_endproc
 336               	.LFE180:
 338               		.section	.text.rgblight_increase_val,"ax",@progbits
 339               		.weak	rgblight_increase_val
 341               	rgblight_increase_val:
 342               	.LFB182:
 343               		.cfi_startproc
 344               	/* prologue: function */
 345               	/* frame size = 0 */
 346               	/* stack size = 0 */
 347               	.L__stack_usage = 0
 348               	/* epilogue start */
 349 0000 0895      		ret
 350               		.cfi_endproc
 351               	.LFE182:
 353               		.section	.text.rgblight_decrease_val,"ax",@progbits
 354               		.weak	rgblight_decrease_val
 356               	rgblight_decrease_val:
 357               	.LFB184:
 358               		.cfi_startproc
 359               	/* prologue: function */
 360               	/* frame size = 0 */
 361               	/* stack size = 0 */
 362               	.L__stack_usage = 0
 363               	/* epilogue start */
 364 0000 0895      		ret
 365               		.cfi_endproc
 366               	.LFE184:
 368               		.section	.text.rgblight_increase_speed,"ax",@progbits
 369               		.weak	rgblight_increase_speed
 371               	rgblight_increase_speed:
 372               	.LFB186:
 373               		.cfi_startproc
 374               	/* prologue: function */
 375               	/* frame size = 0 */
 376               	/* stack size = 0 */
 377               	.L__stack_usage = 0
 378               	/* epilogue start */
 379 0000 0895      		ret
 380               		.cfi_endproc
 381               	.LFE186:
 383               		.section	.text.rgblight_decrease_speed,"ax",@progbits
 384               		.weak	rgblight_decrease_speed
 386               	rgblight_decrease_speed:
 387               	.LFB188:
 388               		.cfi_startproc
 389               	/* prologue: function */
 390               	/* frame size = 0 */
 391               	/* stack size = 0 */
 392               	.L__stack_usage = 0
 393               	/* epilogue start */
 394 0000 0895      		ret
 395               		.cfi_endproc
 396               	.LFE188:
 398               		.section	.text.register_code16,"ax",@progbits
 399               	.global	register_code16
 401               	register_code16:
 402               	.LVL22:
 403               	.LFB127:
 113:quantum/quantum.c **** }
 114:quantum/quantum.c **** 
 115:quantum/quantum.c **** static inline void qk_register_mods(uint8_t kc) {
 116:quantum/quantum.c ****     add_weak_mods(MOD_BIT(kc));
 117:quantum/quantum.c ****     send_keyboard_report();
 118:quantum/quantum.c **** }
 119:quantum/quantum.c **** 
 120:quantum/quantum.c **** static inline void qk_unregister_mods(uint8_t kc) {
 121:quantum/quantum.c ****     del_weak_mods(MOD_BIT(kc));
 122:quantum/quantum.c ****     send_keyboard_report();
 123:quantum/quantum.c **** }
 124:quantum/quantum.c **** 
 125:quantum/quantum.c **** void register_code16 (uint16_t code) {
 404               		.loc 1 125 38 view -0
 405               		.cfi_startproc
 406               		.loc 1 125 38 is_stmt 0 view .LVU44
 407 0000 CF93      		push r28
 408               	.LCFI4:
 409               		.cfi_def_cfa_offset 3
 410               		.cfi_offset 28, -2
 411 0002 DF93      		push r29
 412               	.LCFI5:
 413               		.cfi_def_cfa_offset 4
 414               		.cfi_offset 29, -3
 415               	/* prologue: function */
 416               	/* frame size = 0 */
 417               	/* stack size = 2 */
 418               	.L__stack_usage = 2
 419 0004 EC01      		movw r28,r24
 126:quantum/quantum.c ****   if (IS_MOD(code) || code == KC_NO) {
 420               		.loc 1 126 3 is_stmt 1 view .LVU45
 421               		.loc 1 126 7 is_stmt 0 view .LVU46
 422 0006 805E      		subi r24,-32
 423 0008 9109      		sbc r25,__zero_reg__
 424               	.LVL23:
 425               		.loc 1 126 6 view .LVU47
 426 000a 0897      		sbiw r24,8
 427 000c 00F0      		brlo .L37
 127:quantum/quantum.c ****       do_code16 (code, qk_register_mods);
 128:quantum/quantum.c ****   } else {
 129:quantum/quantum.c ****       do_code16 (code, qk_register_weak_mods);
 428               		.loc 1 129 7 discriminator 1 view .LVU48
 429 000e 60E0      		ldi r22,lo8(gs(qk_register_weak_mods))
 430 0010 70E0      		ldi r23,hi8(gs(qk_register_weak_mods))
 126:quantum/quantum.c ****   if (IS_MOD(code) || code == KC_NO) {
 431               		.loc 1 126 20 discriminator 1 view .LVU49
 432 0012 2097      		sbiw r28,0
 433 0014 01F4      		brne .L40
 434               	.L37:
 127:quantum/quantum.c ****       do_code16 (code, qk_register_mods);
 435               		.loc 1 127 7 is_stmt 1 view .LVU50
 436 0016 60E0      		ldi r22,lo8(gs(qk_register_mods))
 437 0018 70E0      		ldi r23,hi8(gs(qk_register_mods))
 438               	.L40:
 439               		.loc 1 129 7 is_stmt 0 view .LVU51
 440 001a CE01      		movw r24,r28
 441 001c 0E94 0000 		call do_code16
 442               	.LVL24:
 130:quantum/quantum.c ****   }
 131:quantum/quantum.c ****   register_code (code);
 443               		.loc 1 131 3 is_stmt 1 view .LVU52
 444 0020 8C2F      		mov r24,r28
 445               	/* epilogue start */
 132:quantum/quantum.c **** }
 446               		.loc 1 132 1 is_stmt 0 view .LVU53
 447 0022 DF91      		pop r29
 448 0024 CF91      		pop r28
 449               	.LVL25:
 131:quantum/quantum.c **** }
 450               		.loc 1 131 3 view .LVU54
 451 0026 0C94 0000 		jmp register_code
 452               	.LVL26:
 453               		.cfi_endproc
 454               	.LFE127:
 456               		.section	.text.unregister_code16,"ax",@progbits
 457               	.global	unregister_code16
 459               	unregister_code16:
 460               	.LVL27:
 461               	.LFB128:
 133:quantum/quantum.c **** 
 134:quantum/quantum.c **** void unregister_code16 (uint16_t code) {
 462               		.loc 1 134 40 is_stmt 1 view -0
 463               		.cfi_startproc
 464               		.loc 1 134 40 is_stmt 0 view .LVU56
 465 0000 CF93      		push r28
 466               	.LCFI6:
 467               		.cfi_def_cfa_offset 3
 468               		.cfi_offset 28, -2
 469 0002 DF93      		push r29
 470               	.LCFI7:
 471               		.cfi_def_cfa_offset 4
 472               		.cfi_offset 29, -3
 473               	/* prologue: function */
 474               	/* frame size = 0 */
 475               	/* stack size = 2 */
 476               	.L__stack_usage = 2
 477 0004 EC01      		movw r28,r24
 135:quantum/quantum.c ****   unregister_code (code);
 478               		.loc 1 135 3 is_stmt 1 view .LVU57
 479 0006 0E94 0000 		call unregister_code
 480               	.LVL28:
 136:quantum/quantum.c ****   if (IS_MOD(code) || code == KC_NO) {
 481               		.loc 1 136 3 view .LVU58
 482               		.loc 1 136 7 is_stmt 0 view .LVU59
 483 000a CE01      		movw r24,r28
 484 000c 805E      		subi r24,-32
 485 000e 9109      		sbc r25,__zero_reg__
 486               		.loc 1 136 6 view .LVU60
 487 0010 0897      		sbiw r24,8
 488 0012 00F0      		brlo .L42
 137:quantum/quantum.c ****       do_code16 (code, qk_unregister_mods);
 138:quantum/quantum.c ****   } else {
 139:quantum/quantum.c ****       do_code16 (code, qk_unregister_weak_mods);
 489               		.loc 1 139 7 discriminator 1 view .LVU61
 490 0014 60E0      		ldi r22,lo8(gs(qk_unregister_weak_mods))
 491 0016 70E0      		ldi r23,hi8(gs(qk_unregister_weak_mods))
 136:quantum/quantum.c ****   if (IS_MOD(code) || code == KC_NO) {
 492               		.loc 1 136 20 discriminator 1 view .LVU62
 493 0018 2097      		sbiw r28,0
 494 001a 01F4      		brne .L44
 495               	.L42:
 137:quantum/quantum.c ****       do_code16 (code, qk_unregister_mods);
 496               		.loc 1 137 7 is_stmt 1 view .LVU63
 497 001c 60E0      		ldi r22,lo8(gs(qk_unregister_mods))
 498 001e 70E0      		ldi r23,hi8(gs(qk_unregister_mods))
 499               	.L44:
 500               		.loc 1 139 7 is_stmt 0 view .LVU64
 501 0020 CE01      		movw r24,r28
 502               	/* epilogue start */
 140:quantum/quantum.c ****   }
 141:quantum/quantum.c **** }
 503               		.loc 1 141 1 view .LVU65
 504 0022 DF91      		pop r29
 505 0024 CF91      		pop r28
 506               	.LVL29:
 139:quantum/quantum.c ****   }
 507               		.loc 1 139 7 view .LVU66
 508 0026 0C94 0000 		jmp do_code16
 509               	.LVL30:
 139:quantum/quantum.c ****   }
 510               		.loc 1 139 7 view .LVU67
 511               		.cfi_endproc
 512               	.LFE128:
 514               		.section	.text.tap_code16,"ax",@progbits
 515               	.global	tap_code16
 517               	tap_code16:
 518               	.LVL31:
 519               	.LFB129:
 142:quantum/quantum.c **** 
 143:quantum/quantum.c **** void tap_code16(uint16_t code) {
 520               		.loc 1 143 32 is_stmt 1 view -0
 521               		.cfi_startproc
 522               		.loc 1 143 32 is_stmt 0 view .LVU69
 523 0000 CF93      		push r28
 524               	.LCFI8:
 525               		.cfi_def_cfa_offset 3
 526               		.cfi_offset 28, -2
 527 0002 DF93      		push r29
 528               	.LCFI9:
 529               		.cfi_def_cfa_offset 4
 530               		.cfi_offset 29, -3
 531               	/* prologue: function */
 532               	/* frame size = 0 */
 533               	/* stack size = 2 */
 534               	.L__stack_usage = 2
 535 0004 EC01      		movw r28,r24
 144:quantum/quantum.c ****   register_code16(code);
 536               		.loc 1 144 3 is_stmt 1 view .LVU70
 537 0006 0E94 0000 		call register_code16
 538               	.LVL32:
 145:quantum/quantum.c ****   #if TAP_CODE_DELAY > 0
 146:quantum/quantum.c ****     wait_ms(TAP_CODE_DELAY);
 147:quantum/quantum.c ****   #endif
 148:quantum/quantum.c ****   unregister_code16(code);
 539               		.loc 1 148 3 view .LVU71
 540 000a CE01      		movw r24,r28
 541               	/* epilogue start */
 149:quantum/quantum.c **** }
 542               		.loc 1 149 1 is_stmt 0 view .LVU72
 543 000c DF91      		pop r29
 544 000e CF91      		pop r28
 545               	.LVL33:
 148:quantum/quantum.c **** }
 546               		.loc 1 148 3 view .LVU73
 547 0010 0C94 0000 		jmp unregister_code16
 548               	.LVL34:
 148:quantum/quantum.c **** }
 549               		.loc 1 148 3 view .LVU74
 550               		.cfi_endproc
 551               	.LFE129:
 553               		.section	.text.process_action_kb,"ax",@progbits
 554               		.weak	process_action_kb
 556               	process_action_kb:
 557               	.LVL35:
 558               	.LFB130:
 150:quantum/quantum.c **** 
 151:quantum/quantum.c **** __attribute__ ((weak))
 152:quantum/quantum.c **** bool process_action_kb(keyrecord_t *record) {
 559               		.loc 1 152 45 is_stmt 1 view -0
 560               		.cfi_startproc
 561               	/* prologue: function */
 562               	/* frame size = 0 */
 563               	/* stack size = 0 */
 564               	.L__stack_usage = 0
 153:quantum/quantum.c ****   return true;
 565               		.loc 1 153 3 view .LVU76
 154:quantum/quantum.c **** }
 566               		.loc 1 154 1 is_stmt 0 view .LVU77
 567 0000 81E0      		ldi r24,lo8(1)
 568               	.LVL36:
 569               	/* epilogue start */
 570               		.loc 1 154 1 view .LVU78
 571 0002 0895      		ret
 572               		.cfi_endproc
 573               	.LFE130:
 575               		.section	.text.process_record_user,"ax",@progbits
 576               		.weak	process_record_user
 578               	process_record_user:
 579               	.LVL37:
 580               	.LFB132:
 155:quantum/quantum.c **** 
 156:quantum/quantum.c **** __attribute__ ((weak))
 157:quantum/quantum.c **** bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
 158:quantum/quantum.c ****   return process_record_user(keycode, record);
 159:quantum/quantum.c **** }
 160:quantum/quantum.c **** 
 161:quantum/quantum.c **** __attribute__ ((weak))
 162:quantum/quantum.c **** bool process_record_user(uint16_t keycode, keyrecord_t *record) {
 581               		.loc 1 162 65 is_stmt 1 view -0
 582               		.cfi_startproc
 583               	/* prologue: function */
 584               	/* frame size = 0 */
 585               	/* stack size = 0 */
 586               	.L__stack_usage = 0
 163:quantum/quantum.c ****   return true;
 587               		.loc 1 163 3 view .LVU80
 164:quantum/quantum.c **** }
 588               		.loc 1 164 1 is_stmt 0 view .LVU81
 589 0000 81E0      		ldi r24,lo8(1)
 590               	.LVL38:
 591               	/* epilogue start */
 592               		.loc 1 164 1 view .LVU82
 593 0002 0895      		ret
 594               		.cfi_endproc
 595               	.LFE132:
 597               		.section	.text.process_record_kb,"ax",@progbits
 598               		.weak	process_record_kb
 600               	process_record_kb:
 601               	.LVL39:
 602               	.LFB131:
 157:quantum/quantum.c ****   return process_record_user(keycode, record);
 603               		.loc 1 157 63 is_stmt 1 view -0
 604               		.cfi_startproc
 605               	/* prologue: function */
 606               	/* frame size = 0 */
 607               	/* stack size = 0 */
 608               	.L__stack_usage = 0
 158:quantum/quantum.c **** }
 609               		.loc 1 158 3 view .LVU84
 158:quantum/quantum.c **** }
 610               		.loc 1 158 10 is_stmt 0 view .LVU85
 611 0000 0C94 0000 		jmp process_record_user
 612               	.LVL40:
 158:quantum/quantum.c **** }
 613               		.loc 1 158 10 view .LVU86
 614               		.cfi_endproc
 615               	.LFE131:
 617               		.section	.text.get_event_keycode,"ax",@progbits
 618               	.global	get_event_keycode
 620               	get_event_keycode:
 621               	.LFB135:
 165:quantum/quantum.c **** 
 166:quantum/quantum.c **** void reset_keyboard(void) {
 167:quantum/quantum.c ****   clear_keyboard();
 168:quantum/quantum.c **** #if defined(MIDI_ENABLE) && defined(MIDI_BASIC)
 169:quantum/quantum.c ****   process_midi_all_notes_off();
 170:quantum/quantum.c **** #endif
 171:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 172:quantum/quantum.c ****   #ifndef NO_MUSIC_MODE
 173:quantum/quantum.c ****     music_all_notes_off();
 174:quantum/quantum.c ****   #endif
 175:quantum/quantum.c ****   uint16_t timer_start = timer_read();
 176:quantum/quantum.c ****   PLAY_SONG(goodbye_song);
 177:quantum/quantum.c ****   shutdown_user();
 178:quantum/quantum.c ****   while(timer_elapsed(timer_start) < 250)
 179:quantum/quantum.c ****     wait_ms(1);
 180:quantum/quantum.c ****   stop_all_notes();
 181:quantum/quantum.c **** #else
 182:quantum/quantum.c ****   shutdown_user();
 183:quantum/quantum.c ****   wait_ms(250);
 184:quantum/quantum.c **** #endif
 185:quantum/quantum.c **** #ifdef HAPTIC_ENABLE
 186:quantum/quantum.c ****   haptic_shutdown();
 187:quantum/quantum.c **** #endif
 188:quantum/quantum.c **** // this is also done later in bootloader.c - not sure if it's neccesary here
 189:quantum/quantum.c **** #ifdef BOOTLOADER_CATERINA
 190:quantum/quantum.c ****   *(uint16_t *)0x0800 = 0x7777; // these two are a-star-specific
 191:quantum/quantum.c **** #endif
 192:quantum/quantum.c ****   bootloader_jump();
 193:quantum/quantum.c **** }
 194:quantum/quantum.c **** 
 195:quantum/quantum.c **** /* true if the last press of GRAVE_ESC was shifted (i.e. GUI or SHIFT were pressed), false otherwis
 196:quantum/quantum.c ****  * Used to ensure that the correct keycode is released if the key is released.
 197:quantum/quantum.c ****  */
 198:quantum/quantum.c **** static bool grave_esc_was_shifted = false;
 199:quantum/quantum.c **** 
 200:quantum/quantum.c **** /* Convert record into usable keycode via the contained event. */
 201:quantum/quantum.c **** uint16_t get_record_keycode(keyrecord_t *record) {
 202:quantum/quantum.c ****   return get_event_keycode(record->event);
 203:quantum/quantum.c **** }
 204:quantum/quantum.c **** 
 205:quantum/quantum.c **** 
 206:quantum/quantum.c **** /* Convert event into usable keycode. Checks the layer cache to ensure that it
 207:quantum/quantum.c ****  * retains the correct keycode after a layer change, if the key is still pressed.
 208:quantum/quantum.c ****  */
 209:quantum/quantum.c **** uint16_t get_event_keycode(keyevent_t event) {
 622               		.loc 1 209 46 is_stmt 1 view -0
 623               		.cfi_startproc
 624 0000 1F93      		push r17
 625               	.LCFI10:
 626               		.cfi_def_cfa_offset 3
 627               		.cfi_offset 17, -2
 628 0002 CF93      		push r28
 629               	.LCFI11:
 630               		.cfi_def_cfa_offset 4
 631               		.cfi_offset 28, -3
 632 0004 DF93      		push r29
 633               	.LCFI12:
 634               		.cfi_def_cfa_offset 5
 635               		.cfi_offset 29, -4
 636 0006 00D0      		rcall .
 637 0008 00D0      		rcall .
 638 000a 0F92      		push __tmp_reg__
 639               	.LCFI13:
 640               		.cfi_def_cfa_offset 10
 641 000c CDB7      		in r28,__SP_L__
 642 000e DEB7      		in r29,__SP_H__
 643               	.LCFI14:
 644               		.cfi_def_cfa_register 28
 645               	/* prologue: function */
 646               	/* frame size = 5 */
 647               	/* stack size = 8 */
 648               	.L__stack_usage = 8
 649 0010 4983      		std Y+1,r20
 650 0012 5A83      		std Y+2,r21
 651 0014 6B83      		std Y+3,r22
 210:quantum/quantum.c **** 
 211:quantum/quantum.c ****   #if !defined(NO_ACTION_LAYER) && !defined(STRICT_LAYER_RELEASE)
 212:quantum/quantum.c ****     /* TODO: Use store_or_get_action() or a similar function. */
 213:quantum/quantum.c ****     if (!disable_action_cache) {
 652               		.loc 1 213 5 view .LVU88
 653               		.loc 1 213 8 is_stmt 0 view .LVU89
 654 0016 2091 0000 		lds r18,disable_action_cache
 655 001a 8981      		ldd r24,Y+1
 656 001c 9A81      		ldd r25,Y+2
 657 001e 2111      		cpse r18,__zero_reg__
 658 0020 00C0      		rjmp .L50
 659               	.LBB24:
 214:quantum/quantum.c ****       uint8_t layer;
 660               		.loc 1 214 7 is_stmt 1 view .LVU90
 215:quantum/quantum.c **** 
 216:quantum/quantum.c ****       if (event.pressed) {
 661               		.loc 1 216 7 view .LVU91
 662               		.loc 1 216 10 is_stmt 0 view .LVU92
 663 0022 6623      		tst r22
 664 0024 01F0      		breq .L51
 217:quantum/quantum.c ****         layer = layer_switch_get_layer(event.key);
 665               		.loc 1 217 9 is_stmt 1 view .LVU93
 666               		.loc 1 217 17 is_stmt 0 view .LVU94
 667 0026 0E94 0000 		call layer_switch_get_layer
 668               	.LVL41:
 669 002a 182F      		mov r17,r24
 670               	.LVL42:
 218:quantum/quantum.c ****         update_source_layers_cache(event.key, layer);
 671               		.loc 1 218 9 is_stmt 1 view .LVU95
 672 002c 682F      		mov r22,r24
 673 002e 8981      		ldd r24,Y+1
 674 0030 9A81      		ldd r25,Y+2
 675 0032 0E94 0000 		call update_source_layers_cache
 676               	.LVL43:
 677               	.L52:
 219:quantum/quantum.c ****       } else {
 220:quantum/quantum.c ****         layer = read_source_layers_cache(event.key);
 221:quantum/quantum.c ****       }
 222:quantum/quantum.c ****       return keymap_key_to_keycode(layer, event.key);
 678               		.loc 1 222 7 view .LVU96
 679               		.loc 1 222 14 is_stmt 0 view .LVU97
 680 0036 6981      		ldd r22,Y+1
 681 0038 7A81      		ldd r23,Y+2
 682 003a 812F      		mov r24,r17
 683               	.LVL44:
 684               	.L53:
 685               	/* epilogue start */
 686               		.loc 1 222 14 view .LVU98
 687               	.LBE24:
 223:quantum/quantum.c ****     } else
 224:quantum/quantum.c ****   #endif
 225:quantum/quantum.c ****     return keymap_key_to_keycode(layer_switch_get_layer(event.key), event.key);
 226:quantum/quantum.c **** }
 688               		.loc 1 226 1 view .LVU99
 689 003c 0F90      		pop __tmp_reg__
 690 003e 0F90      		pop __tmp_reg__
 691 0040 0F90      		pop __tmp_reg__
 692 0042 0F90      		pop __tmp_reg__
 693 0044 0F90      		pop __tmp_reg__
 694 0046 DF91      		pop r29
 695 0048 CF91      		pop r28
 696 004a 1F91      		pop r17
 225:quantum/quantum.c **** }
 697               		.loc 1 225 12 view .LVU100
 698 004c 0C94 0000 		jmp keymap_key_to_keycode
 699               	.LVL45:
 700               	.L51:
 701               	.LBB25:
 220:quantum/quantum.c ****       }
 702               		.loc 1 220 9 is_stmt 1 view .LVU101
 220:quantum/quantum.c ****       }
 703               		.loc 1 220 17 is_stmt 0 view .LVU102
 704 0050 0E94 0000 		call read_source_layers_cache
 705               	.LVL46:
 706 0054 182F      		mov r17,r24
 707               	.LVL47:
 220:quantum/quantum.c ****       }
 708               		.loc 1 220 17 view .LVU103
 709 0056 00C0      		rjmp .L52
 710               	.LVL48:
 711               	.L50:
 220:quantum/quantum.c ****       }
 712               		.loc 1 220 17 view .LVU104
 713               	.LBE25:
 225:quantum/quantum.c **** }
 714               		.loc 1 225 5 is_stmt 1 view .LVU105
 225:quantum/quantum.c **** }
 715               		.loc 1 225 12 is_stmt 0 view .LVU106
 716 0058 0E94 0000 		call layer_switch_get_layer
 717               	.LVL49:
 718 005c 6981      		ldd r22,Y+1
 719 005e 7A81      		ldd r23,Y+2
 720 0060 00C0      		rjmp .L53
 721               		.cfi_endproc
 722               	.LFE135:
 724               		.section	.text.get_record_keycode,"ax",@progbits
 725               	.global	get_record_keycode
 727               	get_record_keycode:
 728               	.LVL50:
 729               	.LFB134:
 201:quantum/quantum.c ****   return get_event_keycode(record->event);
 730               		.loc 1 201 50 is_stmt 1 view -0
 731               		.cfi_startproc
 732               	/* prologue: function */
 733               	/* frame size = 0 */
 734               	/* stack size = 0 */
 735               	.L__stack_usage = 0
 201:quantum/quantum.c ****   return get_event_keycode(record->event);
 736               		.loc 1 201 50 is_stmt 0 view .LVU108
 737 0000 FC01      		movw r30,r24
 202:quantum/quantum.c **** }
 738               		.loc 1 202 3 is_stmt 1 view .LVU109
 202:quantum/quantum.c **** }
 739               		.loc 1 202 10 is_stmt 0 view .LVU110
 740 0002 4081      		ld r20,Z
 741 0004 5181      		ldd r21,Z+1
 742 0006 6281      		ldd r22,Z+2
 743 0008 7381      		ldd r23,Z+3
 744 000a 8481      		ldd r24,Z+4
 745               	.LVL51:
 202:quantum/quantum.c **** }
 746               		.loc 1 202 10 view .LVU111
 747 000c 0C94 0000 		jmp get_event_keycode
 748               	.LVL52:
 202:quantum/quantum.c **** }
 749               		.loc 1 202 10 view .LVU112
 750               		.cfi_endproc
 751               	.LFE134:
 753               		.section	.text.send_char,"ax",@progbits
 754               	.global	send_char
 756               	send_char:
 757               	.LVL53:
 758               	.LFB141:
 227:quantum/quantum.c **** 
 228:quantum/quantum.c **** /* Main keycode processing function. Hands off handling to other functions,
 229:quantum/quantum.c ****  * then processes internal Quantum keycodes, then processes ACTIONs.
 230:quantum/quantum.c ****  */
 231:quantum/quantum.c **** bool process_record_quantum(keyrecord_t *record) {
 232:quantum/quantum.c ****     uint16_t keycode = get_record_keycode(record);
 233:quantum/quantum.c **** 
 234:quantum/quantum.c ****     // This is how you use actions here
 235:quantum/quantum.c ****     // if (keycode == KC_LEAD) {
 236:quantum/quantum.c ****     //   action_t action;
 237:quantum/quantum.c ****     //   action.code = ACTION_DEFAULT_LAYER_SET(0);
 238:quantum/quantum.c ****     //   process_action(record, action);
 239:quantum/quantum.c ****     //   return false;
 240:quantum/quantum.c ****     // }
 241:quantum/quantum.c **** 
 242:quantum/quantum.c ****   #ifdef VELOCIKEY_ENABLE
 243:quantum/quantum.c ****     if (velocikey_enabled() && record->event.pressed) { velocikey_accelerate(); }
 244:quantum/quantum.c ****   #endif
 245:quantum/quantum.c **** 
 246:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
 247:quantum/quantum.c ****     preprocess_tap_dance(keycode, record);
 248:quantum/quantum.c ****   #endif
 249:quantum/quantum.c **** 
 250:quantum/quantum.c ****   if (!(
 251:quantum/quantum.c ****   #if defined(KEY_LOCK_ENABLE)
 252:quantum/quantum.c ****     // Must run first to be able to mask key_up events.
 253:quantum/quantum.c ****     process_key_lock(&keycode, record) &&
 254:quantum/quantum.c ****   #endif
 255:quantum/quantum.c ****   #if defined(AUDIO_ENABLE) && defined(AUDIO_CLICKY)
 256:quantum/quantum.c ****     process_clicky(keycode, record) &&
 257:quantum/quantum.c ****   #endif //AUDIO_CLICKY
 258:quantum/quantum.c ****   #ifdef HAPTIC_ENABLE
 259:quantum/quantum.c ****     process_haptic(keycode, record) &&
 260:quantum/quantum.c ****   #endif //HAPTIC_ENABLE
 261:quantum/quantum.c ****   #if defined(RGB_MATRIX_ENABLE)
 262:quantum/quantum.c ****     process_rgb_matrix(keycode, record) &&
 263:quantum/quantum.c ****   #endif
 264:quantum/quantum.c ****     process_record_kb(keycode, record) &&
 265:quantum/quantum.c ****   #if defined(MIDI_ENABLE) && defined(MIDI_ADVANCED)
 266:quantum/quantum.c ****     process_midi(keycode, record) &&
 267:quantum/quantum.c ****   #endif
 268:quantum/quantum.c ****   #ifdef AUDIO_ENABLE
 269:quantum/quantum.c ****     process_audio(keycode, record) &&
 270:quantum/quantum.c ****   #endif
 271:quantum/quantum.c ****   #ifdef STENO_ENABLE
 272:quantum/quantum.c ****     process_steno(keycode, record) &&
 273:quantum/quantum.c ****   #endif
 274:quantum/quantum.c ****   #if (defined(AUDIO_ENABLE) || (defined(MIDI_ENABLE) && defined(MIDI_BASIC))) && !defined(NO_MUSIC
 275:quantum/quantum.c ****     process_music(keycode, record) &&
 276:quantum/quantum.c ****   #endif
 277:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
 278:quantum/quantum.c ****     process_tap_dance(keycode, record) &&
 279:quantum/quantum.c ****   #endif
 280:quantum/quantum.c ****   #if defined(UNICODE_ENABLE) || defined(UNICODEMAP_ENABLE) || defined(UCIS_ENABLE)
 281:quantum/quantum.c ****     process_unicode_common(keycode, record) &&
 282:quantum/quantum.c ****   #endif
 283:quantum/quantum.c ****   #ifdef LEADER_ENABLE
 284:quantum/quantum.c ****     process_leader(keycode, record) &&
 285:quantum/quantum.c ****   #endif
 286:quantum/quantum.c ****   #ifdef COMBO_ENABLE
 287:quantum/quantum.c ****     process_combo(keycode, record) &&
 288:quantum/quantum.c ****   #endif
 289:quantum/quantum.c ****   #ifdef PRINTING_ENABLE
 290:quantum/quantum.c ****     process_printer(keycode, record) &&
 291:quantum/quantum.c ****   #endif
 292:quantum/quantum.c ****   #ifdef AUTO_SHIFT_ENABLE
 293:quantum/quantum.c ****     process_auto_shift(keycode, record) &&
 294:quantum/quantum.c ****   #endif
 295:quantum/quantum.c ****   #ifdef TERMINAL_ENABLE
 296:quantum/quantum.c ****     process_terminal(keycode, record) &&
 297:quantum/quantum.c ****   #endif
 298:quantum/quantum.c ****   #ifdef SPACE_CADET_ENABLE
 299:quantum/quantum.c ****     process_space_cadet(keycode, record) &&
 300:quantum/quantum.c ****   #endif
 301:quantum/quantum.c ****       true)) {
 302:quantum/quantum.c ****     return false;
 303:quantum/quantum.c ****   }
 304:quantum/quantum.c **** 
 305:quantum/quantum.c ****   // Shift / paren setup
 306:quantum/quantum.c **** 
 307:quantum/quantum.c ****   switch(keycode) {
 308:quantum/quantum.c ****     case RESET:
 309:quantum/quantum.c ****       if (record->event.pressed) {
 310:quantum/quantum.c ****         reset_keyboard();
 311:quantum/quantum.c ****       }
 312:quantum/quantum.c ****     return false;
 313:quantum/quantum.c ****     case DEBUG:
 314:quantum/quantum.c ****       if (record->event.pressed) {
 315:quantum/quantum.c ****           debug_enable = true;
 316:quantum/quantum.c ****           print("DEBUG: enabled.\n");
 317:quantum/quantum.c ****       }
 318:quantum/quantum.c ****     return false;
 319:quantum/quantum.c ****     case EEPROM_RESET:
 320:quantum/quantum.c ****       if (record->event.pressed) {
 321:quantum/quantum.c ****           eeconfig_init();
 322:quantum/quantum.c ****       }
 323:quantum/quantum.c ****     return false;
 324:quantum/quantum.c ****   #ifdef FAUXCLICKY_ENABLE
 325:quantum/quantum.c ****   case FC_TOG:
 326:quantum/quantum.c ****     if (record->event.pressed) {
 327:quantum/quantum.c ****       FAUXCLICKY_TOGGLE;
 328:quantum/quantum.c ****     }
 329:quantum/quantum.c ****     return false;
 330:quantum/quantum.c ****   case FC_ON:
 331:quantum/quantum.c ****     if (record->event.pressed) {
 332:quantum/quantum.c ****       FAUXCLICKY_ON;
 333:quantum/quantum.c ****     }
 334:quantum/quantum.c ****     return false;
 335:quantum/quantum.c ****   case FC_OFF:
 336:quantum/quantum.c ****     if (record->event.pressed) {
 337:quantum/quantum.c ****       FAUXCLICKY_OFF;
 338:quantum/quantum.c ****     }
 339:quantum/quantum.c ****     return false;
 340:quantum/quantum.c ****   #endif
 341:quantum/quantum.c ****   #if defined(RGBLIGHT_ENABLE) || defined(RGB_MATRIX_ENABLE)
 342:quantum/quantum.c ****   case RGB_TOG:
 343:quantum/quantum.c ****     // Split keyboards need to trigger on key-up for edge-case issue
 344:quantum/quantum.c ****     #ifndef SPLIT_KEYBOARD
 345:quantum/quantum.c ****     if (record->event.pressed) {
 346:quantum/quantum.c ****     #else
 347:quantum/quantum.c ****     if (!record->event.pressed) {
 348:quantum/quantum.c ****     #endif
 349:quantum/quantum.c ****       rgblight_toggle();
 350:quantum/quantum.c ****     }
 351:quantum/quantum.c ****     return false;
 352:quantum/quantum.c ****   case RGB_MODE_FORWARD:
 353:quantum/quantum.c ****     if (record->event.pressed) {
 354:quantum/quantum.c ****       uint8_t shifted = get_mods() & (MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RSHIFT));
 355:quantum/quantum.c ****       if(shifted) {
 356:quantum/quantum.c ****         rgblight_step_reverse();
 357:quantum/quantum.c ****       }
 358:quantum/quantum.c ****       else {
 359:quantum/quantum.c ****         rgblight_step();
 360:quantum/quantum.c ****       }
 361:quantum/quantum.c ****     }
 362:quantum/quantum.c ****     return false;
 363:quantum/quantum.c ****   case RGB_MODE_REVERSE:
 364:quantum/quantum.c ****     if (record->event.pressed) {
 365:quantum/quantum.c ****       uint8_t shifted = get_mods() & (MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RSHIFT));
 366:quantum/quantum.c ****       if(shifted) {
 367:quantum/quantum.c ****         rgblight_step();
 368:quantum/quantum.c ****       }
 369:quantum/quantum.c ****       else {
 370:quantum/quantum.c ****         rgblight_step_reverse();
 371:quantum/quantum.c ****       }
 372:quantum/quantum.c ****     }
 373:quantum/quantum.c ****     return false;
 374:quantum/quantum.c ****   case RGB_HUI:
 375:quantum/quantum.c ****     // Split keyboards need to trigger on key-up for edge-case issue
 376:quantum/quantum.c ****     #ifndef SPLIT_KEYBOARD
 377:quantum/quantum.c ****     if (record->event.pressed) {
 378:quantum/quantum.c ****     #else
 379:quantum/quantum.c ****     if (!record->event.pressed) {
 380:quantum/quantum.c ****     #endif
 381:quantum/quantum.c ****       rgblight_increase_hue();
 382:quantum/quantum.c ****     }
 383:quantum/quantum.c ****     return false;
 384:quantum/quantum.c ****   case RGB_HUD:
 385:quantum/quantum.c ****     // Split keyboards need to trigger on key-up for edge-case issue
 386:quantum/quantum.c ****     #ifndef SPLIT_KEYBOARD
 387:quantum/quantum.c ****     if (record->event.pressed) {
 388:quantum/quantum.c ****     #else
 389:quantum/quantum.c ****     if (!record->event.pressed) {
 390:quantum/quantum.c ****     #endif
 391:quantum/quantum.c ****       rgblight_decrease_hue();
 392:quantum/quantum.c ****     }
 393:quantum/quantum.c ****     return false;
 394:quantum/quantum.c ****   case RGB_SAI:
 395:quantum/quantum.c ****     // Split keyboards need to trigger on key-up for edge-case issue
 396:quantum/quantum.c ****     #ifndef SPLIT_KEYBOARD
 397:quantum/quantum.c ****     if (record->event.pressed) {
 398:quantum/quantum.c ****     #else
 399:quantum/quantum.c ****     if (!record->event.pressed) {
 400:quantum/quantum.c ****     #endif
 401:quantum/quantum.c ****       rgblight_increase_sat();
 402:quantum/quantum.c ****     }
 403:quantum/quantum.c ****     return false;
 404:quantum/quantum.c ****   case RGB_SAD:
 405:quantum/quantum.c ****     // Split keyboards need to trigger on key-up for edge-case issue
 406:quantum/quantum.c ****     #ifndef SPLIT_KEYBOARD
 407:quantum/quantum.c ****     if (record->event.pressed) {
 408:quantum/quantum.c ****     #else
 409:quantum/quantum.c ****     if (!record->event.pressed) {
 410:quantum/quantum.c ****     #endif
 411:quantum/quantum.c ****       rgblight_decrease_sat();
 412:quantum/quantum.c ****     }
 413:quantum/quantum.c ****     return false;
 414:quantum/quantum.c ****   case RGB_VAI:
 415:quantum/quantum.c ****     // Split keyboards need to trigger on key-up for edge-case issue
 416:quantum/quantum.c ****     #ifndef SPLIT_KEYBOARD
 417:quantum/quantum.c ****     if (record->event.pressed) {
 418:quantum/quantum.c ****     #else
 419:quantum/quantum.c ****     if (!record->event.pressed) {
 420:quantum/quantum.c ****     #endif
 421:quantum/quantum.c ****       rgblight_increase_val();
 422:quantum/quantum.c ****     }
 423:quantum/quantum.c ****     return false;
 424:quantum/quantum.c ****   case RGB_VAD:
 425:quantum/quantum.c ****     // Split keyboards need to trigger on key-up for edge-case issue
 426:quantum/quantum.c ****     #ifndef SPLIT_KEYBOARD
 427:quantum/quantum.c ****     if (record->event.pressed) {
 428:quantum/quantum.c ****     #else
 429:quantum/quantum.c ****     if (!record->event.pressed) {
 430:quantum/quantum.c ****     #endif
 431:quantum/quantum.c ****       rgblight_decrease_val();
 432:quantum/quantum.c ****     }
 433:quantum/quantum.c ****     return false;
 434:quantum/quantum.c ****   case RGB_SPI:
 435:quantum/quantum.c ****     if (record->event.pressed) {
 436:quantum/quantum.c ****       rgblight_increase_speed();
 437:quantum/quantum.c ****     }
 438:quantum/quantum.c ****     return false;
 439:quantum/quantum.c ****   case RGB_SPD:
 440:quantum/quantum.c ****     if (record->event.pressed) {
 441:quantum/quantum.c ****       rgblight_decrease_speed();
 442:quantum/quantum.c ****     }
 443:quantum/quantum.c ****     return false;
 444:quantum/quantum.c ****   case RGB_MODE_PLAIN:
 445:quantum/quantum.c ****     if (record->event.pressed) {
 446:quantum/quantum.c ****       rgblight_mode(RGBLIGHT_MODE_STATIC_LIGHT);
 447:quantum/quantum.c ****     }
 448:quantum/quantum.c ****     return false;
 449:quantum/quantum.c ****   case RGB_MODE_BREATHE:
 450:quantum/quantum.c ****   #ifdef RGBLIGHT_EFFECT_BREATHING
 451:quantum/quantum.c ****     if (record->event.pressed) {
 452:quantum/quantum.c ****       if ((RGBLIGHT_MODE_BREATHING <= rgblight_get_mode()) &&
 453:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_BREATHING_end)) {
 454:quantum/quantum.c ****         rgblight_step();
 455:quantum/quantum.c ****       } else {
 456:quantum/quantum.c ****         rgblight_mode(RGBLIGHT_MODE_BREATHING);
 457:quantum/quantum.c ****       }
 458:quantum/quantum.c ****     }
 459:quantum/quantum.c ****   #endif
 460:quantum/quantum.c ****     return false;
 461:quantum/quantum.c ****   case RGB_MODE_RAINBOW:
 462:quantum/quantum.c ****   #ifdef RGBLIGHT_EFFECT_RAINBOW_MOOD
 463:quantum/quantum.c ****     if (record->event.pressed) {
 464:quantum/quantum.c ****       if ((RGBLIGHT_MODE_RAINBOW_MOOD <= rgblight_get_mode()) &&
 465:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_RAINBOW_MOOD_end)) {
 466:quantum/quantum.c ****         rgblight_step();
 467:quantum/quantum.c ****       } else {
 468:quantum/quantum.c ****         rgblight_mode(RGBLIGHT_MODE_RAINBOW_MOOD);
 469:quantum/quantum.c ****       }
 470:quantum/quantum.c ****     }
 471:quantum/quantum.c ****   #endif
 472:quantum/quantum.c ****     return false;
 473:quantum/quantum.c ****   case RGB_MODE_SWIRL:
 474:quantum/quantum.c ****   #ifdef RGBLIGHT_EFFECT_RAINBOW_SWIRL
 475:quantum/quantum.c ****     if (record->event.pressed) {
 476:quantum/quantum.c ****       if ((RGBLIGHT_MODE_RAINBOW_SWIRL <= rgblight_get_mode()) &&
 477:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_RAINBOW_SWIRL_end)) {
 478:quantum/quantum.c ****         rgblight_step();
 479:quantum/quantum.c ****       } else {
 480:quantum/quantum.c ****         rgblight_mode(RGBLIGHT_MODE_RAINBOW_SWIRL);
 481:quantum/quantum.c ****       }
 482:quantum/quantum.c ****     }
 483:quantum/quantum.c ****   #endif
 484:quantum/quantum.c ****     return false;
 485:quantum/quantum.c ****   case RGB_MODE_SNAKE:
 486:quantum/quantum.c ****   #ifdef RGBLIGHT_EFFECT_SNAKE
 487:quantum/quantum.c ****     if (record->event.pressed) {
 488:quantum/quantum.c ****       if ((RGBLIGHT_MODE_SNAKE <= rgblight_get_mode()) &&
 489:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_SNAKE_end)) {
 490:quantum/quantum.c ****         rgblight_step();
 491:quantum/quantum.c ****       } else {
 492:quantum/quantum.c ****         rgblight_mode(RGBLIGHT_MODE_SNAKE);
 493:quantum/quantum.c ****       }
 494:quantum/quantum.c ****     }
 495:quantum/quantum.c ****   #endif
 496:quantum/quantum.c ****     return false;
 497:quantum/quantum.c ****   case RGB_MODE_KNIGHT:
 498:quantum/quantum.c ****   #ifdef RGBLIGHT_EFFECT_KNIGHT
 499:quantum/quantum.c ****     if (record->event.pressed) {
 500:quantum/quantum.c ****       if ((RGBLIGHT_MODE_KNIGHT <= rgblight_get_mode()) &&
 501:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_KNIGHT_end)) {
 502:quantum/quantum.c ****         rgblight_step();
 503:quantum/quantum.c ****       } else {
 504:quantum/quantum.c ****         rgblight_mode(RGBLIGHT_MODE_KNIGHT);
 505:quantum/quantum.c ****       }
 506:quantum/quantum.c ****     }
 507:quantum/quantum.c ****   #endif
 508:quantum/quantum.c ****     return false;
 509:quantum/quantum.c ****   case RGB_MODE_XMAS:
 510:quantum/quantum.c ****   #ifdef RGBLIGHT_EFFECT_CHRISTMAS
 511:quantum/quantum.c ****     if (record->event.pressed) {
 512:quantum/quantum.c ****       rgblight_mode(RGBLIGHT_MODE_CHRISTMAS);
 513:quantum/quantum.c ****     }
 514:quantum/quantum.c ****   #endif
 515:quantum/quantum.c ****     return false;
 516:quantum/quantum.c ****   case RGB_MODE_GRADIENT:
 517:quantum/quantum.c ****   #ifdef RGBLIGHT_EFFECT_STATIC_GRADIENT
 518:quantum/quantum.c ****     if (record->event.pressed) {
 519:quantum/quantum.c ****       if ((RGBLIGHT_MODE_STATIC_GRADIENT <= rgblight_get_mode()) &&
 520:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_STATIC_GRADIENT_end)) {
 521:quantum/quantum.c ****         rgblight_step();
 522:quantum/quantum.c ****       } else {
 523:quantum/quantum.c ****         rgblight_mode(RGBLIGHT_MODE_STATIC_GRADIENT);
 524:quantum/quantum.c ****       }
 525:quantum/quantum.c ****     }
 526:quantum/quantum.c ****   #endif
 527:quantum/quantum.c ****     return false;
 528:quantum/quantum.c ****   case RGB_MODE_RGBTEST:
 529:quantum/quantum.c ****   #ifdef RGBLIGHT_EFFECT_RGB_TEST
 530:quantum/quantum.c ****     if (record->event.pressed) {
 531:quantum/quantum.c ****       rgblight_mode(RGBLIGHT_MODE_RGB_TEST);
 532:quantum/quantum.c ****     }
 533:quantum/quantum.c ****   #endif
 534:quantum/quantum.c ****     return false;
 535:quantum/quantum.c ****   #endif // defined(RGBLIGHT_ENABLE) || defined(RGB_MATRIX_ENABLE)
 536:quantum/quantum.c ****   #ifdef VELOCIKEY_ENABLE
 537:quantum/quantum.c ****     case VLK_TOG:
 538:quantum/quantum.c ****       if (record->event.pressed) {
 539:quantum/quantum.c ****         velocikey_toggle();
 540:quantum/quantum.c ****       }
 541:quantum/quantum.c ****       return false;
 542:quantum/quantum.c ****   #endif
 543:quantum/quantum.c ****   #ifdef PROTOCOL_LUFA
 544:quantum/quantum.c ****     case OUT_AUTO:
 545:quantum/quantum.c ****       if (record->event.pressed) {
 546:quantum/quantum.c ****         set_output(OUTPUT_AUTO);
 547:quantum/quantum.c ****       }
 548:quantum/quantum.c ****       return false;
 549:quantum/quantum.c ****     case OUT_USB:
 550:quantum/quantum.c ****       if (record->event.pressed) {
 551:quantum/quantum.c ****         set_output(OUTPUT_USB);
 552:quantum/quantum.c ****       }
 553:quantum/quantum.c ****       return false;
 554:quantum/quantum.c ****     #ifdef BLUETOOTH_ENABLE
 555:quantum/quantum.c ****     case OUT_BT:
 556:quantum/quantum.c ****       if (record->event.pressed) {
 557:quantum/quantum.c ****         set_output(OUTPUT_BLUETOOTH);
 558:quantum/quantum.c ****       }
 559:quantum/quantum.c ****       return false;
 560:quantum/quantum.c ****     #endif
 561:quantum/quantum.c ****     #endif
 562:quantum/quantum.c ****     case MAGIC_SWAP_CONTROL_CAPSLOCK ... MAGIC_TOGGLE_NKRO:
 563:quantum/quantum.c ****       if (record->event.pressed) {
 564:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 565:quantum/quantum.c ****         if (!eeconfig_is_enabled()) {
 566:quantum/quantum.c ****             eeconfig_init();
 567:quantum/quantum.c ****         }
 568:quantum/quantum.c ****         /* keymap config */
 569:quantum/quantum.c ****         keymap_config.raw = eeconfig_read_keymap();
 570:quantum/quantum.c ****         switch (keycode)
 571:quantum/quantum.c ****         {
 572:quantum/quantum.c ****           case MAGIC_SWAP_CONTROL_CAPSLOCK:
 573:quantum/quantum.c ****             keymap_config.swap_control_capslock = true;
 574:quantum/quantum.c ****             break;
 575:quantum/quantum.c ****           case MAGIC_CAPSLOCK_TO_CONTROL:
 576:quantum/quantum.c ****             keymap_config.capslock_to_control = true;
 577:quantum/quantum.c ****             break;
 578:quantum/quantum.c ****           case MAGIC_SWAP_LALT_LGUI:
 579:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = true;
 580:quantum/quantum.c ****             break;
 581:quantum/quantum.c ****           case MAGIC_SWAP_RALT_RGUI:
 582:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 583:quantum/quantum.c ****             break;
 584:quantum/quantum.c ****           case MAGIC_NO_GUI:
 585:quantum/quantum.c ****             keymap_config.no_gui = true;
 586:quantum/quantum.c ****             break;
 587:quantum/quantum.c ****           case MAGIC_SWAP_GRAVE_ESC:
 588:quantum/quantum.c ****             keymap_config.swap_grave_esc = true;
 589:quantum/quantum.c ****             break;
 590:quantum/quantum.c ****           case MAGIC_SWAP_BACKSLASH_BACKSPACE:
 591:quantum/quantum.c ****             keymap_config.swap_backslash_backspace = true;
 592:quantum/quantum.c ****             break;
 593:quantum/quantum.c ****           case MAGIC_HOST_NKRO:
 594:quantum/quantum.c ****             keymap_config.nkro = true;
 595:quantum/quantum.c ****             break;
 596:quantum/quantum.c ****           case MAGIC_SWAP_ALT_GUI:
 597:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = true;
 598:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 599:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 600:quantum/quantum.c ****               PLAY_SONG(ag_swap_song);
 601:quantum/quantum.c ****             #endif
 602:quantum/quantum.c ****             break;
 603:quantum/quantum.c ****           case MAGIC_UNSWAP_CONTROL_CAPSLOCK:
 604:quantum/quantum.c ****             keymap_config.swap_control_capslock = false;
 605:quantum/quantum.c ****             break;
 606:quantum/quantum.c ****           case MAGIC_UNCAPSLOCK_TO_CONTROL:
 607:quantum/quantum.c ****             keymap_config.capslock_to_control = false;
 608:quantum/quantum.c ****             break;
 609:quantum/quantum.c ****           case MAGIC_UNSWAP_LALT_LGUI:
 610:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = false;
 611:quantum/quantum.c ****             break;
 612:quantum/quantum.c ****           case MAGIC_UNSWAP_RALT_RGUI:
 613:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 614:quantum/quantum.c ****             break;
 615:quantum/quantum.c ****           case MAGIC_UNNO_GUI:
 616:quantum/quantum.c ****             keymap_config.no_gui = false;
 617:quantum/quantum.c ****             break;
 618:quantum/quantum.c ****           case MAGIC_UNSWAP_GRAVE_ESC:
 619:quantum/quantum.c ****             keymap_config.swap_grave_esc = false;
 620:quantum/quantum.c ****             break;
 621:quantum/quantum.c ****           case MAGIC_UNSWAP_BACKSLASH_BACKSPACE:
 622:quantum/quantum.c ****             keymap_config.swap_backslash_backspace = false;
 623:quantum/quantum.c ****             break;
 624:quantum/quantum.c ****           case MAGIC_UNHOST_NKRO:
 625:quantum/quantum.c ****             keymap_config.nkro = false;
 626:quantum/quantum.c ****             break;
 627:quantum/quantum.c ****           case MAGIC_UNSWAP_ALT_GUI:
 628:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = false;
 629:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 630:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 631:quantum/quantum.c ****               PLAY_SONG(ag_norm_song);
 632:quantum/quantum.c ****             #endif
 633:quantum/quantum.c ****             break;
 634:quantum/quantum.c ****           case MAGIC_TOGGLE_ALT_GUI:
 635:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
 636:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
 637:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 638:quantum/quantum.c ****               if (keymap_config.swap_ralt_rgui) {
 639:quantum/quantum.c ****                 PLAY_SONG(ag_swap_song);
 640:quantum/quantum.c ****               } else {
 641:quantum/quantum.c ****                 PLAY_SONG(ag_norm_song);
 642:quantum/quantum.c ****               }
 643:quantum/quantum.c ****             #endif
 644:quantum/quantum.c ****             break;
 645:quantum/quantum.c ****           case MAGIC_TOGGLE_NKRO:
 646:quantum/quantum.c ****             keymap_config.nkro = !keymap_config.nkro;
 647:quantum/quantum.c ****             break;
 648:quantum/quantum.c ****           default:
 649:quantum/quantum.c ****             break;
 650:quantum/quantum.c ****         }
 651:quantum/quantum.c ****         eeconfig_update_keymap(keymap_config.raw);
 652:quantum/quantum.c ****         clear_keyboard(); // clear to prevent stuck keys
 653:quantum/quantum.c **** 
 654:quantum/quantum.c ****         return false;
 655:quantum/quantum.c ****       }
 656:quantum/quantum.c ****       break;
 657:quantum/quantum.c **** 
 658:quantum/quantum.c ****     case GRAVE_ESC: {
 659:quantum/quantum.c ****       uint8_t shifted = get_mods() & ((MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RSHIFT)
 660:quantum/quantum.c ****                                       |MOD_BIT(KC_LGUI)|MOD_BIT(KC_RGUI)));
 661:quantum/quantum.c **** 
 662:quantum/quantum.c **** #ifdef GRAVE_ESC_ALT_OVERRIDE
 663:quantum/quantum.c ****       // if ALT is pressed, ESC is always sent
 664:quantum/quantum.c ****       // this is handy for the cmd+opt+esc shortcut on macOS, among other things.
 665:quantum/quantum.c ****       if (get_mods() & (MOD_BIT(KC_LALT) | MOD_BIT(KC_RALT))) {
 666:quantum/quantum.c ****         shifted = 0;
 667:quantum/quantum.c ****       }
 668:quantum/quantum.c **** #endif
 669:quantum/quantum.c **** 
 670:quantum/quantum.c **** #ifdef GRAVE_ESC_CTRL_OVERRIDE
 671:quantum/quantum.c ****       // if CTRL is pressed, ESC is always sent
 672:quantum/quantum.c ****       // this is handy for the ctrl+shift+esc shortcut on windows, among other things.
 673:quantum/quantum.c ****       if (get_mods() & (MOD_BIT(KC_LCTL) | MOD_BIT(KC_RCTL))) {
 674:quantum/quantum.c ****         shifted = 0;
 675:quantum/quantum.c ****       }
 676:quantum/quantum.c **** #endif
 677:quantum/quantum.c **** 
 678:quantum/quantum.c **** #ifdef GRAVE_ESC_GUI_OVERRIDE
 679:quantum/quantum.c ****       // if GUI is pressed, ESC is always sent
 680:quantum/quantum.c ****       if (get_mods() & (MOD_BIT(KC_LGUI) | MOD_BIT(KC_RGUI))) {
 681:quantum/quantum.c ****         shifted = 0;
 682:quantum/quantum.c ****       }
 683:quantum/quantum.c **** #endif
 684:quantum/quantum.c **** 
 685:quantum/quantum.c **** #ifdef GRAVE_ESC_SHIFT_OVERRIDE
 686:quantum/quantum.c ****       // if SHIFT is pressed, ESC is always sent
 687:quantum/quantum.c ****       if (get_mods() & (MOD_BIT(KC_LSHIFT) | MOD_BIT(KC_RSHIFT))) {
 688:quantum/quantum.c ****         shifted = 0;
 689:quantum/quantum.c ****       }
 690:quantum/quantum.c **** #endif
 691:quantum/quantum.c **** 
 692:quantum/quantum.c ****       if (record->event.pressed) {
 693:quantum/quantum.c ****         grave_esc_was_shifted = shifted;
 694:quantum/quantum.c ****         add_key(shifted ? KC_GRAVE : KC_ESCAPE);
 695:quantum/quantum.c ****       }
 696:quantum/quantum.c ****       else {
 697:quantum/quantum.c ****         del_key(grave_esc_was_shifted ? KC_GRAVE : KC_ESCAPE);
 698:quantum/quantum.c ****       }
 699:quantum/quantum.c **** 
 700:quantum/quantum.c ****       send_keyboard_report();
 701:quantum/quantum.c ****       return false;
 702:quantum/quantum.c ****     }
 703:quantum/quantum.c **** 
 704:quantum/quantum.c **** #if defined(BACKLIGHT_ENABLE) && defined(BACKLIGHT_BREATHING)
 705:quantum/quantum.c ****     case BL_BRTG: {
 706:quantum/quantum.c ****       if (record->event.pressed)
 707:quantum/quantum.c ****         breathing_toggle();
 708:quantum/quantum.c ****       return false;
 709:quantum/quantum.c ****     }
 710:quantum/quantum.c **** #endif
 711:quantum/quantum.c ****   }
 712:quantum/quantum.c **** 
 713:quantum/quantum.c ****   return process_action_kb(record);
 714:quantum/quantum.c **** }
 715:quantum/quantum.c **** 
 716:quantum/quantum.c **** __attribute__ ((weak))
 717:quantum/quantum.c **** const bool ascii_to_shift_lut[0x80] PROGMEM = {
 718:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 719:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 720:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 721:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 722:quantum/quantum.c ****     0, 1, 1, 1, 1, 1, 1, 0,
 723:quantum/quantum.c ****     1, 1, 1, 1, 0, 0, 0, 0,
 724:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 725:quantum/quantum.c ****     0, 0, 1, 0, 1, 0, 1, 1,
 726:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 727:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 728:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 729:quantum/quantum.c ****     1, 1, 1, 0, 0, 0, 1, 1,
 730:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 731:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 732:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 733:quantum/quantum.c ****     0, 0, 0, 1, 1, 1, 1, 0
 734:quantum/quantum.c **** };
 735:quantum/quantum.c **** 
 736:quantum/quantum.c **** __attribute__ ((weak))
 737:quantum/quantum.c **** const bool ascii_to_altgr_lut[0x80] PROGMEM = {
 738:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 739:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 740:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 741:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 742:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 743:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 744:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 745:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 746:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 747:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 748:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 749:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 750:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 751:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 752:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 753:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0
 754:quantum/quantum.c **** };
 755:quantum/quantum.c **** 
 756:quantum/quantum.c **** __attribute__ ((weak))
 757:quantum/quantum.c **** const uint8_t ascii_to_keycode_lut[0x80] PROGMEM = {
 758:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 759:quantum/quantum.c ****     KC_BSPC, KC_TAB, KC_ENT, 0, 0, 0, 0, 0,
 760:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 761:quantum/quantum.c ****     0, 0, 0, KC_ESC, 0, 0, 0, 0,
 762:quantum/quantum.c ****     KC_SPC, KC_1, KC_QUOT, KC_3, KC_4, KC_5, KC_7, KC_QUOT,
 763:quantum/quantum.c ****     KC_9, KC_0, KC_8, KC_EQL, KC_COMM, KC_MINS, KC_DOT, KC_SLSH,
 764:quantum/quantum.c ****     KC_0, KC_1, KC_2, KC_3, KC_4, KC_5, KC_6, KC_7,
 765:quantum/quantum.c ****     KC_8, KC_9, KC_SCLN, KC_SCLN, KC_COMM, KC_EQL, KC_DOT, KC_SLSH,
 766:quantum/quantum.c ****     KC_2, KC_A, KC_B, KC_C, KC_D, KC_E, KC_F, KC_G,
 767:quantum/quantum.c ****     KC_H, KC_I, KC_J, KC_K, KC_L, KC_M, KC_N, KC_O,
 768:quantum/quantum.c ****     KC_P, KC_Q, KC_R, KC_S, KC_T, KC_U, KC_V, KC_W,
 769:quantum/quantum.c ****     KC_X, KC_Y, KC_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_6, KC_MINS,
 770:quantum/quantum.c ****     KC_GRV, KC_A, KC_B, KC_C, KC_D, KC_E, KC_F, KC_G,
 771:quantum/quantum.c ****     KC_H, KC_I, KC_J, KC_K, KC_L, KC_M, KC_N, KC_O,
 772:quantum/quantum.c ****     KC_P, KC_Q, KC_R, KC_S, KC_T, KC_U, KC_V, KC_W,
 773:quantum/quantum.c ****     KC_X, KC_Y, KC_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_GRV, KC_DEL
 774:quantum/quantum.c **** };
 775:quantum/quantum.c **** 
 776:quantum/quantum.c **** void send_string(const char *str) {
 777:quantum/quantum.c ****   send_string_with_delay(str, 0);
 778:quantum/quantum.c **** }
 779:quantum/quantum.c **** 
 780:quantum/quantum.c **** void send_string_P(const char *str) {
 781:quantum/quantum.c ****   send_string_with_delay_P(str, 0);
 782:quantum/quantum.c **** }
 783:quantum/quantum.c **** 
 784:quantum/quantum.c **** void send_string_with_delay(const char *str, uint8_t interval) {
 785:quantum/quantum.c ****     while (1) {
 786:quantum/quantum.c ****         char ascii_code = *str;
 787:quantum/quantum.c ****         if (!ascii_code) break;
 788:quantum/quantum.c ****         if (ascii_code == SS_TAP_CODE) {
 789:quantum/quantum.c ****           // tap
 790:quantum/quantum.c ****           uint8_t keycode = *(++str);
 791:quantum/quantum.c ****           register_code(keycode);
 792:quantum/quantum.c ****           unregister_code(keycode);
 793:quantum/quantum.c ****         } else if (ascii_code == SS_DOWN_CODE) {
 794:quantum/quantum.c ****           // down
 795:quantum/quantum.c ****           uint8_t keycode = *(++str);
 796:quantum/quantum.c ****           register_code(keycode);
 797:quantum/quantum.c ****         } else if (ascii_code == SS_UP_CODE) {
 798:quantum/quantum.c ****           // up
 799:quantum/quantum.c ****           uint8_t keycode = *(++str);
 800:quantum/quantum.c ****           unregister_code(keycode);
 801:quantum/quantum.c ****         } else {
 802:quantum/quantum.c ****           send_char(ascii_code);
 803:quantum/quantum.c ****         }
 804:quantum/quantum.c ****         ++str;
 805:quantum/quantum.c ****         // interval
 806:quantum/quantum.c ****         { uint8_t ms = interval; while (ms--) wait_ms(1); }
 807:quantum/quantum.c ****     }
 808:quantum/quantum.c **** }
 809:quantum/quantum.c **** 
 810:quantum/quantum.c **** void send_string_with_delay_P(const char *str, uint8_t interval) {
 811:quantum/quantum.c ****     while (1) {
 812:quantum/quantum.c ****         char ascii_code = pgm_read_byte(str);
 813:quantum/quantum.c ****         if (!ascii_code) break;
 814:quantum/quantum.c ****         if (ascii_code == SS_TAP_CODE) {
 815:quantum/quantum.c ****           // tap
 816:quantum/quantum.c ****           uint8_t keycode = pgm_read_byte(++str);
 817:quantum/quantum.c ****           register_code(keycode);
 818:quantum/quantum.c ****           unregister_code(keycode);
 819:quantum/quantum.c ****         } else if (ascii_code == SS_DOWN_CODE) {
 820:quantum/quantum.c ****           // down
 821:quantum/quantum.c ****           uint8_t keycode = pgm_read_byte(++str);
 822:quantum/quantum.c ****           register_code(keycode);
 823:quantum/quantum.c ****         } else if (ascii_code == SS_UP_CODE) {
 824:quantum/quantum.c ****           // up
 825:quantum/quantum.c ****           uint8_t keycode = pgm_read_byte(++str);
 826:quantum/quantum.c ****           unregister_code(keycode);
 827:quantum/quantum.c ****         } else {
 828:quantum/quantum.c ****           send_char(ascii_code);
 829:quantum/quantum.c ****         }
 830:quantum/quantum.c ****         ++str;
 831:quantum/quantum.c ****         // interval
 832:quantum/quantum.c ****         { uint8_t ms = interval; while (ms--) wait_ms(1); }
 833:quantum/quantum.c ****     }
 834:quantum/quantum.c **** }
 835:quantum/quantum.c **** 
 836:quantum/quantum.c **** void send_char(char ascii_code) {
 759               		.loc 1 836 33 is_stmt 1 view -0
 760               		.cfi_startproc
 761               		.loc 1 836 33 is_stmt 0 view .LVU114
 762 0000 1F93      		push r17
 763               	.LCFI15:
 764               		.cfi_def_cfa_offset 3
 765               		.cfi_offset 17, -2
 766 0002 CF93      		push r28
 767               	.LCFI16:
 768               		.cfi_def_cfa_offset 4
 769               		.cfi_offset 28, -3
 770 0004 DF93      		push r29
 771               	.LCFI17:
 772               		.cfi_def_cfa_offset 5
 773               		.cfi_offset 29, -4
 774               	/* prologue: function */
 775               	/* frame size = 0 */
 776               	/* stack size = 3 */
 777               	.L__stack_usage = 3
 837:quantum/quantum.c ****   uint8_t keycode = pgm_read_byte(&ascii_to_keycode_lut[(uint8_t)ascii_code]);
 778               		.loc 1 837 3 is_stmt 1 view .LVU115
 779               	.LBB26:
 780               		.loc 1 837 21 view .LVU116
 781 0006 90E0      		ldi r25,0
 782               	.LVL54:
 783               		.loc 1 837 21 view .LVU117
 784               		.loc 1 837 21 view .LVU118
 785 0008 FC01      		movw r30,r24
 786 000a E050      		subi r30,lo8(-(ascii_to_keycode_lut))
 787 000c F040      		sbci r31,hi8(-(ascii_to_keycode_lut))
 788               	.LVL55:
 789               		.loc 1 837 21 is_stmt 0 view .LVU119
 790               	/* #APP */
 791               	 ;  837 "quantum/quantum.c" 1
 792 000e 1491      		lpm r17, Z
 793               		
 794               	 ;  0 "" 2
 795               	.LVL56:
 796               		.loc 1 837 21 is_stmt 1 view .LVU120
 797               		.loc 1 837 21 is_stmt 0 view .LVU121
 798               	/* #NOAPP */
 799               	.LBE26:
 838:quantum/quantum.c ****   bool is_shifted = pgm_read_byte(&ascii_to_shift_lut[(uint8_t)ascii_code]);
 800               		.loc 1 838 3 is_stmt 1 view .LVU122
 801               	.LBB27:
 802               		.loc 1 838 21 view .LVU123
 803               		.loc 1 838 21 view .LVU124
 804               		.loc 1 838 21 view .LVU125
 805 0010 FC01      		movw r30,r24
 806               	.LVL57:
 807               		.loc 1 838 21 is_stmt 0 view .LVU126
 808 0012 E050      		subi r30,lo8(-(ascii_to_shift_lut))
 809 0014 F040      		sbci r31,hi8(-(ascii_to_shift_lut))
 810               	.LVL58:
 811               		.loc 1 838 21 view .LVU127
 812               	/* #APP */
 813               	 ;  838 "quantum/quantum.c" 1
 814 0016 D491      		lpm r29, Z
 815               		
 816               	 ;  0 "" 2
 817               	.LVL59:
 818               		.loc 1 838 21 is_stmt 1 view .LVU128
 819               		.loc 1 838 21 is_stmt 0 view .LVU129
 820               	/* #NOAPP */
 821               	.LBE27:
 839:quantum/quantum.c ****   bool is_altgred = pgm_read_byte(&ascii_to_altgr_lut[(uint8_t)ascii_code]);
 822               		.loc 1 839 3 is_stmt 1 view .LVU130
 823               	.LBB28:
 824               		.loc 1 839 21 view .LVU131
 825               		.loc 1 839 21 view .LVU132
 826               		.loc 1 839 21 view .LVU133
 827 0018 8050      		subi r24,lo8(-(ascii_to_altgr_lut))
 828 001a 9040      		sbci r25,hi8(-(ascii_to_altgr_lut))
 829               	.LVL60:
 830               		.loc 1 839 21 is_stmt 0 view .LVU134
 831 001c FC01      		movw r30,r24
 832               	.LVL61:
 833               		.loc 1 839 21 view .LVU135
 834               	/* #APP */
 835               	 ;  839 "quantum/quantum.c" 1
 836 001e C491      		lpm r28, Z
 837               		
 838               	 ;  0 "" 2
 839               	.LVL62:
 840               		.loc 1 839 21 is_stmt 1 view .LVU136
 841               		.loc 1 839 21 is_stmt 0 view .LVU137
 842               	/* #NOAPP */
 843               	.LBE28:
 840:quantum/quantum.c **** 
 841:quantum/quantum.c ****   if (is_shifted) {
 844               		.loc 1 841 3 is_stmt 1 view .LVU138
 845               		.loc 1 841 6 is_stmt 0 view .LVU139
 846 0020 DD23      		tst r29
 847 0022 01F0      		breq .L56
 842:quantum/quantum.c ****     register_code(KC_LSFT);
 848               		.loc 1 842 5 is_stmt 1 view .LVU140
 849 0024 81EE      		ldi r24,lo8(-31)
 850               	.LVL63:
 851               		.loc 1 842 5 is_stmt 0 view .LVU141
 852 0026 0E94 0000 		call register_code
 853               	.LVL64:
 854               	.L56:
 843:quantum/quantum.c ****   }
 844:quantum/quantum.c ****   if (is_altgred) {
 855               		.loc 1 844 3 is_stmt 1 view .LVU142
 856               		.loc 1 844 6 is_stmt 0 view .LVU143
 857 002a CC23      		tst r28
 858 002c 01F0      		breq .L57
 845:quantum/quantum.c ****     register_code(KC_RALT);
 859               		.loc 1 845 5 is_stmt 1 view .LVU144
 860 002e 86EE      		ldi r24,lo8(-26)
 861 0030 0E94 0000 		call register_code
 862               	.LVL65:
 863               	.L57:
 846:quantum/quantum.c ****   }
 847:quantum/quantum.c ****   tap_code(keycode);
 864               		.loc 1 847 3 view .LVU145
 865 0034 812F      		mov r24,r17
 866 0036 0E94 0000 		call tap_code
 867               	.LVL66:
 848:quantum/quantum.c ****   if (is_altgred) {
 868               		.loc 1 848 3 view .LVU146
 869               		.loc 1 848 6 is_stmt 0 view .LVU147
 870 003a CC23      		tst r28
 871 003c 01F0      		breq .L58
 849:quantum/quantum.c ****     unregister_code(KC_RALT);
 872               		.loc 1 849 5 is_stmt 1 view .LVU148
 873 003e 86EE      		ldi r24,lo8(-26)
 874 0040 0E94 0000 		call unregister_code
 875               	.LVL67:
 876               	.L58:
 850:quantum/quantum.c ****   }
 851:quantum/quantum.c ****   if (is_shifted) {
 877               		.loc 1 851 3 view .LVU149
 878               		.loc 1 851 6 is_stmt 0 view .LVU150
 879 0044 DD23      		tst r29
 880 0046 01F0      		breq .L55
 852:quantum/quantum.c ****     unregister_code(KC_LSFT);
 881               		.loc 1 852 5 is_stmt 1 view .LVU151
 882 0048 81EE      		ldi r24,lo8(-31)
 883               	/* epilogue start */
 853:quantum/quantum.c ****   }
 854:quantum/quantum.c **** }
 884               		.loc 1 854 1 is_stmt 0 view .LVU152
 885 004a DF91      		pop r29
 886               	.LVL68:
 887               		.loc 1 854 1 view .LVU153
 888 004c CF91      		pop r28
 889               	.LVL69:
 890               		.loc 1 854 1 view .LVU154
 891 004e 1F91      		pop r17
 892               	.LVL70:
 852:quantum/quantum.c ****     unregister_code(KC_LSFT);
 893               		.loc 1 852 5 view .LVU155
 894 0050 0C94 0000 		jmp unregister_code
 895               	.LVL71:
 896               	.L55:
 897               	/* epilogue start */
 898               		.loc 1 854 1 view .LVU156
 899 0054 DF91      		pop r29
 900               	.LVL72:
 901               		.loc 1 854 1 view .LVU157
 902 0056 CF91      		pop r28
 903               	.LVL73:
 904               		.loc 1 854 1 view .LVU158
 905 0058 1F91      		pop r17
 906               	.LVL74:
 907               		.loc 1 854 1 view .LVU159
 908 005a 0895      		ret
 909               		.cfi_endproc
 910               	.LFE141:
 912               		.section	.text.send_string_with_delay,"ax",@progbits
 913               	.global	send_string_with_delay
 915               	send_string_with_delay:
 916               	.LVL75:
 917               	.LFB139:
 784:quantum/quantum.c ****     while (1) {
 918               		.loc 1 784 64 is_stmt 1 view -0
 919               		.cfi_startproc
 784:quantum/quantum.c ****     while (1) {
 920               		.loc 1 784 64 is_stmt 0 view .LVU161
 921 0000 FF92      		push r15
 922               	.LCFI18:
 923               		.cfi_def_cfa_offset 3
 924               		.cfi_offset 15, -2
 925 0002 0F93      		push r16
 926               	.LCFI19:
 927               		.cfi_def_cfa_offset 4
 928               		.cfi_offset 16, -3
 929 0004 1F93      		push r17
 930               	.LCFI20:
 931               		.cfi_def_cfa_offset 5
 932               		.cfi_offset 17, -4
 933 0006 CF93      		push r28
 934               	.LCFI21:
 935               		.cfi_def_cfa_offset 6
 936               		.cfi_offset 28, -5
 937 0008 DF93      		push r29
 938               	.LCFI22:
 939               		.cfi_def_cfa_offset 7
 940               		.cfi_offset 29, -6
 941               	/* prologue: function */
 942               	/* frame size = 0 */
 943               	/* stack size = 5 */
 944               	.L__stack_usage = 5
 945 000a EC01      		movw r28,r24
 946 000c F62E      		mov r15,r22
 947               	.LVL76:
 948               	.L77:
 785:quantum/quantum.c ****         char ascii_code = *str;
 949               		.loc 1 785 5 is_stmt 1 view .LVU162
 950               	.LBB29:
 786:quantum/quantum.c ****         if (!ascii_code) break;
 951               		.loc 1 786 9 view .LVU163
 786:quantum/quantum.c ****         if (!ascii_code) break;
 952               		.loc 1 786 14 is_stmt 0 view .LVU164
 953 000e 8881      		ld r24,Y
 954               	.LVL77:
 787:quantum/quantum.c ****         if (ascii_code == SS_TAP_CODE) {
 955               		.loc 1 787 9 is_stmt 1 view .LVU165
 787:quantum/quantum.c ****         if (ascii_code == SS_TAP_CODE) {
 956               		.loc 1 787 12 is_stmt 0 view .LVU166
 957 0010 8823      		tst r24
 958 0012 01F0      		breq .L69
 788:quantum/quantum.c ****           // tap
 959               		.loc 1 788 9 is_stmt 1 view .LVU167
 960 0014 8E01      		movw r16,r28
 961 0016 0F5F      		subi r16,-1
 962 0018 1F4F      		sbci r17,-1
 788:quantum/quantum.c ****           // tap
 963               		.loc 1 788 12 is_stmt 0 view .LVU168
 964 001a 8130      		cpi r24,lo8(1)
 965 001c 01F4      		brne .L71
 966               	.LBB30:
 790:quantum/quantum.c ****           register_code(keycode);
 967               		.loc 1 790 11 is_stmt 1 view .LVU169
 968               	.LVL78:
 790:quantum/quantum.c ****           register_code(keycode);
 969               		.loc 1 790 19 is_stmt 0 view .LVU170
 970 001e C981      		ldd r28,Y+1
 971               	.LVL79:
 791:quantum/quantum.c ****           unregister_code(keycode);
 972               		.loc 1 791 11 is_stmt 1 view .LVU171
 973 0020 8C2F      		mov r24,r28
 974               	.LVL80:
 791:quantum/quantum.c ****           unregister_code(keycode);
 975               		.loc 1 791 11 is_stmt 0 view .LVU172
 976 0022 0E94 0000 		call register_code
 977               	.LVL81:
 792:quantum/quantum.c ****         } else if (ascii_code == SS_DOWN_CODE) {
 978               		.loc 1 792 11 is_stmt 1 view .LVU173
 979 0026 8C2F      		mov r24,r28
 980               	.LVL82:
 981               	.L78:
 792:quantum/quantum.c ****         } else if (ascii_code == SS_DOWN_CODE) {
 982               		.loc 1 792 11 is_stmt 0 view .LVU174
 983               	.LBE30:
 984               	.LBB31:
 800:quantum/quantum.c ****         } else {
 985               		.loc 1 800 11 view .LVU175
 986 0028 0E94 0000 		call unregister_code
 987               	.LVL83:
 988               	.LBE31:
 989 002c 00C0      		rjmp .L72
 990               	.LVL84:
 991               	.L71:
 793:quantum/quantum.c ****           // down
 992               		.loc 1 793 16 is_stmt 1 view .LVU176
 793:quantum/quantum.c ****           // down
 993               		.loc 1 793 19 is_stmt 0 view .LVU177
 994 002e 8230      		cpi r24,lo8(2)
 995 0030 01F4      		brne .L73
 996               	.LBB32:
 795:quantum/quantum.c ****           register_code(keycode);
 997               		.loc 1 795 11 is_stmt 1 view .LVU178
 998               	.LVL85:
 796:quantum/quantum.c ****         } else if (ascii_code == SS_UP_CODE) {
 999               		.loc 1 796 11 view .LVU179
 1000 0032 8981      		ldd r24,Y+1
 1001               	.LVL86:
 796:quantum/quantum.c ****         } else if (ascii_code == SS_UP_CODE) {
 1002               		.loc 1 796 11 is_stmt 0 view .LVU180
 1003 0034 0E94 0000 		call register_code
 1004               	.LVL87:
 1005               	.L72:
 796:quantum/quantum.c ****         } else if (ascii_code == SS_UP_CODE) {
 1006               		.loc 1 796 11 view .LVU181
 1007               	.LBE32:
 804:quantum/quantum.c ****         // interval
 1008               		.loc 1 804 9 is_stmt 1 view .LVU182
 1009 0038 E801      		movw r28,r16
 1010 003a 2196      		adiw r28,1
 1011               	.LVL88:
 1012               	.LBB33:
 806:quantum/quantum.c ****     }
 1013               		.loc 1 806 11 view .LVU183
 806:quantum/quantum.c ****     }
 1014               		.loc 1 806 34 view .LVU184
 806:quantum/quantum.c ****     }
 1015               		.loc 1 806 19 is_stmt 0 view .LVU185
 1016 003c 8F2D      		mov r24,r15
 1017               	.LVL89:
 1018               	.L75:
 806:quantum/quantum.c ****     }
 1019               		.loc 1 806 43 discriminator 1 view .LVU186
 1020               	.LVL90:
 1021 003e 8150      		subi r24,1
 1022 0040 00F0      		brcs .L77
 806:quantum/quantum.c ****     }
 1023               		.loc 1 806 47 is_stmt 1 view .LVU187
 1024               	.LBB34:
 1025               	.LBI34:
 1026               		.file 2 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** _delay_ms(double __ms)
 1027               		.loc 2 166 1 view .LVU188
 1028               	.LBB35:
 167:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	double __tmp ;
 1029               		.loc 2 168 2 view .LVU189
 169:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 1030               		.loc 2 172 2 view .LVU190
 173:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 1031               		.loc 2 173 2 view .LVU191
 174:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 1032               		.loc 2 174 2 view .LVU192
 175:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 1033               		.loc 2 184 3 view .LVU193
 185:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 1034               		.loc 2 187 2 view .LVU194
 1035 0042 EFE9      		ldi r30,lo8(3999)
 1036 0044 FFE0      		ldi r31,hi8(3999)
 1037 0046 3197      	1:	sbiw r30,1
 1038 0048 01F4      		brne 1b
 1039 004a 00C0      		rjmp .
 1040 004c 0000      		nop
 1041 004e 00C0      		rjmp .L75
 1042               	.LVL91:
 1043               	.L73:
 1044               		.loc 2 187 2 is_stmt 0 view .LVU195
 1045               	.LBE35:
 1046               	.LBE34:
 1047               	.LBE33:
 797:quantum/quantum.c ****           // up
 1048               		.loc 1 797 16 is_stmt 1 view .LVU196
 797:quantum/quantum.c ****           // up
 1049               		.loc 1 797 19 is_stmt 0 view .LVU197
 1050 0050 8330      		cpi r24,lo8(3)
 1051 0052 01F4      		brne .L74
 1052               	.LBB36:
 799:quantum/quantum.c ****           unregister_code(keycode);
 1053               		.loc 1 799 11 is_stmt 1 view .LVU198
 1054               	.LVL92:
 800:quantum/quantum.c ****         } else {
 1055               		.loc 1 800 11 view .LVU199
 1056 0054 8981      		ldd r24,Y+1
 1057               	.LVL93:
 800:quantum/quantum.c ****         } else {
 1058               		.loc 1 800 11 is_stmt 0 view .LVU200
 1059 0056 00C0      		rjmp .L78
 1060               	.LVL94:
 1061               	.L74:
 800:quantum/quantum.c ****         } else {
 1062               		.loc 1 800 11 view .LVU201
 1063               	.LBE36:
 802:quantum/quantum.c ****         }
 1064               		.loc 1 802 11 is_stmt 1 view .LVU202
 1065 0058 0E94 0000 		call send_char
 1066               	.LVL95:
 802:quantum/quantum.c ****         }
 1067               		.loc 1 802 11 is_stmt 0 view .LVU203
 1068 005c 8E01      		movw r16,r28
 1069 005e 00C0      		rjmp .L72
 1070               	.LVL96:
 1071               	.L69:
 1072               	/* epilogue start */
 802:quantum/quantum.c ****         }
 1073               		.loc 1 802 11 view .LVU204
 1074               	.LBE29:
 808:quantum/quantum.c **** 
 1075               		.loc 1 808 1 view .LVU205
 1076 0060 DF91      		pop r29
 1077 0062 CF91      		pop r28
 1078               	.LVL97:
 808:quantum/quantum.c **** 
 1079               		.loc 1 808 1 view .LVU206
 1080 0064 1F91      		pop r17
 1081 0066 0F91      		pop r16
 1082 0068 FF90      		pop r15
 1083               	.LVL98:
 808:quantum/quantum.c **** 
 1084               		.loc 1 808 1 view .LVU207
 1085 006a 0895      		ret
 1086               		.cfi_endproc
 1087               	.LFE139:
 1089               		.section	.text.send_string,"ax",@progbits
 1090               	.global	send_string
 1092               	send_string:
 1093               	.LVL99:
 1094               	.LFB137:
 776:quantum/quantum.c ****   send_string_with_delay(str, 0);
 1095               		.loc 1 776 35 is_stmt 1 view -0
 1096               		.cfi_startproc
 1097               	/* prologue: function */
 1098               	/* frame size = 0 */
 1099               	/* stack size = 0 */
 1100               	.L__stack_usage = 0
 777:quantum/quantum.c **** }
 1101               		.loc 1 777 3 view .LVU209
 1102 0000 60E0      		ldi r22,0
 1103 0002 0C94 0000 		jmp send_string_with_delay
 1104               	.LVL100:
 777:quantum/quantum.c **** }
 1105               		.loc 1 777 3 is_stmt 0 view .LVU210
 1106               		.cfi_endproc
 1107               	.LFE137:
 1109               		.section	.text.send_string_with_delay_P,"ax",@progbits
 1110               	.global	send_string_with_delay_P
 1112               	send_string_with_delay_P:
 1113               	.LVL101:
 1114               	.LFB140:
 810:quantum/quantum.c ****     while (1) {
 1115               		.loc 1 810 66 is_stmt 1 view -0
 1116               		.cfi_startproc
 810:quantum/quantum.c ****     while (1) {
 1117               		.loc 1 810 66 is_stmt 0 view .LVU212
 1118 0000 FF92      		push r15
 1119               	.LCFI23:
 1120               		.cfi_def_cfa_offset 3
 1121               		.cfi_offset 15, -2
 1122 0002 0F93      		push r16
 1123               	.LCFI24:
 1124               		.cfi_def_cfa_offset 4
 1125               		.cfi_offset 16, -3
 1126 0004 1F93      		push r17
 1127               	.LCFI25:
 1128               		.cfi_def_cfa_offset 5
 1129               		.cfi_offset 17, -4
 1130 0006 CF93      		push r28
 1131               	.LCFI26:
 1132               		.cfi_def_cfa_offset 6
 1133               		.cfi_offset 28, -5
 1134 0008 DF93      		push r29
 1135               	.LCFI27:
 1136               		.cfi_def_cfa_offset 7
 1137               		.cfi_offset 29, -6
 1138               	/* prologue: function */
 1139               	/* frame size = 0 */
 1140               	/* stack size = 5 */
 1141               	.L__stack_usage = 5
 1142 000a 8C01      		movw r16,r24
 1143 000c F62E      		mov r15,r22
 1144               	.LVL102:
 1145               	.L88:
 811:quantum/quantum.c ****         char ascii_code = pgm_read_byte(str);
 1146               		.loc 1 811 5 is_stmt 1 view .LVU213
 1147               	.LBB37:
 812:quantum/quantum.c ****         if (!ascii_code) break;
 1148               		.loc 1 812 9 view .LVU214
 1149               	.LBB38:
 812:quantum/quantum.c ****         if (!ascii_code) break;
 1150               		.loc 1 812 27 view .LVU215
 812:quantum/quantum.c ****         if (!ascii_code) break;
 1151               		.loc 1 812 27 view .LVU216
 812:quantum/quantum.c ****         if (!ascii_code) break;
 1152               		.loc 1 812 27 view .LVU217
 1153 000e F801      		movw r30,r16
 1154               	/* #APP */
 1155               	 ;  812 "quantum/quantum.c" 1
 1156 0010 8491      		lpm r24, Z
 1157               		
 1158               	 ;  0 "" 2
 1159               	.LVL103:
 812:quantum/quantum.c ****         if (!ascii_code) break;
 1160               		.loc 1 812 27 view .LVU218
 812:quantum/quantum.c ****         if (!ascii_code) break;
 1161               		.loc 1 812 27 is_stmt 0 view .LVU219
 1162               	/* #NOAPP */
 1163               	.LBE38:
 813:quantum/quantum.c ****         if (ascii_code == SS_TAP_CODE) {
 1164               		.loc 1 813 9 is_stmt 1 view .LVU220
 813:quantum/quantum.c ****         if (ascii_code == SS_TAP_CODE) {
 1165               		.loc 1 813 12 is_stmt 0 view .LVU221
 1166 0012 8823      		tst r24
 1167 0014 01F0      		breq .L80
 814:quantum/quantum.c ****           // tap
 1168               		.loc 1 814 9 is_stmt 1 view .LVU222
 1169 0016 E801      		movw r28,r16
 1170 0018 2196      		adiw r28,1
 814:quantum/quantum.c ****           // tap
 1171               		.loc 1 814 12 is_stmt 0 view .LVU223
 1172 001a 8130      		cpi r24,lo8(1)
 1173 001c 01F4      		brne .L82
 1174               	.LBB39:
 816:quantum/quantum.c ****           register_code(keycode);
 1175               		.loc 1 816 11 is_stmt 1 view .LVU224
 1176               	.LBB40:
 816:quantum/quantum.c ****           register_code(keycode);
 1177               		.loc 1 816 29 view .LVU225
 1178               	.LVL104:
 816:quantum/quantum.c ****           register_code(keycode);
 1179               		.loc 1 816 29 view .LVU226
 816:quantum/quantum.c ****           register_code(keycode);
 1180               		.loc 1 816 29 view .LVU227
 1181 001e FE01      		movw r30,r28
 1182               	/* #APP */
 1183               	 ;  816 "quantum/quantum.c" 1
 1184 0020 1491      		lpm r17, Z
 1185               		
 1186               	 ;  0 "" 2
 1187               	.LVL105:
 816:quantum/quantum.c ****           register_code(keycode);
 1188               		.loc 1 816 29 view .LVU228
 816:quantum/quantum.c ****           register_code(keycode);
 1189               		.loc 1 816 29 is_stmt 0 view .LVU229
 1190               	/* #NOAPP */
 1191               	.LBE40:
 817:quantum/quantum.c ****           unregister_code(keycode);
 1192               		.loc 1 817 11 is_stmt 1 view .LVU230
 1193 0022 812F      		mov r24,r17
 1194               	.LVL106:
 817:quantum/quantum.c ****           unregister_code(keycode);
 1195               		.loc 1 817 11 is_stmt 0 view .LVU231
 1196 0024 0E94 0000 		call register_code
 1197               	.LVL107:
 818:quantum/quantum.c ****         } else if (ascii_code == SS_DOWN_CODE) {
 1198               		.loc 1 818 11 is_stmt 1 view .LVU232
 1199 0028 812F      		mov r24,r17
 1200               	.LVL108:
 1201               	.L89:
 818:quantum/quantum.c ****         } else if (ascii_code == SS_DOWN_CODE) {
 1202               		.loc 1 818 11 is_stmt 0 view .LVU233
 1203               	.LBE39:
 1204               	.LBB41:
 1205               	.LBB42:
 825:quantum/quantum.c ****           unregister_code(keycode);
 1206               		.loc 1 825 29 is_stmt 1 view .LVU234
 825:quantum/quantum.c ****           unregister_code(keycode);
 1207               		.loc 1 825 29 is_stmt 0 view .LVU235
 1208               	.LBE42:
 826:quantum/quantum.c ****         } else {
 1209               		.loc 1 826 11 is_stmt 1 view .LVU236
 1210 002a 0E94 0000 		call unregister_code
 1211               	.LVL109:
 826:quantum/quantum.c ****         } else {
 1212               		.loc 1 826 11 is_stmt 0 view .LVU237
 1213               	.LBE41:
 1214 002e 00C0      		rjmp .L83
 1215               	.LVL110:
 1216               	.L82:
 819:quantum/quantum.c ****           // down
 1217               		.loc 1 819 16 is_stmt 1 view .LVU238
 819:quantum/quantum.c ****           // down
 1218               		.loc 1 819 19 is_stmt 0 view .LVU239
 1219 0030 8230      		cpi r24,lo8(2)
 1220 0032 01F4      		brne .L84
 1221               	.LBB44:
 821:quantum/quantum.c ****           register_code(keycode);
 1222               		.loc 1 821 11 is_stmt 1 view .LVU240
 1223               	.LBB45:
 821:quantum/quantum.c ****           register_code(keycode);
 1224               		.loc 1 821 29 view .LVU241
 1225               	.LVL111:
 821:quantum/quantum.c ****           register_code(keycode);
 1226               		.loc 1 821 29 view .LVU242
 821:quantum/quantum.c ****           register_code(keycode);
 1227               		.loc 1 821 29 view .LVU243
 1228 0034 FE01      		movw r30,r28
 1229               	/* #APP */
 1230               	 ;  821 "quantum/quantum.c" 1
 1231 0036 8491      		lpm r24, Z
 1232               		
 1233               	 ;  0 "" 2
 1234               	.LVL112:
 821:quantum/quantum.c ****           register_code(keycode);
 1235               		.loc 1 821 29 view .LVU244
 821:quantum/quantum.c ****           register_code(keycode);
 1236               		.loc 1 821 29 is_stmt 0 view .LVU245
 1237               	/* #NOAPP */
 1238               	.LBE45:
 822:quantum/quantum.c ****         } else if (ascii_code == SS_UP_CODE) {
 1239               		.loc 1 822 11 is_stmt 1 view .LVU246
 1240 0038 0E94 0000 		call register_code
 1241               	.LVL113:
 1242               	.L83:
 822:quantum/quantum.c ****         } else if (ascii_code == SS_UP_CODE) {
 1243               		.loc 1 822 11 is_stmt 0 view .LVU247
 1244               	.LBE44:
 830:quantum/quantum.c ****         // interval
 1245               		.loc 1 830 9 is_stmt 1 view .LVU248
 830:quantum/quantum.c ****         // interval
 1246               		.loc 1 830 9 is_stmt 0 view .LVU249
 1247 003c 8E01      		movw r16,r28
 1248 003e 0F5F      		subi r16,-1
 1249 0040 1F4F      		sbci r17,-1
 1250               	.LVL114:
 1251               	.LBB46:
 832:quantum/quantum.c ****     }
 1252               		.loc 1 832 11 is_stmt 1 view .LVU250
 832:quantum/quantum.c ****     }
 1253               		.loc 1 832 34 view .LVU251
 832:quantum/quantum.c ****     }
 1254               		.loc 1 832 19 is_stmt 0 view .LVU252
 1255 0042 8F2D      		mov r24,r15
 1256               	.LVL115:
 1257               	.L86:
 832:quantum/quantum.c ****     }
 1258               		.loc 1 832 43 discriminator 1 view .LVU253
 1259               	.LVL116:
 1260 0044 8150      		subi r24,1
 1261 0046 00F0      		brcs .L88
 832:quantum/quantum.c ****     }
 1262               		.loc 1 832 47 is_stmt 1 view .LVU254
 1263               	.LBB47:
 1264               	.LBI47:
 166:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** {
 1265               		.loc 2 166 1 view .LVU255
 1266               	.LBB48:
 168:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 1267               		.loc 2 168 2 view .LVU256
 172:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 1268               		.loc 2 172 2 view .LVU257
 173:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 1269               		.loc 2 173 2 view .LVU258
 174:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 1270               		.loc 2 174 2 view .LVU259
 184:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#endif
 1271               		.loc 2 184 3 view .LVU260
 1272               		.loc 2 187 2 view .LVU261
 1273 0048 EFE9      		ldi r30,lo8(3999)
 1274 004a FFE0      		ldi r31,hi8(3999)
 1275 004c 3197      	1:	sbiw r30,1
 1276 004e 01F4      		brne 1b
 1277 0050 00C0      		rjmp .
 1278 0052 0000      		nop
 1279 0054 00C0      		rjmp .L86
 1280               	.LVL117:
 1281               	.L84:
 1282               		.loc 2 187 2 is_stmt 0 view .LVU262
 1283               	.LBE48:
 1284               	.LBE47:
 1285               	.LBE46:
 823:quantum/quantum.c ****           // up
 1286               		.loc 1 823 16 is_stmt 1 view .LVU263
 823:quantum/quantum.c ****           // up
 1287               		.loc 1 823 19 is_stmt 0 view .LVU264
 1288 0056 8330      		cpi r24,lo8(3)
 1289 0058 01F4      		brne .L85
 1290               	.LBB49:
 825:quantum/quantum.c ****           unregister_code(keycode);
 1291               		.loc 1 825 11 is_stmt 1 view .LVU265
 1292               	.LBB43:
 825:quantum/quantum.c ****           unregister_code(keycode);
 1293               		.loc 1 825 29 view .LVU266
 1294               	.LVL118:
 825:quantum/quantum.c ****           unregister_code(keycode);
 1295               		.loc 1 825 29 view .LVU267
 825:quantum/quantum.c ****           unregister_code(keycode);
 1296               		.loc 1 825 29 view .LVU268
 1297 005a FE01      		movw r30,r28
 1298               	/* #APP */
 1299               	 ;  825 "quantum/quantum.c" 1
 1300 005c 8491      		lpm r24, Z
 1301               		
 1302               	 ;  0 "" 2
 1303               	.LVL119:
 825:quantum/quantum.c ****           unregister_code(keycode);
 1304               		.loc 1 825 29 is_stmt 0 view .LVU269
 1305               	/* #NOAPP */
 1306 005e 00C0      		rjmp .L89
 1307               	.LVL120:
 1308               	.L85:
 825:quantum/quantum.c ****           unregister_code(keycode);
 1309               		.loc 1 825 29 view .LVU270
 1310               	.LBE43:
 1311               	.LBE49:
 828:quantum/quantum.c ****         }
 1312               		.loc 1 828 11 is_stmt 1 view .LVU271
 1313 0060 0E94 0000 		call send_char
 1314               	.LVL121:
 828:quantum/quantum.c ****         }
 1315               		.loc 1 828 11 is_stmt 0 view .LVU272
 1316 0064 E801      		movw r28,r16
 1317 0066 00C0      		rjmp .L83
 1318               	.LVL122:
 1319               	.L80:
 1320               	/* epilogue start */
 828:quantum/quantum.c ****         }
 1321               		.loc 1 828 11 view .LVU273
 1322               	.LBE37:
 834:quantum/quantum.c **** 
 1323               		.loc 1 834 1 view .LVU274
 1324 0068 DF91      		pop r29
 1325 006a CF91      		pop r28
 1326 006c 1F91      		pop r17
 1327 006e 0F91      		pop r16
 1328               	.LVL123:
 834:quantum/quantum.c **** 
 1329               		.loc 1 834 1 view .LVU275
 1330 0070 FF90      		pop r15
 1331               	.LVL124:
 834:quantum/quantum.c **** 
 1332               		.loc 1 834 1 view .LVU276
 1333 0072 0895      		ret
 1334               		.cfi_endproc
 1335               	.LFE140:
 1337               		.section	.text.send_string_P,"ax",@progbits
 1338               	.global	send_string_P
 1340               	send_string_P:
 1341               	.LVL125:
 1342               	.LFB138:
 780:quantum/quantum.c ****   send_string_with_delay_P(str, 0);
 1343               		.loc 1 780 37 is_stmt 1 view -0
 1344               		.cfi_startproc
 1345               	/* prologue: function */
 1346               	/* frame size = 0 */
 1347               	/* stack size = 0 */
 1348               	.L__stack_usage = 0
 781:quantum/quantum.c **** }
 1349               		.loc 1 781 3 view .LVU278
 1350 0000 60E0      		ldi r22,0
 1351 0002 0C94 0000 		jmp send_string_with_delay_P
 1352               	.LVL126:
 781:quantum/quantum.c **** }
 1353               		.loc 1 781 3 is_stmt 0 view .LVU279
 1354               		.cfi_endproc
 1355               	.LFE138:
 1357               		.section	.text.set_single_persistent_default_layer,"ax",@progbits
 1358               	.global	set_single_persistent_default_layer
 1360               	set_single_persistent_default_layer:
 1361               	.LVL127:
 1362               	.LFB142:
 855:quantum/quantum.c **** 
 856:quantum/quantum.c **** void set_single_persistent_default_layer(uint8_t default_layer) {
 1363               		.loc 1 856 65 is_stmt 1 view -0
 1364               		.cfi_startproc
 1365               		.loc 1 856 65 is_stmt 0 view .LVU281
 1366 0000 CF93      		push r28
 1367               	.LCFI28:
 1368               		.cfi_def_cfa_offset 3
 1369               		.cfi_offset 28, -2
 1370 0002 DF93      		push r29
 1371               	.LCFI29:
 1372               		.cfi_def_cfa_offset 4
 1373               		.cfi_offset 29, -3
 1374               	/* prologue: function */
 1375               	/* frame size = 0 */
 1376               	/* stack size = 2 */
 1377               	.L__stack_usage = 2
 857:quantum/quantum.c ****   #if defined(AUDIO_ENABLE) && defined(DEFAULT_LAYER_SONGS)
 858:quantum/quantum.c ****     PLAY_SONG(default_layer_songs[default_layer]);
 859:quantum/quantum.c ****   #endif
 860:quantum/quantum.c ****   eeconfig_update_default_layer(1U<<default_layer);
 1378               		.loc 1 860 3 is_stmt 1 view .LVU282
 1379               		.loc 1 860 35 is_stmt 0 view .LVU283
 1380 0004 C1E0      		ldi r28,lo8(1)
 1381 0006 D0E0      		ldi r29,0
 1382 0008 00C0      		rjmp 2f
 1383               		1:
 1384 000a CC0F      		lsl r28
 1385 000c DD1F      		rol r29
 1386               		2:
 1387 000e 8A95      		dec r24
 1388 0010 02F4      		brpl 1b
 1389               		.loc 1 860 3 view .LVU284
 1390 0012 8C2F      		mov r24,r28
 1391               	.LVL128:
 1392               		.loc 1 860 3 view .LVU285
 1393 0014 0E94 0000 		call eeconfig_update_default_layer
 1394               	.LVL129:
 861:quantum/quantum.c ****   default_layer_set(1U<<default_layer);
 1395               		.loc 1 861 3 is_stmt 1 view .LVU286
 1396 0018 BE01      		movw r22,r28
 1397 001a 90E0      		ldi r25,0
 1398 001c 80E0      		ldi r24,0
 1399               	/* epilogue start */
 862:quantum/quantum.c **** }
 1400               		.loc 1 862 1 is_stmt 0 view .LVU287
 1401 001e DF91      		pop r29
 1402 0020 CF91      		pop r28
 861:quantum/quantum.c ****   default_layer_set(1U<<default_layer);
 1403               		.loc 1 861 3 view .LVU288
 1404 0022 0C94 0000 		jmp default_layer_set
 1405               	.LVL130:
 1406               		.cfi_endproc
 1407               	.LFE142:
 1409               		.section	.text.update_tri_layer_state,"ax",@progbits
 1410               	.global	update_tri_layer_state
 1412               	update_tri_layer_state:
 1413               	.LVL131:
 1414               	.LFB143:
 863:quantum/quantum.c **** 
 864:quantum/quantum.c **** uint32_t update_tri_layer_state(uint32_t state, uint8_t layer1, uint8_t layer2, uint8_t layer3) {
 1415               		.loc 1 864 97 is_stmt 1 view -0
 1416               		.cfi_startproc
 1417               		.loc 1 864 97 is_stmt 0 view .LVU290
 1418 0000 8F92      		push r8
 1419               	.LCFI30:
 1420               		.cfi_def_cfa_offset 3
 1421               		.cfi_offset 8, -2
 1422 0002 9F92      		push r9
 1423               	.LCFI31:
 1424               		.cfi_def_cfa_offset 4
 1425               		.cfi_offset 9, -3
 1426 0004 AF92      		push r10
 1427               	.LCFI32:
 1428               		.cfi_def_cfa_offset 5
 1429               		.cfi_offset 10, -4
 1430 0006 BF92      		push r11
 1431               	.LCFI33:
 1432               		.cfi_def_cfa_offset 6
 1433               		.cfi_offset 11, -5
 1434 0008 CF92      		push r12
 1435               	.LCFI34:
 1436               		.cfi_def_cfa_offset 7
 1437               		.cfi_offset 12, -6
 1438 000a DF92      		push r13
 1439               	.LCFI35:
 1440               		.cfi_def_cfa_offset 8
 1441               		.cfi_offset 13, -7
 1442 000c EF92      		push r14
 1443               	.LCFI36:
 1444               		.cfi_def_cfa_offset 9
 1445               		.cfi_offset 14, -8
 1446 000e FF92      		push r15
 1447               	.LCFI37:
 1448               		.cfi_def_cfa_offset 10
 1449               		.cfi_offset 15, -9
 1450 0010 0F93      		push r16
 1451               	.LCFI38:
 1452               		.cfi_def_cfa_offset 11
 1453               		.cfi_offset 16, -10
 1454 0012 1F93      		push r17
 1455               	.LCFI39:
 1456               		.cfi_def_cfa_offset 12
 1457               		.cfi_offset 17, -11
 1458               	/* prologue: function */
 1459               	/* frame size = 0 */
 1460               	/* stack size = 10 */
 1461               	.L__stack_usage = 10
 1462 0014 6B01      		movw r12,r22
 1463 0016 7C01      		movw r14,r24
 865:quantum/quantum.c ****   uint32_t mask12 = (1UL << layer1) | (1UL << layer2);
 1464               		.loc 1 865 3 is_stmt 1 view .LVU291
 1465               		.loc 1 865 26 is_stmt 0 view .LVU292
 1466 0018 81E0      		ldi r24,lo8(1)
 1467 001a 90E0      		ldi r25,0
 1468 001c A0E0      		ldi r26,0
 1469 001e B0E0      		ldi r27,0
 1470 0020 4C01      		movw r8,r24
 1471 0022 5D01      		movw r10,r26
 1472 0024 00C0      		rjmp 2f
 1473               		1:
 1474 0026 880C      		lsl r8
 1475 0028 991C      		rol r9
 1476 002a AA1C      		rol r10
 1477 002c BB1C      		rol r11
 1478               		2:
 1479 002e 4A95      		dec r20
 1480 0030 02F4      		brpl 1b
 1481 0032 B501      		movw r22,r10
 1482               	.LVL132:
 1483               		.loc 1 865 26 view .LVU293
 1484 0034 A401      		movw r20,r8
 1485               	.LVL133:
 1486               		.loc 1 865 44 view .LVU294
 1487 0036 4C01      		movw r8,r24
 1488 0038 5D01      		movw r10,r26
 1489 003a 00C0      		rjmp 2f
 1490               		1:
 1491 003c 880C      		lsl r8
 1492 003e 991C      		rol r9
 1493 0040 AA1C      		rol r10
 1494 0042 BB1C      		rol r11
 1495               		2:
 1496 0044 2A95      		dec r18
 1497 0046 02F4      		brpl 1b
 1498               		.loc 1 865 12 view .LVU295
 1499 0048 4829      		or r20,r8
 1500 004a 5929      		or r21,r9
 1501 004c 6A29      		or r22,r10
 1502 004e 7B29      		or r23,r11
 1503               	.LVL134:
 866:quantum/quantum.c ****   uint32_t mask3 = 1UL << layer3;
 1504               		.loc 1 866 3 is_stmt 1 view .LVU296
 1505               		.loc 1 866 12 is_stmt 0 view .LVU297
 1506 0050 00C0      		rjmp 2f
 1507               		1:
 1508 0052 880F      		lsl r24
 1509 0054 991F      		rol r25
 1510 0056 AA1F      		rol r26
 1511 0058 BB1F      		rol r27
 1512               		2:
 1513 005a 0A95      		dec r16
 1514 005c 02F4      		brpl 1b
 1515               	.LVL135:
 867:quantum/quantum.c ****   return (state & mask12) == mask12 ? (state | mask3) : (state & ~mask3);
 1516               		.loc 1 867 3 is_stmt 1 view .LVU298
 1517               		.loc 1 867 17 is_stmt 0 view .LVU299
 1518 005e 8A01      		movw r16,r20
 1519               	.LVL136:
 1520               		.loc 1 867 17 view .LVU300
 1521 0060 9B01      		movw r18,r22
 1522               	.LVL137:
 1523               		.loc 1 867 17 view .LVU301
 1524 0062 0C21      		and r16,r12
 1525 0064 1D21      		and r17,r13
 1526 0066 2E21      		and r18,r14
 1527 0068 3F21      		and r19,r15
 1528               		.loc 1 867 55 view .LVU302
 1529 006a 0417      		cp r16,r20
 1530 006c 1507      		cpc r17,r21
 1531 006e 2607      		cpc r18,r22
 1532 0070 3707      		cpc r19,r23
 1533 0072 01F4      		brne .L93
 1534               		.loc 1 867 55 discriminator 1 view .LVU303
 1535 0074 8C29      		or r24,r12
 1536               	.LVL138:
 1537               		.loc 1 867 55 discriminator 1 view .LVU304
 1538 0076 9D29      		or r25,r13
 1539 0078 AE29      		or r26,r14
 1540 007a BF29      		or r27,r15
 1541               	.L92:
 868:quantum/quantum.c **** }
 1542               		.loc 1 868 1 view .LVU305
 1543 007c BC01      		movw r22,r24
 1544 007e CD01      		movw r24,r26
 1545               	/* epilogue start */
 1546 0080 1F91      		pop r17
 1547               	.LVL139:
 1548               		.loc 1 868 1 view .LVU306
 1549 0082 0F91      		pop r16
 1550               	.LVL140:
 1551               		.loc 1 868 1 view .LVU307
 1552 0084 FF90      		pop r15
 1553 0086 EF90      		pop r14
 1554 0088 DF90      		pop r13
 1555 008a CF90      		pop r12
 1556 008c BF90      		pop r11
 1557 008e AF90      		pop r10
 1558 0090 9F90      		pop r9
 1559 0092 8F90      		pop r8
 1560               	.LVL141:
 1561               		.loc 1 868 1 view .LVU308
 1562 0094 0895      		ret
 1563               	.LVL142:
 1564               	.L93:
 867:quantum/quantum.c ****   return (state & mask12) == mask12 ? (state | mask3) : (state & ~mask3);
 1565               		.loc 1 867 66 discriminator 2 view .LVU309
 1566 0096 8095      		com r24
 1567 0098 9095      		com r25
 1568 009a A095      		com r26
 1569 009c B095      		com r27
 1570               	.LVL143:
 867:quantum/quantum.c ****   return (state & mask12) == mask12 ? (state | mask3) : (state & ~mask3);
 1571               		.loc 1 867 55 discriminator 2 view .LVU310
 1572 009e 8C21      		and r24,r12
 1573               	.LVL144:
 867:quantum/quantum.c ****   return (state & mask12) == mask12 ? (state | mask3) : (state & ~mask3);
 1574               		.loc 1 867 55 discriminator 2 view .LVU311
 1575 00a0 9D21      		and r25,r13
 1576 00a2 AE21      		and r26,r14
 1577 00a4 BF21      		and r27,r15
 1578 00a6 00C0      		rjmp .L92
 1579               		.cfi_endproc
 1580               	.LFE143:
 1582               		.section	.text.update_tri_layer,"ax",@progbits
 1583               	.global	update_tri_layer
 1585               	update_tri_layer:
 1586               	.LVL145:
 1587               	.LFB144:
 869:quantum/quantum.c **** 
 870:quantum/quantum.c **** void update_tri_layer(uint8_t layer1, uint8_t layer2, uint8_t layer3) {
 1588               		.loc 1 870 71 is_stmt 1 view -0
 1589               		.cfi_startproc
 1590               		.loc 1 870 71 is_stmt 0 view .LVU313
 1591 0000 0F93      		push r16
 1592               	.LCFI40:
 1593               		.cfi_def_cfa_offset 3
 1594               		.cfi_offset 16, -2
 1595               	/* prologue: function */
 1596               	/* frame size = 0 */
 1597               	/* stack size = 1 */
 1598               	.L__stack_usage = 1
 1599 0002 382F      		mov r19,r24
 1600 0004 262F      		mov r18,r22
 871:quantum/quantum.c ****   layer_state_set(update_tri_layer_state(layer_state, layer1, layer2, layer3));
 1601               		.loc 1 871 3 is_stmt 1 view .LVU314
 1602 0006 6091 0000 		lds r22,layer_state
 1603 000a 7091 0000 		lds r23,layer_state+1
 1604 000e 8091 0000 		lds r24,layer_state+2
 1605 0012 9091 0000 		lds r25,layer_state+3
 1606               	.LVL146:
 1607               		.loc 1 871 3 is_stmt 0 view .LVU315
 1608 0016 042F      		mov r16,r20
 1609 0018 432F      		mov r20,r19
 1610               	.LVL147:
 1611               		.loc 1 871 3 view .LVU316
 1612 001a 0E94 0000 		call update_tri_layer_state
 1613               	.LVL148:
 1614               	/* epilogue start */
 872:quantum/quantum.c **** }
 1615               		.loc 1 872 1 view .LVU317
 1616 001e 0F91      		pop r16
 1617               	.LVL149:
 871:quantum/quantum.c ****   layer_state_set(update_tri_layer_state(layer_state, layer1, layer2, layer3));
 1618               		.loc 1 871 3 view .LVU318
 1619 0020 0C94 0000 		jmp layer_state_set
 1620               	.LVL150:
 1621               		.cfi_endproc
 1622               	.LFE144:
 1624               		.section	.text.tap_random_base64,"ax",@progbits
 1625               	.global	tap_random_base64
 1627               	tap_random_base64:
 1628               	.LFB145:
 873:quantum/quantum.c **** 
 874:quantum/quantum.c **** void tap_random_base64(void) {
 1629               		.loc 1 874 30 is_stmt 1 view -0
 1630               		.cfi_startproc
 1631 0000 CF93      		push r28
 1632               	.LCFI41:
 1633               		.cfi_def_cfa_offset 3
 1634               		.cfi_offset 28, -2
 1635 0002 DF93      		push r29
 1636               	.LCFI42:
 1637               		.cfi_def_cfa_offset 4
 1638               		.cfi_offset 29, -3
 1639               	/* prologue: function */
 1640               	/* frame size = 0 */
 1641               	/* stack size = 2 */
 1642               	.L__stack_usage = 2
 875:quantum/quantum.c ****   #if defined(__AVR_ATmega32U4__)
 876:quantum/quantum.c ****     uint8_t key = (TCNT0 + TCNT1 + TCNT3 + TCNT4) % 64;
 1643               		.loc 1 876 5 view .LVU320
 1644               		.loc 1 876 20 is_stmt 0 view .LVU321
 1645 0004 46B5      		in r20,0x26
 1646               		.loc 1 876 28 view .LVU322
 1647 0006 2091 8400 		lds r18,132
 1648 000a 3091 8500 		lds r19,132+1
 1649               		.loc 1 876 36 view .LVU323
 1650 000e C091 9400 		lds r28,148
 1651 0012 D091 9500 		lds r29,148+1
 1652               		.loc 1 876 44 view .LVU324
 1653 0016 8091 BE00 		lds r24,190
 1654 001a 9091 BF00 		lds r25,190+1
 1655               		.loc 1 876 34 view .LVU325
 1656 001e C20F      		add r28,r18
 1657 0020 C40F      		add r28,r20
 1658               		.loc 1 876 42 view .LVU326
 1659 0022 C80F      		add r28,r24
 1660               		.loc 1 876 13 view .LVU327
 1661 0024 CF73      		andi r28,lo8(63)
 1662               	.LVL151:
 877:quantum/quantum.c ****   #else
 878:quantum/quantum.c ****     uint8_t key = rand() % 64;
 879:quantum/quantum.c ****   #endif
 880:quantum/quantum.c ****   switch (key) {
 1663               		.loc 1 880 3 is_stmt 1 view .LVU328
 1664 0026 CE33      		cpi r28,lo8(62)
 1665 0028 00F4      		brsh .L97
 1666 002a C533      		cpi r28,lo8(53)
 1667 002c 00F4      		brsh .L98
 1668 002e CA31      		cpi r28,lo8(26)
 1669 0030 00F0      		brlo .L99
 1670 0032 C433      		cpi r28,lo8(52)
 1671 0034 00F4      		brsh .L104
 881:quantum/quantum.c ****     case 0 ... 25:
 882:quantum/quantum.c ****       register_code(KC_LSFT);
 883:quantum/quantum.c ****       register_code(key + KC_A);
 884:quantum/quantum.c ****       unregister_code(key + KC_A);
 885:quantum/quantum.c ****       unregister_code(KC_LSFT);
 886:quantum/quantum.c ****       break;
 887:quantum/quantum.c ****     case 26 ... 51:
 888:quantum/quantum.c ****       register_code(key - 26 + KC_A);
 1672               		.loc 1 888 7 view .LVU329
 1673 0036 C651      		subi r28,lo8(-(-22))
 1674               	.LVL152:
 1675               	.L107:
 889:quantum/quantum.c ****       unregister_code(key - 26 + KC_A);
 890:quantum/quantum.c ****       break;
 891:quantum/quantum.c ****     case 52:
 892:quantum/quantum.c ****       register_code(KC_0);
 893:quantum/quantum.c ****       unregister_code(KC_0);
 894:quantum/quantum.c ****       break;
 895:quantum/quantum.c ****     case 53 ... 61:
 896:quantum/quantum.c ****       register_code(key - 53 + KC_1);
 1676               		.loc 1 896 7 is_stmt 0 view .LVU330
 1677 0038 8C2F      		mov r24,r28
 1678 003a 0E94 0000 		call register_code
 1679               	.LVL153:
 897:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 1680               		.loc 1 897 7 is_stmt 1 view .LVU331
 1681 003e 8C2F      		mov r24,r28
 1682 0040 00C0      		rjmp .L105
 1683               	.LVL154:
 1684               	.L97:
 1685               		.loc 1 897 7 is_stmt 0 view .LVU332
 1686 0042 CE33      		cpi r28,lo8(62)
 1687 0044 01F0      		breq .L102
 1688 0046 CF33      		cpi r28,lo8(63)
 1689 0048 01F0      		breq .L103
 1690               	.L99:
 882:quantum/quantum.c ****       register_code(key + KC_A);
 1691               		.loc 1 882 7 is_stmt 1 view .LVU333
 1692 004a 81EE      		ldi r24,lo8(-31)
 1693 004c 0E94 0000 		call register_code
 1694               	.LVL155:
 883:quantum/quantum.c ****       unregister_code(key + KC_A);
 1695               		.loc 1 883 7 view .LVU334
 1696 0050 CC5F      		subi r28,lo8(-(4))
 1697               	.LVL156:
 883:quantum/quantum.c ****       unregister_code(key + KC_A);
 1698               		.loc 1 883 7 is_stmt 0 view .LVU335
 1699 0052 8C2F      		mov r24,r28
 1700 0054 0E94 0000 		call register_code
 1701               	.LVL157:
 884:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1702               		.loc 1 884 7 is_stmt 1 view .LVU336
 1703 0058 8C2F      		mov r24,r28
 1704               	.LVL158:
 1705               	.L106:
 898:quantum/quantum.c ****       break;
 899:quantum/quantum.c ****     case 62:
 900:quantum/quantum.c ****       register_code(KC_LSFT);
 901:quantum/quantum.c ****       register_code(KC_EQL);
 902:quantum/quantum.c ****       unregister_code(KC_EQL);
 1706               		.loc 1 902 7 is_stmt 0 view .LVU337
 1707 005a 0E94 0000 		call unregister_code
 1708               	.LVL159:
 903:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1709               		.loc 1 903 7 is_stmt 1 view .LVU338
 1710 005e 81EE      		ldi r24,lo8(-31)
 1711 0060 00C0      		rjmp .L105
 1712               	.LVL160:
 1713               	.L104:
 892:quantum/quantum.c ****       unregister_code(KC_0);
 1714               		.loc 1 892 7 view .LVU339
 1715 0062 87E2      		ldi r24,lo8(39)
 1716 0064 0E94 0000 		call register_code
 1717               	.LVL161:
 893:quantum/quantum.c ****       break;
 1718               		.loc 1 893 7 view .LVU340
 1719 0068 87E2      		ldi r24,lo8(39)
 1720               	.LVL162:
 1721               	.L105:
 1722               	/* epilogue start */
 904:quantum/quantum.c ****       break;
 905:quantum/quantum.c ****     case 63:
 906:quantum/quantum.c ****       register_code(KC_SLSH);
 907:quantum/quantum.c ****       unregister_code(KC_SLSH);
 908:quantum/quantum.c ****       break;
 909:quantum/quantum.c ****   }
 910:quantum/quantum.c **** }
 1723               		.loc 1 910 1 is_stmt 0 view .LVU341
 1724 006a DF91      		pop r29
 1725 006c CF91      		pop r28
 907:quantum/quantum.c ****       break;
 1726               		.loc 1 907 7 view .LVU342
 1727 006e 0C94 0000 		jmp unregister_code
 1728               	.LVL163:
 1729               	.L98:
 896:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 1730               		.loc 1 896 7 is_stmt 1 view .LVU343
 1731 0072 C751      		subi r28,lo8(-(-23))
 1732               	.LVL164:
 896:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 1733               		.loc 1 896 7 is_stmt 0 view .LVU344
 1734 0074 00C0      		rjmp .L107
 1735               	.LVL165:
 1736               	.L102:
 900:quantum/quantum.c ****       register_code(KC_EQL);
 1737               		.loc 1 900 7 is_stmt 1 view .LVU345
 1738 0076 81EE      		ldi r24,lo8(-31)
 1739 0078 0E94 0000 		call register_code
 1740               	.LVL166:
 901:quantum/quantum.c ****       unregister_code(KC_EQL);
 1741               		.loc 1 901 7 view .LVU346
 1742 007c 8EE2      		ldi r24,lo8(46)
 1743 007e 0E94 0000 		call register_code
 1744               	.LVL167:
 902:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1745               		.loc 1 902 7 view .LVU347
 1746 0082 8EE2      		ldi r24,lo8(46)
 1747 0084 00C0      		rjmp .L106
 1748               	.L103:
 906:quantum/quantum.c ****       unregister_code(KC_SLSH);
 1749               		.loc 1 906 7 view .LVU348
 1750 0086 88E3      		ldi r24,lo8(56)
 1751 0088 0E94 0000 		call register_code
 1752               	.LVL168:
 907:quantum/quantum.c ****       break;
 1753               		.loc 1 907 7 view .LVU349
 1754 008c 88E3      		ldi r24,lo8(56)
 1755 008e 00C0      		rjmp .L105
 1756               		.cfi_endproc
 1757               	.LFE145:
 1759               		.section	.text.bootmagic_lite,"ax",@progbits
 1760               		.weak	bootmagic_lite
 1762               	bootmagic_lite:
 1763               	.LFB146:
 911:quantum/quantum.c **** 
 912:quantum/quantum.c **** __attribute__((weak))
 913:quantum/quantum.c **** void bootmagic_lite(void) {
 1764               		.loc 1 913 27 view -0
 1765               		.cfi_startproc
 1766               	/* prologue: function */
 1767               	/* frame size = 0 */
 1768               	/* stack size = 0 */
 1769               	.L__stack_usage = 0
 914:quantum/quantum.c ****   // The lite version of TMK's bootmagic based on Wilba.
 915:quantum/quantum.c ****   // 100% less potential for accidentally making the
 916:quantum/quantum.c ****   // keyboard do stupid things.
 917:quantum/quantum.c **** 
 918:quantum/quantum.c ****   // We need multiple scans because debouncing can't be turned off.
 919:quantum/quantum.c ****   matrix_scan();
 1770               		.loc 1 919 3 view .LVU351
 1771 0000 0E94 0000 		call matrix_scan
 1772               	.LVL169:
 920:quantum/quantum.c ****   #if defined(DEBOUNCING_DELAY) && DEBOUNCING_DELAY > 0
 921:quantum/quantum.c ****     wait_ms(DEBOUNCING_DELAY * 2);
 922:quantum/quantum.c ****   #elif defined(DEBOUNCE) && DEBOUNCE > 0
 923:quantum/quantum.c ****     wait_ms(DEBOUNCE * 2);
 924:quantum/quantum.c ****   #else
 925:quantum/quantum.c ****     wait_ms(30);
 1773               		.loc 1 925 5 view .LVU352
 1774               	.LBB50:
 1775               	.LBI50:
 166:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** {
 1776               		.loc 2 166 1 view .LVU353
 1777               	.LBB51:
 168:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 1778               		.loc 2 168 2 view .LVU354
 172:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 1779               		.loc 2 172 2 view .LVU355
 173:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 1780               		.loc 2 173 2 view .LVU356
 174:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 1781               		.loc 2 174 2 view .LVU357
 184:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#endif
 1782               		.loc 2 184 3 view .LVU358
 1783               		.loc 2 187 2 view .LVU359
 1784 0004 2FEF      		ldi r18,lo8(95999)
 1785 0006 86E7      		ldi r24,hi8(95999)
 1786 0008 91E0      		ldi r25,hlo8(95999)
 1787 000a 2150      	1:	subi r18,1
 1788 000c 8040      		sbci r24,0
 1789 000e 9040      		sbci r25,0
 1790 0010 01F4      		brne 1b
 1791 0012 00C0      		rjmp .
 1792 0014 0000      		nop
 1793               	.LVL170:
 1794               		.loc 2 187 2 is_stmt 0 view .LVU360
 1795               	.LBE51:
 1796               	.LBE50:
 926:quantum/quantum.c ****   #endif
 927:quantum/quantum.c ****   matrix_scan();
 1797               		.loc 1 927 3 is_stmt 1 view .LVU361
 1798 0016 0E94 0000 		call matrix_scan
 1799               	.LVL171:
 928:quantum/quantum.c **** 
 929:quantum/quantum.c ****   // If the Esc and space bar are held down on power up,
 930:quantum/quantum.c ****   // reset the EEPROM valid state and jump to bootloader.
 931:quantum/quantum.c ****   // Assumes Esc is at [0,0].
 932:quantum/quantum.c ****   // This isn't very generalized, but we need something that doesn't
 933:quantum/quantum.c ****   // rely on user's keymaps in firmware or EEPROM.
 934:quantum/quantum.c ****   if (matrix_get_row(BOOTMAGIC_LITE_ROW) & (1 << BOOTMAGIC_LITE_COLUMN)) {
 1800               		.loc 1 934 3 view .LVU362
 1801               		.loc 1 934 7 is_stmt 0 view .LVU363
 1802 001a 80E0      		ldi r24,0
 1803 001c 0E94 0000 		call matrix_get_row
 1804               	.LVL172:
 1805               		.loc 1 934 6 view .LVU364
 1806 0020 80FF      		sbrs r24,0
 1807 0022 00C0      		rjmp .L108
 935:quantum/quantum.c ****     eeconfig_disable();
 1808               		.loc 1 935 5 is_stmt 1 view .LVU365
 1809 0024 0E94 0000 		call eeconfig_disable
 1810               	.LVL173:
 936:quantum/quantum.c ****     // Jump to bootloader.
 937:quantum/quantum.c ****     bootloader_jump();
 1811               		.loc 1 937 5 view .LVU366
 1812 0028 0C94 0000 		jmp bootloader_jump
 1813               	.LVL174:
 1814               	.L108:
 1815               	/* epilogue start */
 938:quantum/quantum.c ****   }
 939:quantum/quantum.c **** }
 1816               		.loc 1 939 1 is_stmt 0 view .LVU367
 1817 002c 0895      		ret
 1818               		.cfi_endproc
 1819               	.LFE146:
 1821               		.section	.text.matrix_init_quantum,"ax",@progbits
 1822               	.global	matrix_init_quantum
 1824               	matrix_init_quantum:
 1825               	.LFB147:
 940:quantum/quantum.c **** 
 941:quantum/quantum.c **** void matrix_init_quantum() {
 1826               		.loc 1 941 28 is_stmt 1 view -0
 1827               		.cfi_startproc
 1828               	/* prologue: function */
 1829               	/* frame size = 0 */
 1830               	/* stack size = 0 */
 1831               	.L__stack_usage = 0
 942:quantum/quantum.c ****   #ifdef BOOTMAGIC_LITE
 943:quantum/quantum.c ****     bootmagic_lite();
 944:quantum/quantum.c ****   #endif
 945:quantum/quantum.c ****   if (!eeconfig_is_enabled()) {
 1832               		.loc 1 945 3 view .LVU369
 1833               		.loc 1 945 8 is_stmt 0 view .LVU370
 1834 0000 0E94 0000 		call eeconfig_is_enabled
 1835               	.LVL175:
 1836               		.loc 1 945 6 view .LVU371
 1837 0004 8111      		cpse r24,__zero_reg__
 1838 0006 00C0      		rjmp .L111
 946:quantum/quantum.c ****     eeconfig_init();
 1839               		.loc 1 946 5 is_stmt 1 view .LVU372
 1840 0008 0E94 0000 		call eeconfig_init
 1841               	.LVL176:
 1842               	.L111:
 947:quantum/quantum.c ****   }
 948:quantum/quantum.c ****   #ifdef BACKLIGHT_ENABLE
 949:quantum/quantum.c ****     #ifdef LED_MATRIX_ENABLE
 950:quantum/quantum.c ****         led_matrix_init();
 951:quantum/quantum.c ****     #else
 952:quantum/quantum.c ****         backlight_init_ports();
 953:quantum/quantum.c ****     #endif
 954:quantum/quantum.c ****   #endif
 955:quantum/quantum.c ****   #ifdef AUDIO_ENABLE
 956:quantum/quantum.c ****     audio_init();
 957:quantum/quantum.c ****   #endif
 958:quantum/quantum.c ****   #ifdef RGB_MATRIX_ENABLE
 959:quantum/quantum.c ****     rgb_matrix_init();
 960:quantum/quantum.c ****   #endif
 961:quantum/quantum.c ****   #ifdef ENCODER_ENABLE
 962:quantum/quantum.c ****     encoder_init();
 963:quantum/quantum.c ****   #endif
 964:quantum/quantum.c ****   #if defined(UNICODE_ENABLE) || defined(UNICODEMAP_ENABLE) || defined(UCIS_ENABLE)
 965:quantum/quantum.c ****     unicode_input_mode_init();
 966:quantum/quantum.c ****   #endif
 967:quantum/quantum.c ****   #ifdef HAPTIC_ENABLE
 968:quantum/quantum.c ****     haptic_init();
 969:quantum/quantum.c ****   #endif
 970:quantum/quantum.c ****   #ifdef OUTPUT_AUTO_ENABLE
 971:quantum/quantum.c ****     set_output(OUTPUT_AUTO);
 972:quantum/quantum.c ****   #endif
 973:quantum/quantum.c ****   matrix_init_kb();
 1843               		.loc 1 973 3 view .LVU373
 1844 000c 0C94 0000 		jmp matrix_init_kb
 1845               	.LVL177:
 1846               		.cfi_endproc
 1847               	.LFE147:
 1849               		.section	.text.matrix_scan_quantum,"ax",@progbits
 1850               	.global	matrix_scan_quantum
 1852               	matrix_scan_quantum:
 1853               	.LFB148:
 974:quantum/quantum.c **** }
 975:quantum/quantum.c **** 
 976:quantum/quantum.c **** void matrix_scan_quantum() {
 1854               		.loc 1 976 28 view -0
 1855               		.cfi_startproc
 1856               	/* prologue: function */
 1857               	/* frame size = 0 */
 1858               	/* stack size = 0 */
 1859               	.L__stack_usage = 0
 977:quantum/quantum.c ****   #if defined(AUDIO_ENABLE) && !defined(NO_MUSIC_MODE)
 978:quantum/quantum.c ****     matrix_scan_music();
 979:quantum/quantum.c ****   #endif
 980:quantum/quantum.c **** 
 981:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
 982:quantum/quantum.c ****     matrix_scan_tap_dance();
 983:quantum/quantum.c ****   #endif
 984:quantum/quantum.c **** 
 985:quantum/quantum.c ****   #ifdef COMBO_ENABLE
 986:quantum/quantum.c ****     matrix_scan_combo();
 987:quantum/quantum.c ****   #endif
 988:quantum/quantum.c **** 
 989:quantum/quantum.c ****   #if defined(BACKLIGHT_ENABLE)
 990:quantum/quantum.c ****     #if defined(LED_MATRIX_ENABLE)
 991:quantum/quantum.c ****         led_matrix_task();
 992:quantum/quantum.c ****     #elif defined(BACKLIGHT_PIN)
 993:quantum/quantum.c ****         backlight_task();
 994:quantum/quantum.c ****     #endif
 995:quantum/quantum.c ****   #endif
 996:quantum/quantum.c **** 
 997:quantum/quantum.c ****   #ifdef RGB_MATRIX_ENABLE
 998:quantum/quantum.c ****     rgb_matrix_task();
 999:quantum/quantum.c ****   #endif
1000:quantum/quantum.c **** 
1001:quantum/quantum.c ****   #ifdef ENCODER_ENABLE
1002:quantum/quantum.c ****     encoder_read();
1003:quantum/quantum.c ****   #endif
1004:quantum/quantum.c **** 
1005:quantum/quantum.c ****   #ifdef HAPTIC_ENABLE
1006:quantum/quantum.c ****     haptic_task();
1007:quantum/quantum.c ****   #endif
1008:quantum/quantum.c **** 
1009:quantum/quantum.c ****   matrix_scan_kb();
 1860               		.loc 1 1009 3 view .LVU375
 1861 0000 0C94 0000 		jmp matrix_scan_kb
 1862               	.LVL178:
 1863               		.cfi_endproc
 1864               	.LFE148:
 1866               		.section	.text.backlight_init_ports,"ax",@progbits
 1867               		.weak	backlight_init_ports
 1869               	backlight_init_ports:
 1870               	.LFB190:
 1871               		.cfi_startproc
 1872               	/* prologue: function */
 1873               	/* frame size = 0 */
 1874               	/* stack size = 0 */
 1875               	.L__stack_usage = 0
 1876               	/* epilogue start */
 1877 0000 0895      		ret
 1878               		.cfi_endproc
 1879               	.LFE190:
 1881               		.section	.text.send_nibble,"ax",@progbits
 1882               	.global	send_nibble
 1884               	send_nibble:
 1885               	.LVL179:
 1886               	.LFB154:
1010:quantum/quantum.c **** }
1011:quantum/quantum.c **** #if defined(BACKLIGHT_ENABLE) && (defined(BACKLIGHT_PIN) || defined(BACKLIGHT_PINS))
1012:quantum/quantum.c **** 
1013:quantum/quantum.c **** // The logic is a bit complex, we support 3 setups:
1014:quantum/quantum.c **** // 1. hardware PWM when backlight is wired to a PWM pin
1015:quantum/quantum.c **** // depending on this pin, we use a different output compare unit
1016:quantum/quantum.c **** // 2. software PWM with hardware timers, but the used timer depends
1017:quantum/quantum.c **** // on the audio setup (audio wins other backlight)
1018:quantum/quantum.c **** // 3. full software PWM
1019:quantum/quantum.c **** 
1020:quantum/quantum.c **** #if BACKLIGHT_PIN == B7
1021:quantum/quantum.c **** #  define HARDWARE_PWM
1022:quantum/quantum.c **** #  define TCCRxA TCCR1A
1023:quantum/quantum.c **** #  define TCCRxB TCCR1B
1024:quantum/quantum.c **** #  define COMxx1 COM1C1
1025:quantum/quantum.c **** #  define OCRxx  OCR1C
1026:quantum/quantum.c **** #  define ICRx   ICR1
1027:quantum/quantum.c **** #elif BACKLIGHT_PIN == B6
1028:quantum/quantum.c **** #  define HARDWARE_PWM
1029:quantum/quantum.c **** #  define TCCRxA TCCR1A
1030:quantum/quantum.c **** #  define TCCRxB TCCR1B
1031:quantum/quantum.c **** #  define COMxx1 COM1B1
1032:quantum/quantum.c **** #  define OCRxx  OCR1B
1033:quantum/quantum.c **** #  define ICRx   ICR1
1034:quantum/quantum.c **** #elif BACKLIGHT_PIN == B5
1035:quantum/quantum.c **** #  define HARDWARE_PWM
1036:quantum/quantum.c **** #  define TCCRxA TCCR1A
1037:quantum/quantum.c **** #  define TCCRxB TCCR1B
1038:quantum/quantum.c **** #  define COMxx1 COM1A1
1039:quantum/quantum.c **** #  define OCRxx  OCR1A
1040:quantum/quantum.c **** #  define ICRx   ICR1
1041:quantum/quantum.c **** #elif BACKLIGHT_PIN == C6
1042:quantum/quantum.c **** #  define HARDWARE_PWM
1043:quantum/quantum.c **** #  define TCCRxA TCCR3A
1044:quantum/quantum.c **** #  define TCCRxB TCCR3B
1045:quantum/quantum.c **** #  define COMxx1 COM1A1
1046:quantum/quantum.c **** #  define OCRxx  OCR3A
1047:quantum/quantum.c **** #  define ICRx   ICR3
1048:quantum/quantum.c **** #elif defined(__AVR_ATmega32A__) && BACKLIGHT_PIN == D4
1049:quantum/quantum.c **** #  define TCCRxA TCCR1A
1050:quantum/quantum.c **** #  define TCCRxB TCCR1B
1051:quantum/quantum.c **** #  define COMxx1 COM1B1
1052:quantum/quantum.c **** #  define OCRxx  OCR1B
1053:quantum/quantum.c **** #  define ICRx   ICR1
1054:quantum/quantum.c **** #  define TIMSK1 TIMSK
1055:quantum/quantum.c **** #else
1056:quantum/quantum.c **** #  if !defined(BACKLIGHT_CUSTOM_DRIVER)
1057:quantum/quantum.c **** #    if !defined(B5_AUDIO) && !defined(B6_AUDIO) && !defined(B7_AUDIO)
1058:quantum/quantum.c ****      // timer 1 is not used by audio , backlight can use it
1059:quantum/quantum.c **** #pragma message "Using hardware timer 1 with software PWM"
1060:quantum/quantum.c **** #      define HARDWARE_PWM
1061:quantum/quantum.c **** #      define BACKLIGHT_PWM_TIMER
1062:quantum/quantum.c **** #      define TCCRxA TCCR1A
1063:quantum/quantum.c **** #      define TCCRxB TCCR1B
1064:quantum/quantum.c **** #      define OCRxx  OCR1A
1065:quantum/quantum.c **** #      define OCRxAH OCR1AH
1066:quantum/quantum.c **** #      define OCRxAL OCR1AL
1067:quantum/quantum.c **** #      define TIMERx_COMPA_vect TIMER1_COMPA_vect
1068:quantum/quantum.c **** #      define TIMERx_OVF_vect TIMER1_OVF_vect
1069:quantum/quantum.c **** #      define OCIExA OCIE1A
1070:quantum/quantum.c **** #      define TOIEx  TOIE1
1071:quantum/quantum.c **** #      define ICRx   ICR1
1072:quantum/quantum.c **** #      ifndef TIMSK
1073:quantum/quantum.c **** #        define TIMSK TIMSK1
1074:quantum/quantum.c **** #      endif
1075:quantum/quantum.c **** #    elif !defined(C6_AUDIO) && !defined(C5_AUDIO) && !defined(C4_AUDIO)
1076:quantum/quantum.c **** #pragma message "Using hardware timer 3 with software PWM"
1077:quantum/quantum.c **** // timer 3 is not used by audio, backlight can use it
1078:quantum/quantum.c **** #      define HARDWARE_PWM
1079:quantum/quantum.c **** #      define BACKLIGHT_PWM_TIMER
1080:quantum/quantum.c **** #      define TCCRxA TCCR3A
1081:quantum/quantum.c **** #      define TCCRxB TCCR3B
1082:quantum/quantum.c **** #      define OCRxx OCR3A
1083:quantum/quantum.c **** #      define OCRxAH OCR3AH
1084:quantum/quantum.c **** #      define OCRxAL OCR3AL
1085:quantum/quantum.c **** #      define TIMERx_COMPA_vect TIMER3_COMPA_vect
1086:quantum/quantum.c **** #      define TIMERx_OVF_vect TIMER3_OVF_vect
1087:quantum/quantum.c **** #      define OCIExA OCIE3A
1088:quantum/quantum.c **** #      define TOIEx  TOIE3
1089:quantum/quantum.c **** #      define ICRx   ICR1
1090:quantum/quantum.c **** #      ifndef TIMSK
1091:quantum/quantum.c **** #        define TIMSK TIMSK3
1092:quantum/quantum.c **** #      endif
1093:quantum/quantum.c **** #    else
1094:quantum/quantum.c **** #pragma message "Audio in use - using pure software PWM"
1095:quantum/quantum.c **** #define NO_HARDWARE_PWM
1096:quantum/quantum.c **** #    endif
1097:quantum/quantum.c **** #  else
1098:quantum/quantum.c **** #pragma message "Custom driver defined - using pure software PWM"
1099:quantum/quantum.c **** #define NO_HARDWARE_PWM
1100:quantum/quantum.c **** #  endif
1101:quantum/quantum.c **** #endif
1102:quantum/quantum.c **** 
1103:quantum/quantum.c **** #ifndef BACKLIGHT_ON_STATE
1104:quantum/quantum.c **** #define BACKLIGHT_ON_STATE 0
1105:quantum/quantum.c **** #endif
1106:quantum/quantum.c **** 
1107:quantum/quantum.c **** void backlight_on(uint8_t backlight_pin) {
1108:quantum/quantum.c **** #if BACKLIGHT_ON_STATE == 0
1109:quantum/quantum.c ****   writePinLow(backlight_pin);
1110:quantum/quantum.c **** #else
1111:quantum/quantum.c ****   writePinHigh(backlight_pin);
1112:quantum/quantum.c **** #endif
1113:quantum/quantum.c **** }
1114:quantum/quantum.c **** 
1115:quantum/quantum.c **** void backlight_off(uint8_t backlight_pin) {
1116:quantum/quantum.c **** #if BACKLIGHT_ON_STATE == 0
1117:quantum/quantum.c ****   writePinHigh(backlight_pin);
1118:quantum/quantum.c **** #else
1119:quantum/quantum.c ****   writePinLow(backlight_pin);
1120:quantum/quantum.c **** #endif
1121:quantum/quantum.c **** }
1122:quantum/quantum.c **** 
1123:quantum/quantum.c **** 
1124:quantum/quantum.c **** #if defined(NO_HARDWARE_PWM) || defined(BACKLIGHT_PWM_TIMER)  // pwm through software
1125:quantum/quantum.c **** 
1126:quantum/quantum.c **** // we support multiple backlight pins
1127:quantum/quantum.c **** #ifndef BACKLIGHT_LED_COUNT
1128:quantum/quantum.c **** #define BACKLIGHT_LED_COUNT 1
1129:quantum/quantum.c **** #endif
1130:quantum/quantum.c **** 
1131:quantum/quantum.c **** #if BACKLIGHT_LED_COUNT == 1
1132:quantum/quantum.c **** #define BACKLIGHT_PIN_INIT { BACKLIGHT_PIN }
1133:quantum/quantum.c **** #else
1134:quantum/quantum.c **** #define BACKLIGHT_PIN_INIT BACKLIGHT_PINS
1135:quantum/quantum.c **** #endif
1136:quantum/quantum.c **** 
1137:quantum/quantum.c **** #define FOR_EACH_LED(x)                             \
1138:quantum/quantum.c ****   for (uint8_t i = 0; i < BACKLIGHT_LED_COUNT; i++) \
1139:quantum/quantum.c ****   {                                                 \
1140:quantum/quantum.c ****     uint8_t backlight_pin = backlight_pins[i];      \
1141:quantum/quantum.c ****     { \
1142:quantum/quantum.c ****       x                         \
1143:quantum/quantum.c ****     }                                             \
1144:quantum/quantum.c ****   }
1145:quantum/quantum.c **** 
1146:quantum/quantum.c **** static const uint8_t backlight_pins[BACKLIGHT_LED_COUNT] = BACKLIGHT_PIN_INIT;
1147:quantum/quantum.c **** 
1148:quantum/quantum.c **** #else // full hardware PWM
1149:quantum/quantum.c **** 
1150:quantum/quantum.c **** // we support only one backlight pin
1151:quantum/quantum.c **** static const uint8_t backlight_pin = BACKLIGHT_PIN;
1152:quantum/quantum.c **** #define FOR_EACH_LED(x) x
1153:quantum/quantum.c **** 
1154:quantum/quantum.c **** #endif
1155:quantum/quantum.c **** 
1156:quantum/quantum.c **** #ifdef NO_HARDWARE_PWM
1157:quantum/quantum.c **** __attribute__((weak))
1158:quantum/quantum.c **** void backlight_init_ports(void)
1159:quantum/quantum.c **** {
1160:quantum/quantum.c ****   // Setup backlight pin as output and output to on state.
1161:quantum/quantum.c ****   FOR_EACH_LED(
1162:quantum/quantum.c ****     setPinOutput(backlight_pin);
1163:quantum/quantum.c ****     backlight_on(backlight_pin);
1164:quantum/quantum.c ****   )
1165:quantum/quantum.c **** }
1166:quantum/quantum.c **** 
1167:quantum/quantum.c **** __attribute__ ((weak))
1168:quantum/quantum.c **** void backlight_set(uint8_t level) {}
1169:quantum/quantum.c **** 
1170:quantum/quantum.c **** uint8_t backlight_tick = 0;
1171:quantum/quantum.c **** 
1172:quantum/quantum.c **** #ifndef BACKLIGHT_CUSTOM_DRIVER
1173:quantum/quantum.c **** void backlight_task(void) {
1174:quantum/quantum.c ****   if ((0xFFFF >> ((BACKLIGHT_LEVELS - get_backlight_level()) * ((BACKLIGHT_LEVELS + 1) / 2))) & (1 
1175:quantum/quantum.c ****     FOR_EACH_LED(
1176:quantum/quantum.c ****       backlight_on(backlight_pin);
1177:quantum/quantum.c ****     )
1178:quantum/quantum.c ****   }
1179:quantum/quantum.c ****   else {
1180:quantum/quantum.c ****     FOR_EACH_LED(
1181:quantum/quantum.c ****       backlight_off(backlight_pin);
1182:quantum/quantum.c ****     )
1183:quantum/quantum.c ****   }
1184:quantum/quantum.c ****   backlight_tick = (backlight_tick + 1) % 16;
1185:quantum/quantum.c **** }
1186:quantum/quantum.c **** #endif
1187:quantum/quantum.c **** 
1188:quantum/quantum.c **** #ifdef BACKLIGHT_BREATHING
1189:quantum/quantum.c ****   #ifndef BACKLIGHT_CUSTOM_DRIVER
1190:quantum/quantum.c ****   #error "Backlight breathing only available with hardware PWM. Please disable."
1191:quantum/quantum.c ****   #endif
1192:quantum/quantum.c **** #endif
1193:quantum/quantum.c **** 
1194:quantum/quantum.c **** #else // hardware pwm through timer
1195:quantum/quantum.c **** 
1196:quantum/quantum.c **** #ifdef BACKLIGHT_PWM_TIMER
1197:quantum/quantum.c **** 
1198:quantum/quantum.c **** // The idea of software PWM assisted by hardware timers is the following
1199:quantum/quantum.c **** // we use the hardware timer in fast PWM mode like for hardware PWM, but
1200:quantum/quantum.c **** // instead of letting the Output Match Comparator control the led pin
1201:quantum/quantum.c **** // (which is not possible since the backlight is not wired to PWM pins on the
1202:quantum/quantum.c **** // CPU), we do the LED on/off by oursleves.
1203:quantum/quantum.c **** // The timer is setup to count up to 0xFFFF, and we set the Output Compare
1204:quantum/quantum.c **** // register to the current 16bits backlight level (after CIE correction).
1205:quantum/quantum.c **** // This means the CPU will trigger a compare match interrupt when the counter
1206:quantum/quantum.c **** // reaches the backlight level, where we turn off the LEDs,
1207:quantum/quantum.c **** // but also an overflow interrupt when the counter rolls back to 0,
1208:quantum/quantum.c **** // in which we're going to turn on the LEDs.
1209:quantum/quantum.c **** // The LED will then be on for OCRxx/0xFFFF time, adjusted every 244Hz.
1210:quantum/quantum.c **** 
1211:quantum/quantum.c **** // Triggered when the counter reaches the OCRx value
1212:quantum/quantum.c **** ISR(TIMERx_COMPA_vect) {
1213:quantum/quantum.c ****   FOR_EACH_LED(
1214:quantum/quantum.c ****     backlight_off(backlight_pin);
1215:quantum/quantum.c ****   )
1216:quantum/quantum.c **** }
1217:quantum/quantum.c **** 
1218:quantum/quantum.c **** // Triggered when the counter reaches the TOP value
1219:quantum/quantum.c **** // this one triggers at F_CPU/65536 =~ 244 Hz
1220:quantum/quantum.c **** ISR(TIMERx_OVF_vect) {
1221:quantum/quantum.c **** #ifdef BACKLIGHT_BREATHING
1222:quantum/quantum.c ****   breathing_task();
1223:quantum/quantum.c **** #endif
1224:quantum/quantum.c ****   // for very small values of OCRxx (or backlight level)
1225:quantum/quantum.c ****   // we can't guarantee this whole code won't execute
1226:quantum/quantum.c ****   // at the same time as the compare match interrupt
1227:quantum/quantum.c ****   // which means that we might turn on the leds while
1228:quantum/quantum.c ****   // trying to turn them off, leading to flickering
1229:quantum/quantum.c ****   // artifacts (especially while breathing, because breathing_task
1230:quantum/quantum.c ****   // takes many computation cycles).
1231:quantum/quantum.c ****   // so better not turn them on while the counter TOP is very low.
1232:quantum/quantum.c ****   if (OCRxx > 256) {
1233:quantum/quantum.c ****     FOR_EACH_LED(
1234:quantum/quantum.c ****       backlight_on(backlight_pin);
1235:quantum/quantum.c ****     )
1236:quantum/quantum.c ****   }
1237:quantum/quantum.c **** }
1238:quantum/quantum.c **** 
1239:quantum/quantum.c **** #endif
1240:quantum/quantum.c **** 
1241:quantum/quantum.c **** #define TIMER_TOP 0xFFFFU
1242:quantum/quantum.c **** 
1243:quantum/quantum.c **** // See http://jared.geek.nz/2013/feb/linear-led-pwm
1244:quantum/quantum.c **** static uint16_t cie_lightness(uint16_t v) {
1245:quantum/quantum.c ****   if (v <= 5243) // if below 8% of max
1246:quantum/quantum.c ****     return v / 9; // same as dividing by 900%
1247:quantum/quantum.c ****   else {
1248:quantum/quantum.c ****     uint32_t y = (((uint32_t) v + 10486) << 8) / (10486 + 0xFFFFUL); // add 16% of max and compare
1249:quantum/quantum.c ****     // to get a useful result with integer division, we shift left in the expression above
1250:quantum/quantum.c ****     // and revert what we've done again after squaring.
1251:quantum/quantum.c ****     y = y * y * y >> 8;
1252:quantum/quantum.c ****     if (y > 0xFFFFUL) // prevent overflow
1253:quantum/quantum.c ****       return 0xFFFFU;
1254:quantum/quantum.c ****     else
1255:quantum/quantum.c ****       return (uint16_t) y;
1256:quantum/quantum.c ****   }
1257:quantum/quantum.c **** }
1258:quantum/quantum.c **** 
1259:quantum/quantum.c **** // range for val is [0..TIMER_TOP]. PWM pin is high while the timer count is below val.
1260:quantum/quantum.c **** static inline void set_pwm(uint16_t val) {
1261:quantum/quantum.c **** 	OCRxx = val;
1262:quantum/quantum.c **** }
1263:quantum/quantum.c **** 
1264:quantum/quantum.c **** #ifndef BACKLIGHT_CUSTOM_DRIVER
1265:quantum/quantum.c **** __attribute__ ((weak))
1266:quantum/quantum.c **** void backlight_set(uint8_t level) {
1267:quantum/quantum.c ****   if (level > BACKLIGHT_LEVELS)
1268:quantum/quantum.c ****     level = BACKLIGHT_LEVELS;
1269:quantum/quantum.c **** 
1270:quantum/quantum.c ****   if (level == 0) {
1271:quantum/quantum.c ****     #ifdef BACKLIGHT_PWM_TIMER
1272:quantum/quantum.c ****       if (OCRxx) {
1273:quantum/quantum.c ****         TIMSK &= ~(_BV(OCIExA));
1274:quantum/quantum.c ****         TIMSK &= ~(_BV(TOIEx));
1275:quantum/quantum.c ****         FOR_EACH_LED(
1276:quantum/quantum.c ****           backlight_off(backlight_pin);
1277:quantum/quantum.c ****         )
1278:quantum/quantum.c ****       }
1279:quantum/quantum.c ****     #else
1280:quantum/quantum.c ****     // Turn off PWM control on backlight pin
1281:quantum/quantum.c ****     TCCRxA &= ~(_BV(COMxx1));
1282:quantum/quantum.c ****     #endif
1283:quantum/quantum.c ****   } else {
1284:quantum/quantum.c ****     #ifdef BACKLIGHT_PWM_TIMER
1285:quantum/quantum.c ****       if (!OCRxx) {
1286:quantum/quantum.c ****         TIMSK |= _BV(OCIExA);
1287:quantum/quantum.c ****         TIMSK |= _BV(TOIEx);
1288:quantum/quantum.c ****       }
1289:quantum/quantum.c ****     #else
1290:quantum/quantum.c ****     // Turn on PWM control of backlight pin
1291:quantum/quantum.c ****     TCCRxA |= _BV(COMxx1);
1292:quantum/quantum.c ****     #endif
1293:quantum/quantum.c ****   }
1294:quantum/quantum.c ****   // Set the brightness
1295:quantum/quantum.c ****   set_pwm(cie_lightness(TIMER_TOP * (uint32_t)level / BACKLIGHT_LEVELS));
1296:quantum/quantum.c **** }
1297:quantum/quantum.c **** 
1298:quantum/quantum.c **** void backlight_task(void) {}
1299:quantum/quantum.c **** #endif  // BACKLIGHT_CUSTOM_DRIVER
1300:quantum/quantum.c **** 
1301:quantum/quantum.c **** #ifdef BACKLIGHT_BREATHING
1302:quantum/quantum.c **** 
1303:quantum/quantum.c **** #define BREATHING_NO_HALT  0
1304:quantum/quantum.c **** #define BREATHING_HALT_OFF 1
1305:quantum/quantum.c **** #define BREATHING_HALT_ON  2
1306:quantum/quantum.c **** #define BREATHING_STEPS 128
1307:quantum/quantum.c **** 
1308:quantum/quantum.c **** static uint8_t breathing_period = BREATHING_PERIOD;
1309:quantum/quantum.c **** static uint8_t breathing_halt = BREATHING_NO_HALT;
1310:quantum/quantum.c **** static uint16_t breathing_counter = 0;
1311:quantum/quantum.c **** 
1312:quantum/quantum.c **** #ifdef BACKLIGHT_PWM_TIMER
1313:quantum/quantum.c **** static bool breathing = false;
1314:quantum/quantum.c **** 
1315:quantum/quantum.c **** bool is_breathing(void) {
1316:quantum/quantum.c ****   return breathing;
1317:quantum/quantum.c **** }
1318:quantum/quantum.c **** 
1319:quantum/quantum.c **** #define breathing_interrupt_enable() do { breathing = true; } while (0)
1320:quantum/quantum.c **** #define breathing_interrupt_disable() do { breathing = false; } while (0)
1321:quantum/quantum.c **** #else
1322:quantum/quantum.c **** 
1323:quantum/quantum.c **** bool is_breathing(void) {
1324:quantum/quantum.c ****     return !!(TIMSK1 & _BV(TOIE1));
1325:quantum/quantum.c **** }
1326:quantum/quantum.c **** 
1327:quantum/quantum.c **** #define breathing_interrupt_enable() do {TIMSK1 |= _BV(TOIE1);} while (0)
1328:quantum/quantum.c **** #define breathing_interrupt_disable() do {TIMSK1 &= ~_BV(TOIE1);} while (0)
1329:quantum/quantum.c **** #endif
1330:quantum/quantum.c **** 
1331:quantum/quantum.c **** #define breathing_min() do {breathing_counter = 0;} while (0)
1332:quantum/quantum.c **** #define breathing_max() do {breathing_counter = breathing_period * 244 / 2;} while (0)
1333:quantum/quantum.c **** 
1334:quantum/quantum.c **** void breathing_enable(void)
1335:quantum/quantum.c **** {
1336:quantum/quantum.c ****   breathing_counter = 0;
1337:quantum/quantum.c ****   breathing_halt = BREATHING_NO_HALT;
1338:quantum/quantum.c ****   breathing_interrupt_enable();
1339:quantum/quantum.c **** }
1340:quantum/quantum.c **** 
1341:quantum/quantum.c **** void breathing_pulse(void)
1342:quantum/quantum.c **** {
1343:quantum/quantum.c ****     if (get_backlight_level() == 0)
1344:quantum/quantum.c ****       breathing_min();
1345:quantum/quantum.c ****     else
1346:quantum/quantum.c ****       breathing_max();
1347:quantum/quantum.c ****     breathing_halt = BREATHING_HALT_ON;
1348:quantum/quantum.c ****     breathing_interrupt_enable();
1349:quantum/quantum.c **** }
1350:quantum/quantum.c **** 
1351:quantum/quantum.c **** void breathing_disable(void)
1352:quantum/quantum.c **** {
1353:quantum/quantum.c ****     breathing_interrupt_disable();
1354:quantum/quantum.c ****     // Restore backlight level
1355:quantum/quantum.c ****     backlight_set(get_backlight_level());
1356:quantum/quantum.c **** }
1357:quantum/quantum.c **** 
1358:quantum/quantum.c **** void breathing_self_disable(void)
1359:quantum/quantum.c **** {
1360:quantum/quantum.c ****   if (get_backlight_level() == 0)
1361:quantum/quantum.c ****     breathing_halt = BREATHING_HALT_OFF;
1362:quantum/quantum.c ****   else
1363:quantum/quantum.c ****     breathing_halt = BREATHING_HALT_ON;
1364:quantum/quantum.c **** }
1365:quantum/quantum.c **** 
1366:quantum/quantum.c **** void breathing_toggle(void) {
1367:quantum/quantum.c ****   if (is_breathing())
1368:quantum/quantum.c ****     breathing_disable();
1369:quantum/quantum.c ****   else
1370:quantum/quantum.c ****     breathing_enable();
1371:quantum/quantum.c **** }
1372:quantum/quantum.c **** 
1373:quantum/quantum.c **** void breathing_period_set(uint8_t value)
1374:quantum/quantum.c **** {
1375:quantum/quantum.c ****   if (!value)
1376:quantum/quantum.c ****     value = 1;
1377:quantum/quantum.c ****   breathing_period = value;
1378:quantum/quantum.c **** }
1379:quantum/quantum.c **** 
1380:quantum/quantum.c **** void breathing_period_default(void) {
1381:quantum/quantum.c ****   breathing_period_set(BREATHING_PERIOD);
1382:quantum/quantum.c **** }
1383:quantum/quantum.c **** 
1384:quantum/quantum.c **** void breathing_period_inc(void)
1385:quantum/quantum.c **** {
1386:quantum/quantum.c ****   breathing_period_set(breathing_period+1);
1387:quantum/quantum.c **** }
1388:quantum/quantum.c **** 
1389:quantum/quantum.c **** void breathing_period_dec(void)
1390:quantum/quantum.c **** {
1391:quantum/quantum.c ****   breathing_period_set(breathing_period-1);
1392:quantum/quantum.c **** }
1393:quantum/quantum.c **** 
1394:quantum/quantum.c **** /* To generate breathing curve in python:
1395:quantum/quantum.c ****  * from math import sin, pi; [int(sin(x/128.0*pi)**4*255) for x in range(128)]
1396:quantum/quantum.c ****  */
1397:quantum/quantum.c **** static const uint8_t breathing_table[BREATHING_STEPS] PROGMEM = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1
1398:quantum/quantum.c **** 
1399:quantum/quantum.c **** // Use this before the cie_lightness function.
1400:quantum/quantum.c **** static inline uint16_t scale_backlight(uint16_t v) {
1401:quantum/quantum.c ****   return v / BACKLIGHT_LEVELS * get_backlight_level();
1402:quantum/quantum.c **** }
1403:quantum/quantum.c **** 
1404:quantum/quantum.c **** #ifdef BACKLIGHT_PWM_TIMER
1405:quantum/quantum.c **** void breathing_task(void)
1406:quantum/quantum.c **** #else
1407:quantum/quantum.c **** /* Assuming a 16MHz CPU clock and a timer that resets at 64k (ICR1), the following interrupt handle
1408:quantum/quantum.c ****  * about 244 times per second.
1409:quantum/quantum.c ****  */
1410:quantum/quantum.c **** ISR(TIMER1_OVF_vect)
1411:quantum/quantum.c **** #endif
1412:quantum/quantum.c **** {
1413:quantum/quantum.c ****   uint16_t interval = (uint16_t) breathing_period * 244 / BREATHING_STEPS;
1414:quantum/quantum.c ****   // resetting after one period to prevent ugly reset at overflow.
1415:quantum/quantum.c ****   breathing_counter = (breathing_counter + 1) % (breathing_period * 244);
1416:quantum/quantum.c ****   uint8_t index = breathing_counter / interval % BREATHING_STEPS;
1417:quantum/quantum.c **** 
1418:quantum/quantum.c ****   if (((breathing_halt == BREATHING_HALT_ON) && (index == BREATHING_STEPS / 2)) ||
1419:quantum/quantum.c ****       ((breathing_halt == BREATHING_HALT_OFF) && (index == BREATHING_STEPS - 1)))
1420:quantum/quantum.c ****   {
1421:quantum/quantum.c ****       breathing_interrupt_disable();
1422:quantum/quantum.c ****   }
1423:quantum/quantum.c **** 
1424:quantum/quantum.c ****   set_pwm(cie_lightness(scale_backlight((uint16_t) pgm_read_byte(&breathing_table[index]) * 0x0101U
1425:quantum/quantum.c **** }
1426:quantum/quantum.c **** 
1427:quantum/quantum.c **** #endif // BACKLIGHT_BREATHING
1428:quantum/quantum.c **** 
1429:quantum/quantum.c **** __attribute__ ((weak))
1430:quantum/quantum.c **** void backlight_init_ports(void)
1431:quantum/quantum.c **** {
1432:quantum/quantum.c ****   // Setup backlight pin as output and output to on state.
1433:quantum/quantum.c ****   FOR_EACH_LED(
1434:quantum/quantum.c ****     setPinOutput(backlight_pin);
1435:quantum/quantum.c ****     backlight_on(backlight_pin);
1436:quantum/quantum.c ****   )
1437:quantum/quantum.c **** 
1438:quantum/quantum.c ****   // I could write a wall of text here to explain... but TL;DW
1439:quantum/quantum.c ****   // Go read the ATmega32u4 datasheet.
1440:quantum/quantum.c ****   // And this: http://blog.saikoled.com/post/43165849837/secret-konami-cheat-code-to-high-resolutio
1441:quantum/quantum.c **** 
1442:quantum/quantum.c **** #ifdef BACKLIGHT_PWM_TIMER
1443:quantum/quantum.c ****   // TimerX setup, Fast PWM mode count to TOP set in ICRx
1444:quantum/quantum.c ****   TCCRxA = _BV(WGM11); // = 0b00000010;
1445:quantum/quantum.c ****   // clock select clk/1
1446:quantum/quantum.c ****   TCCRxB = _BV(WGM13) | _BV(WGM12) | _BV(CS10); // = 0b00011001;
1447:quantum/quantum.c **** #else // hardware PWM
1448:quantum/quantum.c ****   // Pin PB7 = OCR1C (Timer 1, Channel C)
1449:quantum/quantum.c ****   // Compare Output Mode = Clear on compare match, Channel C = COM1C1=1 COM1C0=0
1450:quantum/quantum.c ****   // (i.e. start high, go low when counter matches.)
1451:quantum/quantum.c ****   // WGM Mode 14 (Fast PWM) = WGM13=1 WGM12=1 WGM11=1 WGM10=0
1452:quantum/quantum.c ****   // Clock Select = clk/1 (no prescaling) = CS12=0 CS11=0 CS10=1
1453:quantum/quantum.c **** 
1454:quantum/quantum.c ****   /*
1455:quantum/quantum.c ****   14.8.3:
1456:quantum/quantum.c ****   "In fast PWM mode, the compare units allow generation of PWM waveforms on the OCnx pins. Setting 
1457:quantum/quantum.c ****   "In fast PWM mode the counter is incremented until the counter value matches either one of the fi
1458:quantum/quantum.c ****   */
1459:quantum/quantum.c ****   TCCRxA = _BV(COMxx1) | _BV(WGM11);            // = 0b00001010;
1460:quantum/quantum.c ****   TCCRxB = _BV(WGM13) | _BV(WGM12) | _BV(CS10); // = 0b00011001;
1461:quantum/quantum.c **** #endif
1462:quantum/quantum.c ****   // Use full 16-bit resolution. Counter counts to ICR1 before reset to 0.
1463:quantum/quantum.c ****   ICRx = TIMER_TOP;
1464:quantum/quantum.c **** 
1465:quantum/quantum.c ****   backlight_init();
1466:quantum/quantum.c ****   #ifdef BACKLIGHT_BREATHING
1467:quantum/quantum.c ****     breathing_enable();
1468:quantum/quantum.c ****   #endif
1469:quantum/quantum.c **** }
1470:quantum/quantum.c **** 
1471:quantum/quantum.c **** #endif // hardware backlight
1472:quantum/quantum.c **** 
1473:quantum/quantum.c **** #else // no backlight
1474:quantum/quantum.c **** 
1475:quantum/quantum.c **** __attribute__ ((weak))
1476:quantum/quantum.c **** void backlight_init_ports(void) {}
1477:quantum/quantum.c **** 
1478:quantum/quantum.c **** __attribute__ ((weak))
1479:quantum/quantum.c **** void backlight_set(uint8_t level) {}
1480:quantum/quantum.c **** 
1481:quantum/quantum.c **** #endif // backlight
1482:quantum/quantum.c **** 
1483:quantum/quantum.c **** #ifdef HD44780_ENABLED
1484:quantum/quantum.c **** #include "hd44780.h"
1485:quantum/quantum.c **** #endif
1486:quantum/quantum.c **** 
1487:quantum/quantum.c **** 
1488:quantum/quantum.c **** // Functions for spitting out values
1489:quantum/quantum.c **** //
1490:quantum/quantum.c **** 
1491:quantum/quantum.c **** void send_dword(uint32_t number) { // this might not actually work
1492:quantum/quantum.c ****     uint16_t word = (number >> 16);
1493:quantum/quantum.c ****     send_word(word);
1494:quantum/quantum.c ****     send_word(number & 0xFFFFUL);
1495:quantum/quantum.c **** }
1496:quantum/quantum.c **** 
1497:quantum/quantum.c **** void send_word(uint16_t number) {
1498:quantum/quantum.c ****     uint8_t byte = number >> 8;
1499:quantum/quantum.c ****     send_byte(byte);
1500:quantum/quantum.c ****     send_byte(number & 0xFF);
1501:quantum/quantum.c **** }
1502:quantum/quantum.c **** 
1503:quantum/quantum.c **** void send_byte(uint8_t number) {
1504:quantum/quantum.c ****     uint8_t nibble = number >> 4;
1505:quantum/quantum.c ****     send_nibble(nibble);
1506:quantum/quantum.c ****     send_nibble(number & 0xF);
1507:quantum/quantum.c **** }
1508:quantum/quantum.c **** 
1509:quantum/quantum.c **** void send_nibble(uint8_t number) {
 1887               		.loc 1 1509 34 view -0
 1888               		.cfi_startproc
 1889               		.loc 1 1509 34 is_stmt 0 view .LVU377
 1890 0000 CF93      		push r28
 1891               	.LCFI43:
 1892               		.cfi_def_cfa_offset 3
 1893               		.cfi_offset 28, -2
 1894               	/* prologue: function */
 1895               	/* frame size = 0 */
 1896               	/* stack size = 1 */
 1897               	.L__stack_usage = 1
1510:quantum/quantum.c ****     switch (number) {
 1898               		.loc 1 1510 5 is_stmt 1 view .LVU378
 1899 0002 8A30      		cpi r24,lo8(10)
 1900 0004 00F4      		brsh .L115
 1901 0006 8823      		tst r24
 1902 0008 01F0      		breq .L120
1511:quantum/quantum.c ****         case 0:
1512:quantum/quantum.c ****             register_code(KC_0);
1513:quantum/quantum.c ****             unregister_code(KC_0);
1514:quantum/quantum.c ****             break;
1515:quantum/quantum.c ****         case 1 ... 9:
1516:quantum/quantum.c ****             register_code(KC_1 + (number - 1));
 1903               		.loc 1 1516 13 view .LVU379
 1904 000a CDE1      		ldi r28,lo8(29)
 1905               	.L123:
1517:quantum/quantum.c ****             unregister_code(KC_1 + (number - 1));
1518:quantum/quantum.c ****             break;
1519:quantum/quantum.c ****         case 0xA ... 0xF:
1520:quantum/quantum.c ****             register_code(KC_A + (number - 0xA));
 1906               		.loc 1 1520 13 is_stmt 0 view .LVU380
 1907 000c C80F      		add r28,r24
 1908 000e 8C2F      		mov r24,r28
 1909               	.LVL180:
 1910               		.loc 1 1520 13 view .LVU381
 1911 0010 0E94 0000 		call register_code
 1912               	.LVL181:
1521:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
 1913               		.loc 1 1521 13 is_stmt 1 view .LVU382
 1914 0014 8C2F      		mov r24,r28
 1915 0016 00C0      		rjmp .L122
 1916               	.LVL182:
 1917               	.L115:
1520:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
 1918               		.loc 1 1520 13 is_stmt 0 view .LVU383
 1919 0018 CAEF      		ldi r28,lo8(-6)
 1920 001a 8031      		cpi r24,lo8(16)
 1921 001c 00F0      		brlo .L123
 1922               	/* epilogue start */
1522:quantum/quantum.c ****             break;
1523:quantum/quantum.c ****     }
1524:quantum/quantum.c **** }
 1923               		.loc 1 1524 1 view .LVU384
 1924 001e CF91      		pop r28
 1925 0020 0895      		ret
 1926               	.L120:
1512:quantum/quantum.c ****             unregister_code(KC_0);
 1927               		.loc 1 1512 13 is_stmt 1 view .LVU385
 1928 0022 87E2      		ldi r24,lo8(39)
 1929               	.LVL183:
1512:quantum/quantum.c ****             unregister_code(KC_0);
 1930               		.loc 1 1512 13 is_stmt 0 view .LVU386
 1931 0024 0E94 0000 		call register_code
 1932               	.LVL184:
1513:quantum/quantum.c ****             break;
 1933               		.loc 1 1513 13 is_stmt 1 view .LVU387
 1934 0028 87E2      		ldi r24,lo8(39)
 1935               	.L122:
 1936               	/* epilogue start */
 1937               		.loc 1 1524 1 is_stmt 0 view .LVU388
 1938 002a CF91      		pop r28
1521:quantum/quantum.c ****             break;
 1939               		.loc 1 1521 13 view .LVU389
 1940 002c 0C94 0000 		jmp unregister_code
 1941               	.LVL185:
 1942               		.cfi_endproc
 1943               	.LFE154:
 1945               		.section	.text.send_byte,"ax",@progbits
 1946               	.global	send_byte
 1948               	send_byte:
 1949               	.LVL186:
 1950               	.LFB153:
1503:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 1951               		.loc 1 1503 32 is_stmt 1 view -0
 1952               		.cfi_startproc
1503:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 1953               		.loc 1 1503 32 is_stmt 0 view .LVU391
 1954 0000 CF93      		push r28
 1955               	.LCFI44:
 1956               		.cfi_def_cfa_offset 3
 1957               		.cfi_offset 28, -2
 1958               	/* prologue: function */
 1959               	/* frame size = 0 */
 1960               	/* stack size = 1 */
 1961               	.L__stack_usage = 1
 1962 0002 C82F      		mov r28,r24
1504:quantum/quantum.c ****     send_nibble(nibble);
 1963               		.loc 1 1504 5 is_stmt 1 view .LVU392
 1964               	.LVL187:
1505:quantum/quantum.c ****     send_nibble(number & 0xF);
 1965               		.loc 1 1505 5 view .LVU393
 1966 0004 8295      		swap r24
 1967               	.LVL188:
1505:quantum/quantum.c ****     send_nibble(number & 0xF);
 1968               		.loc 1 1505 5 is_stmt 0 view .LVU394
 1969 0006 8F70      		andi r24,lo8(15)
 1970 0008 0E94 0000 		call send_nibble
 1971               	.LVL189:
1506:quantum/quantum.c **** }
 1972               		.loc 1 1506 5 is_stmt 1 view .LVU395
 1973 000c 8C2F      		mov r24,r28
 1974 000e 8F70      		andi r24,lo8(15)
 1975               	/* epilogue start */
1507:quantum/quantum.c **** 
 1976               		.loc 1 1507 1 is_stmt 0 view .LVU396
 1977 0010 CF91      		pop r28
 1978               	.LVL190:
1506:quantum/quantum.c **** }
 1979               		.loc 1 1506 5 view .LVU397
 1980 0012 0C94 0000 		jmp send_nibble
 1981               	.LVL191:
 1982               		.cfi_endproc
 1983               	.LFE153:
 1985               		.section	.text.send_word,"ax",@progbits
 1986               	.global	send_word
 1988               	send_word:
 1989               	.LVL192:
 1990               	.LFB152:
1497:quantum/quantum.c ****     uint8_t byte = number >> 8;
 1991               		.loc 1 1497 33 is_stmt 1 view -0
 1992               		.cfi_startproc
1497:quantum/quantum.c ****     uint8_t byte = number >> 8;
 1993               		.loc 1 1497 33 is_stmt 0 view .LVU399
 1994 0000 CF93      		push r28
 1995               	.LCFI45:
 1996               		.cfi_def_cfa_offset 3
 1997               		.cfi_offset 28, -2
 1998               	/* prologue: function */
 1999               	/* frame size = 0 */
 2000               	/* stack size = 1 */
 2001               	.L__stack_usage = 1
 2002 0002 C82F      		mov r28,r24
1498:quantum/quantum.c ****     send_byte(byte);
 2003               		.loc 1 1498 5 is_stmt 1 view .LVU400
 2004               	.LVL193:
1499:quantum/quantum.c ****     send_byte(number & 0xFF);
 2005               		.loc 1 1499 5 view .LVU401
 2006 0004 892F      		mov r24,r25
 2007               	.LVL194:
1499:quantum/quantum.c ****     send_byte(number & 0xFF);
 2008               		.loc 1 1499 5 is_stmt 0 view .LVU402
 2009 0006 0E94 0000 		call send_byte
 2010               	.LVL195:
1500:quantum/quantum.c **** }
 2011               		.loc 1 1500 5 is_stmt 1 view .LVU403
 2012 000a 8C2F      		mov r24,r28
 2013               	/* epilogue start */
1501:quantum/quantum.c **** 
 2014               		.loc 1 1501 1 is_stmt 0 view .LVU404
 2015 000c CF91      		pop r28
1500:quantum/quantum.c **** }
 2016               		.loc 1 1500 5 view .LVU405
 2017 000e 0C94 0000 		jmp send_byte
 2018               	.LVL196:
 2019               		.cfi_endproc
 2020               	.LFE152:
 2022               		.section	.text.send_dword,"ax",@progbits
 2023               	.global	send_dword
 2025               	send_dword:
 2026               	.LVL197:
 2027               	.LFB151:
1491:quantum/quantum.c ****     uint16_t word = (number >> 16);
 2028               		.loc 1 1491 34 is_stmt 1 view -0
 2029               		.cfi_startproc
1491:quantum/quantum.c ****     uint16_t word = (number >> 16);
 2030               		.loc 1 1491 34 is_stmt 0 view .LVU407
 2031 0000 CF92      		push r12
 2032               	.LCFI46:
 2033               		.cfi_def_cfa_offset 3
 2034               		.cfi_offset 12, -2
 2035 0002 DF92      		push r13
 2036               	.LCFI47:
 2037               		.cfi_def_cfa_offset 4
 2038               		.cfi_offset 13, -3
 2039 0004 EF92      		push r14
 2040               	.LCFI48:
 2041               		.cfi_def_cfa_offset 5
 2042               		.cfi_offset 14, -4
 2043 0006 FF92      		push r15
 2044               	.LCFI49:
 2045               		.cfi_def_cfa_offset 6
 2046               		.cfi_offset 15, -5
 2047               	/* prologue: function */
 2048               	/* frame size = 0 */
 2049               	/* stack size = 4 */
 2050               	.L__stack_usage = 4
 2051 0008 6B01      		movw r12,r22
1492:quantum/quantum.c ****     send_word(word);
 2052               		.loc 1 1492 5 is_stmt 1 view .LVU408
1493:quantum/quantum.c ****     send_word(number & 0xFFFFUL);
 2053               		.loc 1 1493 5 view .LVU409
 2054 000a 0E94 0000 		call send_word
 2055               	.LVL198:
1494:quantum/quantum.c **** }
 2056               		.loc 1 1494 5 view .LVU410
 2057 000e C601      		movw r24,r12
 2058               	/* epilogue start */
1495:quantum/quantum.c **** 
 2059               		.loc 1 1495 1 is_stmt 0 view .LVU411
 2060 0010 FF90      		pop r15
 2061 0012 EF90      		pop r14
 2062 0014 DF90      		pop r13
 2063 0016 CF90      		pop r12
1494:quantum/quantum.c **** }
 2064               		.loc 1 1494 5 view .LVU412
 2065 0018 0C94 0000 		jmp send_word
 2066               	.LVL199:
 2067               		.cfi_endproc
 2068               	.LFE151:
 2070               		.section	.text.hex_to_keycode,"ax",@progbits
 2071               		.weak	hex_to_keycode
 2073               	hex_to_keycode:
 2074               	.LVL200:
 2075               	.LFB155:
1525:quantum/quantum.c **** 
1526:quantum/quantum.c **** 
1527:quantum/quantum.c **** __attribute__((weak))
1528:quantum/quantum.c **** uint16_t hex_to_keycode(uint8_t hex)
1529:quantum/quantum.c **** {
 2076               		.loc 1 1529 1 is_stmt 1 view -0
 2077               		.cfi_startproc
 2078               	/* prologue: function */
 2079               	/* frame size = 0 */
 2080               	/* stack size = 0 */
 2081               	.L__stack_usage = 0
1530:quantum/quantum.c ****   hex = hex & 0xF;
 2082               		.loc 1 1530 3 view .LVU414
 2083               		.loc 1 1530 7 is_stmt 0 view .LVU415
 2084 0000 282F      		mov r18,r24
 2085 0002 2F70      		andi r18,lo8(15)
 2086               	.LVL201:
1531:quantum/quantum.c ****   if (hex == 0x0) {
 2087               		.loc 1 1531 3 is_stmt 1 view .LVU416
 2088               		.loc 1 1531 6 is_stmt 0 view .LVU417
 2089 0004 01F0      		breq .L130
1532:quantum/quantum.c ****     return KC_0;
1533:quantum/quantum.c ****   } else if (hex < 0xA) {
 2090               		.loc 1 1533 10 is_stmt 1 view .LVU418
 2091 0006 822F      		mov r24,r18
 2092 0008 90E0      		ldi r25,0
 2093               		.loc 1 1533 13 is_stmt 0 view .LVU419
 2094 000a 2A30      		cpi r18,lo8(10)
 2095 000c 00F4      		brsh .L129
1534:quantum/quantum.c ****     return KC_1 + (hex - 0x1);
 2096               		.loc 1 1534 5 is_stmt 1 view .LVU420
 2097               		.loc 1 1534 17 is_stmt 0 view .LVU421
 2098 000e 4D96      		adiw r24,29
 2099 0010 0895      		ret
 2100               	.L129:
1535:quantum/quantum.c ****   } else {
1536:quantum/quantum.c ****     return KC_A + (hex - 0xA);
 2101               		.loc 1 1536 5 is_stmt 1 view .LVU422
 2102               		.loc 1 1536 17 is_stmt 0 view .LVU423
 2103 0012 0697      		sbiw r24,6
 2104 0014 0895      		ret
 2105               	.L130:
1532:quantum/quantum.c ****   } else if (hex < 0xA) {
 2106               		.loc 1 1532 12 view .LVU424
 2107 0016 87E2      		ldi r24,lo8(39)
 2108 0018 90E0      		ldi r25,0
 2109               	/* epilogue start */
1537:quantum/quantum.c ****   }
1538:quantum/quantum.c **** }
 2110               		.loc 1 1538 1 view .LVU425
 2111 001a 0895      		ret
 2112               		.cfi_endproc
 2113               	.LFE155:
 2115               		.section	.text.api_send_unicode,"ax",@progbits
 2116               	.global	api_send_unicode
 2118               	api_send_unicode:
 2119               	.LVL202:
 2120               	.LFB156:
1539:quantum/quantum.c **** 
1540:quantum/quantum.c **** void api_send_unicode(uint32_t unicode) {
 2121               		.loc 1 1540 41 is_stmt 1 view -0
 2122               		.cfi_startproc
 2123               	/* prologue: function */
 2124               	/* frame size = 0 */
 2125               	/* stack size = 0 */
 2126               	.L__stack_usage = 0
1541:quantum/quantum.c **** #ifdef API_ENABLE
1542:quantum/quantum.c ****     uint8_t chunk[4];
1543:quantum/quantum.c ****     dword_to_bytes(unicode, chunk);
1544:quantum/quantum.c ****     MT_SEND_DATA(DT_UNICODE, chunk, 5);
1545:quantum/quantum.c **** #endif
1546:quantum/quantum.c **** }
 2127               		.loc 1 1546 1 view .LVU427
 2128               	/* epilogue start */
 2129 0000 0895      		ret
 2130               		.cfi_endproc
 2131               	.LFE156:
 2133               		.section	.text.led_set_user,"ax",@progbits
 2134               		.weak	led_set_user
 2136               	led_set_user:
 2137               	.LVL203:
 2138               	.LFB157:
1547:quantum/quantum.c **** 
1548:quantum/quantum.c **** __attribute__ ((weak))
1549:quantum/quantum.c **** void led_set_user(uint8_t usb_led) {
 2139               		.loc 1 1549 36 view -0
 2140               		.cfi_startproc
 2141               	/* prologue: function */
 2142               	/* frame size = 0 */
 2143               	/* stack size = 0 */
 2144               	.L__stack_usage = 0
1550:quantum/quantum.c **** 
1551:quantum/quantum.c **** }
 2145               		.loc 1 1551 1 view .LVU429
 2146               	/* epilogue start */
 2147 0000 0895      		ret
 2148               		.cfi_endproc
 2149               	.LFE157:
 2151               		.set	led_set_user.localalias.1,led_set_user
 2152               		.section	.text.backlight_set,"ax",@progbits
 2153               		.weak	backlight_set
 2155               	backlight_set:
 2156               	.LFB192:
 2157               		.cfi_startproc
 2158               	/* prologue: function */
 2159               	/* frame size = 0 */
 2160               	/* stack size = 0 */
 2161               	.L__stack_usage = 0
 2162               	/* epilogue start */
 2163 0000 0895      		ret
 2164               		.cfi_endproc
 2165               	.LFE192:
 2167               		.section	.text.led_set_kb,"ax",@progbits
 2168               		.weak	led_set_kb
 2170               	led_set_kb:
 2171               	.LVL204:
 2172               	.LFB158:
1552:quantum/quantum.c **** 
1553:quantum/quantum.c **** __attribute__ ((weak))
1554:quantum/quantum.c **** void led_set_kb(uint8_t usb_led) {
 2173               		.loc 1 1554 34 view -0
 2174               		.cfi_startproc
 2175               	/* prologue: function */
 2176               	/* frame size = 0 */
 2177               	/* stack size = 0 */
 2178               	.L__stack_usage = 0
1555:quantum/quantum.c ****     led_set_user(usb_led);
 2179               		.loc 1 1555 5 view .LVU431
 2180 0000 0C94 0000 		jmp led_set_user
 2181               	.LVL205:
 2182               		.loc 1 1555 5 is_stmt 0 view .LVU432
 2183               		.cfi_endproc
 2184               	.LFE158:
 2186               		.section	.text.led_init_ports,"ax",@progbits
 2187               		.weak	led_init_ports
 2189               	led_init_ports:
 2190               	.LFB159:
1556:quantum/quantum.c **** }
1557:quantum/quantum.c **** 
1558:quantum/quantum.c **** __attribute__ ((weak))
1559:quantum/quantum.c **** void led_init_ports(void)
1560:quantum/quantum.c **** {
 2191               		.loc 1 1560 1 is_stmt 1 view -0
 2192               		.cfi_startproc
 2193               	/* prologue: function */
 2194               	/* frame size = 0 */
 2195               	/* stack size = 0 */
 2196               	.L__stack_usage = 0
1561:quantum/quantum.c **** 
1562:quantum/quantum.c **** }
 2197               		.loc 1 1562 1 view .LVU434
 2198               	/* epilogue start */
 2199 0000 0895      		ret
 2200               		.cfi_endproc
 2201               	.LFE159:
 2203               		.section	.text.led_set,"ax",@progbits
 2204               		.weak	led_set
 2206               	led_set:
 2207               	.LVL206:
 2208               	.LFB160:
1563:quantum/quantum.c **** 
1564:quantum/quantum.c **** __attribute__ ((weak))
1565:quantum/quantum.c **** void led_set(uint8_t usb_led)
1566:quantum/quantum.c **** {
 2209               		.loc 1 1566 1 view -0
 2210               		.cfi_startproc
 2211               	/* prologue: function */
 2212               	/* frame size = 0 */
 2213               	/* stack size = 0 */
 2214               	.L__stack_usage = 0
1567:quantum/quantum.c **** 
1568:quantum/quantum.c ****   // Example LED Code
1569:quantum/quantum.c ****   //
1570:quantum/quantum.c ****     // // Using PE6 Caps Lock LED
1571:quantum/quantum.c ****     // if (usb_led & (1<<USB_LED_CAPS_LOCK))
1572:quantum/quantum.c ****     // {
1573:quantum/quantum.c ****     //     // Output high.
1574:quantum/quantum.c ****     //     DDRE |= (1<<6);
1575:quantum/quantum.c ****     //     PORTE |= (1<<6);
1576:quantum/quantum.c ****     // }
1577:quantum/quantum.c ****     // else
1578:quantum/quantum.c ****     // {
1579:quantum/quantum.c ****     //     // Output low.
1580:quantum/quantum.c ****     //     DDRE &= ~(1<<6);
1581:quantum/quantum.c ****     //     PORTE &= ~(1<<6);
1582:quantum/quantum.c ****     // }
1583:quantum/quantum.c **** 
1584:quantum/quantum.c **** #if defined(BACKLIGHT_CAPS_LOCK) && defined(BACKLIGHT_ENABLE)
1585:quantum/quantum.c ****   // Use backlight as Caps Lock indicator
1586:quantum/quantum.c ****   uint8_t bl_toggle_lvl = 0;
1587:quantum/quantum.c **** 
1588:quantum/quantum.c ****   if (IS_LED_ON(usb_led, USB_LED_CAPS_LOCK) && !backlight_config.enable) {
1589:quantum/quantum.c ****     // Turning Caps Lock ON and backlight is disabled in config
1590:quantum/quantum.c ****     // Toggling backlight to the brightest level
1591:quantum/quantum.c ****     bl_toggle_lvl = BACKLIGHT_LEVELS;
1592:quantum/quantum.c ****   } else if (IS_LED_OFF(usb_led, USB_LED_CAPS_LOCK) && backlight_config.enable) {
1593:quantum/quantum.c ****     // Turning Caps Lock OFF and backlight is enabled in config
1594:quantum/quantum.c ****     // Toggling backlight and restoring config level
1595:quantum/quantum.c ****     bl_toggle_lvl = backlight_config.level;
1596:quantum/quantum.c ****   }
1597:quantum/quantum.c **** 
1598:quantum/quantum.c ****   // Set level without modify backlight_config to keep ability to restore state
1599:quantum/quantum.c ****   backlight_set(bl_toggle_lvl);
1600:quantum/quantum.c **** #endif
1601:quantum/quantum.c **** 
1602:quantum/quantum.c ****   led_set_kb(usb_led);
 2215               		.loc 1 1602 3 view .LVU436
 2216 0000 0C94 0000 		jmp led_set_kb
 2217               	.LVL207:
 2218               		.loc 1 1602 3 is_stmt 0 view .LVU437
 2219               		.cfi_endproc
 2220               	.LFE160:
 2222               		.section	.text.startup_user,"ax",@progbits
 2223               		.weak	startup_user
 2225               	startup_user:
 2226               	.LFB164:
 2227               		.cfi_startproc
 2228               	/* prologue: function */
 2229               	/* frame size = 0 */
 2230               	/* stack size = 0 */
 2231               	.L__stack_usage = 0
 2232               	/* epilogue start */
 2233 0000 0895      		ret
 2234               		.cfi_endproc
 2235               	.LFE164:
 2237               		.section	.text.shutdown_user,"ax",@progbits
 2238               		.weak	shutdown_user
 2240               	shutdown_user:
 2241               	.LFB166:
 2242               		.cfi_startproc
 2243               	/* prologue: function */
 2244               	/* frame size = 0 */
 2245               	/* stack size = 0 */
 2246               	.L__stack_usage = 0
 2247               	/* epilogue start */
 2248 0000 0895      		ret
 2249               		.cfi_endproc
 2250               	.LFE166:
 2252               		.section	.text.reset_keyboard,"ax",@progbits
 2253               	.global	reset_keyboard
 2255               	reset_keyboard:
 2256               	.LFB133:
 166:quantum/quantum.c ****   clear_keyboard();
 2257               		.loc 1 166 27 is_stmt 1 view -0
 2258               		.cfi_startproc
 2259               	/* prologue: function */
 2260               	/* frame size = 0 */
 2261               	/* stack size = 0 */
 2262               	.L__stack_usage = 0
 167:quantum/quantum.c **** #if defined(MIDI_ENABLE) && defined(MIDI_BASIC)
 2263               		.loc 1 167 3 view .LVU439
 2264 0000 0E94 0000 		call clear_keyboard
 2265               	.LVL208:
 182:quantum/quantum.c ****   wait_ms(250);
 2266               		.loc 1 182 3 view .LVU440
 2267 0004 0E94 0000 		call shutdown_user
 2268               	.LVL209:
 183:quantum/quantum.c **** #endif
 2269               		.loc 1 183 3 view .LVU441
 2270               	.LBB52:
 2271               	.LBI52:
 166:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** {
 2272               		.loc 2 166 1 view .LVU442
 2273               	.LBB53:
 168:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 2274               		.loc 2 168 2 view .LVU443
 172:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 2275               		.loc 2 172 2 view .LVU444
 173:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 2276               		.loc 2 173 2 view .LVU445
 174:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 2277               		.loc 2 174 2 view .LVU446
 184:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#endif
 2278               		.loc 2 184 3 view .LVU447
 2279               		.loc 2 187 2 view .LVU448
 2280 0008 2FEF      		ldi r18,lo8(799999)
 2281 000a 84E3      		ldi r24,hi8(799999)
 2282 000c 9CE0      		ldi r25,hlo8(799999)
 2283 000e 2150      	1:	subi r18,1
 2284 0010 8040      		sbci r24,0
 2285 0012 9040      		sbci r25,0
 2286 0014 01F4      		brne 1b
 2287 0016 00C0      		rjmp .
 2288 0018 0000      		nop
 2289               	.LVL210:
 2290               		.loc 2 187 2 is_stmt 0 view .LVU449
 2291               	.LBE53:
 2292               	.LBE52:
 192:quantum/quantum.c **** }
 2293               		.loc 1 192 3 is_stmt 1 view .LVU450
 2294 001a 0C94 0000 		jmp bootloader_jump
 2295               	.LVL211:
 2296               		.cfi_endproc
 2297               	.LFE133:
 2299               		.section	.text.process_record_quantum,"ax",@progbits
 2300               	.global	process_record_quantum
 2302               	process_record_quantum:
 2303               	.LVL212:
 2304               	.LFB136:
 231:quantum/quantum.c ****     uint16_t keycode = get_record_keycode(record);
 2305               		.loc 1 231 50 view -0
 2306               		.cfi_startproc
 231:quantum/quantum.c ****     uint16_t keycode = get_record_keycode(record);
 2307               		.loc 1 231 50 is_stmt 0 view .LVU452
 2308 0000 0F93      		push r16
 2309               	.LCFI50:
 2310               		.cfi_def_cfa_offset 3
 2311               		.cfi_offset 16, -2
 2312 0002 1F93      		push r17
 2313               	.LCFI51:
 2314               		.cfi_def_cfa_offset 4
 2315               		.cfi_offset 17, -3
 2316 0004 CF93      		push r28
 2317               	.LCFI52:
 2318               		.cfi_def_cfa_offset 5
 2319               		.cfi_offset 28, -4
 2320 0006 DF93      		push r29
 2321               	.LCFI53:
 2322               		.cfi_def_cfa_offset 6
 2323               		.cfi_offset 29, -5
 2324               	/* prologue: function */
 2325               	/* frame size = 0 */
 2326               	/* stack size = 4 */
 2327               	.L__stack_usage = 4
 2328 0008 8C01      		movw r16,r24
 232:quantum/quantum.c **** 
 2329               		.loc 1 232 5 is_stmt 1 view .LVU453
 232:quantum/quantum.c **** 
 2330               		.loc 1 232 24 is_stmt 0 view .LVU454
 2331 000a 0E94 0000 		call get_record_keycode
 2332               	.LVL213:
 232:quantum/quantum.c **** 
 2333               		.loc 1 232 24 view .LVU455
 2334 000e EC01      		movw r28,r24
 2335               	.LVL214:
 250:quantum/quantum.c ****   #if defined(KEY_LOCK_ENABLE)
 2336               		.loc 1 250 3 is_stmt 1 view .LVU456
 264:quantum/quantum.c ****   #if defined(MIDI_ENABLE) && defined(MIDI_ADVANCED)
 2337               		.loc 1 264 5 is_stmt 0 view .LVU457
 2338 0010 B801      		movw r22,r16
 2339 0012 0E94 0000 		call process_record_kb
 2340               	.LVL215:
 264:quantum/quantum.c ****   #if defined(MIDI_ENABLE) && defined(MIDI_ADVANCED)
 2341               		.loc 1 264 40 view .LVU458
 2342 0016 8823      		tst r24
 2343 0018 01F4      		brne .+2
 2344 001a 00C0      		rjmp .L140
 299:quantum/quantum.c ****   #endif
 2345               		.loc 1 299 5 discriminator 2 view .LVU459
 2346 001c B801      		movw r22,r16
 2347 001e CE01      		movw r24,r28
 2348 0020 0E94 0000 		call process_space_cadet
 2349               	.LVL216:
 264:quantum/quantum.c ****   #if defined(MIDI_ENABLE) && defined(MIDI_ADVANCED)
 2350               		.loc 1 264 40 discriminator 2 view .LVU460
 2351 0024 8823      		tst r24
 2352 0026 01F4      		brne .+2
 2353 0028 00C0      		rjmp .L140
 307:quantum/quantum.c ****     case RESET:
 2354               		.loc 1 307 3 is_stmt 1 view .LVU461
 2355 002a C531      		cpi r28,21
 2356 002c 8CE5      		ldi r24,92
 2357 002e D807      		cpc r29,r24
 2358 0030 00F4      		brsh .L144
 2359 0032 C230      		cpi r28,2
 2360 0034 ECE5      		ldi r30,92
 2361 0036 DE07      		cpc r29,r30
 2362 0038 00F0      		brlo .+2
 2363 003a 00C0      		rjmp .L145
 2364 003c C115      		cp r28,__zero_reg__
 2365 003e FCE5      		ldi r31,92
 2366 0040 DF07      		cpc r29,r31
 2367 0042 01F0      		breq .L146
 2368 0044 C130      		cpi r28,1
 2369 0046 DC45      		sbci r29,92
 2370 0048 01F4      		brne .+2
 2371 004a 00C0      		rjmp .L147
 2372               	.L148:
 713:quantum/quantum.c **** }
 2373               		.loc 1 713 3 view .LVU462
 713:quantum/quantum.c **** }
 2374               		.loc 1 713 10 is_stmt 0 view .LVU463
 2375 004c C801      		movw r24,r16
 2376               	/* epilogue start */
 714:quantum/quantum.c **** 
 2377               		.loc 1 714 1 view .LVU464
 2378 004e DF91      		pop r29
 2379 0050 CF91      		pop r28
 2380               	.LVL217:
 714:quantum/quantum.c **** 
 2381               		.loc 1 714 1 view .LVU465
 2382 0052 1F91      		pop r17
 2383 0054 0F91      		pop r16
 2384               	.LVL218:
 713:quantum/quantum.c **** }
 2385               		.loc 1 713 10 view .LVU466
 2386 0056 0C94 0000 		jmp process_action_kb
 2387               	.LVL219:
 2388               	.L144:
 713:quantum/quantum.c **** }
 2389               		.loc 1 713 10 view .LVU467
 2390 005a CC3D      		cpi r28,-36
 2391 005c ECE5      		ldi r30,92
 2392 005e DE07      		cpc r29,r30
 2393 0060 01F4      		brne .+2
 2394 0062 00C0      		rjmp .L149
 2395 0064 00F4      		brsh .L150
 2396 0066 C631      		cpi r28,22
 2397 0068 DC45      		sbci r29,92
 2398 006a 01F4      		brne .L148
 2399               	.LBB54:
 659:quantum/quantum.c ****                                       |MOD_BIT(KC_LGUI)|MOD_BIT(KC_RGUI)));
 2400               		.loc 1 659 7 is_stmt 1 view .LVU468
 659:quantum/quantum.c ****                                       |MOD_BIT(KC_LGUI)|MOD_BIT(KC_RGUI)));
 2401               		.loc 1 659 25 is_stmt 0 view .LVU469
 2402 006c 0E94 0000 		call get_mods
 2403               	.LVL220:
 692:quantum/quantum.c ****         grave_esc_was_shifted = shifted;
 2404               		.loc 1 692 7 is_stmt 1 view .LVU470
 692:quantum/quantum.c ****         grave_esc_was_shifted = shifted;
 2405               		.loc 1 692 10 is_stmt 0 view .LVU471
 2406 0070 F801      		movw r30,r16
 2407 0072 9281      		ldd r25,Z+2
 2408 0074 9923      		tst r25
 2409 0076 01F4      		brne .+2
 2410 0078 00C0      		rjmp .L176
 659:quantum/quantum.c ****                                       |MOD_BIT(KC_LGUI)|MOD_BIT(KC_RGUI)));
 2411               		.loc 1 659 15 view .LVU472
 2412 007a 8A7A      		andi r24,lo8(-86)
 2413               	.LVL221:
 693:quantum/quantum.c ****         add_key(shifted ? KC_GRAVE : KC_ESCAPE);
 2414               		.loc 1 693 9 is_stmt 1 view .LVU473
 693:quantum/quantum.c ****         add_key(shifted ? KC_GRAVE : KC_ESCAPE);
 2415               		.loc 1 693 31 is_stmt 0 view .LVU474
 2416 007c 91E0      		ldi r25,lo8(1)
 2417 007e 01F4      		brne .L177
 2418 0080 90E0      		ldi r25,0
 2419               	.L177:
 2420 0082 9093 0000 		sts grave_esc_was_shifted,r25
 694:quantum/quantum.c ****       }
 2421               		.loc 1 694 9 is_stmt 1 view .LVU475
 2422 0086 8111      		cpse r24,__zero_reg__
 2423 0088 00C0      		rjmp .L181
 2424 008a 89E2      		ldi r24,lo8(41)
 2425               	.LVL222:
 2426               	.L178:
 694:quantum/quantum.c ****       }
 2427               		.loc 1 694 9 is_stmt 0 discriminator 4 view .LVU476
 2428 008c 0E94 0000 		call add_key
 2429               	.LVL223:
 2430               	.L179:
 700:quantum/quantum.c ****       return false;
 2431               		.loc 1 700 7 is_stmt 1 view .LVU477
 2432 0090 0E94 0000 		call send_keyboard_report
 2433               	.LVL224:
 701:quantum/quantum.c ****     }
 2434               		.loc 1 701 7 view .LVU478
 701:quantum/quantum.c ****     }
 2435               		.loc 1 701 14 is_stmt 0 view .LVU479
 2436 0094 00C0      		rjmp .L140
 2437               	.L150:
 701:quantum/quantum.c ****     }
 2438               		.loc 1 701 14 view .LVU480
 2439 0096 CD3D      		cpi r28,-35
 2440 0098 ECE5      		ldi r30,92
 2441 009a DE07      		cpc r29,r30
 2442 009c 01F0      		breq .L152
 2443 009e CE3D      		cpi r28,-34
 2444 00a0 DC45      		sbci r29,92
 2445 00a2 01F4      		brne .L148
 2446               	.LBE54:
 320:quantum/quantum.c ****           eeconfig_init();
 2447               		.loc 1 320 7 is_stmt 1 view .LVU481
 320:quantum/quantum.c ****           eeconfig_init();
 2448               		.loc 1 320 10 is_stmt 0 view .LVU482
 2449 00a4 F801      		movw r30,r16
 2450 00a6 8281      		ldd r24,Z+2
 2451 00a8 8823      		tst r24
 2452 00aa 01F0      		breq .L140
 321:quantum/quantum.c ****       }
 2453               		.loc 1 321 11 is_stmt 1 view .LVU483
 2454 00ac 0E94 0000 		call eeconfig_init
 2455               	.LVL225:
 2456 00b0 00C0      		rjmp .L140
 2457               	.L146:
 309:quantum/quantum.c ****         reset_keyboard();
 2458               		.loc 1 309 7 view .LVU484
 309:quantum/quantum.c ****         reset_keyboard();
 2459               		.loc 1 309 10 is_stmt 0 view .LVU485
 2460 00b2 F801      		movw r30,r16
 2461 00b4 8281      		ldd r24,Z+2
 2462 00b6 8111      		cpse r24,__zero_reg__
 310:quantum/quantum.c ****       }
 2463               		.loc 1 310 9 is_stmt 1 view .LVU486
 2464 00b8 0E94 0000 		call reset_keyboard
 2465               	.LVL226:
 2466               	.L140:
 714:quantum/quantum.c **** 
 2467               		.loc 1 714 1 is_stmt 0 view .LVU487
 2468 00bc 80E0      		ldi r24,0
 2469               	/* epilogue start */
 2470 00be DF91      		pop r29
 2471 00c0 CF91      		pop r28
 2472               	.LVL227:
 714:quantum/quantum.c **** 
 2473               		.loc 1 714 1 view .LVU488
 2474 00c2 1F91      		pop r17
 2475 00c4 0F91      		pop r16
 2476               	.LVL228:
 714:quantum/quantum.c **** 
 2477               		.loc 1 714 1 view .LVU489
 2478 00c6 0895      		ret
 2479               	.LVL229:
 2480               	.L147:
 314:quantum/quantum.c ****           debug_enable = true;
 2481               		.loc 1 314 7 is_stmt 1 view .LVU490
 314:quantum/quantum.c ****           debug_enable = true;
 2482               		.loc 1 314 10 is_stmt 0 view .LVU491
 2483 00c8 F801      		movw r30,r16
 2484 00ca 8281      		ldd r24,Z+2
 2485 00cc 8823      		tst r24
 2486 00ce 01F0      		breq .L140
 315:quantum/quantum.c ****           print("DEBUG: enabled.\n");
 2487               		.loc 1 315 11 is_stmt 1 view .LVU492
 315:quantum/quantum.c ****           print("DEBUG: enabled.\n");
 2488               		.loc 1 315 24 is_stmt 0 view .LVU493
 2489 00d0 8091 0000 		lds r24,debug_config
 2490 00d4 8160      		ori r24,lo8(1<<0)
 2491 00d6 8093 0000 		sts debug_config,r24
 2492 00da 00C0      		rjmp .L140
 2493               	.L149:
 545:quantum/quantum.c ****         set_output(OUTPUT_AUTO);
 2494               		.loc 1 545 7 is_stmt 1 view .LVU494
 545:quantum/quantum.c ****         set_output(OUTPUT_AUTO);
 2495               		.loc 1 545 10 is_stmt 0 view .LVU495
 2496 00dc F801      		movw r30,r16
 2497 00de 8281      		ldd r24,Z+2
 2498 00e0 8823      		tst r24
 2499 00e2 01F0      		breq .L140
 546:quantum/quantum.c ****       }
 2500               		.loc 1 546 9 is_stmt 1 view .LVU496
 2501 00e4 80E0      		ldi r24,0
 2502               	.L205:
 551:quantum/quantum.c ****       }
 2503               		.loc 1 551 9 is_stmt 0 view .LVU497
 2504 00e6 0E94 0000 		call set_output
 2505               	.LVL230:
 2506 00ea 00C0      		rjmp .L140
 2507               	.L152:
 550:quantum/quantum.c ****         set_output(OUTPUT_USB);
 2508               		.loc 1 550 7 is_stmt 1 view .LVU498
 550:quantum/quantum.c ****         set_output(OUTPUT_USB);
 2509               		.loc 1 550 10 is_stmt 0 view .LVU499
 2510 00ec F801      		movw r30,r16
 2511 00ee 8281      		ldd r24,Z+2
 2512 00f0 8823      		tst r24
 2513 00f2 01F0      		breq .L140
 551:quantum/quantum.c ****       }
 2514               		.loc 1 551 9 is_stmt 1 view .LVU500
 2515 00f4 82E0      		ldi r24,lo8(2)
 2516 00f6 00C0      		rjmp .L205
 2517               	.L145:
 563:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 2518               		.loc 1 563 7 view .LVU501
 563:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 2519               		.loc 1 563 10 is_stmt 0 view .LVU502
 2520 00f8 F801      		movw r30,r16
 2521 00fa 8281      		ldd r24,Z+2
 2522 00fc 8823      		tst r24
 2523 00fe 01F4      		brne .+2
 2524 0100 00C0      		rjmp .L148
 565:quantum/quantum.c ****             eeconfig_init();
 2525               		.loc 1 565 9 is_stmt 1 view .LVU503
 565:quantum/quantum.c ****             eeconfig_init();
 2526               		.loc 1 565 14 is_stmt 0 view .LVU504
 2527 0102 0E94 0000 		call eeconfig_is_enabled
 2528               	.LVL231:
 565:quantum/quantum.c ****             eeconfig_init();
 2529               		.loc 1 565 12 view .LVU505
 2530 0106 8111      		cpse r24,__zero_reg__
 2531 0108 00C0      		rjmp .L154
 566:quantum/quantum.c ****         }
 2532               		.loc 1 566 13 is_stmt 1 view .LVU506
 2533 010a 0E94 0000 		call eeconfig_init
 2534               	.LVL232:
 2535               	.L154:
 569:quantum/quantum.c ****         switch (keycode)
 2536               		.loc 1 569 9 view .LVU507
 569:quantum/quantum.c ****         switch (keycode)
 2537               		.loc 1 569 29 is_stmt 0 view .LVU508
 2538 010e 0E94 0000 		call eeconfig_read_keymap
 2539               	.LVL233:
 2540 0112 90E0      		ldi r25,0
 2541 0114 9093 0000 		sts keymap_config+1,r25
 2542 0118 8093 0000 		sts keymap_config,r24
 570:quantum/quantum.c ****         {
 2543               		.loc 1 570 9 is_stmt 1 view .LVU509
 2544 011c FE01      		movw r30,r28
 2545 011e E350      		subi r30,3
 2546 0120 FC45      		sbci r31,92
 573:quantum/quantum.c ****             break;
 2547               		.loc 1 573 49 is_stmt 0 view .LVU510
 2548 0122 8091 0000 		lds r24,keymap_config
 2549 0126 8160      		ori r24,lo8(1<<0)
 2550 0128 E231      		cpi r30,18
 2551 012a F105      		cpc r31,__zero_reg__
 2552 012c 00F4      		brsh .L204
 2553 012e E050      		subi r30,lo8(-(gs(.L157)))
 2554 0130 F040      		sbci r31,hi8(-(gs(.L157)))
 2555 0132 0C94 0000 		jmp __tablejump2__
 2556               		.section	.jumptables.gcc.process_record_quantum,"a",@progbits
 2557               		.p2align	1
 2558               	.L157:
 2559 0000 0000      		.word gs(.L174)
 2560 0002 0000      		.word gs(.L173)
 2561 0004 0000      		.word gs(.L172)
 2562 0006 0000      		.word gs(.L171)
 2563 0008 0000      		.word gs(.L170)
 2564 000a 0000      		.word gs(.L169)
 2565 000c 0000      		.word gs(.L168)
 2566 000e 0000      		.word gs(.L167)
 2567 0010 0000      		.word gs(.L166)
 2568 0012 0000      		.word gs(.L165)
 2569 0014 0000      		.word gs(.L164)
 2570 0016 0000      		.word gs(.L163)
 2571 0018 0000      		.word gs(.L162)
 2572 001a 0000      		.word gs(.L161)
 2573 001c 0000      		.word gs(.L160)
 2574 001e 0000      		.word gs(.L159)
 2575 0020 0000      		.word gs(.L158)
 2576 0022 0000      		.word gs(.L156)
 2577               		.section	.text.process_record_quantum
 2578               	.L174:
 576:quantum/quantum.c ****             break;
 2579               		.loc 1 576 13 is_stmt 1 view .LVU511
 576:quantum/quantum.c ****             break;
 2580               		.loc 1 576 47 is_stmt 0 view .LVU512
 2581 0136 8091 0000 		lds r24,keymap_config
 2582 013a 8260      		ori r24,lo8(1<<1)
 2583               	.L204:
 646:quantum/quantum.c ****             break;
 2584               		.loc 1 646 32 view .LVU513
 2585 013c 8093 0000 		sts keymap_config,r24
 647:quantum/quantum.c ****           default:
 2586               		.loc 1 647 13 is_stmt 1 view .LVU514
 651:quantum/quantum.c ****         clear_keyboard(); // clear to prevent stuck keys
 2587               		.loc 1 651 9 view .LVU515
 2588 0140 8091 0000 		lds r24,keymap_config
 2589 0144 0E94 0000 		call eeconfig_update_keymap
 2590               	.LVL234:
 652:quantum/quantum.c **** 
 2591               		.loc 1 652 9 view .LVU516
 2592 0148 0E94 0000 		call clear_keyboard
 2593               	.LVL235:
 654:quantum/quantum.c ****       }
 2594               		.loc 1 654 9 view .LVU517
 654:quantum/quantum.c ****       }
 2595               		.loc 1 654 16 is_stmt 0 view .LVU518
 2596 014c 00C0      		rjmp .L140
 2597               	.L173:
 579:quantum/quantum.c ****             break;
 2598               		.loc 1 579 13 is_stmt 1 view .LVU519
 579:quantum/quantum.c ****             break;
 2599               		.loc 1 579 42 is_stmt 0 view .LVU520
 2600 014e 8091 0000 		lds r24,keymap_config
 2601 0152 8460      		ori r24,lo8(1<<2)
 2602 0154 00C0      		rjmp .L204
 2603               	.L172:
 582:quantum/quantum.c ****             break;
 2604               		.loc 1 582 13 is_stmt 1 view .LVU521
 582:quantum/quantum.c ****             break;
 2605               		.loc 1 582 42 is_stmt 0 view .LVU522
 2606 0156 8091 0000 		lds r24,keymap_config
 2607 015a 8860      		ori r24,lo8(1<<3)
 2608 015c 00C0      		rjmp .L204
 2609               	.L171:
 585:quantum/quantum.c ****             break;
 2610               		.loc 1 585 13 is_stmt 1 view .LVU523
 585:quantum/quantum.c ****             break;
 2611               		.loc 1 585 34 is_stmt 0 view .LVU524
 2612 015e 8091 0000 		lds r24,keymap_config
 2613 0162 8061      		ori r24,lo8(1<<4)
 2614 0164 00C0      		rjmp .L204
 2615               	.L170:
 588:quantum/quantum.c ****             break;
 2616               		.loc 1 588 13 is_stmt 1 view .LVU525
 588:quantum/quantum.c ****             break;
 2617               		.loc 1 588 42 is_stmt 0 view .LVU526
 2618 0166 8091 0000 		lds r24,keymap_config
 2619 016a 8062      		ori r24,lo8(1<<5)
 2620 016c 00C0      		rjmp .L204
 2621               	.L169:
 591:quantum/quantum.c ****             break;
 2622               		.loc 1 591 13 is_stmt 1 view .LVU527
 591:quantum/quantum.c ****             break;
 2623               		.loc 1 591 52 is_stmt 0 view .LVU528
 2624 016e 8091 0000 		lds r24,keymap_config
 2625 0172 8064      		ori r24,lo8(1<<6)
 2626 0174 00C0      		rjmp .L204
 2627               	.L168:
 594:quantum/quantum.c ****             break;
 2628               		.loc 1 594 13 is_stmt 1 view .LVU529
 594:quantum/quantum.c ****             break;
 2629               		.loc 1 594 32 is_stmt 0 view .LVU530
 2630 0176 8091 0000 		lds r24,keymap_config
 2631 017a 8068      		ori r24,lo8(1<<7)
 2632 017c 00C0      		rjmp .L204
 2633               	.L167:
 597:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 2634               		.loc 1 597 13 is_stmt 1 view .LVU531
 598:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 2635               		.loc 1 598 13 view .LVU532
 597:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 2636               		.loc 1 597 42 is_stmt 0 view .LVU533
 2637 017e 8091 0000 		lds r24,keymap_config
 2638 0182 8C60      		ori r24,lo8(12)
 2639 0184 00C0      		rjmp .L204
 2640               	.L166:
 604:quantum/quantum.c ****             break;
 2641               		.loc 1 604 13 is_stmt 1 view .LVU534
 604:quantum/quantum.c ****             break;
 2642               		.loc 1 604 49 is_stmt 0 view .LVU535
 2643 0186 8091 0000 		lds r24,keymap_config
 2644 018a 8E7F      		andi r24,lo8(~(1<<0))
 2645 018c 00C0      		rjmp .L204
 2646               	.L165:
 607:quantum/quantum.c ****             break;
 2647               		.loc 1 607 13 is_stmt 1 view .LVU536
 607:quantum/quantum.c ****             break;
 2648               		.loc 1 607 47 is_stmt 0 view .LVU537
 2649 018e 8091 0000 		lds r24,keymap_config
 2650 0192 8D7F      		andi r24,lo8(~(1<<1))
 2651 0194 00C0      		rjmp .L204
 2652               	.L164:
 610:quantum/quantum.c ****             break;
 2653               		.loc 1 610 13 is_stmt 1 view .LVU538
 610:quantum/quantum.c ****             break;
 2654               		.loc 1 610 42 is_stmt 0 view .LVU539
 2655 0196 8091 0000 		lds r24,keymap_config
 2656 019a 8B7F      		andi r24,lo8(~(1<<2))
 2657 019c 00C0      		rjmp .L204
 2658               	.L163:
 613:quantum/quantum.c ****             break;
 2659               		.loc 1 613 13 is_stmt 1 view .LVU540
 613:quantum/quantum.c ****             break;
 2660               		.loc 1 613 42 is_stmt 0 view .LVU541
 2661 019e 8091 0000 		lds r24,keymap_config
 2662 01a2 877F      		andi r24,lo8(~(1<<3))
 2663 01a4 00C0      		rjmp .L204
 2664               	.L162:
 616:quantum/quantum.c ****             break;
 2665               		.loc 1 616 13 is_stmt 1 view .LVU542
 616:quantum/quantum.c ****             break;
 2666               		.loc 1 616 34 is_stmt 0 view .LVU543
 2667 01a6 8091 0000 		lds r24,keymap_config
 2668 01aa 8F7E      		andi r24,lo8(~(1<<4))
 2669 01ac 00C0      		rjmp .L204
 2670               	.L161:
 619:quantum/quantum.c ****             break;
 2671               		.loc 1 619 13 is_stmt 1 view .LVU544
 619:quantum/quantum.c ****             break;
 2672               		.loc 1 619 42 is_stmt 0 view .LVU545
 2673 01ae 8091 0000 		lds r24,keymap_config
 2674 01b2 8F7D      		andi r24,lo8(~(1<<5))
 2675 01b4 00C0      		rjmp .L204
 2676               	.L160:
 622:quantum/quantum.c ****             break;
 2677               		.loc 1 622 13 is_stmt 1 view .LVU546
 622:quantum/quantum.c ****             break;
 2678               		.loc 1 622 52 is_stmt 0 view .LVU547
 2679 01b6 8091 0000 		lds r24,keymap_config
 2680 01ba 8F7B      		andi r24,lo8(~(1<<6))
 2681 01bc 00C0      		rjmp .L204
 2682               	.L159:
 625:quantum/quantum.c ****             break;
 2683               		.loc 1 625 13 is_stmt 1 view .LVU548
 625:quantum/quantum.c ****             break;
 2684               		.loc 1 625 32 is_stmt 0 view .LVU549
 2685 01be 8091 0000 		lds r24,keymap_config
 2686 01c2 8F77      		andi r24,lo8(~(1<<7))
 2687 01c4 00C0      		rjmp .L204
 2688               	.L158:
 628:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 2689               		.loc 1 628 13 is_stmt 1 view .LVU550
 629:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 2690               		.loc 1 629 13 view .LVU551
 628:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 2691               		.loc 1 628 42 is_stmt 0 view .LVU552
 2692 01c6 8091 0000 		lds r24,keymap_config
 2693 01ca 837F      		andi r24,lo8(-13)
 2694 01cc 00C0      		rjmp .L204
 2695               	.L156:
 646:quantum/quantum.c ****             break;
 2696               		.loc 1 646 13 is_stmt 1 view .LVU553
 646:quantum/quantum.c ****             break;
 2697               		.loc 1 646 48 is_stmt 0 view .LVU554
 2698 01ce 9091 0000 		lds r25,keymap_config
 646:quantum/quantum.c ****             break;
 2699               		.loc 1 646 32 view .LVU555
 2700 01d2 892F      		mov r24,r25
 2701 01d4 97FB      		bst r25,7
 2702 01d6 87F9      		bld r24,7
 2703 01d8 8058      		subi r24,0x80
 2704 01da 00C0      		rjmp .L204
 2705               	.LVL236:
 2706               	.L181:
 2707               	.LBB55:
 694:quantum/quantum.c ****       }
 2708               		.loc 1 694 9 view .LVU556
 2709 01dc 85E3      		ldi r24,lo8(53)
 2710               	.LVL237:
 694:quantum/quantum.c ****       }
 2711               		.loc 1 694 9 view .LVU557
 2712 01de 00C0      		rjmp .L178
 2713               	.LVL238:
 2714               	.L176:
 697:quantum/quantum.c ****       }
 2715               		.loc 1 697 9 is_stmt 1 view .LVU558
 2716 01e0 8091 0000 		lds r24,grave_esc_was_shifted
 2717               	.LVL239:
 697:quantum/quantum.c ****       }
 2718               		.loc 1 697 9 is_stmt 0 view .LVU559
 2719 01e4 8111      		cpse r24,__zero_reg__
 2720 01e6 00C0      		rjmp .L182
 2721 01e8 89E2      		ldi r24,lo8(41)
 2722               	.L180:
 697:quantum/quantum.c ****       }
 2723               		.loc 1 697 9 discriminator 4 view .LVU560
 2724 01ea 0E94 0000 		call del_key
 2725               	.LVL240:
 2726 01ee 00C0      		rjmp .L179
 2727               	.L182:
 697:quantum/quantum.c ****       }
 2728               		.loc 1 697 9 view .LVU561
 2729 01f0 85E3      		ldi r24,lo8(53)
 2730 01f2 00C0      		rjmp .L180
 2731               	.LBE55:
 2732               		.cfi_endproc
 2733               	.LFE136:
 2735               		.weak	ascii_to_keycode_lut
 2736               		.section	.progmem.data.ascii_to_keycode_lut,"a",@progbits
 2739               	ascii_to_keycode_lut:
 2740 0000 00        		.byte	0
 2741 0001 00        		.byte	0
 2742 0002 00        		.byte	0
 2743 0003 00        		.byte	0
 2744 0004 00        		.byte	0
 2745 0005 00        		.byte	0
 2746 0006 00        		.byte	0
 2747 0007 00        		.byte	0
 2748 0008 2A        		.byte	42
 2749 0009 2B        		.byte	43
 2750 000a 28        		.byte	40
 2751 000b 00        		.byte	0
 2752 000c 00        		.byte	0
 2753 000d 00        		.byte	0
 2754 000e 00        		.byte	0
 2755 000f 00        		.byte	0
 2756 0010 00        		.byte	0
 2757 0011 00        		.byte	0
 2758 0012 00        		.byte	0
 2759 0013 00        		.byte	0
 2760 0014 00        		.byte	0
 2761 0015 00        		.byte	0
 2762 0016 00        		.byte	0
 2763 0017 00        		.byte	0
 2764 0018 00        		.byte	0
 2765 0019 00        		.byte	0
 2766 001a 00        		.byte	0
 2767 001b 29        		.byte	41
 2768 001c 00        		.byte	0
 2769 001d 00        		.byte	0
 2770 001e 00        		.byte	0
 2771 001f 00        		.byte	0
 2772 0020 2C        		.byte	44
 2773 0021 1E        		.byte	30
 2774 0022 34        		.byte	52
 2775 0023 20        		.byte	32
 2776 0024 21        		.byte	33
 2777 0025 22        		.byte	34
 2778 0026 24        		.byte	36
 2779 0027 34        		.byte	52
 2780 0028 26        		.byte	38
 2781 0029 27        		.byte	39
 2782 002a 25        		.byte	37
 2783 002b 2E        		.byte	46
 2784 002c 36        		.byte	54
 2785 002d 2D        		.byte	45
 2786 002e 37        		.byte	55
 2787 002f 38        		.byte	56
 2788 0030 27        		.byte	39
 2789 0031 1E        		.byte	30
 2790 0032 1F        		.byte	31
 2791 0033 20        		.byte	32
 2792 0034 21        		.byte	33
 2793 0035 22        		.byte	34
 2794 0036 23        		.byte	35
 2795 0037 24        		.byte	36
 2796 0038 25        		.byte	37
 2797 0039 26        		.byte	38
 2798 003a 33        		.byte	51
 2799 003b 33        		.byte	51
 2800 003c 36        		.byte	54
 2801 003d 2E        		.byte	46
 2802 003e 37        		.byte	55
 2803 003f 38        		.byte	56
 2804 0040 1F        		.byte	31
 2805 0041 04        		.byte	4
 2806 0042 05        		.byte	5
 2807 0043 06        		.byte	6
 2808 0044 07        		.byte	7
 2809 0045 08        		.byte	8
 2810 0046 09        		.byte	9
 2811 0047 0A        		.byte	10
 2812 0048 0B        		.byte	11
 2813 0049 0C        		.byte	12
 2814 004a 0D        		.byte	13
 2815 004b 0E        		.byte	14
 2816 004c 0F        		.byte	15
 2817 004d 10        		.byte	16
 2818 004e 11        		.byte	17
 2819 004f 12        		.byte	18
 2820 0050 13        		.byte	19
 2821 0051 14        		.byte	20
 2822 0052 15        		.byte	21
 2823 0053 16        		.byte	22
 2824 0054 17        		.byte	23
 2825 0055 18        		.byte	24
 2826 0056 19        		.byte	25
 2827 0057 1A        		.byte	26
 2828 0058 1B        		.byte	27
 2829 0059 1C        		.byte	28
 2830 005a 1D        		.byte	29
 2831 005b 2F        		.byte	47
 2832 005c 31        		.byte	49
 2833 005d 30        		.byte	48
 2834 005e 23        		.byte	35
 2835 005f 2D        		.byte	45
 2836 0060 35        		.byte	53
 2837 0061 04        		.byte	4
 2838 0062 05        		.byte	5
 2839 0063 06        		.byte	6
 2840 0064 07        		.byte	7
 2841 0065 08        		.byte	8
 2842 0066 09        		.byte	9
 2843 0067 0A        		.byte	10
 2844 0068 0B        		.byte	11
 2845 0069 0C        		.byte	12
 2846 006a 0D        		.byte	13
 2847 006b 0E        		.byte	14
 2848 006c 0F        		.byte	15
 2849 006d 10        		.byte	16
 2850 006e 11        		.byte	17
 2851 006f 12        		.byte	18
 2852 0070 13        		.byte	19
 2853 0071 14        		.byte	20
 2854 0072 15        		.byte	21
 2855 0073 16        		.byte	22
 2856 0074 17        		.byte	23
 2857 0075 18        		.byte	24
 2858 0076 19        		.byte	25
 2859 0077 1A        		.byte	26
 2860 0078 1B        		.byte	27
 2861 0079 1C        		.byte	28
 2862 007a 1D        		.byte	29
 2863 007b 2F        		.byte	47
 2864 007c 31        		.byte	49
 2865 007d 30        		.byte	48
 2866 007e 35        		.byte	53
 2867 007f 4C        		.byte	76
 2868               		.weak	ascii_to_altgr_lut
 2869               		.section	.progmem.data.ascii_to_altgr_lut,"a",@progbits
 2872               	ascii_to_altgr_lut:
 2873 0000 0000 0000 		.zero	128
 2873      0000 0000 
 2873      0000 0000 
 2873      0000 0000 
 2873      0000 0000 
 2874               		.weak	ascii_to_shift_lut
 2875               		.section	.progmem.data.ascii_to_shift_lut,"a",@progbits
 2878               	ascii_to_shift_lut:
 2879 0000 00        		.byte	0
 2880 0001 00        		.byte	0
 2881 0002 00        		.byte	0
 2882 0003 00        		.byte	0
 2883 0004 00        		.byte	0
 2884 0005 00        		.byte	0
 2885 0006 00        		.byte	0
 2886 0007 00        		.byte	0
 2887 0008 00        		.byte	0
 2888 0009 00        		.byte	0
 2889 000a 00        		.byte	0
 2890 000b 00        		.byte	0
 2891 000c 00        		.byte	0
 2892 000d 00        		.byte	0
 2893 000e 00        		.byte	0
 2894 000f 00        		.byte	0
 2895 0010 00        		.byte	0
 2896 0011 00        		.byte	0
 2897 0012 00        		.byte	0
 2898 0013 00        		.byte	0
 2899 0014 00        		.byte	0
 2900 0015 00        		.byte	0
 2901 0016 00        		.byte	0
 2902 0017 00        		.byte	0
 2903 0018 00        		.byte	0
 2904 0019 00        		.byte	0
 2905 001a 00        		.byte	0
 2906 001b 00        		.byte	0
 2907 001c 00        		.byte	0
 2908 001d 00        		.byte	0
 2909 001e 00        		.byte	0
 2910 001f 00        		.byte	0
 2911 0020 00        		.byte	0
 2912 0021 01        		.byte	1
 2913 0022 01        		.byte	1
 2914 0023 01        		.byte	1
 2915 0024 01        		.byte	1
 2916 0025 01        		.byte	1
 2917 0026 01        		.byte	1
 2918 0027 00        		.byte	0
 2919 0028 01        		.byte	1
 2920 0029 01        		.byte	1
 2921 002a 01        		.byte	1
 2922 002b 01        		.byte	1
 2923 002c 00        		.byte	0
 2924 002d 00        		.byte	0
 2925 002e 00        		.byte	0
 2926 002f 00        		.byte	0
 2927 0030 00        		.byte	0
 2928 0031 00        		.byte	0
 2929 0032 00        		.byte	0
 2930 0033 00        		.byte	0
 2931 0034 00        		.byte	0
 2932 0035 00        		.byte	0
 2933 0036 00        		.byte	0
 2934 0037 00        		.byte	0
 2935 0038 00        		.byte	0
 2936 0039 00        		.byte	0
 2937 003a 01        		.byte	1
 2938 003b 00        		.byte	0
 2939 003c 01        		.byte	1
 2940 003d 00        		.byte	0
 2941 003e 01        		.byte	1
 2942 003f 01        		.byte	1
 2943 0040 01        		.byte	1
 2944 0041 01        		.byte	1
 2945 0042 01        		.byte	1
 2946 0043 01        		.byte	1
 2947 0044 01        		.byte	1
 2948 0045 01        		.byte	1
 2949 0046 01        		.byte	1
 2950 0047 01        		.byte	1
 2951 0048 01        		.byte	1
 2952 0049 01        		.byte	1
 2953 004a 01        		.byte	1
 2954 004b 01        		.byte	1
 2955 004c 01        		.byte	1
 2956 004d 01        		.byte	1
 2957 004e 01        		.byte	1
 2958 004f 01        		.byte	1
 2959 0050 01        		.byte	1
 2960 0051 01        		.byte	1
 2961 0052 01        		.byte	1
 2962 0053 01        		.byte	1
 2963 0054 01        		.byte	1
 2964 0055 01        		.byte	1
 2965 0056 01        		.byte	1
 2966 0057 01        		.byte	1
 2967 0058 01        		.byte	1
 2968 0059 01        		.byte	1
 2969 005a 01        		.byte	1
 2970 005b 00        		.byte	0
 2971 005c 00        		.byte	0
 2972 005d 00        		.byte	0
 2973 005e 01        		.byte	1
 2974 005f 01        		.byte	1
 2975 0060 00        		.byte	0
 2976 0061 00        		.byte	0
 2977 0062 00        		.byte	0
 2978 0063 00        		.byte	0
 2979 0064 00        		.byte	0
 2980 0065 00        		.byte	0
 2981 0066 00        		.byte	0
 2982 0067 00        		.byte	0
 2983 0068 00        		.byte	0
 2984 0069 00        		.byte	0
 2985 006a 00        		.byte	0
 2986 006b 00        		.byte	0
 2987 006c 00        		.byte	0
 2988 006d 00        		.byte	0
 2989 006e 00        		.byte	0
 2990 006f 00        		.byte	0
 2991 0070 00        		.byte	0
 2992 0071 00        		.byte	0
 2993 0072 00        		.byte	0
 2994 0073 00        		.byte	0
 2995 0074 00        		.byte	0
 2996 0075 00        		.byte	0
 2997 0076 00        		.byte	0
 2998 0077 00        		.byte	0
 2999 0078 00        		.byte	0
 3000 0079 00        		.byte	0
 3001 007a 00        		.byte	0
 3002 007b 01        		.byte	1
 3003 007c 01        		.byte	1
 3004 007d 01        		.byte	1
 3005 007e 01        		.byte	1
 3006 007f 00        		.byte	0
 3007               		.section	.bss.grave_esc_was_shifted,"aw",@nobits
 3010               	grave_esc_was_shifted:
 3011 0000 00        		.zero	1
 3012               		.text
 3013               	.Letext0:
 3014               		.file 3 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/stdint.h"
 3015               		.file 4 "/usr/local/Cellar/avr-gcc/8.1.0/lib/avr-gcc/8/gcc/avr/8.1.0/include/stddef.h"
 3016               		.file 5 "tmk_core/common/keyboard.h"
 3017               		.file 6 "tmk_core/common/action.h"
 3018               		.file 7 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 3019               		.file 8 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 3020               		.file 9 "lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 3021               		.file 10 "lib/lufa/LUFA/Drivers/USB/Core/HostStandardReq.h"
 3022               		.file 11 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/stdio.h"
 3023               		.file 12 "tmk_core/common/report.h"
 3024               		.file 13 "tmk_core/common/host.h"
 3025               		.file 14 "tmk_core/common/debug.h"
 3026               		.file 15 "quantum/keycode_config.h"
 3027               		.file 16 "tmk_core/common/keycode.h"
 3028               		.file 17 "quantum/quantum_keycodes.h"
 3029               		.file 18 "quantum/keymap.h"
 3030               		.file 19 "tmk_core/common/action_layer.h"
 3031               		.file 20 "tmk_core/common/timer.h"
 3032               		.file 21 "tmk_core/common/action_util.h"
 3033               		.file 22 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/stdlib.h"
 3034               		.file 23 "quantum/quantum.h"
 3035               		.file 24 "tmk_core/protocol/lufa/outputselect.h"
 3036               		.file 25 "tmk_core/common/backlight.h"
 3037               		.file 26 "quantum/rgb.h"
 3038               		.file 27 "tmk_core/common/eeconfig.h"
 3039               		.file 28 "tmk_core/common/matrix.h"
 3040               		.file 29 "tmk_core/common/bootloader.h"
 3041               		.file 30 "quantum/process_keycode/process_space_cadet.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 quantum.c
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:4      *ABS*:000000000000003f __SREG__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:12     .text.do_code16:0000000000000000 do_code16
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:145    .text.qk_register_weak_mods:0000000000000000 qk_register_weak_mods
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:177    .text.qk_register_mods:0000000000000000 qk_register_mods
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:190    .text.qk_unregister_weak_mods:0000000000000000 qk_unregister_weak_mods
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:222    .text.qk_unregister_mods:0000000000000000 qk_unregister_mods
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:236    .text.rgblight_toggle:0000000000000000 rgblight_toggle
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:251    .text.rgblight_step:0000000000000000 rgblight_step
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:266    .text.rgblight_step_reverse:0000000000000000 rgblight_step_reverse
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:281    .text.rgblight_increase_hue:0000000000000000 rgblight_increase_hue
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:296    .text.rgblight_decrease_hue:0000000000000000 rgblight_decrease_hue
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:311    .text.rgblight_increase_sat:0000000000000000 rgblight_increase_sat
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:326    .text.rgblight_decrease_sat:0000000000000000 rgblight_decrease_sat
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:341    .text.rgblight_increase_val:0000000000000000 rgblight_increase_val
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:356    .text.rgblight_decrease_val:0000000000000000 rgblight_decrease_val
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:371    .text.rgblight_increase_speed:0000000000000000 rgblight_increase_speed
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:386    .text.rgblight_decrease_speed:0000000000000000 rgblight_decrease_speed
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:401    .text.register_code16:0000000000000000 register_code16
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:459    .text.unregister_code16:0000000000000000 unregister_code16
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:517    .text.tap_code16:0000000000000000 tap_code16
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:556    .text.process_action_kb:0000000000000000 process_action_kb
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:578    .text.process_record_user:0000000000000000 process_record_user
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:600    .text.process_record_kb:0000000000000000 process_record_kb
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:620    .text.get_event_keycode:0000000000000000 get_event_keycode
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:727    .text.get_record_keycode:0000000000000000 get_record_keycode
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:756    .text.send_char:0000000000000000 send_char
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:2739   .progmem.data.ascii_to_keycode_lut:0000000000000000 ascii_to_keycode_lut
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:2878   .progmem.data.ascii_to_shift_lut:0000000000000000 ascii_to_shift_lut
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:2872   .progmem.data.ascii_to_altgr_lut:0000000000000000 ascii_to_altgr_lut
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:915    .text.send_string_with_delay:0000000000000000 send_string_with_delay
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:1092   .text.send_string:0000000000000000 send_string
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:1112   .text.send_string_with_delay_P:0000000000000000 send_string_with_delay_P
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:1340   .text.send_string_P:0000000000000000 send_string_P
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:1360   .text.set_single_persistent_default_layer:0000000000000000 set_single_persistent_default_layer
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:1412   .text.update_tri_layer_state:0000000000000000 update_tri_layer_state
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:1585   .text.update_tri_layer:0000000000000000 update_tri_layer
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:1627   .text.tap_random_base64:0000000000000000 tap_random_base64
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:1762   .text.bootmagic_lite:0000000000000000 bootmagic_lite
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:1824   .text.matrix_init_quantum:0000000000000000 matrix_init_quantum
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:1852   .text.matrix_scan_quantum:0000000000000000 matrix_scan_quantum
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:1869   .text.backlight_init_ports:0000000000000000 backlight_init_ports
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:1884   .text.send_nibble:0000000000000000 send_nibble
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:1948   .text.send_byte:0000000000000000 send_byte
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:1988   .text.send_word:0000000000000000 send_word
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:2025   .text.send_dword:0000000000000000 send_dword
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:2073   .text.hex_to_keycode:0000000000000000 hex_to_keycode
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:2118   .text.api_send_unicode:0000000000000000 api_send_unicode
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:2136   .text.led_set_user:0000000000000000 led_set_user
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:2136   .text.led_set_user:0000000000000000 led_set_user.localalias.1
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:2155   .text.backlight_set:0000000000000000 backlight_set
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:2170   .text.led_set_kb:0000000000000000 led_set_kb
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:2189   .text.led_init_ports:0000000000000000 led_init_ports
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:2206   .text.led_set:0000000000000000 led_set
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:2225   .text.startup_user:0000000000000000 startup_user
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:2240   .text.shutdown_user:0000000000000000 shutdown_user
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:2255   .text.reset_keyboard:0000000000000000 reset_keyboard
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:2302   .text.process_record_quantum:0000000000000000 process_record_quantum
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//cc28jy76.s:3010   .bss.grave_esc_was_shifted:0000000000000000 grave_esc_was_shifted

UNDEFINED SYMBOLS
add_weak_mods
send_keyboard_report
del_weak_mods
register_code
unregister_code
disable_action_cache
layer_switch_get_layer
update_source_layers_cache
keymap_key_to_keycode
read_source_layers_cache
tap_code
eeconfig_update_default_layer
default_layer_set
layer_state
layer_state_set
matrix_scan
matrix_get_row
eeconfig_disable
bootloader_jump
eeconfig_is_enabled
eeconfig_init
matrix_init_kb
matrix_scan_kb
clear_keyboard
process_space_cadet
get_mods
add_key
debug_config
set_output
eeconfig_read_keymap
keymap_config
__tablejump2__
eeconfig_update_keymap
del_key
__do_clear_bss
