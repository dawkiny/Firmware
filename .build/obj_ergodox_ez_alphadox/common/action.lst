   1               		.file	"action.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.process_hand_swap,"ax",@progbits
  11               	.global	process_hand_swap
  13               	process_hand_swap:
  14               	.LVL0:
  15               	.LFB107:
  16               		.file 1 "tmk_core/common/action.c"
   1:tmk_core/common/action.c **** /*
   2:tmk_core/common/action.c **** Copyright 2012,2013 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/action.c **** 
   4:tmk_core/common/action.c **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/action.c **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/action.c **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/action.c **** (at your option) any later version.
   8:tmk_core/common/action.c **** 
   9:tmk_core/common/action.c **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/action.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/action.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/action.c **** GNU General Public License for more details.
  13:tmk_core/common/action.c **** 
  14:tmk_core/common/action.c **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/action.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/action.c **** */
  17:tmk_core/common/action.c **** #include "host.h"
  18:tmk_core/common/action.c **** #include "keycode.h"
  19:tmk_core/common/action.c **** #include "keyboard.h"
  20:tmk_core/common/action.c **** #include "mousekey.h"
  21:tmk_core/common/action.c **** #include "command.h"
  22:tmk_core/common/action.c **** #include "led.h"
  23:tmk_core/common/action.c **** #include "backlight.h"
  24:tmk_core/common/action.c **** #include "action_layer.h"
  25:tmk_core/common/action.c **** #include "action_tapping.h"
  26:tmk_core/common/action.c **** #include "action_macro.h"
  27:tmk_core/common/action.c **** #include "action_util.h"
  28:tmk_core/common/action.c **** #include "action.h"
  29:tmk_core/common/action.c **** #include "wait.h"
  30:tmk_core/common/action.c **** 
  31:tmk_core/common/action.c **** #ifdef DEBUG_ACTION
  32:tmk_core/common/action.c **** #include "debug.h"
  33:tmk_core/common/action.c **** #else
  34:tmk_core/common/action.c **** #include "nodebug.h"
  35:tmk_core/common/action.c **** #endif
  36:tmk_core/common/action.c **** 
  37:tmk_core/common/action.c **** int tp_buttons;
  38:tmk_core/common/action.c **** 
  39:tmk_core/common/action.c **** #ifdef RETRO_TAPPING
  40:tmk_core/common/action.c **** int retro_tapping_counter = 0;
  41:tmk_core/common/action.c **** #endif
  42:tmk_core/common/action.c **** 
  43:tmk_core/common/action.c **** #ifdef FAUXCLICKY_ENABLE
  44:tmk_core/common/action.c **** #include <fauxclicky.h>
  45:tmk_core/common/action.c **** #endif
  46:tmk_core/common/action.c **** 
  47:tmk_core/common/action.c **** /** \brief Called to execute an action.
  48:tmk_core/common/action.c ****  *
  49:tmk_core/common/action.c ****  * FIXME: Needs documentation.
  50:tmk_core/common/action.c ****  */
  51:tmk_core/common/action.c **** void action_exec(keyevent_t event)
  52:tmk_core/common/action.c **** {
  53:tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  54:tmk_core/common/action.c ****         dprint("\n---- action_exec: start -----\n");
  55:tmk_core/common/action.c ****         dprint("EVENT: "); debug_event(event); dprintln();
  56:tmk_core/common/action.c **** #ifdef RETRO_TAPPING
  57:tmk_core/common/action.c ****         retro_tapping_counter++;
  58:tmk_core/common/action.c **** #endif
  59:tmk_core/common/action.c ****     }
  60:tmk_core/common/action.c **** 
  61:tmk_core/common/action.c **** #ifdef FAUXCLICKY_ENABLE
  62:tmk_core/common/action.c ****     if (IS_PRESSED(event)) {
  63:tmk_core/common/action.c ****         FAUXCLICKY_ACTION_PRESS;
  64:tmk_core/common/action.c ****     }
  65:tmk_core/common/action.c ****     if (IS_RELEASED(event)) {
  66:tmk_core/common/action.c ****         FAUXCLICKY_ACTION_RELEASE;
  67:tmk_core/common/action.c ****     }
  68:tmk_core/common/action.c ****     fauxclicky_check();
  69:tmk_core/common/action.c **** #endif
  70:tmk_core/common/action.c **** 
  71:tmk_core/common/action.c **** #ifdef SWAP_HANDS_ENABLE
  72:tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  73:tmk_core/common/action.c ****         process_hand_swap(&event);
  74:tmk_core/common/action.c ****     }
  75:tmk_core/common/action.c **** #endif
  76:tmk_core/common/action.c **** 
  77:tmk_core/common/action.c ****     keyrecord_t record = { .event = event };
  78:tmk_core/common/action.c **** 
  79:tmk_core/common/action.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  80:tmk_core/common/action.c ****     if (has_oneshot_layer_timed_out()) {
  81:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
  82:tmk_core/common/action.c ****     }
  83:tmk_core/common/action.c ****     if (has_oneshot_mods_timed_out()) {
  84:tmk_core/common/action.c ****         clear_oneshot_mods();
  85:tmk_core/common/action.c ****     }
  86:tmk_core/common/action.c **** #endif
  87:tmk_core/common/action.c **** 
  88:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
  89:tmk_core/common/action.c ****     action_tapping_process(record);
  90:tmk_core/common/action.c **** #else
  91:tmk_core/common/action.c ****     process_record(&record);
  92:tmk_core/common/action.c ****     if (!IS_NOEVENT(record.event)) {
  93:tmk_core/common/action.c ****         dprint("processed: "); debug_record(record); dprintln();
  94:tmk_core/common/action.c ****     }
  95:tmk_core/common/action.c **** #endif
  96:tmk_core/common/action.c **** }
  97:tmk_core/common/action.c **** 
  98:tmk_core/common/action.c **** #ifdef SWAP_HANDS_ENABLE
  99:tmk_core/common/action.c **** bool swap_hands = false;
 100:tmk_core/common/action.c **** bool swap_held = false;
 101:tmk_core/common/action.c **** 
 102:tmk_core/common/action.c **** /** \brief Process Hand Swap
 103:tmk_core/common/action.c ****  *
 104:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 105:tmk_core/common/action.c ****  */
 106:tmk_core/common/action.c **** void process_hand_swap(keyevent_t *event) {
  17               		.loc 1 106 43 view -0
  18               		.cfi_startproc
  19               		.loc 1 106 43 is_stmt 0 view .LVU1
  20 0000 CF93      		push r28
  21               	.LCFI0:
  22               		.cfi_def_cfa_offset 3
  23               		.cfi_offset 28, -2
  24 0002 DF93      		push r29
  25               	.LCFI1:
  26               		.cfi_def_cfa_offset 4
  27               		.cfi_offset 29, -3
  28               	/* prologue: function */
  29               	/* frame size = 0 */
  30               	/* stack size = 2 */
  31               	.L__stack_usage = 2
  32 0004 DC01      		movw r26,r24
 107:tmk_core/common/action.c ****     static swap_state_row_t swap_state[MATRIX_ROWS];
  33               		.loc 1 107 5 is_stmt 1 view .LVU2
 108:tmk_core/common/action.c **** 
 109:tmk_core/common/action.c ****     keypos_t pos = event->key;
  34               		.loc 1 109 5 view .LVU3
  35               	.LVL1:
 110:tmk_core/common/action.c ****     swap_state_row_t col_bit = (swap_state_row_t)1<<pos.col;
  36               		.loc 1 110 5 view .LVU4
  37               		.loc 1 110 56 is_stmt 0 view .LVU5
  38 0006 8C91      		ld r24,X
  39               	.LVL2:
  40               		.loc 1 110 56 view .LVU6
  41 0008 682F      		mov r22,r24
  42 000a 70E0      		ldi r23,0
  43               		.loc 1 110 51 view .LVU7
  44 000c 21E0      		ldi r18,lo8(1)
  45 000e 30E0      		ldi r19,0
  46 0010 00C0      		rjmp 2f
  47               		1:
  48 0012 220F      		lsl r18
  49               		2:
  50 0014 8A95      		dec r24
  51 0016 02F4      		brpl 1b
  52               	.LVL3:
 111:tmk_core/common/action.c ****     bool do_swap = event->pressed ? swap_hands :
  53               		.loc 1 111 5 is_stmt 1 view .LVU8
  54 0018 1196      		adiw r26,1
  55 001a 4C91      		ld r20,X
  56 001c 1197      		sbiw r26,1
  57 001e 50E0      		ldi r21,0
  58 0020 EA01      		movw r28,r20
  59 0022 C050      		subi r28,lo8(-(swap_state.4985))
  60 0024 D040      		sbci r29,hi8(-(swap_state.4985))
  61 0026 9881      		ld r25,Y
  62               		.loc 1 111 48 is_stmt 0 view .LVU9
  63 0028 1296      		adiw r26,2
  64 002a 8C91      		ld r24,X
  65 002c 1297      		sbiw r26,2
  66               	.LVL4:
  67               		.loc 1 111 48 view .LVU10
  68 002e 8823      		tst r24
  69 0030 01F0      		breq .L2
  70               		.loc 1 111 48 discriminator 1 view .LVU11
  71 0032 8091 0000 		lds r24,swap_hands
  72               	.LVL5:
 112:tmk_core/common/action.c ****                                     swap_state[pos.row] & (col_bit);
 113:tmk_core/common/action.c **** 
 114:tmk_core/common/action.c ****     if (do_swap) {
  73               		.loc 1 114 5 is_stmt 1 discriminator 1 view .LVU12
  74               	.L11:
 111:tmk_core/common/action.c ****     bool do_swap = event->pressed ? swap_hands :
  75               		.loc 1 111 48 is_stmt 0 discriminator 2 view .LVU13
  76 0036 8823      		tst r24
  77 0038 01F0      		breq .L5
 115:tmk_core/common/action.c ****         event->key = hand_swap_config[pos.row][pos.col];
  78               		.loc 1 115 9 is_stmt 1 view .LVU14
  79               		.loc 1 115 20 is_stmt 0 view .LVU15
  80 003a 86E0      		ldi r24,lo8(6)
  81 003c 849F      		mul r24,r20
  82 003e F001      		movw r30,r0
  83 0040 859F      		mul r24,r21
  84 0042 F00D      		add r31,r0
  85 0044 1124      		clr __zero_reg__
  86 0046 E60F      		add r30,r22
  87 0048 F71F      		adc r31,r23
  88 004a EE0F      		lsl r30
  89 004c FF1F      		rol r31
  90 004e E050      		subi r30,lo8(-(hand_swap_config))
  91 0050 F040      		sbci r31,hi8(-(hand_swap_config))
  92 0052 4081      		ld r20,Z
  93 0054 5181      		ldd r21,Z+1
  94 0056 4D93      		st X+,r20
  95 0058 5C93      		st X,r21
  96               	.LVL6:
 116:tmk_core/common/action.c ****         swap_state[pos.row] |= col_bit;
  97               		.loc 1 116 9 is_stmt 1 view .LVU16
  98               		.loc 1 116 29 is_stmt 0 view .LVU17
  99 005a 292B      		or r18,r25
 100               	.LVL7:
 101               	.L12:
 117:tmk_core/common/action.c ****     } else {
 118:tmk_core/common/action.c ****         swap_state[pos.row] &= ~(col_bit);
 102               		.loc 1 118 29 view .LVU18
 103 005c 2883      		st Y,r18
 104               	.LVL8:
 105               	/* epilogue start */
 119:tmk_core/common/action.c ****     }
 120:tmk_core/common/action.c **** }
 106               		.loc 1 120 1 view .LVU19
 107 005e DF91      		pop r29
 108 0060 CF91      		pop r28
 109 0062 0895      		ret
 110               	.LVL9:
 111               	.L2:
 111:tmk_core/common/action.c ****                                     swap_state[pos.row] & (col_bit);
 112               		.loc 1 111 48 discriminator 2 view .LVU20
 113 0064 892F      		mov r24,r25
 114 0066 8223      		and r24,r18
 115 0068 00C0      		rjmp .L11
 116               	.L5:
 118:tmk_core/common/action.c ****     }
 117               		.loc 1 118 9 is_stmt 1 view .LVU21
 118:tmk_core/common/action.c ****     }
 118               		.loc 1 118 29 is_stmt 0 view .LVU22
 119 006a 2095      		com r18
 120               	.LVL10:
 118:tmk_core/common/action.c ****     }
 121               		.loc 1 118 29 view .LVU23
 122 006c 2923      		and r18,r25
 123 006e 00C0      		rjmp .L12
 124               		.cfi_endproc
 125               	.LFE107:
 127               		.section	.text.action_exec,"ax",@progbits
 128               	.global	action_exec
 130               	action_exec:
 131               	.LFB106:
  52:tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
 132               		.loc 1 52 1 is_stmt 1 view -0
 133               		.cfi_startproc
 134 0000 CF93      		push r28
 135               	.LCFI2:
 136               		.cfi_def_cfa_offset 3
 137               		.cfi_offset 28, -2
 138 0002 DF93      		push r29
 139               	.LCFI3:
 140               		.cfi_def_cfa_offset 4
 141               		.cfi_offset 29, -3
 142 0004 CDB7      		in r28,__SP_L__
 143 0006 DEB7      		in r29,__SP_H__
 144               	.LCFI4:
 145               		.cfi_def_cfa_register 28
 146 0008 2B97      		sbiw r28,11
 147               	.LCFI5:
 148               		.cfi_def_cfa_offset 15
 149 000a 0FB6      		in __tmp_reg__,__SREG__
 150 000c F894      		cli
 151 000e DEBF      		out __SP_H__,r29
 152 0010 0FBE      		out __SREG__,__tmp_reg__
 153 0012 CDBF      		out __SP_L__,r28
 154               	/* prologue: function */
 155               	/* frame size = 11 */
 156               	/* stack size = 13 */
 157               	.L__stack_usage = 13
 158 0014 4F83      		std Y+7,r20
 159 0016 5887      		std Y+8,r21
 160 0018 6987      		std Y+9,r22
 161 001a 7A87      		std Y+10,r23
 162 001c 8B87      		std Y+11,r24
  53:tmk_core/common/action.c ****         dprint("\n---- action_exec: start -----\n");
 163               		.loc 1 53 5 view .LVU25
 164               	.LBB16:
 165               	.LBI16:
 166               		.file 2 "tmk_core/common/keyboard.h"
   1:tmk_core/common/keyboard.h **** /*
   2:tmk_core/common/keyboard.h **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/keyboard.h **** 
   4:tmk_core/common/keyboard.h **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/keyboard.h **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/keyboard.h **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/keyboard.h **** (at your option) any later version.
   8:tmk_core/common/keyboard.h **** 
   9:tmk_core/common/keyboard.h **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/keyboard.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/keyboard.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/keyboard.h **** GNU General Public License for more details.
  13:tmk_core/common/keyboard.h **** 
  14:tmk_core/common/keyboard.h **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/keyboard.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/keyboard.h **** */
  17:tmk_core/common/keyboard.h **** 
  18:tmk_core/common/keyboard.h **** #ifndef KEYBOARD_H
  19:tmk_core/common/keyboard.h **** #define KEYBOARD_H
  20:tmk_core/common/keyboard.h **** 
  21:tmk_core/common/keyboard.h **** #include <stdbool.h>
  22:tmk_core/common/keyboard.h **** #include <stdint.h>
  23:tmk_core/common/keyboard.h **** 
  24:tmk_core/common/keyboard.h **** 
  25:tmk_core/common/keyboard.h **** #ifdef __cplusplus
  26:tmk_core/common/keyboard.h **** extern "C" {
  27:tmk_core/common/keyboard.h **** #endif
  28:tmk_core/common/keyboard.h **** 
  29:tmk_core/common/keyboard.h **** /* key matrix position */
  30:tmk_core/common/keyboard.h **** typedef struct {
  31:tmk_core/common/keyboard.h ****     uint8_t col;
  32:tmk_core/common/keyboard.h ****     uint8_t row;
  33:tmk_core/common/keyboard.h **** } keypos_t;
  34:tmk_core/common/keyboard.h **** 
  35:tmk_core/common/keyboard.h **** /* key event */
  36:tmk_core/common/keyboard.h **** typedef struct {
  37:tmk_core/common/keyboard.h ****     keypos_t key;
  38:tmk_core/common/keyboard.h ****     bool     pressed;
  39:tmk_core/common/keyboard.h ****     uint16_t time;
  40:tmk_core/common/keyboard.h **** } keyevent_t;
  41:tmk_core/common/keyboard.h **** 
  42:tmk_core/common/keyboard.h **** /* equivalent test of keypos_t */
  43:tmk_core/common/keyboard.h **** #define KEYEQ(keya, keyb)       ((keya).row == (keyb).row && (keya).col == (keyb).col)
  44:tmk_core/common/keyboard.h **** 
  45:tmk_core/common/keyboard.h **** /* Rules for No Event:
  46:tmk_core/common/keyboard.h ****  * 1) (time == 0) to handle (keyevent_t){} as empty event
  47:tmk_core/common/keyboard.h ****  * 2) Matrix(255, 255) to make TICK event available
  48:tmk_core/common/keyboard.h ****  */
  49:tmk_core/common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
 167               		.loc 2 49 20 view .LVU26
 168               	.LBB17:
 169               		.loc 2 49 51 view .LVU27
 170               		.loc 2 49 74 is_stmt 0 view .LVU28
 171 001e 8A85      		ldd r24,Y+10
 172 0020 9B85      		ldd r25,Y+11
 173 0022 892B      		or r24,r25
 174 0024 01F0      		breq .L14
 175 0026 CA01      		movw r24,r20
 176 0028 8923      		and r24,r25
 177 002a 8F3F      		cpi r24,lo8(-1)
 178 002c 01F4      		brne .L15
 179               	.L14:
 180               	.LBE17:
 181               	.LBE16:
  77:tmk_core/common/action.c **** 
 182               		.loc 1 77 5 is_stmt 1 view .LVU29
  77:tmk_core/common/action.c **** 
 183               		.loc 1 77 17 is_stmt 0 view .LVU30
 184 002e 1E82      		std Y+6,__zero_reg__
 185 0030 1D82      		std Y+5,__zero_reg__
 186 0032 85E0      		ldi r24,lo8(5)
 187 0034 FE01      		movw r30,r28
 188 0036 3796      		adiw r30,7
 189 0038 DE01      		movw r26,r28
 190 003a 1196      		adiw r26,1
 191               		0:
 192 003c 0190      		ld r0,Z+
 193 003e 0D92      		st X+,r0
 194 0040 8A95      		dec r24
 195 0042 01F4      		brne 0b
  89:tmk_core/common/action.c **** #else
 196               		.loc 1 89 5 is_stmt 1 view .LVU31
 197 0044 4981      		ldd r20,Y+1
 198 0046 5A81      		ldd r21,Y+2
 199 0048 6B81      		ldd r22,Y+3
 200 004a 7C81      		ldd r23,Y+4
 201 004c 8D81      		ldd r24,Y+5
 202 004e 9E81      		ldd r25,Y+6
 203 0050 0E94 0000 		call action_tapping_process
 204               	.LVL11:
 205               	/* epilogue start */
  96:tmk_core/common/action.c **** 
 206               		.loc 1 96 1 is_stmt 0 view .LVU32
 207 0054 2B96      		adiw r28,11
 208 0056 0FB6      		in __tmp_reg__,__SREG__
 209 0058 F894      		cli
 210 005a DEBF      		out __SP_H__,r29
 211 005c 0FBE      		out __SREG__,__tmp_reg__
 212 005e CDBF      		out __SP_L__,r28
 213 0060 DF91      		pop r29
 214 0062 CF91      		pop r28
 215 0064 0895      		ret
 216               	.L15:
  55:tmk_core/common/action.c **** #ifdef RETRO_TAPPING
 217               		.loc 1 55 58 is_stmt 1 view .LVU33
  72:tmk_core/common/action.c ****         process_hand_swap(&event);
 218               		.loc 1 72 5 view .LVU34
  73:tmk_core/common/action.c ****     }
 219               		.loc 1 73 9 view .LVU35
 220 0066 CE01      		movw r24,r28
 221 0068 0796      		adiw r24,7
 222 006a 0E94 0000 		call process_hand_swap
 223               	.LVL12:
 224 006e 00C0      		rjmp .L14
 225               		.cfi_endproc
 226               	.LFE106:
 228               		.section	.text.process_record_quantum,"ax",@progbits
 229               		.weak	process_record_quantum
 231               	process_record_quantum:
 232               	.LVL13:
 233               	.LFB109:
 121:tmk_core/common/action.c **** #endif
 122:tmk_core/common/action.c **** 
 123:tmk_core/common/action.c **** #if !defined(NO_ACTION_LAYER) && !defined(STRICT_LAYER_RELEASE)
 124:tmk_core/common/action.c **** bool disable_action_cache = false;
 125:tmk_core/common/action.c **** 
 126:tmk_core/common/action.c **** void process_record_nocache(keyrecord_t *record)
 127:tmk_core/common/action.c **** {
 128:tmk_core/common/action.c ****     disable_action_cache = true;
 129:tmk_core/common/action.c ****     process_record(record);
 130:tmk_core/common/action.c ****     disable_action_cache = false;
 131:tmk_core/common/action.c **** }
 132:tmk_core/common/action.c **** #else
 133:tmk_core/common/action.c **** void process_record_nocache(keyrecord_t *record)
 134:tmk_core/common/action.c **** {
 135:tmk_core/common/action.c ****     process_record(record);
 136:tmk_core/common/action.c **** }
 137:tmk_core/common/action.c **** #endif
 138:tmk_core/common/action.c **** 
 139:tmk_core/common/action.c **** __attribute__ ((weak))
 140:tmk_core/common/action.c **** bool process_record_quantum(keyrecord_t *record) {
 234               		.loc 1 140 50 view -0
 235               		.cfi_startproc
 236               	/* prologue: function */
 237               	/* frame size = 0 */
 238               	/* stack size = 0 */
 239               	.L__stack_usage = 0
 141:tmk_core/common/action.c ****     return true;
 240               		.loc 1 141 5 view .LVU37
 142:tmk_core/common/action.c **** }
 241               		.loc 1 142 1 is_stmt 0 view .LVU38
 242 0000 81E0      		ldi r24,lo8(1)
 243               	.LVL14:
 244               	/* epilogue start */
 245               		.loc 1 142 1 view .LVU39
 246 0002 0895      		ret
 247               		.cfi_endproc
 248               	.LFE109:
 250               		.section	.text.process_record_tap_hint,"ax",@progbits
 251               	.global	process_record_tap_hint
 253               	process_record_tap_hint:
 254               	.LVL15:
 255               	.LFB110:
 143:tmk_core/common/action.c **** 
 144:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 145:tmk_core/common/action.c **** /** \brief Allows for handling tap-hold actions immediately instead of waiting for TAPPING_TERM or 
 146:tmk_core/common/action.c ****  *
 147:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 148:tmk_core/common/action.c ****  */
 149:tmk_core/common/action.c **** void process_record_tap_hint(keyrecord_t *record)
 150:tmk_core/common/action.c **** {
 256               		.loc 1 150 1 is_stmt 1 view -0
 257               		.cfi_startproc
 258               	/* prologue: function */
 259               	/* frame size = 0 */
 260               	/* stack size = 0 */
 261               	.L__stack_usage = 0
 151:tmk_core/common/action.c ****     action_t action = layer_switch_get_action(record->event.key);
 262               		.loc 1 151 5 view .LVU41
 263               		.loc 1 151 23 is_stmt 0 view .LVU42
 264 0000 FC01      		movw r30,r24
 265 0002 8081      		ld r24,Z
 266 0004 9181      		ldd r25,Z+1
 267               	.LVL16:
 268               		.loc 1 151 23 view .LVU43
 269 0006 0E94 0000 		call layer_switch_get_action
 270               	.LVL17:
 152:tmk_core/common/action.c **** 
 153:tmk_core/common/action.c ****     switch (action.kind.id) {
 271               		.loc 1 153 5 is_stmt 1 view .LVU44
 272               		.loc 1 153 24 is_stmt 0 view .LVU45
 273 000a 9295      		swap r25
 274 000c 9F70      		andi r25,lo8(15)
 275               		.loc 1 153 5 view .LVU46
 276 000e 9630      		cpi r25,lo8(6)
 277 0010 01F4      		brne .L21
 154:tmk_core/common/action.c **** #ifdef SWAP_HANDS_ENABLE
 155:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 156:tmk_core/common/action.c ****             switch (action.swap.code) {
 278               		.loc 1 156 13 is_stmt 1 view .LVU47
 157:tmk_core/common/action.c ****                 case OP_SH_TAP_TOGGLE:
 158:tmk_core/common/action.c ****                 default:
 159:tmk_core/common/action.c ****                     swap_hands = !swap_hands;
 279               		.loc 1 159 21 view .LVU48
 280 0012 8091 0000 		lds r24,swap_hands
 281 0016 91E0      		ldi r25,lo8(1)
 282 0018 8927      		eor r24,r25
 283               		.loc 1 159 32 is_stmt 0 view .LVU49
 284 001a 8093 0000 		sts swap_hands,r24
 160:tmk_core/common/action.c ****                     swap_held = true;
 285               		.loc 1 160 21 is_stmt 1 view .LVU50
 286               		.loc 1 160 31 is_stmt 0 view .LVU51
 287 001e 9093 0000 		sts swap_held,r25
 161:tmk_core/common/action.c ****             }
 162:tmk_core/common/action.c ****             break;
 288               		.loc 1 162 13 is_stmt 1 view .LVU52
 289               	.L21:
 290               	/* epilogue start */
 163:tmk_core/common/action.c **** #endif
 164:tmk_core/common/action.c ****     }
 165:tmk_core/common/action.c **** }
 291               		.loc 1 165 1 is_stmt 0 view .LVU53
 292 0022 0895      		ret
 293               		.cfi_endproc
 294               	.LFE110:
 296               		.section	.text.register_code,"ax",@progbits
 297               	.global	register_code
 299               	register_code:
 300               	.LVL18:
 301               	.LFB113:
 166:tmk_core/common/action.c **** #endif
 167:tmk_core/common/action.c **** 
 168:tmk_core/common/action.c **** /** \brief Take a key event (key press or key release) and processes it.
 169:tmk_core/common/action.c ****  *
 170:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 171:tmk_core/common/action.c ****  */
 172:tmk_core/common/action.c **** void process_record(keyrecord_t *record)
 173:tmk_core/common/action.c **** {
 174:tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) { return; }
 175:tmk_core/common/action.c **** 
 176:tmk_core/common/action.c ****     if(!process_record_quantum(record))
 177:tmk_core/common/action.c ****         return;
 178:tmk_core/common/action.c **** 
 179:tmk_core/common/action.c ****     action_t action = store_or_get_action(record->event.pressed, record->event.key);
 180:tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
 181:tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 182:tmk_core/common/action.c ****     dprint(" layer_state: "); layer_debug();
 183:tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 184:tmk_core/common/action.c **** #endif
 185:tmk_core/common/action.c ****     dprintln();
 186:tmk_core/common/action.c **** 
 187:tmk_core/common/action.c ****     process_action(record, action);
 188:tmk_core/common/action.c **** }
 189:tmk_core/common/action.c **** 
 190:tmk_core/common/action.c **** /** \brief Take an action and processes it.
 191:tmk_core/common/action.c ****  *
 192:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 193:tmk_core/common/action.c ****  */
 194:tmk_core/common/action.c **** void process_action(keyrecord_t *record, action_t action)
 195:tmk_core/common/action.c **** {
 196:tmk_core/common/action.c ****     keyevent_t event = record->event;
 197:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 198:tmk_core/common/action.c ****     uint8_t tap_count = record->tap.count;
 199:tmk_core/common/action.c **** #endif
 200:tmk_core/common/action.c **** 
 201:tmk_core/common/action.c ****     if (event.pressed) {
 202:tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 203:tmk_core/common/action.c ****         clear_weak_mods();
 204:tmk_core/common/action.c ****     }
 205:tmk_core/common/action.c **** 
 206:tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 207:tmk_core/common/action.c ****     bool do_release_oneshot = false;
 208:tmk_core/common/action.c ****     // notice we only clear the one shot layer if the pressed key is not a modifier.
 209:tmk_core/common/action.c ****     if (is_oneshot_layer_active() && event.pressed && !IS_MOD(action.key.code)) {
 210:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 211:tmk_core/common/action.c ****         do_release_oneshot = !is_oneshot_layer_active();
 212:tmk_core/common/action.c ****     }
 213:tmk_core/common/action.c **** #endif
 214:tmk_core/common/action.c **** 
 215:tmk_core/common/action.c ****     switch (action.kind.id) {
 216:tmk_core/common/action.c ****         /* Key and Mods */
 217:tmk_core/common/action.c ****         case ACT_LMODS:
 218:tmk_core/common/action.c ****         case ACT_RMODS:
 219:tmk_core/common/action.c ****             {
 220:tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
 221:tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 222:tmk_core/common/action.c ****                 if (event.pressed) {
 223:tmk_core/common/action.c ****                     if (mods) {
 224:tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 225:tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 226:tmk_core/common/action.c ****                             // This also makes LSFT(KC_LGUI) behave exactly the same as LGUI(KC_LSF
 227:tmk_core/common/action.c ****                             // Same applies for some keys like KC_MEH which are declared as MEH(KC_
 228:tmk_core/common/action.c ****                             add_mods(mods);
 229:tmk_core/common/action.c ****                         } else {
 230:tmk_core/common/action.c ****                             add_weak_mods(mods);
 231:tmk_core/common/action.c ****                         }
 232:tmk_core/common/action.c ****                         send_keyboard_report();
 233:tmk_core/common/action.c ****                     }
 234:tmk_core/common/action.c ****                     register_code(action.key.code);
 235:tmk_core/common/action.c ****                 } else {
 236:tmk_core/common/action.c ****                     unregister_code(action.key.code);
 237:tmk_core/common/action.c ****                     if (mods) {
 238:tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 239:tmk_core/common/action.c ****                             del_mods(mods);
 240:tmk_core/common/action.c ****                         } else {
 241:tmk_core/common/action.c ****                             del_weak_mods(mods);
 242:tmk_core/common/action.c ****                         }
 243:tmk_core/common/action.c ****                         send_keyboard_report();
 244:tmk_core/common/action.c ****                     }
 245:tmk_core/common/action.c ****                 }
 246:tmk_core/common/action.c ****             }
 247:tmk_core/common/action.c ****             break;
 248:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 249:tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 250:tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 251:tmk_core/common/action.c ****             {
 252:tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 253:tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 254:tmk_core/common/action.c ****                 switch (action.layer_tap.code) {
 255:tmk_core/common/action.c ****     #ifndef NO_ACTION_ONESHOT
 256:tmk_core/common/action.c ****                     case MODS_ONESHOT:
 257:tmk_core/common/action.c ****                         // Oneshot modifier
 258:tmk_core/common/action.c ****                         if (event.pressed) {
 259:tmk_core/common/action.c ****                             if (tap_count == 0) {
 260:tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: 0\n");
 261:tmk_core/common/action.c ****                                 register_mods(mods | get_oneshot_mods());
 262:tmk_core/common/action.c ****                             } else if (tap_count == 1) {
 263:tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 264:tmk_core/common/action.c ****                                 set_oneshot_mods(mods | get_oneshot_mods());
 265:tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 266:tmk_core/common/action.c ****                             } else if (tap_count == ONESHOT_TAP_TOGGLE) {
 267:tmk_core/common/action.c ****                                 dprint("MODS_TAP: Toggling oneshot");
 268:tmk_core/common/action.c ****                                 clear_oneshot_mods();
 269:tmk_core/common/action.c ****                                 set_oneshot_locked_mods(mods);
 270:tmk_core/common/action.c ****                                 register_mods(mods);
 271:tmk_core/common/action.c ****                     #endif
 272:tmk_core/common/action.c ****                             } else {
 273:tmk_core/common/action.c ****                                 register_mods(mods | get_oneshot_mods());
 274:tmk_core/common/action.c ****                             }
 275:tmk_core/common/action.c ****                         } else {
 276:tmk_core/common/action.c ****                             if (tap_count == 0) {
 277:tmk_core/common/action.c ****                                 clear_oneshot_mods();
 278:tmk_core/common/action.c ****                                 unregister_mods(mods);
 279:tmk_core/common/action.c ****                             } else if (tap_count == 1) {
 280:tmk_core/common/action.c ****                                 // Retain Oneshot mods
 281:tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 282:tmk_core/common/action.c ****                                 if (mods & get_mods()) {
 283:tmk_core/common/action.c ****                                     clear_oneshot_locked_mods();
 284:tmk_core/common/action.c ****                                     clear_oneshot_mods();
 285:tmk_core/common/action.c ****                                     unregister_mods(mods);
 286:tmk_core/common/action.c ****                                 }
 287:tmk_core/common/action.c ****                             } else if (tap_count == ONESHOT_TAP_TOGGLE) {
 288:tmk_core/common/action.c ****                                 // Toggle Oneshot Layer
 289:tmk_core/common/action.c ****                     #endif
 290:tmk_core/common/action.c ****                             } else {
 291:tmk_core/common/action.c ****                                 clear_oneshot_mods();
 292:tmk_core/common/action.c ****                                 unregister_mods(mods);
 293:tmk_core/common/action.c ****                             }
 294:tmk_core/common/action.c ****                         }
 295:tmk_core/common/action.c ****                         break;
 296:tmk_core/common/action.c ****     #endif
 297:tmk_core/common/action.c ****                     case MODS_TAP_TOGGLE:
 298:tmk_core/common/action.c ****                         if (event.pressed) {
 299:tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 300:tmk_core/common/action.c ****                                 register_mods(mods);
 301:tmk_core/common/action.c ****                             }
 302:tmk_core/common/action.c ****                         } else {
 303:tmk_core/common/action.c ****                             if (tap_count < TAPPING_TOGGLE) {
 304:tmk_core/common/action.c ****                                 unregister_mods(mods);
 305:tmk_core/common/action.c ****                             }
 306:tmk_core/common/action.c ****                         }
 307:tmk_core/common/action.c ****                         break;
 308:tmk_core/common/action.c ****                     default:
 309:tmk_core/common/action.c ****                         if (event.pressed) {
 310:tmk_core/common/action.c ****                             if (tap_count > 0) {
 311:tmk_core/common/action.c **** #ifndef IGNORE_MOD_TAP_INTERRUPT
 312:tmk_core/common/action.c ****                                 if (record->tap.interrupted) {
 313:tmk_core/common/action.c ****                                     dprint("mods_tap: tap: cancel: add_mods\n");
 314:tmk_core/common/action.c ****                                     // ad hoc: set 0 to cancel tap
 315:tmk_core/common/action.c ****                                     record->tap.count = 0;
 316:tmk_core/common/action.c ****                                     register_mods(mods);
 317:tmk_core/common/action.c ****                                 } else
 318:tmk_core/common/action.c **** #endif
 319:tmk_core/common/action.c ****                                 {
 320:tmk_core/common/action.c ****                                     dprint("MODS_TAP: Tap: register_code\n");
 321:tmk_core/common/action.c ****                                     register_code(action.key.code);
 322:tmk_core/common/action.c ****                                 }
 323:tmk_core/common/action.c ****                             } else {
 324:tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 325:tmk_core/common/action.c ****                                 register_mods(mods);
 326:tmk_core/common/action.c ****                             }
 327:tmk_core/common/action.c ****                         } else {
 328:tmk_core/common/action.c ****                             if (tap_count > 0) {
 329:tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 330:tmk_core/common/action.c ****                                 unregister_code(action.key.code);
 331:tmk_core/common/action.c ****                             } else {
 332:tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 333:tmk_core/common/action.c ****                                 unregister_mods(mods);
 334:tmk_core/common/action.c ****                             }
 335:tmk_core/common/action.c ****                         }
 336:tmk_core/common/action.c ****                         break;
 337:tmk_core/common/action.c ****                 }
 338:tmk_core/common/action.c ****             }
 339:tmk_core/common/action.c ****             break;
 340:tmk_core/common/action.c **** #endif
 341:tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 342:tmk_core/common/action.c ****         /* other HID usage */
 343:tmk_core/common/action.c ****         case ACT_USAGE:
 344:tmk_core/common/action.c ****             switch (action.usage.page) {
 345:tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 346:tmk_core/common/action.c ****                     if (event.pressed) {
 347:tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 348:tmk_core/common/action.c ****                     } else {
 349:tmk_core/common/action.c ****                         host_system_send(0);
 350:tmk_core/common/action.c ****                     }
 351:tmk_core/common/action.c ****                     break;
 352:tmk_core/common/action.c ****                 case PAGE_CONSUMER:
 353:tmk_core/common/action.c ****                     if (event.pressed) {
 354:tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 355:tmk_core/common/action.c ****                     } else {
 356:tmk_core/common/action.c ****                         host_consumer_send(0);
 357:tmk_core/common/action.c ****                     }
 358:tmk_core/common/action.c ****                     break;
 359:tmk_core/common/action.c ****             }
 360:tmk_core/common/action.c ****             break;
 361:tmk_core/common/action.c **** #endif
 362:tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 363:tmk_core/common/action.c ****         /* Mouse key */
 364:tmk_core/common/action.c ****         case ACT_MOUSEKEY:
 365:tmk_core/common/action.c ****             if (event.pressed) {
 366:tmk_core/common/action.c ****                 switch (action.key.code) {
 367:tmk_core/common/action.c ****                     case KC_MS_BTN1:
 368:tmk_core/common/action.c ****                         tp_buttons |= (1<<0);
 369:tmk_core/common/action.c ****                         break;
 370:tmk_core/common/action.c ****                     case KC_MS_BTN2:
 371:tmk_core/common/action.c ****                         tp_buttons |= (1<<1);
 372:tmk_core/common/action.c ****                         break;
 373:tmk_core/common/action.c ****                     case KC_MS_BTN3:
 374:tmk_core/common/action.c ****                         tp_buttons |= (1<<2);
 375:tmk_core/common/action.c ****                         break;
 376:tmk_core/common/action.c ****                     default:
 377:tmk_core/common/action.c ****                         break;
 378:tmk_core/common/action.c ****                 }
 379:tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 380:tmk_core/common/action.c ****                 mousekey_send();
 381:tmk_core/common/action.c ****             } else {
 382:tmk_core/common/action.c ****                 switch (action.key.code) {
 383:tmk_core/common/action.c ****                     case KC_MS_BTN1:
 384:tmk_core/common/action.c ****                         tp_buttons &= ~(1<<0);
 385:tmk_core/common/action.c ****                         break;
 386:tmk_core/common/action.c ****                     case KC_MS_BTN2:
 387:tmk_core/common/action.c ****                         tp_buttons &= ~(1<<1);
 388:tmk_core/common/action.c ****                         break;
 389:tmk_core/common/action.c ****                     case KC_MS_BTN3:
 390:tmk_core/common/action.c ****                         tp_buttons &= ~(1<<2);
 391:tmk_core/common/action.c ****                         break;
 392:tmk_core/common/action.c ****                     default:
 393:tmk_core/common/action.c ****                         break;
 394:tmk_core/common/action.c ****                 }
 395:tmk_core/common/action.c ****                 mousekey_off(action.key.code);
 396:tmk_core/common/action.c ****                 mousekey_send();
 397:tmk_core/common/action.c ****             }
 398:tmk_core/common/action.c ****             break;
 399:tmk_core/common/action.c **** #endif
 400:tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 401:tmk_core/common/action.c ****         case ACT_LAYER:
 402:tmk_core/common/action.c ****             if (action.layer_bitop.on == 0) {
 403:tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 404:tmk_core/common/action.c ****                 if (!event.pressed) {
 405:tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 406:tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 407:tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 408:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 409:tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 410:tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 411:tmk_core/common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 412:tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 413:tmk_core/common/action.c ****                     }
 414:tmk_core/common/action.c ****                 }
 415:tmk_core/common/action.c ****             } else {
 416:tmk_core/common/action.c ****                 /* Layer Bitwise Operation */
 417:tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 418:tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 419:tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 420:tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 421:tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 422:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 423:tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 424:tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 425:tmk_core/common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 426:tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 427:tmk_core/common/action.c ****                     }
 428:tmk_core/common/action.c ****                 }
 429:tmk_core/common/action.c ****             }
 430:tmk_core/common/action.c ****             break;
 431:tmk_core/common/action.c ****     #ifndef NO_ACTION_TAPPING
 432:tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 433:tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 434:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 435:tmk_core/common/action.c ****                 case 0xe0 ... 0xef:
 436:tmk_core/common/action.c ****                     /* layer On/Off with modifiers(left only) */
 437:tmk_core/common/action.c ****                     if (event.pressed) {
 438:tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 439:tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 440:tmk_core/common/action.c ****                     } else {
 441:tmk_core/common/action.c ****                         layer_off(action.layer_tap.val);
 442:tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 443:tmk_core/common/action.c ****                     }
 444:tmk_core/common/action.c ****                     break;
 445:tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 446:tmk_core/common/action.c ****                     /* tap toggle */
 447:tmk_core/common/action.c ****                     if (event.pressed) {
 448:tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 449:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 450:tmk_core/common/action.c ****                         }
 451:tmk_core/common/action.c ****                     } else {
 452:tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 453:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 454:tmk_core/common/action.c ****                         }
 455:tmk_core/common/action.c ****                     }
 456:tmk_core/common/action.c ****                     break;
 457:tmk_core/common/action.c ****                 case OP_ON_OFF:
 458:tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 459:tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 460:tmk_core/common/action.c ****                     break;
 461:tmk_core/common/action.c ****                 case OP_OFF_ON:
 462:tmk_core/common/action.c ****                     event.pressed ? layer_off(action.layer_tap.val) :
 463:tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 464:tmk_core/common/action.c ****                     break;
 465:tmk_core/common/action.c ****                 case OP_SET_CLEAR:
 466:tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 467:tmk_core/common/action.c ****                                     layer_clear();
 468:tmk_core/common/action.c ****                     break;
 469:tmk_core/common/action.c ****             #ifndef NO_ACTION_ONESHOT
 470:tmk_core/common/action.c ****                 case OP_ONESHOT:
 471:tmk_core/common/action.c ****                     // Oneshot modifier
 472:tmk_core/common/action.c ****                 #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 473:tmk_core/common/action.c ****                     do_release_oneshot = false;
 474:tmk_core/common/action.c ****                     if (event.pressed) {
 475:tmk_core/common/action.c ****                         del_mods(get_oneshot_locked_mods());
 476:tmk_core/common/action.c ****                         if (get_oneshot_layer_state() == ONESHOT_TOGGLED) {
 477:tmk_core/common/action.c ****                             reset_oneshot_layer();
 478:tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 479:tmk_core/common/action.c ****                             break;
 480:tmk_core/common/action.c ****                         } else if (tap_count < ONESHOT_TAP_TOGGLE) {
 481:tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 482:tmk_core/common/action.c ****                             set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 483:tmk_core/common/action.c ****                         }
 484:tmk_core/common/action.c ****                     } else {
 485:tmk_core/common/action.c ****                         add_mods(get_oneshot_locked_mods());
 486:tmk_core/common/action.c ****                         if (tap_count >= ONESHOT_TAP_TOGGLE) {
 487:tmk_core/common/action.c ****                             reset_oneshot_layer();
 488:tmk_core/common/action.c ****                             clear_oneshot_locked_mods();
 489:tmk_core/common/action.c ****                             set_oneshot_layer(action.layer_tap.val, ONESHOT_TOGGLED);
 490:tmk_core/common/action.c ****                         } else {
 491:tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_PRESSED);
 492:tmk_core/common/action.c ****                         }
 493:tmk_core/common/action.c ****                     }
 494:tmk_core/common/action.c ****                 #else
 495:tmk_core/common/action.c ****                     if (event.pressed) {
 496:tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 497:tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 498:tmk_core/common/action.c ****                     } else {
 499:tmk_core/common/action.c ****                         clear_oneshot_layer_state(ONESHOT_PRESSED);
 500:tmk_core/common/action.c ****                         if (tap_count > 1) {
 501:tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 502:tmk_core/common/action.c ****                         }
 503:tmk_core/common/action.c ****                     }
 504:tmk_core/common/action.c ****                 #endif
 505:tmk_core/common/action.c ****                     break;
 506:tmk_core/common/action.c ****             #endif
 507:tmk_core/common/action.c ****                 default:
 508:tmk_core/common/action.c ****                     /* tap key */
 509:tmk_core/common/action.c ****                     if (event.pressed) {
 510:tmk_core/common/action.c ****                         if (tap_count > 0) {
 511:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 512:tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 513:tmk_core/common/action.c ****                         } else {
 514:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
 515:tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 516:tmk_core/common/action.c ****                         }
 517:tmk_core/common/action.c ****                     } else {
 518:tmk_core/common/action.c ****                         if (tap_count > 0) {
 519:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 520:tmk_core/common/action.c ****                             if (action.layer_tap.code == KC_CAPS) {
 521:tmk_core/common/action.c ****                                 wait_ms(80);
 522:tmk_core/common/action.c ****                             }
 523:tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 524:tmk_core/common/action.c ****                         } else {
 525:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: Off on release\n");
 526:tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 527:tmk_core/common/action.c ****                         }
 528:tmk_core/common/action.c ****                     }
 529:tmk_core/common/action.c ****                     break;
 530:tmk_core/common/action.c ****             }
 531:tmk_core/common/action.c ****             break;
 532:tmk_core/common/action.c ****     #endif
 533:tmk_core/common/action.c **** #endif
 534:tmk_core/common/action.c ****         /* Extentions */
 535:tmk_core/common/action.c **** #ifndef NO_ACTION_MACRO
 536:tmk_core/common/action.c ****         case ACT_MACRO:
 537:tmk_core/common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 538:tmk_core/common/action.c ****             break;
 539:tmk_core/common/action.c **** #endif
 540:tmk_core/common/action.c **** #if defined(BACKLIGHT_ENABLE) | defined(LED_MATRIX_ENABLE)
 541:tmk_core/common/action.c ****         case ACT_BACKLIGHT:
 542:tmk_core/common/action.c ****             if (!event.pressed) {
 543:tmk_core/common/action.c ****                 switch (action.backlight.opt) {
 544:tmk_core/common/action.c ****                     case BACKLIGHT_INCREASE:
 545:tmk_core/common/action.c ****                         backlight_increase();
 546:tmk_core/common/action.c ****                         break;
 547:tmk_core/common/action.c ****                     case BACKLIGHT_DECREASE:
 548:tmk_core/common/action.c ****                         backlight_decrease();
 549:tmk_core/common/action.c ****                         break;
 550:tmk_core/common/action.c ****                     case BACKLIGHT_TOGGLE:
 551:tmk_core/common/action.c ****                         backlight_toggle();
 552:tmk_core/common/action.c ****                         break;
 553:tmk_core/common/action.c ****                     case BACKLIGHT_STEP:
 554:tmk_core/common/action.c ****                         backlight_step();
 555:tmk_core/common/action.c ****                         break;
 556:tmk_core/common/action.c ****                     case BACKLIGHT_ON:
 557:tmk_core/common/action.c ****                         backlight_level(BACKLIGHT_LEVELS);
 558:tmk_core/common/action.c ****                         break;
 559:tmk_core/common/action.c ****                     case BACKLIGHT_OFF:
 560:tmk_core/common/action.c ****                         backlight_level(0);
 561:tmk_core/common/action.c ****                         break;
 562:tmk_core/common/action.c ****                 }
 563:tmk_core/common/action.c ****             }
 564:tmk_core/common/action.c ****             break;
 565:tmk_core/common/action.c **** #endif
 566:tmk_core/common/action.c ****         case ACT_COMMAND:
 567:tmk_core/common/action.c ****             break;
 568:tmk_core/common/action.c **** #ifdef SWAP_HANDS_ENABLE
 569:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 570:tmk_core/common/action.c ****             switch (action.swap.code) {
 571:tmk_core/common/action.c ****                 case OP_SH_TOGGLE:
 572:tmk_core/common/action.c ****                     if (event.pressed) {
 573:tmk_core/common/action.c ****                         swap_hands = !swap_hands;
 574:tmk_core/common/action.c ****                     }
 575:tmk_core/common/action.c ****                     break;
 576:tmk_core/common/action.c ****                 case OP_SH_ON_OFF:
 577:tmk_core/common/action.c ****                     swap_hands = event.pressed;
 578:tmk_core/common/action.c ****                     break;
 579:tmk_core/common/action.c ****                 case OP_SH_OFF_ON:
 580:tmk_core/common/action.c ****                     swap_hands = !event.pressed;
 581:tmk_core/common/action.c ****                     break;
 582:tmk_core/common/action.c ****                 case OP_SH_ON:
 583:tmk_core/common/action.c ****                     if (!event.pressed) {
 584:tmk_core/common/action.c ****                         swap_hands = true;
 585:tmk_core/common/action.c ****                     }
 586:tmk_core/common/action.c ****                     break;
 587:tmk_core/common/action.c ****                 case OP_SH_OFF:
 588:tmk_core/common/action.c ****                     if (!event.pressed) {
 589:tmk_core/common/action.c ****                         swap_hands = false;
 590:tmk_core/common/action.c ****                     }
 591:tmk_core/common/action.c ****                     break;
 592:tmk_core/common/action.c ****     #ifndef NO_ACTION_TAPPING
 593:tmk_core/common/action.c ****                 case OP_SH_TAP_TOGGLE:
 594:tmk_core/common/action.c ****                     /* tap toggle */
 595:tmk_core/common/action.c **** 
 596:tmk_core/common/action.c ****                     if (event.pressed) {
 597:tmk_core/common/action.c ****                         if (swap_held) {
 598:tmk_core/common/action.c ****                             swap_held = false;
 599:tmk_core/common/action.c ****                         } else {
 600:tmk_core/common/action.c ****                             swap_hands = !swap_hands;
 601:tmk_core/common/action.c ****                         }
 602:tmk_core/common/action.c ****                     } else {
 603:tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 604:tmk_core/common/action.c ****                             swap_hands = !swap_hands;
 605:tmk_core/common/action.c ****                         }
 606:tmk_core/common/action.c ****                     }
 607:tmk_core/common/action.c ****                     break;
 608:tmk_core/common/action.c ****                 default:
 609:tmk_core/common/action.c ****                     /* tap key */
 610:tmk_core/common/action.c ****                     if (tap_count > 0) {
 611:tmk_core/common/action.c ****                         if (swap_held) {
 612:tmk_core/common/action.c ****                             swap_hands = !swap_hands; // undo hold set up in _tap_hint
 613:tmk_core/common/action.c ****                             swap_held = false;
 614:tmk_core/common/action.c ****                         }
 615:tmk_core/common/action.c ****                         if (event.pressed) {
 616:tmk_core/common/action.c ****                             register_code(action.swap.code);
 617:tmk_core/common/action.c ****                         } else {
 618:tmk_core/common/action.c ****                             unregister_code(action.swap.code);
 619:tmk_core/common/action.c ****                             *record = (keyrecord_t){}; // hack: reset tap mode
 620:tmk_core/common/action.c ****                         }
 621:tmk_core/common/action.c ****                     } else {
 622:tmk_core/common/action.c ****                         if (swap_held && !event.pressed) {
 623:tmk_core/common/action.c ****                             swap_hands = !swap_hands; // undo hold set up in _tap_hint
 624:tmk_core/common/action.c ****                             swap_held = false;
 625:tmk_core/common/action.c ****                         }
 626:tmk_core/common/action.c ****                     }
 627:tmk_core/common/action.c ****     #endif
 628:tmk_core/common/action.c ****             }
 629:tmk_core/common/action.c **** #endif
 630:tmk_core/common/action.c **** #ifndef NO_ACTION_FUNCTION
 631:tmk_core/common/action.c ****         case ACT_FUNCTION:
 632:tmk_core/common/action.c ****             action_function(record, action.func.id, action.func.opt);
 633:tmk_core/common/action.c ****             break;
 634:tmk_core/common/action.c **** #endif
 635:tmk_core/common/action.c ****         default:
 636:tmk_core/common/action.c ****             break;
 637:tmk_core/common/action.c ****     }
 638:tmk_core/common/action.c **** 
 639:tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 640:tmk_core/common/action.c ****     // if this event is a layer action, update the leds
 641:tmk_core/common/action.c ****     switch (action.kind.id) {
 642:tmk_core/common/action.c ****         case ACT_LAYER:
 643:tmk_core/common/action.c ****         #ifndef NO_ACTION_TAPPING
 644:tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 645:tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 646:tmk_core/common/action.c ****         #endif
 647:tmk_core/common/action.c ****             led_set(host_keyboard_leds());
 648:tmk_core/common/action.c ****             break;
 649:tmk_core/common/action.c ****         default:
 650:tmk_core/common/action.c ****             break;
 651:tmk_core/common/action.c ****     }
 652:tmk_core/common/action.c **** #endif
 653:tmk_core/common/action.c **** 
 654:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 655:tmk_core/common/action.c ****   #ifdef RETRO_TAPPING
 656:tmk_core/common/action.c ****   if (!is_tap_action(action)) {
 657:tmk_core/common/action.c ****     retro_tapping_counter = 0;
 658:tmk_core/common/action.c ****   } else {
 659:tmk_core/common/action.c ****     if (event.pressed) {
 660:tmk_core/common/action.c ****         if (tap_count > 0) {
 661:tmk_core/common/action.c ****           retro_tapping_counter = 0;
 662:tmk_core/common/action.c ****         } else {
 663:tmk_core/common/action.c **** 
 664:tmk_core/common/action.c ****         }
 665:tmk_core/common/action.c ****     } else {
 666:tmk_core/common/action.c ****       if (tap_count > 0) {
 667:tmk_core/common/action.c ****         retro_tapping_counter = 0;
 668:tmk_core/common/action.c ****       } else {
 669:tmk_core/common/action.c ****         if (retro_tapping_counter == 2) {
 670:tmk_core/common/action.c ****           register_code(action.layer_tap.code);
 671:tmk_core/common/action.c ****           unregister_code(action.layer_tap.code);
 672:tmk_core/common/action.c ****         }
 673:tmk_core/common/action.c ****         retro_tapping_counter = 0;
 674:tmk_core/common/action.c ****       }
 675:tmk_core/common/action.c ****     }
 676:tmk_core/common/action.c ****   }
 677:tmk_core/common/action.c ****   #endif
 678:tmk_core/common/action.c **** #endif
 679:tmk_core/common/action.c **** 
 680:tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 681:tmk_core/common/action.c ****     /* Because we switch layers after a oneshot event, we need to release the
 682:tmk_core/common/action.c ****      * key before we leave the layer or no key up event will be generated.
 683:tmk_core/common/action.c ****      */
 684:tmk_core/common/action.c ****     if (do_release_oneshot && !(get_oneshot_layer_state() & ONESHOT_PRESSED )   ) {
 685:tmk_core/common/action.c ****         record->event.pressed = false;
 686:tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 687:tmk_core/common/action.c ****         process_record(record);
 688:tmk_core/common/action.c ****         layer_off(get_oneshot_layer());
 689:tmk_core/common/action.c ****     }
 690:tmk_core/common/action.c **** #endif
 691:tmk_core/common/action.c **** }
 692:tmk_core/common/action.c **** 
 693:tmk_core/common/action.c **** 
 694:tmk_core/common/action.c **** 
 695:tmk_core/common/action.c **** 
 696:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 697:tmk_core/common/action.c ****  *
 698:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 699:tmk_core/common/action.c ****  */
 700:tmk_core/common/action.c **** void register_code(uint8_t code)
 701:tmk_core/common/action.c **** {
 302               		.loc 1 701 1 is_stmt 1 view -0
 303               		.cfi_startproc
 304               	/* prologue: function */
 305               	/* frame size = 0 */
 306               	/* stack size = 0 */
 307               	.L__stack_usage = 0
 702:tmk_core/common/action.c ****     if (code == KC_NO) {
 308               		.loc 1 702 5 view .LVU55
 309               		.loc 1 702 8 is_stmt 0 view .LVU56
 310 0000 8823      		tst r24
 311 0002 01F4      		brne .+2
 312 0004 00C0      		rjmp .L23
 703:tmk_core/common/action.c ****         return;
 704:tmk_core/common/action.c ****     }
 705:tmk_core/common/action.c **** 
 706:tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 707:tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 313               		.loc 1 707 10 is_stmt 1 view .LVU57
 314               		.loc 1 707 13 is_stmt 0 view .LVU58
 315 0006 8238      		cpi r24,lo8(-126)
 316 0008 01F4      		brne .L26
 708:tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 709:tmk_core/common/action.c ****         // Resync: ignore if caps lock already is on
 710:tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
 317               		.loc 1 710 9 is_stmt 1 view .LVU59
 318               		.loc 1 710 13 is_stmt 0 view .LVU60
 319 000a 0E94 0000 		call host_keyboard_leds
 320               	.LVL19:
 321               		.loc 1 710 12 view .LVU61
 322 000e 81FD      		sbrc r24,1
 323 0010 00C0      		rjmp .L23
 711:tmk_core/common/action.c **** #endif
 712:tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 324               		.loc 1 712 9 is_stmt 1 view .LVU62
 325 0012 89E3      		ldi r24,lo8(57)
 326 0014 0E94 0000 		call add_key
 327               	.LVL20:
 713:tmk_core/common/action.c ****         send_keyboard_report();
 328               		.loc 1 713 9 view .LVU63
 329 0018 0E94 0000 		call send_keyboard_report
 330               	.LVL21:
 714:tmk_core/common/action.c ****         wait_ms(100);
 331               		.loc 1 714 9 view .LVU64
 332               	.LBB18:
 333               	.LBI18:
 334               		.file 3 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** _delay_ms(double __ms)
 335               		.loc 3 166 1 view .LVU65
 336               	.LBB19:
 167:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	double __tmp ;
 337               		.loc 3 168 2 view .LVU66
 169:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 338               		.loc 3 172 2 view .LVU67
 173:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 339               		.loc 3 173 2 view .LVU68
 174:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 340               		.loc 3 174 2 view .LVU69
 175:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 341               		.loc 3 184 3 view .LVU70
 185:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 342               		.loc 3 187 2 view .LVU71
 343 001c 2FEF      		ldi r18,lo8(319999)
 344 001e 81EE      		ldi r24,hi8(319999)
 345 0020 94E0      		ldi r25,hlo8(319999)
 346 0022 2150      	1:	subi r18,1
 347 0024 8040      		sbci r24,0
 348 0026 9040      		sbci r25,0
 349 0028 01F4      		brne 1b
 350 002a 00C0      		rjmp .
 351 002c 0000      		nop
 352               	.LVL22:
 353               		.loc 3 187 2 is_stmt 0 view .LVU72
 354               	.LBE19:
 355               	.LBE18:
 715:tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 356               		.loc 1 715 9 is_stmt 1 view .LVU73
 357 002e 89E3      		ldi r24,lo8(57)
 358               	.L60:
 716:tmk_core/common/action.c ****         send_keyboard_report();
 717:tmk_core/common/action.c ****     }
 718:tmk_core/common/action.c **** 
 719:tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 720:tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 721:tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
 722:tmk_core/common/action.c **** #endif
 723:tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 724:tmk_core/common/action.c ****         send_keyboard_report();
 725:tmk_core/common/action.c ****         wait_ms(100);
 726:tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 359               		.loc 1 726 9 is_stmt 0 view .LVU74
 360 0030 0E94 0000 		call del_key
 361               	.LVL23:
 362               	.L61:
 727:tmk_core/common/action.c ****         send_keyboard_report();
 363               		.loc 1 727 9 is_stmt 1 view .LVU75
 364 0034 0C94 0000 		jmp send_keyboard_report
 365               	.LVL24:
 366               	.L26:
 719:tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 367               		.loc 1 719 10 view .LVU76
 719:tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 368               		.loc 1 719 13 is_stmt 0 view .LVU77
 369 0038 8338      		cpi r24,lo8(-125)
 370 003a 01F4      		brne .L28
 721:tmk_core/common/action.c **** #endif
 371               		.loc 1 721 9 is_stmt 1 view .LVU78
 721:tmk_core/common/action.c **** #endif
 372               		.loc 1 721 13 is_stmt 0 view .LVU79
 373 003c 0E94 0000 		call host_keyboard_leds
 374               	.LVL25:
 721:tmk_core/common/action.c **** #endif
 375               		.loc 1 721 12 view .LVU80
 376 0040 80FD      		sbrc r24,0
 377 0042 00C0      		rjmp .L23
 723:tmk_core/common/action.c ****         send_keyboard_report();
 378               		.loc 1 723 9 is_stmt 1 view .LVU81
 379 0044 83E5      		ldi r24,lo8(83)
 380 0046 0E94 0000 		call add_key
 381               	.LVL26:
 724:tmk_core/common/action.c ****         wait_ms(100);
 382               		.loc 1 724 9 view .LVU82
 383 004a 0E94 0000 		call send_keyboard_report
 384               	.LVL27:
 725:tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 385               		.loc 1 725 9 view .LVU83
 386               	.LBB20:
 387               	.LBI20:
 166:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** {
 388               		.loc 3 166 1 view .LVU84
 389               	.LBB21:
 168:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 390               		.loc 3 168 2 view .LVU85
 172:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 391               		.loc 3 172 2 view .LVU86
 173:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 392               		.loc 3 173 2 view .LVU87
 174:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 393               		.loc 3 174 2 view .LVU88
 184:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#endif
 394               		.loc 3 184 3 view .LVU89
 395               		.loc 3 187 2 view .LVU90
 396 004e 2FEF      		ldi r18,lo8(319999)
 397 0050 81EE      		ldi r24,hi8(319999)
 398 0052 94E0      		ldi r25,hlo8(319999)
 399 0054 2150      	1:	subi r18,1
 400 0056 8040      		sbci r24,0
 401 0058 9040      		sbci r25,0
 402 005a 01F4      		brne 1b
 403 005c 00C0      		rjmp .
 404 005e 0000      		nop
 405               	.LVL28:
 406               		.loc 3 187 2 is_stmt 0 view .LVU91
 407               	.LBE21:
 408               	.LBE20:
 726:tmk_core/common/action.c ****         send_keyboard_report();
 409               		.loc 1 726 9 is_stmt 1 view .LVU92
 410 0060 83E5      		ldi r24,lo8(83)
 411 0062 00C0      		rjmp .L60
 412               	.LVL29:
 413               	.L28:
 728:tmk_core/common/action.c ****     }
 729:tmk_core/common/action.c **** 
 730:tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 414               		.loc 1 730 10 view .LVU93
 415               		.loc 1 730 13 is_stmt 0 view .LVU94
 416 0064 8438      		cpi r24,lo8(-124)
 417 0066 01F4      		brne .L29
 731:tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 732:tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
 418               		.loc 1 732 9 is_stmt 1 view .LVU95
 419               		.loc 1 732 13 is_stmt 0 view .LVU96
 420 0068 0E94 0000 		call host_keyboard_leds
 421               	.LVL30:
 422               		.loc 1 732 12 view .LVU97
 423 006c 82FD      		sbrc r24,2
 424 006e 00C0      		rjmp .L23
 733:tmk_core/common/action.c **** #endif
 734:tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 425               		.loc 1 734 9 is_stmt 1 view .LVU98
 426 0070 87E4      		ldi r24,lo8(71)
 427 0072 0E94 0000 		call add_key
 428               	.LVL31:
 735:tmk_core/common/action.c ****         send_keyboard_report();
 429               		.loc 1 735 9 view .LVU99
 430 0076 0E94 0000 		call send_keyboard_report
 431               	.LVL32:
 736:tmk_core/common/action.c ****         wait_ms(100);
 432               		.loc 1 736 9 view .LVU100
 433               	.LBB22:
 434               	.LBI22:
 166:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** {
 435               		.loc 3 166 1 view .LVU101
 436               	.LBB23:
 168:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 437               		.loc 3 168 2 view .LVU102
 172:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 438               		.loc 3 172 2 view .LVU103
 173:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 439               		.loc 3 173 2 view .LVU104
 174:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 440               		.loc 3 174 2 view .LVU105
 184:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#endif
 441               		.loc 3 184 3 view .LVU106
 442               		.loc 3 187 2 view .LVU107
 443 007a 2FEF      		ldi r18,lo8(319999)
 444 007c 81EE      		ldi r24,hi8(319999)
 445 007e 94E0      		ldi r25,hlo8(319999)
 446 0080 2150      	1:	subi r18,1
 447 0082 8040      		sbci r24,0
 448 0084 9040      		sbci r25,0
 449 0086 01F4      		brne 1b
 450 0088 00C0      		rjmp .
 451 008a 0000      		nop
 452               	.LVL33:
 453               		.loc 3 187 2 is_stmt 0 view .LVU108
 454               	.LBE23:
 455               	.LBE22:
 737:tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 456               		.loc 1 737 9 is_stmt 1 view .LVU109
 457 008c 87E4      		ldi r24,lo8(71)
 458 008e 00C0      		rjmp .L60
 459               	.LVL34:
 460               	.L29:
 738:tmk_core/common/action.c ****         send_keyboard_report();
 739:tmk_core/common/action.c ****     }
 740:tmk_core/common/action.c **** #endif
 741:tmk_core/common/action.c **** 
 742:tmk_core/common/action.c ****     else if IS_KEY(code) {
 461               		.loc 1 742 10 view .LVU110
 462               		.loc 1 742 13 is_stmt 0 view .LVU111
 463 0090 9CEF      		ldi r25,lo8(-4)
 464 0092 980F      		add r25,r24
 465 0094 913A      		cpi r25,lo8(-95)
 466 0096 00F4      		brsh .L30
 743:tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 744:tmk_core/common/action.c ****         if (command_proc(code)) return;
 467               		.loc 1 744 9 is_stmt 1 view .LVU112
 745:tmk_core/common/action.c **** 
 746:tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 747:tmk_core/common/action.c **** /* TODO: remove
 748:tmk_core/common/action.c ****         if (oneshot_state.mods && !oneshot_state.disabled) {
 749:tmk_core/common/action.c ****             uint8_t tmp_mods = get_mods();
 750:tmk_core/common/action.c ****             add_mods(oneshot_state.mods);
 751:tmk_core/common/action.c **** 
 752:tmk_core/common/action.c ****             add_key(code);
 753:tmk_core/common/action.c ****             send_keyboard_report();
 754:tmk_core/common/action.c **** 
 755:tmk_core/common/action.c ****             set_mods(tmp_mods);
 756:tmk_core/common/action.c ****             send_keyboard_report();
 757:tmk_core/common/action.c ****             oneshot_cancel();
 758:tmk_core/common/action.c ****         } else
 759:tmk_core/common/action.c **** */
 760:tmk_core/common/action.c **** #endif
 761:tmk_core/common/action.c ****         {
 762:tmk_core/common/action.c ****             add_key(code);
 468               		.loc 1 762 13 view .LVU113
 469 0098 0E94 0000 		call add_key
 470               	.LVL35:
 763:tmk_core/common/action.c ****             send_keyboard_report();
 471               		.loc 1 763 13 view .LVU114
 472 009c 00C0      		rjmp .L61
 473               	.LVL36:
 474               	.L30:
 764:tmk_core/common/action.c ****         }
 765:tmk_core/common/action.c ****     }
 766:tmk_core/common/action.c ****     else if IS_MOD(code) {
 475               		.loc 1 766 10 view .LVU115
 476               		.loc 1 766 13 is_stmt 0 view .LVU116
 477 009e 90E2      		ldi r25,lo8(32)
 478 00a0 980F      		add r25,r24
 479 00a2 9830      		cpi r25,lo8(8)
 480 00a4 00F4      		brsh .L31
 767:tmk_core/common/action.c ****         add_mods(MOD_BIT(code));
 481               		.loc 1 767 9 is_stmt 1 view .LVU117
 482               		.loc 1 767 18 is_stmt 0 view .LVU118
 483 00a6 8770      		andi r24,lo8(7)
 484               	.LVL37:
 485               		.loc 1 767 9 view .LVU119
 486 00a8 91E0      		ldi r25,lo8(1)
 487 00aa 00C0      		rjmp 2f
 488               		1:
 489 00ac 990F      		lsl r25
 490               		2:
 491 00ae 8A95      		dec r24
 492 00b0 02F4      		brpl 1b
 493 00b2 892F      		mov r24,r25
 494 00b4 0E94 0000 		call add_mods
 495               	.LVL38:
 768:tmk_core/common/action.c ****         send_keyboard_report();
 496               		.loc 1 768 9 is_stmt 1 view .LVU120
 497 00b8 00C0      		rjmp .L61
 498               	.LVL39:
 499               	.L31:
 769:tmk_core/common/action.c ****     }
 770:tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 500               		.loc 1 770 10 view .LVU121
 501               		.loc 1 770 13 is_stmt 0 view .LVU122
 502 00ba 9BE5      		ldi r25,lo8(91)
 503 00bc 980F      		add r25,r24
 504 00be 9330      		cpi r25,lo8(3)
 505 00c0 00F4      		brsh .L32
 771:tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 506               		.loc 1 771 9 is_stmt 1 view .LVU123
 507 00c2 853A      		cpi r24,lo8(-91)
 508 00c4 01F0      		breq .L35
 509               		.loc 1 771 26 is_stmt 0 discriminator 1 view .LVU124
 510 00c6 863A      		cpi r24,lo8(-90)
 511 00c8 01F0      		breq .L36
 512               		.loc 1 771 26 view .LVU125
 513 00ca 83E8      		ldi r24,lo8(-125)
 514 00cc 90E0      		ldi r25,0
 515               	.LVL40:
 516               	.L33:
 517               		.loc 1 771 9 discriminator 12 view .LVU126
 518 00ce 0C94 0000 		jmp host_system_send
 519               	.LVL41:
 520               	.L35:
 521               		.loc 1 771 9 view .LVU127
 522 00d2 81E8      		ldi r24,lo8(-127)
 523 00d4 90E0      		ldi r25,0
 524               	.LVL42:
 525               		.loc 1 771 9 view .LVU128
 526 00d6 00C0      		rjmp .L33
 527               	.LVL43:
 528               	.L36:
 529               		.loc 1 771 26 view .LVU129
 530 00d8 82E8      		ldi r24,lo8(-126)
 531 00da 90E0      		ldi r25,0
 532               	.LVL44:
 533               		.loc 1 771 26 view .LVU130
 534 00dc 00C0      		rjmp .L33
 535               	.LVL45:
 536               	.L32:
 772:tmk_core/common/action.c ****     }
 773:tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 537               		.loc 1 773 10 is_stmt 1 view .LVU131
 538               		.loc 1 773 13 is_stmt 0 view .LVU132
 539 00de 98E5      		ldi r25,lo8(88)
 540 00e0 980F      		add r25,r24
 541 00e2 9731      		cpi r25,lo8(23)
 542 00e4 00F0      		brlo .+2
 543 00e6 00C0      		rjmp .L23
 774:tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 544               		.loc 1 774 9 is_stmt 1 view .LVU133
 545 00e8 883A      		cpi r24,lo8(-88)
 546 00ea 01F4      		brne .+2
 547 00ec 00C0      		rjmp .L37
 548               		.loc 1 774 28 is_stmt 0 discriminator 1 view .LVU134
 549 00ee 893A      		cpi r24,lo8(-87)
 550 00f0 01F4      		brne .+2
 551 00f2 00C0      		rjmp .L38
 552               		.loc 1 774 28 discriminator 3 view .LVU135
 553 00f4 8A3A      		cpi r24,lo8(-86)
 554 00f6 01F4      		brne .+2
 555 00f8 00C0      		rjmp .L39
 556               		.loc 1 774 28 discriminator 5 view .LVU136
 557 00fa 8B3A      		cpi r24,lo8(-85)
 558 00fc 01F4      		brne .+2
 559 00fe 00C0      		rjmp .L40
 560               		.loc 1 774 28 discriminator 7 view .LVU137
 561 0100 8C3A      		cpi r24,lo8(-84)
 562 0102 01F4      		brne .+2
 563 0104 00C0      		rjmp .L41
 564               		.loc 1 774 28 discriminator 9 view .LVU138
 565 0106 8B3B      		cpi r24,lo8(-69)
 566 0108 01F4      		brne .+2
 567 010a 00C0      		rjmp .L42
 568               		.loc 1 774 28 discriminator 11 view .LVU139
 569 010c 8C3B      		cpi r24,lo8(-68)
 570 010e 01F4      		brne .+2
 571 0110 00C0      		rjmp .L43
 572               		.loc 1 774 28 discriminator 13 view .LVU140
 573 0112 8D3A      		cpi r24,lo8(-83)
 574 0114 01F4      		brne .+2
 575 0116 00C0      		rjmp .L44
 576               		.loc 1 774 28 discriminator 15 view .LVU141
 577 0118 803B      		cpi r24,lo8(-80)
 578 011a 01F4      		brne .+2
 579 011c 00C0      		rjmp .L45
 580               		.loc 1 774 28 discriminator 17 view .LVU142
 581 011e 8E3A      		cpi r24,lo8(-82)
 582 0120 01F4      		brne .+2
 583 0122 00C0      		rjmp .L46
 584               		.loc 1 774 28 discriminator 19 view .LVU143
 585 0124 8F3A      		cpi r24,lo8(-81)
 586 0126 01F4      		brne .+2
 587 0128 00C0      		rjmp .L47
 588               		.loc 1 774 28 discriminator 21 view .LVU144
 589 012a 813B      		cpi r24,lo8(-79)
 590 012c 01F4      		brne .+2
 591 012e 00C0      		rjmp .L48
 592               		.loc 1 774 28 discriminator 23 view .LVU145
 593 0130 823B      		cpi r24,lo8(-78)
 594 0132 01F4      		brne .+2
 595 0134 00C0      		rjmp .L49
 596               		.loc 1 774 28 discriminator 25 view .LVU146
 597 0136 833B      		cpi r24,lo8(-77)
 598 0138 01F4      		brne .+2
 599 013a 00C0      		rjmp .L50
 600               		.loc 1 774 28 discriminator 27 view .LVU147
 601 013c 843B      		cpi r24,lo8(-76)
 602 013e 01F4      		brne .+2
 603 0140 00C0      		rjmp .L51
 604               		.loc 1 774 28 discriminator 29 view .LVU148
 605 0142 853B      		cpi r24,lo8(-75)
 606 0144 01F4      		brne .+2
 607 0146 00C0      		rjmp .L52
 608               		.loc 1 774 28 discriminator 31 view .LVU149
 609 0148 863B      		cpi r24,lo8(-74)
 610 014a 01F4      		brne .+2
 611 014c 00C0      		rjmp .L53
 612               		.loc 1 774 28 discriminator 33 view .LVU150
 613 014e 873B      		cpi r24,lo8(-73)
 614 0150 01F4      		brne .+2
 615 0152 00C0      		rjmp .L54
 616               		.loc 1 774 28 discriminator 35 view .LVU151
 617 0154 883B      		cpi r24,lo8(-72)
 618 0156 01F4      		brne .+2
 619 0158 00C0      		rjmp .L55
 620               		.loc 1 774 28 discriminator 37 view .LVU152
 621 015a 893B      		cpi r24,lo8(-71)
 622 015c 01F4      		brne .+2
 623 015e 00C0      		rjmp .L56
 624               		.loc 1 774 28 discriminator 39 view .LVU153
 625 0160 8D3B      		cpi r24,lo8(-67)
 626 0162 01F4      		brne .+2
 627 0164 00C0      		rjmp .L57
 628               		.loc 1 774 28 discriminator 41 view .LVU154
 629 0166 8E3B      		cpi r24,lo8(-66)
 630 0168 01F4      		brne .+2
 631 016a 00C0      		rjmp .L58
 632               		.loc 1 774 28 discriminator 43 view .LVU155
 633 016c 8A3B      		cpi r24,lo8(-70)
 634 016e 01F4      		brne .+2
 635 0170 00C0      		rjmp .L59
 636               		.loc 1 774 28 view .LVU156
 637 0172 90E0      		ldi r25,0
 638 0174 80E0      		ldi r24,0
 639               	.LVL46:
 640               	.L34:
 641               		.loc 1 774 9 discriminator 92 view .LVU157
 642 0176 0C94 0000 		jmp host_consumer_send
 643               	.LVL47:
 644               	.L37:
 645               		.loc 1 774 9 view .LVU158
 646 017a 82EE      		ldi r24,lo8(-30)
 647 017c 90E0      		ldi r25,0
 648               	.LVL48:
 649               		.loc 1 774 9 view .LVU159
 650 017e 00C0      		rjmp .L34
 651               	.LVL49:
 652               	.L38:
 653               		.loc 1 774 28 view .LVU160
 654 0180 89EE      		ldi r24,lo8(-23)
 655 0182 90E0      		ldi r25,0
 656               	.LVL50:
 657               		.loc 1 774 28 view .LVU161
 658 0184 00C0      		rjmp .L34
 659               	.LVL51:
 660               	.L39:
 661               		.loc 1 774 28 view .LVU162
 662 0186 8AEE      		ldi r24,lo8(-22)
 663 0188 90E0      		ldi r25,0
 664               	.LVL52:
 665               		.loc 1 774 28 view .LVU163
 666 018a 00C0      		rjmp .L34
 667               	.LVL53:
 668               	.L40:
 669               		.loc 1 774 28 view .LVU164
 670 018c 85EB      		ldi r24,lo8(-75)
 671 018e 90E0      		ldi r25,0
 672               	.LVL54:
 673               		.loc 1 774 28 view .LVU165
 674 0190 00C0      		rjmp .L34
 675               	.LVL55:
 676               	.L41:
 677               		.loc 1 774 28 view .LVU166
 678 0192 86EB      		ldi r24,lo8(-74)
 679 0194 90E0      		ldi r25,0
 680               	.LVL56:
 681               		.loc 1 774 28 view .LVU167
 682 0196 00C0      		rjmp .L34
 683               	.LVL57:
 684               	.L42:
 685               		.loc 1 774 28 view .LVU168
 686 0198 83EB      		ldi r24,lo8(-77)
 687 019a 90E0      		ldi r25,0
 688               	.LVL58:
 689               		.loc 1 774 28 view .LVU169
 690 019c 00C0      		rjmp .L34
 691               	.LVL59:
 692               	.L43:
 693               		.loc 1 774 28 view .LVU170
 694 019e 84EB      		ldi r24,lo8(-76)
 695 01a0 90E0      		ldi r25,0
 696               	.LVL60:
 697               		.loc 1 774 28 view .LVU171
 698 01a2 00C0      		rjmp .L34
 699               	.LVL61:
 700               	.L44:
 701               		.loc 1 774 28 view .LVU172
 702 01a4 87EB      		ldi r24,lo8(-73)
 703 01a6 90E0      		ldi r25,0
 704               	.LVL62:
 705               		.loc 1 774 28 view .LVU173
 706 01a8 00C0      		rjmp .L34
 707               	.LVL63:
 708               	.L45:
 709               		.loc 1 774 28 view .LVU174
 710 01aa 8CEC      		ldi r24,lo8(-52)
 711 01ac 90E0      		ldi r25,0
 712               	.LVL64:
 713               		.loc 1 774 28 view .LVU175
 714 01ae 00C0      		rjmp .L34
 715               	.LVL65:
 716               	.L46:
 717               		.loc 1 774 28 view .LVU176
 718 01b0 8DEC      		ldi r24,lo8(-51)
 719 01b2 90E0      		ldi r25,0
 720               	.LVL66:
 721               		.loc 1 774 28 view .LVU177
 722 01b4 00C0      		rjmp .L34
 723               	.LVL67:
 724               	.L47:
 725               		.loc 1 774 28 view .LVU178
 726 01b6 83E8      		ldi r24,lo8(-125)
 727 01b8 91E0      		ldi r25,lo8(1)
 728               	.LVL68:
 729               		.loc 1 774 28 view .LVU179
 730 01ba 00C0      		rjmp .L34
 731               	.LVL69:
 732               	.L48:
 733               		.loc 1 774 28 view .LVU180
 734 01bc 8AE8      		ldi r24,lo8(-118)
 735 01be 91E0      		ldi r25,lo8(1)
 736               	.LVL70:
 737               		.loc 1 774 28 view .LVU181
 738 01c0 00C0      		rjmp .L34
 739               	.LVL71:
 740               	.L49:
 741               		.loc 1 774 28 view .LVU182
 742 01c2 82E9      		ldi r24,lo8(-110)
 743 01c4 91E0      		ldi r25,lo8(1)
 744               	.LVL72:
 745               		.loc 1 774 28 view .LVU183
 746 01c6 00C0      		rjmp .L34
 747               	.LVL73:
 748               	.L50:
 749               		.loc 1 774 28 view .LVU184
 750 01c8 84E9      		ldi r24,lo8(-108)
 751 01ca 91E0      		ldi r25,lo8(1)
 752               	.LVL74:
 753               		.loc 1 774 28 view .LVU185
 754 01cc 00C0      		rjmp .L34
 755               	.LVL75:
 756               	.L51:
 757               		.loc 1 774 28 view .LVU186
 758 01ce 81E2      		ldi r24,lo8(33)
 759 01d0 92E0      		ldi r25,lo8(2)
 760               	.LVL76:
 761               		.loc 1 774 28 view .LVU187
 762 01d2 00C0      		rjmp .L34
 763               	.LVL77:
 764               	.L52:
 765               		.loc 1 774 28 view .LVU188
 766 01d4 83E2      		ldi r24,lo8(35)
 767 01d6 92E0      		ldi r25,lo8(2)
 768               	.LVL78:
 769               		.loc 1 774 28 view .LVU189
 770 01d8 00C0      		rjmp .L34
 771               	.LVL79:
 772               	.L53:
 773               		.loc 1 774 28 view .LVU190
 774 01da 84E2      		ldi r24,lo8(36)
 775 01dc 92E0      		ldi r25,lo8(2)
 776               	.LVL80:
 777               		.loc 1 774 28 view .LVU191
 778 01de 00C0      		rjmp .L34
 779               	.LVL81:
 780               	.L54:
 781               		.loc 1 774 28 view .LVU192
 782 01e0 85E2      		ldi r24,lo8(37)
 783 01e2 92E0      		ldi r25,lo8(2)
 784               	.LVL82:
 785               		.loc 1 774 28 view .LVU193
 786 01e4 00C0      		rjmp .L34
 787               	.LVL83:
 788               	.L55:
 789               		.loc 1 774 28 view .LVU194
 790 01e6 86E2      		ldi r24,lo8(38)
 791 01e8 92E0      		ldi r25,lo8(2)
 792               	.LVL84:
 793               		.loc 1 774 28 view .LVU195
 794 01ea 00C0      		rjmp .L34
 795               	.LVL85:
 796               	.L56:
 797               		.loc 1 774 28 view .LVU196
 798 01ec 87E2      		ldi r24,lo8(39)
 799 01ee 92E0      		ldi r25,lo8(2)
 800               	.LVL86:
 801               		.loc 1 774 28 view .LVU197
 802 01f0 00C0      		rjmp .L34
 803               	.LVL87:
 804               	.L57:
 805               		.loc 1 774 28 view .LVU198
 806 01f2 8FE6      		ldi r24,lo8(111)
 807 01f4 90E0      		ldi r25,0
 808               	.LVL88:
 809               		.loc 1 774 28 view .LVU199
 810 01f6 00C0      		rjmp .L34
 811               	.LVL89:
 812               	.L58:
 813               		.loc 1 774 28 view .LVU200
 814 01f8 80E7      		ldi r24,lo8(112)
 815 01fa 90E0      		ldi r25,0
 816               	.LVL90:
 817               		.loc 1 774 28 view .LVU201
 818 01fc 00C0      		rjmp .L34
 819               	.LVL91:
 820               	.L59:
 821               		.loc 1 774 28 view .LVU202
 822 01fe 8AE2      		ldi r24,lo8(42)
 823 0200 92E0      		ldi r25,lo8(2)
 824               	.LVL92:
 825               		.loc 1 774 28 view .LVU203
 826 0202 00C0      		rjmp .L34
 827               	.L23:
 828               	/* epilogue start */
 775:tmk_core/common/action.c ****     }
 776:tmk_core/common/action.c **** 
 777:tmk_core/common/action.c ****     #ifdef MOUSEKEY_ENABLE
 778:tmk_core/common/action.c ****       else if IS_MOUSEKEY(code) {
 779:tmk_core/common/action.c ****         mousekey_on(code);
 780:tmk_core/common/action.c ****         mousekey_send();
 781:tmk_core/common/action.c ****       }
 782:tmk_core/common/action.c ****     #endif
 783:tmk_core/common/action.c **** }
 829               		.loc 1 783 1 view .LVU204
 830 0204 0895      		ret
 831               		.cfi_endproc
 832               	.LFE113:
 834               		.section	.text.unregister_code,"ax",@progbits
 835               	.global	unregister_code
 837               	unregister_code:
 838               	.LVL93:
 839               	.LFB114:
 784:tmk_core/common/action.c **** 
 785:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 786:tmk_core/common/action.c ****  *
 787:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 788:tmk_core/common/action.c ****  */
 789:tmk_core/common/action.c **** void unregister_code(uint8_t code)
 790:tmk_core/common/action.c **** {
 840               		.loc 1 790 1 is_stmt 1 view -0
 841               		.cfi_startproc
 842               	/* prologue: function */
 843               	/* frame size = 0 */
 844               	/* stack size = 0 */
 845               	.L__stack_usage = 0
 791:tmk_core/common/action.c ****     if (code == KC_NO) {
 846               		.loc 1 791 5 view .LVU206
 847               		.loc 1 791 8 is_stmt 0 view .LVU207
 848 0000 8823      		tst r24
 849 0002 01F4      		brne .+2
 850 0004 00C0      		rjmp .L62
 792:tmk_core/common/action.c ****         return;
 793:tmk_core/common/action.c ****     }
 794:tmk_core/common/action.c **** 
 795:tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 796:tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 851               		.loc 1 796 10 is_stmt 1 view .LVU208
 852               		.loc 1 796 13 is_stmt 0 view .LVU209
 853 0006 8238      		cpi r24,lo8(-126)
 854 0008 01F4      		brne .L65
 797:tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 798:tmk_core/common/action.c ****         // Resync: ignore if caps lock already is off
 799:tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
 855               		.loc 1 799 9 is_stmt 1 view .LVU210
 856               		.loc 1 799 15 is_stmt 0 view .LVU211
 857 000a 0E94 0000 		call host_keyboard_leds
 858               	.LVL94:
 859               		.loc 1 799 12 view .LVU212
 860 000e 81FF      		sbrs r24,1
 861 0010 00C0      		rjmp .L62
 800:tmk_core/common/action.c **** #endif
 801:tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 862               		.loc 1 801 9 is_stmt 1 view .LVU213
 863 0012 89E3      		ldi r24,lo8(57)
 864 0014 0E94 0000 		call add_key
 865               	.LVL95:
 802:tmk_core/common/action.c ****         send_keyboard_report();
 866               		.loc 1 802 9 view .LVU214
 867 0018 0E94 0000 		call send_keyboard_report
 868               	.LVL96:
 803:tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 869               		.loc 1 803 9 view .LVU215
 870 001c 89E3      		ldi r24,lo8(57)
 871               	.L81:
 804:tmk_core/common/action.c ****         send_keyboard_report();
 805:tmk_core/common/action.c ****     }
 806:tmk_core/common/action.c **** 
 807:tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 808:tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 809:tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
 810:tmk_core/common/action.c **** #endif
 811:tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 812:tmk_core/common/action.c ****         send_keyboard_report();
 813:tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 872               		.loc 1 813 9 is_stmt 0 view .LVU216
 873 001e 0E94 0000 		call del_key
 874               	.LVL97:
 875               	.L82:
 814:tmk_core/common/action.c ****         send_keyboard_report();
 876               		.loc 1 814 9 is_stmt 1 view .LVU217
 877 0022 0C94 0000 		jmp send_keyboard_report
 878               	.LVL98:
 879               	.L65:
 807:tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 880               		.loc 1 807 10 view .LVU218
 807:tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 881               		.loc 1 807 13 is_stmt 0 view .LVU219
 882 0026 8338      		cpi r24,lo8(-125)
 883 0028 01F4      		brne .L67
 809:tmk_core/common/action.c **** #endif
 884               		.loc 1 809 9 is_stmt 1 view .LVU220
 809:tmk_core/common/action.c **** #endif
 885               		.loc 1 809 15 is_stmt 0 view .LVU221
 886 002a 0E94 0000 		call host_keyboard_leds
 887               	.LVL99:
 809:tmk_core/common/action.c **** #endif
 888               		.loc 1 809 12 view .LVU222
 889 002e 80FF      		sbrs r24,0
 890 0030 00C0      		rjmp .L62
 811:tmk_core/common/action.c ****         send_keyboard_report();
 891               		.loc 1 811 9 is_stmt 1 view .LVU223
 892 0032 83E5      		ldi r24,lo8(83)
 893 0034 0E94 0000 		call add_key
 894               	.LVL100:
 812:tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 895               		.loc 1 812 9 view .LVU224
 896 0038 0E94 0000 		call send_keyboard_report
 897               	.LVL101:
 813:tmk_core/common/action.c ****         send_keyboard_report();
 898               		.loc 1 813 9 view .LVU225
 899 003c 83E5      		ldi r24,lo8(83)
 900 003e 00C0      		rjmp .L81
 901               	.LVL102:
 902               	.L67:
 815:tmk_core/common/action.c ****     }
 816:tmk_core/common/action.c **** 
 817:tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 903               		.loc 1 817 10 view .LVU226
 904               		.loc 1 817 13 is_stmt 0 view .LVU227
 905 0040 8438      		cpi r24,lo8(-124)
 906 0042 01F4      		brne .L68
 818:tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 819:tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
 907               		.loc 1 819 9 is_stmt 1 view .LVU228
 908               		.loc 1 819 15 is_stmt 0 view .LVU229
 909 0044 0E94 0000 		call host_keyboard_leds
 910               	.LVL103:
 911               		.loc 1 819 12 view .LVU230
 912 0048 82FF      		sbrs r24,2
 913 004a 00C0      		rjmp .L62
 820:tmk_core/common/action.c **** #endif
 821:tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 914               		.loc 1 821 9 is_stmt 1 view .LVU231
 915 004c 87E4      		ldi r24,lo8(71)
 916 004e 0E94 0000 		call add_key
 917               	.LVL104:
 822:tmk_core/common/action.c ****         send_keyboard_report();
 918               		.loc 1 822 9 view .LVU232
 919 0052 0E94 0000 		call send_keyboard_report
 920               	.LVL105:
 823:tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 921               		.loc 1 823 9 view .LVU233
 922 0056 87E4      		ldi r24,lo8(71)
 923 0058 00C0      		rjmp .L81
 924               	.LVL106:
 925               	.L68:
 824:tmk_core/common/action.c ****         send_keyboard_report();
 825:tmk_core/common/action.c ****     }
 826:tmk_core/common/action.c **** #endif
 827:tmk_core/common/action.c **** 
 828:tmk_core/common/action.c ****     else if IS_KEY(code) {
 926               		.loc 1 828 10 view .LVU234
 927               		.loc 1 828 13 is_stmt 0 view .LVU235
 928 005a 9CEF      		ldi r25,lo8(-4)
 929 005c 980F      		add r25,r24
 930 005e 913A      		cpi r25,lo8(-95)
 931 0060 00F0      		brlo .L81
 829:tmk_core/common/action.c ****         del_key(code);
 830:tmk_core/common/action.c ****         send_keyboard_report();
 831:tmk_core/common/action.c ****     }
 832:tmk_core/common/action.c ****     else if IS_MOD(code) {
 932               		.loc 1 832 10 is_stmt 1 view .LVU236
 933               		.loc 1 832 13 is_stmt 0 view .LVU237
 934 0062 90E2      		ldi r25,lo8(32)
 935 0064 980F      		add r25,r24
 936 0066 9830      		cpi r25,lo8(8)
 937 0068 00F4      		brsh .L70
 833:tmk_core/common/action.c ****         del_mods(MOD_BIT(code));
 938               		.loc 1 833 9 is_stmt 1 view .LVU238
 939               		.loc 1 833 18 is_stmt 0 view .LVU239
 940 006a 8770      		andi r24,lo8(7)
 941               	.LVL107:
 942               		.loc 1 833 9 view .LVU240
 943 006c 91E0      		ldi r25,lo8(1)
 944 006e 00C0      		rjmp 2f
 945               		1:
 946 0070 990F      		lsl r25
 947               		2:
 948 0072 8A95      		dec r24
 949 0074 02F4      		brpl 1b
 950 0076 892F      		mov r24,r25
 951 0078 0E94 0000 		call del_mods
 952               	.LVL108:
 834:tmk_core/common/action.c ****         send_keyboard_report();
 953               		.loc 1 834 9 is_stmt 1 view .LVU241
 954 007c 00C0      		rjmp .L82
 955               	.LVL109:
 956               	.L70:
 835:tmk_core/common/action.c ****     }
 836:tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 957               		.loc 1 836 10 view .LVU242
 958               		.loc 1 836 13 is_stmt 0 view .LVU243
 959 007e 9BE5      		ldi r25,lo8(91)
 960 0080 980F      		add r25,r24
 961 0082 9330      		cpi r25,lo8(3)
 962 0084 00F4      		brsh .L71
 837:tmk_core/common/action.c ****         host_system_send(0);
 963               		.loc 1 837 9 is_stmt 1 view .LVU244
 964 0086 90E0      		ldi r25,0
 965 0088 80E0      		ldi r24,0
 966               	.LVL110:
 967               		.loc 1 837 9 is_stmt 0 view .LVU245
 968 008a 0C94 0000 		jmp host_system_send
 969               	.LVL111:
 970               	.L71:
 838:tmk_core/common/action.c ****     }
 839:tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 971               		.loc 1 839 10 is_stmt 1 view .LVU246
 972               		.loc 1 839 13 is_stmt 0 view .LVU247
 973 008e 885A      		subi r24,lo8(-(88))
 974               	.LVL112:
 975               		.loc 1 839 13 view .LVU248
 976 0090 8731      		cpi r24,lo8(23)
 977 0092 00F4      		brsh .L62
 840:tmk_core/common/action.c ****         host_consumer_send(0);
 978               		.loc 1 840 9 is_stmt 1 view .LVU249
 979 0094 90E0      		ldi r25,0
 980 0096 80E0      		ldi r24,0
 981               	.LVL113:
 982               		.loc 1 840 9 is_stmt 0 view .LVU250
 983 0098 0C94 0000 		jmp host_consumer_send
 984               	.LVL114:
 985               	.L62:
 986               	/* epilogue start */
 841:tmk_core/common/action.c ****     }
 842:tmk_core/common/action.c ****     #ifdef MOUSEKEY_ENABLE
 843:tmk_core/common/action.c ****       else if IS_MOUSEKEY(code) {
 844:tmk_core/common/action.c ****         mousekey_off(code);
 845:tmk_core/common/action.c ****         mousekey_send();
 846:tmk_core/common/action.c ****       }
 847:tmk_core/common/action.c ****     #endif
 848:tmk_core/common/action.c **** }
 987               		.loc 1 848 1 view .LVU251
 988 009c 0895      		ret
 989               		.cfi_endproc
 990               	.LFE114:
 992               		.section	.text.tap_code,"ax",@progbits
 993               	.global	tap_code
 995               	tap_code:
 996               	.LVL115:
 997               	.LFB115:
 849:tmk_core/common/action.c **** 
 850:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 851:tmk_core/common/action.c ****  *
 852:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 853:tmk_core/common/action.c ****  */
 854:tmk_core/common/action.c **** void tap_code(uint8_t code) {
 998               		.loc 1 854 29 is_stmt 1 view -0
 999               		.cfi_startproc
 1000               		.loc 1 854 29 is_stmt 0 view .LVU253
 1001 0000 CF93      		push r28
 1002               	.LCFI6:
 1003               		.cfi_def_cfa_offset 3
 1004               		.cfi_offset 28, -2
 1005               	/* prologue: function */
 1006               	/* frame size = 0 */
 1007               	/* stack size = 1 */
 1008               	.L__stack_usage = 1
 1009 0002 C82F      		mov r28,r24
 855:tmk_core/common/action.c ****   register_code(code);
 1010               		.loc 1 855 3 is_stmt 1 view .LVU254
 1011 0004 0E94 0000 		call register_code
 1012               	.LVL116:
 856:tmk_core/common/action.c ****   #if TAP_CODE_DELAY > 0
 857:tmk_core/common/action.c ****     wait_ms(TAP_CODE_DELAY);
 858:tmk_core/common/action.c ****   #endif
 859:tmk_core/common/action.c ****   unregister_code(code);
 1013               		.loc 1 859 3 view .LVU255
 1014 0008 8C2F      		mov r24,r28
 1015               	/* epilogue start */
 860:tmk_core/common/action.c **** }
 1016               		.loc 1 860 1 is_stmt 0 view .LVU256
 1017 000a CF91      		pop r28
 1018               	.LVL117:
 859:tmk_core/common/action.c **** }
 1019               		.loc 1 859 3 view .LVU257
 1020 000c 0C94 0000 		jmp unregister_code
 1021               	.LVL118:
 859:tmk_core/common/action.c **** }
 1022               		.loc 1 859 3 view .LVU258
 1023               		.cfi_endproc
 1024               	.LFE115:
 1026               		.section	.text.register_mods,"ax",@progbits
 1027               	.global	register_mods
 1029               	register_mods:
 1030               	.LVL119:
 1031               	.LFB116:
 861:tmk_core/common/action.c **** 
 862:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 863:tmk_core/common/action.c ****  *
 864:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 865:tmk_core/common/action.c ****  */
 866:tmk_core/common/action.c **** void register_mods(uint8_t mods)
 867:tmk_core/common/action.c **** {
 1032               		.loc 1 867 1 is_stmt 1 view -0
 1033               		.cfi_startproc
 1034               	/* prologue: function */
 1035               	/* frame size = 0 */
 1036               	/* stack size = 0 */
 1037               	.L__stack_usage = 0
 868:tmk_core/common/action.c ****     if (mods) {
 1038               		.loc 1 868 5 view .LVU260
 1039               		.loc 1 868 8 is_stmt 0 view .LVU261
 1040 0000 8823      		tst r24
 1041 0002 01F0      		breq .L84
 869:tmk_core/common/action.c ****         add_mods(mods);
 1042               		.loc 1 869 9 is_stmt 1 view .LVU262
 1043 0004 0E94 0000 		call add_mods
 1044               	.LVL120:
 870:tmk_core/common/action.c ****         send_keyboard_report();
 1045               		.loc 1 870 9 view .LVU263
 1046 0008 0C94 0000 		jmp send_keyboard_report
 1047               	.LVL121:
 1048               	.L84:
 1049               	/* epilogue start */
 871:tmk_core/common/action.c ****     }
 872:tmk_core/common/action.c **** }
 1050               		.loc 1 872 1 is_stmt 0 view .LVU264
 1051 000c 0895      		ret
 1052               		.cfi_endproc
 1053               	.LFE116:
 1055               		.section	.text.unregister_mods,"ax",@progbits
 1056               	.global	unregister_mods
 1058               	unregister_mods:
 1059               	.LVL122:
 1060               	.LFB117:
 873:tmk_core/common/action.c **** 
 874:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 875:tmk_core/common/action.c ****  *
 876:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 877:tmk_core/common/action.c ****  */
 878:tmk_core/common/action.c **** void unregister_mods(uint8_t mods)
 879:tmk_core/common/action.c **** {
 1061               		.loc 1 879 1 is_stmt 1 view -0
 1062               		.cfi_startproc
 1063               	/* prologue: function */
 1064               	/* frame size = 0 */
 1065               	/* stack size = 0 */
 1066               	.L__stack_usage = 0
 880:tmk_core/common/action.c ****     if (mods) {
 1067               		.loc 1 880 5 view .LVU266
 1068               		.loc 1 880 8 is_stmt 0 view .LVU267
 1069 0000 8823      		tst r24
 1070 0002 01F0      		breq .L86
 881:tmk_core/common/action.c ****         del_mods(mods);
 1071               		.loc 1 881 9 is_stmt 1 view .LVU268
 1072 0004 0E94 0000 		call del_mods
 1073               	.LVL123:
 882:tmk_core/common/action.c ****         send_keyboard_report();
 1074               		.loc 1 882 9 view .LVU269
 1075 0008 0C94 0000 		jmp send_keyboard_report
 1076               	.LVL124:
 1077               	.L86:
 1078               	/* epilogue start */
 883:tmk_core/common/action.c ****     }
 884:tmk_core/common/action.c **** }
 1079               		.loc 1 884 1 is_stmt 0 view .LVU270
 1080 000c 0895      		ret
 1081               		.cfi_endproc
 1082               	.LFE117:
 1084               		.section	.text.process_action,"ax",@progbits
 1085               	.global	process_action
 1087               	process_action:
 1088               	.LVL125:
 1089               	.LFB112:
 195:tmk_core/common/action.c ****     keyevent_t event = record->event;
 1090               		.loc 1 195 1 is_stmt 1 view -0
 1091               		.cfi_startproc
 195:tmk_core/common/action.c ****     keyevent_t event = record->event;
 1092               		.loc 1 195 1 is_stmt 0 view .LVU272
 1093 0000 8F92      		push r8
 1094               	.LCFI7:
 1095               		.cfi_def_cfa_offset 3
 1096               		.cfi_offset 8, -2
 1097 0002 9F92      		push r9
 1098               	.LCFI8:
 1099               		.cfi_def_cfa_offset 4
 1100               		.cfi_offset 9, -3
 1101 0004 AF92      		push r10
 1102               	.LCFI9:
 1103               		.cfi_def_cfa_offset 5
 1104               		.cfi_offset 10, -4
 1105 0006 BF92      		push r11
 1106               	.LCFI10:
 1107               		.cfi_def_cfa_offset 6
 1108               		.cfi_offset 11, -5
 1109 0008 CF92      		push r12
 1110               	.LCFI11:
 1111               		.cfi_def_cfa_offset 7
 1112               		.cfi_offset 12, -6
 1113 000a DF92      		push r13
 1114               	.LCFI12:
 1115               		.cfi_def_cfa_offset 8
 1116               		.cfi_offset 13, -7
 1117 000c EF92      		push r14
 1118               	.LCFI13:
 1119               		.cfi_def_cfa_offset 9
 1120               		.cfi_offset 14, -8
 1121 000e FF92      		push r15
 1122               	.LCFI14:
 1123               		.cfi_def_cfa_offset 10
 1124               		.cfi_offset 15, -9
 1125 0010 0F93      		push r16
 1126               	.LCFI15:
 1127               		.cfi_def_cfa_offset 11
 1128               		.cfi_offset 16, -10
 1129 0012 1F93      		push r17
 1130               	.LCFI16:
 1131               		.cfi_def_cfa_offset 12
 1132               		.cfi_offset 17, -11
 1133 0014 CF93      		push r28
 1134               	.LCFI17:
 1135               		.cfi_def_cfa_offset 13
 1136               		.cfi_offset 28, -12
 1137 0016 DF93      		push r29
 1138               	.LCFI18:
 1139               		.cfi_def_cfa_offset 14
 1140               		.cfi_offset 29, -13
 1141               	/* prologue: function */
 1142               	/* frame size = 0 */
 1143               	/* stack size = 12 */
 1144               	.L__stack_usage = 12
 1145 0018 7C01      		movw r14,r24
 1146 001a D62F      		mov r29,r22
 195:tmk_core/common/action.c ****     keyevent_t event = record->event;
 1147               		.loc 1 195 1 view .LVU273
 1148 001c C72F      		mov r28,r23
 196:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 1149               		.loc 1 196 5 is_stmt 1 view .LVU274
 1150               	.LVL126:
 198:tmk_core/common/action.c **** #endif
 1151               		.loc 1 198 5 view .LVU275
 198:tmk_core/common/action.c **** #endif
 1152               		.loc 1 198 36 is_stmt 0 view .LVU276
 1153 001e FC01      		movw r30,r24
 1154 0020 0581      		ldd r16,Z+5
 1155 0022 0295      		swap r16
 1156 0024 0F70      		andi r16,lo8(15)
 1157               	.LVL127:
 201:tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 1158               		.loc 1 201 5 is_stmt 1 view .LVU277
 201:tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 1159               		.loc 1 201 14 is_stmt 0 view .LVU278
 1160 0026 1281      		ldd r17,Z+2
 201:tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 1161               		.loc 1 201 8 view .LVU279
 1162 0028 1111      		cpse r17,__zero_reg__
 203:tmk_core/common/action.c ****     }
 1163               		.loc 1 203 9 is_stmt 1 view .LVU280
 1164 002a 0E94 0000 		call clear_weak_mods
 1165               	.LVL128:
 1166               	.L89:
 207:tmk_core/common/action.c ****     // notice we only clear the one shot layer if the pressed key is not a modifier.
 1167               		.loc 1 207 5 view .LVU281
 209:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1168               		.loc 1 209 5 view .LVU282
 209:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1169               		.loc 1 209 9 is_stmt 0 view .LVU283
 1170 002e 0E94 0000 		call is_oneshot_layer_active
 1171               	.LVL129:
 209:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1172               		.loc 1 209 9 view .LVU284
 1173 0032 C82E      		mov r12,r24
 209:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1174               		.loc 1 209 8 view .LVU285
 1175 0034 8823      		tst r24
 1176 0036 01F0      		breq .L90
 209:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1177               		.loc 1 209 35 discriminator 1 view .LVU286
 1178 0038 1123      		tst r17
 1179 003a 01F0      		breq .L178
 209:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1180               		.loc 1 209 55 discriminator 2 view .LVU287
 1181 003c 80E2      		ldi r24,lo8(32)
 209:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1182               		.loc 1 209 55 discriminator 2 view .LVU288
 1183 003e 8D0F      		add r24,r29
 209:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1184               		.loc 1 209 52 discriminator 2 view .LVU289
 1185 0040 8830      		cpi r24,lo8(8)
 1186 0042 00F0      		brlo .L178
 210:tmk_core/common/action.c ****         do_release_oneshot = !is_oneshot_layer_active();
 1187               		.loc 1 210 9 is_stmt 1 view .LVU290
 1188 0044 82E0      		ldi r24,lo8(2)
 1189 0046 0E94 0000 		call clear_oneshot_layer_state
 1190               	.LVL130:
 211:tmk_core/common/action.c ****     }
 1191               		.loc 1 211 9 view .LVU291
 211:tmk_core/common/action.c ****     }
 1192               		.loc 1 211 31 is_stmt 0 view .LVU292
 1193 004a 0E94 0000 		call is_oneshot_layer_active
 1194               	.LVL131:
 211:tmk_core/common/action.c ****     }
 1195               		.loc 1 211 9 view .LVU293
 1196 004e 91E0      		ldi r25,lo8(1)
 1197 0050 C82E      		mov r12,r24
 1198 0052 C926      		eor r12,r25
 1199               	.LVL132:
 1200               	.L90:
 215:tmk_core/common/action.c ****         /* Key and Mods */
 1201               		.loc 1 215 5 is_stmt 1 view .LVU294
 215:tmk_core/common/action.c ****         /* Key and Mods */
 1202               		.loc 1 215 24 is_stmt 0 view .LVU295
 1203 0054 DC2E      		mov r13,r28
 1204 0056 D294      		swap r13
 1205 0058 9FE0      		ldi r25,lo8(15)
 1206 005a D922      		and r13,r25
 215:tmk_core/common/action.c ****         /* Key and Mods */
 1207               		.loc 1 215 5 view .LVU296
 1208 005c ED2D      		mov r30,r13
 1209 005e F0E0      		ldi r31,0
 1210 0060 E050      		subi r30,lo8(-(gs(.L93)))
 1211 0062 F040      		sbci r31,hi8(-(gs(.L93)))
 1212 0064 0C94 0000 		jmp __tablejump2__
 1213               		.section	.jumptables.gcc.process_action,"a",@progbits
 1214               		.p2align	1
 1215               	.L93:
 1216 0000 0000      		.word gs(.L100)
 1217 0002 0000      		.word gs(.L100)
 1218 0004 0000      		.word gs(.L99)
 1219 0006 0000      		.word gs(.L99)
 1220 0008 0000      		.word gs(.L98)
 1221 000a 0000      		.word gs(.L91)
 1222 000c 0000      		.word gs(.L97)
 1223 000e 0000      		.word gs(.L91)
 1224 0010 0000      		.word gs(.L96)
 1225 0012 0000      		.word gs(.L91)
 1226 0014 0000      		.word gs(.L95)
 1227 0016 0000      		.word gs(.L95)
 1228 0018 0000      		.word gs(.L94)
 1229 001a 0000      		.word gs(.L91)
 1230 001c 0000      		.word gs(.L91)
 1231 001e 0000      		.word gs(.L92)
 1232               		.section	.text.process_action
 1233               	.LVL133:
 1234               	.L178:
 207:tmk_core/common/action.c ****     // notice we only clear the one shot layer if the pressed key is not a modifier.
 1235               		.loc 1 207 10 view .LVU297
 1236 0068 C12C      		mov r12,__zero_reg__
 1237 006a 00C0      		rjmp .L90
 1238               	.LVL134:
 1239               	.L100:
 1240               	.LBB24:
 220:tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 1241               		.loc 1 220 17 is_stmt 1 view .LVU298
 1242 006c 0C2F      		mov r16,r28
 1243               	.LVL135:
 220:tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 1244               		.loc 1 220 17 is_stmt 0 view .LVU299
 1245 006e 0F70      		andi r16,lo8(15)
 220:tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 1246               		.loc 1 220 48 view .LVU300
 1247 0070 C07F      		andi r28,lo8(-16)
 1248               	.LVL136:
 220:tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 1249               		.loc 1 220 25 view .LVU301
 1250 0072 01F0      		breq .L101
 220:tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 1251               		.loc 1 220 25 discriminator 2 view .LVU302
 1252 0074 0295      		swap r16
 1253 0076 007F      		andi r16,lo8(-16)
 1254               	.L101:
 1255               	.LVL137:
 222:tmk_core/common/action.c ****                     if (mods) {
 1256               		.loc 1 222 17 is_stmt 1 discriminator 4 view .LVU303
 222:tmk_core/common/action.c ****                     if (mods) {
 1257               		.loc 1 222 20 is_stmt 0 discriminator 4 view .LVU304
 1258 0078 1123      		tst r17
 1259 007a 01F0      		breq .L102
 223:tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 1260               		.loc 1 223 21 is_stmt 1 view .LVU305
 223:tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 1261               		.loc 1 223 24 is_stmt 0 view .LVU306
 1262 007c 0023      		tst r16
 1263 007e 01F0      		breq .L229
 224:tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 1264               		.loc 1 224 25 is_stmt 1 view .LVU307
 224:tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 1265               		.loc 1 224 29 is_stmt 0 view .LVU308
 1266 0080 80E2      		ldi r24,lo8(32)
 1267 0082 8D0F      		add r24,r29
 224:tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 1268               		.loc 1 224 28 view .LVU309
 1269 0084 8830      		cpi r24,lo8(8)
 1270 0086 00F0      		brlo .L104
 224:tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 1271               		.loc 1 224 53 discriminator 1 view .LVU310
 1272 0088 D111      		cpse r29,__zero_reg__
 1273 008a 00C0      		rjmp .L105
 1274               	.L104:
 228:tmk_core/common/action.c ****                         } else {
 1275               		.loc 1 228 29 is_stmt 1 view .LVU311
 1276 008c 802F      		mov r24,r16
 1277 008e 0E94 0000 		call add_mods
 1278               	.LVL138:
 1279               	.L106:
 232:tmk_core/common/action.c ****                     }
 1280               		.loc 1 232 25 view .LVU312
 1281 0092 0E94 0000 		call send_keyboard_report
 1282               	.LVL139:
 234:tmk_core/common/action.c ****                 } else {
 1283               		.loc 1 234 21 view .LVU313
 1284               	.L229:
 234:tmk_core/common/action.c ****                 } else {
 1285               		.loc 1 234 21 is_stmt 0 view .LVU314
 1286               	.LBE24:
 511:tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 1287               		.loc 1 511 75 is_stmt 1 view .LVU315
 512:tmk_core/common/action.c ****                         } else {
 1288               		.loc 1 512 29 view .LVU316
 1289 0096 8D2F      		mov r24,r29
 1290 0098 0E94 0000 		call register_code
 1291               	.LVL140:
 1292 009c 00C0      		rjmp .L91
 1293               	.LVL141:
 1294               	.L105:
 1295               	.LBB25:
 230:tmk_core/common/action.c ****                         }
 1296               		.loc 1 230 29 view .LVU317
 1297 009e 802F      		mov r24,r16
 1298 00a0 0E94 0000 		call add_weak_mods
 1299               	.LVL142:
 1300 00a4 00C0      		rjmp .L106
 1301               	.L102:
 236:tmk_core/common/action.c ****                     if (mods) {
 1302               		.loc 1 236 21 view .LVU318
 1303 00a6 8D2F      		mov r24,r29
 1304 00a8 0E94 0000 		call unregister_code
 1305               	.LVL143:
 237:tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 1306               		.loc 1 237 21 view .LVU319
 237:tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 1307               		.loc 1 237 24 is_stmt 0 view .LVU320
 1308 00ac 0023      		tst r16
 1309 00ae 01F0      		breq .L91
 238:tmk_core/common/action.c ****                             del_mods(mods);
 1310               		.loc 1 238 25 is_stmt 1 view .LVU321
 238:tmk_core/common/action.c ****                             del_mods(mods);
 1311               		.loc 1 238 29 is_stmt 0 view .LVU322
 1312 00b0 80E2      		ldi r24,lo8(32)
 1313 00b2 8D0F      		add r24,r29
 238:tmk_core/common/action.c ****                             del_mods(mods);
 1314               		.loc 1 238 28 view .LVU323
 1315 00b4 8830      		cpi r24,lo8(8)
 1316 00b6 00F0      		brlo .L108
 238:tmk_core/common/action.c ****                             del_mods(mods);
 1317               		.loc 1 238 53 discriminator 1 view .LVU324
 1318 00b8 D111      		cpse r29,__zero_reg__
 1319 00ba 00C0      		rjmp .L109
 1320               	.L108:
 239:tmk_core/common/action.c ****                         } else {
 1321               		.loc 1 239 29 is_stmt 1 view .LVU325
 1322 00bc 802F      		mov r24,r16
 1323 00be 0E94 0000 		call del_mods
 1324               	.LVL144:
 1325               	.L110:
 243:tmk_core/common/action.c ****                     }
 1326               		.loc 1 243 25 view .LVU326
 1327 00c2 0E94 0000 		call send_keyboard_report
 1328               	.LVL145:
 1329               	.L91:
 243:tmk_core/common/action.c ****                     }
 1330               		.loc 1 243 25 is_stmt 0 view .LVU327
 1331               	.LBE25:
 641:tmk_core/common/action.c ****         case ACT_LAYER:
 1332               		.loc 1 641 5 is_stmt 1 view .LVU328
 1333 00c6 F8E0      		ldi r31,lo8(8)
 1334 00c8 DF16      		cp r13,r31
 1335 00ca 01F0      		breq .L172
 1336 00cc DF16      		cp r13,r31
 1337 00ce 00F0      		brlo .L173
 1338 00d0 86EF      		ldi r24,lo8(-10)
 1339 00d2 8D0D      		add r24,r13
 1340 00d4 8F70      		andi r24,lo8(15)
 1341 00d6 8230      		cpi r24,lo8(2)
 1342 00d8 00F4      		brsh .L173
 1343               	.L172:
 647:tmk_core/common/action.c ****             break;
 1344               		.loc 1 647 13 view .LVU329
 1345 00da 0E94 0000 		call host_keyboard_leds
 1346               	.LVL146:
 1347 00de 0E94 0000 		call led_set
 1348               	.LVL147:
 648:tmk_core/common/action.c ****         default:
 1349               		.loc 1 648 13 view .LVU330
 1350               	.L173:
 684:tmk_core/common/action.c ****         record->event.pressed = false;
 1351               		.loc 1 684 5 view .LVU331
 684:tmk_core/common/action.c ****         record->event.pressed = false;
 1352               		.loc 1 684 8 is_stmt 0 view .LVU332
 1353 00e2 CC20      		tst r12
 1354 00e4 01F4      		brne .+2
 1355 00e6 00C0      		rjmp .L88
 684:tmk_core/common/action.c ****         record->event.pressed = false;
 1356               		.loc 1 684 33 discriminator 1 view .LVU333
 1357 00e8 0E94 0000 		call get_oneshot_layer_state
 1358               	.LVL148:
 684:tmk_core/common/action.c ****         record->event.pressed = false;
 1359               		.loc 1 684 28 discriminator 1 view .LVU334
 1360 00ec 80FD      		sbrc r24,0
 1361 00ee 00C0      		rjmp .L88
 685:tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 1362               		.loc 1 685 9 is_stmt 1 view .LVU335
 685:tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 1363               		.loc 1 685 31 is_stmt 0 view .LVU336
 1364 00f0 F701      		movw r30,r14
 1365 00f2 1282      		std Z+2,__zero_reg__
 686:tmk_core/common/action.c ****         process_record(record);
 1366               		.loc 1 686 9 is_stmt 1 view .LVU337
 1367 00f4 0E94 0000 		call get_oneshot_layer
 1368               	.LVL149:
 1369 00f8 0E94 0000 		call layer_on
 1370               	.LVL150:
 687:tmk_core/common/action.c ****         layer_off(get_oneshot_layer());
 1371               		.loc 1 687 9 view .LVU338
 1372 00fc C701      		movw r24,r14
 1373 00fe 0E94 0000 		call process_record
 1374               	.LVL151:
 688:tmk_core/common/action.c ****     }
 1375               		.loc 1 688 9 view .LVU339
 1376 0102 0E94 0000 		call get_oneshot_layer
 1377               	.LVL152:
 1378               	/* epilogue start */
 691:tmk_core/common/action.c **** 
 1379               		.loc 1 691 1 is_stmt 0 view .LVU340
 1380 0106 DF91      		pop r29
 1381               	.LVL153:
 691:tmk_core/common/action.c **** 
 1382               		.loc 1 691 1 view .LVU341
 1383 0108 CF91      		pop r28
 691:tmk_core/common/action.c **** 
 1384               		.loc 1 691 1 view .LVU342
 1385 010a 1F91      		pop r17
 1386 010c 0F91      		pop r16
 1387 010e FF90      		pop r15
 1388 0110 EF90      		pop r14
 1389               	.LVL154:
 691:tmk_core/common/action.c **** 
 1390               		.loc 1 691 1 view .LVU343
 1391 0112 DF90      		pop r13
 1392 0114 CF90      		pop r12
 1393               	.LVL155:
 691:tmk_core/common/action.c **** 
 1394               		.loc 1 691 1 view .LVU344
 1395 0116 BF90      		pop r11
 1396 0118 AF90      		pop r10
 1397 011a 9F90      		pop r9
 1398 011c 8F90      		pop r8
 688:tmk_core/common/action.c ****     }
 1399               		.loc 1 688 9 view .LVU345
 1400 011e 0C94 0000 		jmp layer_off
 1401               	.LVL156:
 1402               	.L109:
 1403               	.LBB26:
 241:tmk_core/common/action.c ****                         }
 1404               		.loc 1 241 29 is_stmt 1 view .LVU346
 1405 0122 802F      		mov r24,r16
 1406 0124 0E94 0000 		call del_weak_mods
 1407               	.LVL157:
 1408 0128 00C0      		rjmp .L110
 1409               	.LVL158:
 1410               	.L99:
 241:tmk_core/common/action.c ****                         }
 1411               		.loc 1 241 29 is_stmt 0 view .LVU347
 1412               	.LBE26:
 1413               	.LBB27:
 252:tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 1414               		.loc 1 252 17 is_stmt 1 view .LVU348
 1415 012a FC2F      		mov r31,r28
 1416 012c FF70      		andi r31,lo8(15)
 1417 012e BF2E      		mov r11,r31
 252:tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 1418               		.loc 1 252 48 is_stmt 0 view .LVU349
 1419 0130 C07F      		andi r28,lo8(-16)
 1420               	.LVL159:
 252:tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 1421               		.loc 1 252 25 view .LVU350
 1422 0132 C032      		cpi r28,lo8(32)
 1423 0134 01F0      		breq .L111
 252:tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 1424               		.loc 1 252 25 discriminator 2 view .LVU351
 1425 0136 B294      		swap r11
 1426 0138 80EF      		ldi r24,lo8(-16)
 1427 013a B822      		and r11,r24
 1428               	.L111:
 1429               	.LVL160:
 254:tmk_core/common/action.c ****     #ifndef NO_ACTION_ONESHOT
 1430               		.loc 1 254 17 is_stmt 1 discriminator 4 view .LVU352
 1431 013c DD23      		tst r29
 1432 013e 01F0      		breq .L112
 1433 0140 D130      		cpi r29,lo8(1)
 1434 0142 01F0      		breq .L113
 309:tmk_core/common/action.c ****                             if (tap_count > 0) {
 1435               		.loc 1 309 25 view .LVU353
 309:tmk_core/common/action.c ****                             if (tap_count > 0) {
 1436               		.loc 1 309 28 is_stmt 0 view .LVU354
 1437 0144 1123      		tst r17
 1438 0146 01F0      		breq .L121
 310:tmk_core/common/action.c **** #ifndef IGNORE_MOD_TAP_INTERRUPT
 1439               		.loc 1 310 29 is_stmt 1 view .LVU355
 310:tmk_core/common/action.c **** #ifndef IGNORE_MOD_TAP_INTERRUPT
 1440               		.loc 1 310 32 is_stmt 0 view .LVU356
 1441 0148 0023      		tst r16
 1442 014a 01F0      		breq .L230
 312:tmk_core/common/action.c ****                                     dprint("mods_tap: tap: cancel: add_mods\n");
 1443               		.loc 1 312 33 is_stmt 1 view .LVU357
 312:tmk_core/common/action.c ****                                     dprint("mods_tap: tap: cancel: add_mods\n");
 1444               		.loc 1 312 37 is_stmt 0 view .LVU358
 1445 014c F701      		movw r30,r14
 1446 014e 8581      		ldd r24,Z+5
 312:tmk_core/common/action.c ****                                     dprint("mods_tap: tap: cancel: add_mods\n");
 1447               		.loc 1 312 36 view .LVU359
 1448 0150 80FF      		sbrs r24,0
 1449 0152 00C0      		rjmp .L229
 313:tmk_core/common/action.c ****                                     // ad hoc: set 0 to cancel tap
 1450               		.loc 1 313 80 is_stmt 1 view .LVU360
 315:tmk_core/common/action.c ****                                     register_mods(mods);
 1451               		.loc 1 315 37 view .LVU361
 315:tmk_core/common/action.c ****                                     register_mods(mods);
 1452               		.loc 1 315 55 is_stmt 0 view .LVU362
 1453 0154 8F70      		andi r24,lo8(15)
 1454 0156 8583      		std Z+5,r24
 1455 0158 00C0      		rjmp .L230
 1456               	.L112:
 258:tmk_core/common/action.c ****                             if (tap_count == 0) {
 1457               		.loc 1 258 25 is_stmt 1 view .LVU363
 258:tmk_core/common/action.c ****                             if (tap_count == 0) {
 1458               		.loc 1 258 28 is_stmt 0 view .LVU364
 1459 015a 1123      		tst r17
 1460 015c 01F0      		breq .L115
 259:tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: 0\n");
 1461               		.loc 1 259 29 is_stmt 1 view .LVU365
 259:tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: 0\n");
 1462               		.loc 1 259 32 is_stmt 0 view .LVU366
 1463 015e 0111      		cpse r16,__zero_reg__
 1464 0160 00C0      		rjmp .L116
 1465               	.L117:
 273:tmk_core/common/action.c ****                             }
 1466               		.loc 1 273 33 is_stmt 1 view .LVU367
 273:tmk_core/common/action.c ****                             }
 1467               		.loc 1 273 54 is_stmt 0 view .LVU368
 1468 0162 0E94 0000 		call get_oneshot_mods
 1469               	.LVL161:
 273:tmk_core/common/action.c ****                             }
 1470               		.loc 1 273 33 view .LVU369
 1471 0166 8B29      		or r24,r11
 1472               	.LVL162:
 1473               	.L227:
 316:tmk_core/common/action.c ****                                 } else
 1474               		.loc 1 316 37 view .LVU370
 1475 0168 0E94 0000 		call register_mods
 1476               	.LVL163:
 1477 016c 00C0      		rjmp .L91
 1478               	.LVL164:
 1479               	.L116:
 262:tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 1480               		.loc 1 262 36 is_stmt 1 view .LVU371
 262:tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 1481               		.loc 1 262 39 is_stmt 0 view .LVU372
 1482 016e 0130      		cpi r16,lo8(1)
 1483 0170 01F4      		brne .L117
 263:tmk_core/common/action.c ****                                 set_oneshot_mods(mods | get_oneshot_mods());
 1484               		.loc 1 263 69 is_stmt 1 view .LVU373
 264:tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 1485               		.loc 1 264 33 view .LVU374
 264:tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 1486               		.loc 1 264 57 is_stmt 0 view .LVU375
 1487 0172 0E94 0000 		call get_oneshot_mods
 1488               	.LVL165:
 264:tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 1489               		.loc 1 264 33 view .LVU376
 1490 0176 8B29      		or r24,r11
 1491 0178 0E94 0000 		call set_oneshot_mods
 1492               	.LVL166:
 1493 017c 00C0      		rjmp .L91
 1494               	.L115:
 276:tmk_core/common/action.c ****                                 clear_oneshot_mods();
 1495               		.loc 1 276 29 is_stmt 1 view .LVU377
 276:tmk_core/common/action.c ****                                 clear_oneshot_mods();
 1496               		.loc 1 276 32 is_stmt 0 view .LVU378
 1497 017e 0111      		cpse r16,__zero_reg__
 1498 0180 00C0      		rjmp .L118
 1499               	.L234:
 291:tmk_core/common/action.c ****                                 unregister_mods(mods);
 1500               		.loc 1 291 33 is_stmt 1 view .LVU379
 1501 0182 0E94 0000 		call clear_oneshot_mods
 1502               	.LVL167:
 292:tmk_core/common/action.c ****                             }
 1503               		.loc 1 292 33 view .LVU380
 1504               	.L124:
 332:tmk_core/common/action.c ****                                 unregister_mods(mods);
 1505               		.loc 1 332 71 view .LVU381
 333:tmk_core/common/action.c ****                             }
 1506               		.loc 1 333 33 view .LVU382
 1507 0186 8B2D      		mov r24,r11
 1508               	.LVL168:
 1509               	.L228:
 333:tmk_core/common/action.c ****                             }
 1510               		.loc 1 333 33 is_stmt 0 view .LVU383
 1511               	.LBE27:
 442:tmk_core/common/action.c ****                     }
 1512               		.loc 1 442 25 view .LVU384
 1513 0188 0E94 0000 		call unregister_mods
 1514               	.LVL169:
 1515 018c 00C0      		rjmp .L91
 1516               	.LVL170:
 1517               	.L118:
 1518               	.LBB28:
 279:tmk_core/common/action.c ****                                 // Retain Oneshot mods
 1519               		.loc 1 279 36 is_stmt 1 view .LVU385
 279:tmk_core/common/action.c ****                                 // Retain Oneshot mods
 1520               		.loc 1 279 39 is_stmt 0 view .LVU386
 1521 018e 0130      		cpi r16,lo8(1)
 1522 0190 01F4      		brne .+2
 1523 0192 00C0      		rjmp .L91
 1524 0194 00C0      		rjmp .L234
 1525               	.L113:
 298:tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 1526               		.loc 1 298 25 is_stmt 1 view .LVU387
 298:tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 1527               		.loc 1 298 28 is_stmt 0 view .LVU388
 1528 0196 1123      		tst r17
 1529 0198 01F0      		breq .L120
 299:tmk_core/common/action.c ****                                 register_mods(mods);
 1530               		.loc 1 299 29 is_stmt 1 view .LVU389
 299:tmk_core/common/action.c ****                                 register_mods(mods);
 1531               		.loc 1 299 32 is_stmt 0 view .LVU390
 1532 019a 0230      		cpi r16,lo8(2)
 1533 019c 00F0      		brlo .+2
 1534 019e 00C0      		rjmp .L91
 1535               	.L230:
 316:tmk_core/common/action.c ****                                 } else
 1536               		.loc 1 316 37 is_stmt 1 view .LVU391
 1537 01a0 8B2D      		mov r24,r11
 1538 01a2 00C0      		rjmp .L227
 1539               	.L120:
 303:tmk_core/common/action.c ****                                 unregister_mods(mods);
 1540               		.loc 1 303 29 view .LVU392
 303:tmk_core/common/action.c ****                                 unregister_mods(mods);
 1541               		.loc 1 303 32 is_stmt 0 view .LVU393
 1542 01a4 0111      		cpse r16,__zero_reg__
 1543 01a6 00C0      		rjmp .L91
 1544 01a8 00C0      		rjmp .L124
 1545               	.L121:
 328:tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 1546               		.loc 1 328 29 is_stmt 1 view .LVU394
 328:tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 1547               		.loc 1 328 32 is_stmt 0 view .LVU395
 1548 01aa 0023      		tst r16
 1549 01ac 01F0      		breq .L124
 1550               	.LVL171:
 1551               	.L158:
 328:tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 1552               		.loc 1 328 32 view .LVU396
 1553               	.LBE28:
 523:tmk_core/common/action.c ****                         } else {
 1554               		.loc 1 523 29 is_stmt 1 view .LVU397
 1555 01ae 8D2F      		mov r24,r29
 1556 01b0 0E94 0000 		call unregister_code
 1557               	.LVL172:
 1558 01b4 00C0      		rjmp .L91
 1559               	.L98:
 344:tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 1560               		.loc 1 344 13 view .LVU398
 344:tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 1561               		.loc 1 344 33 is_stmt 0 view .LVU399
 1562 01b6 8C2F      		mov r24,r28
 1563 01b8 8695      		lsr r24
 1564 01ba 8695      		lsr r24
 1565 01bc 8370      		andi r24,lo8(3)
 1566 01be 01F0      		breq .L125
 1567 01c0 8130      		cpi r24,lo8(1)
 1568 01c2 01F0      		breq .+2
 1569 01c4 00C0      		rjmp .L91
 353:tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 1570               		.loc 1 353 21 is_stmt 1 view .LVU400
 354:tmk_core/common/action.c ****                     } else {
 1571               		.loc 1 354 25 is_stmt 0 view .LVU401
 1572 01c6 8D2F      		mov r24,r29
 1573 01c8 9C2F      		mov r25,r28
 1574 01ca 9370      		andi r25,lo8(3)
 353:tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 1575               		.loc 1 353 24 view .LVU402
 1576 01cc 1111      		cpse r17,__zero_reg__
 1577 01ce 00C0      		rjmp .L231
 356:tmk_core/common/action.c ****                     }
 1578               		.loc 1 356 25 is_stmt 1 view .LVU403
 1579 01d0 90E0      		ldi r25,0
 1580 01d2 80E0      		ldi r24,0
 1581               	.L231:
 1582 01d4 0E94 0000 		call host_consumer_send
 1583               	.LVL173:
 1584 01d8 00C0      		rjmp .L91
 1585               	.L125:
 346:tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 1586               		.loc 1 346 21 view .LVU404
 347:tmk_core/common/action.c ****                     } else {
 1587               		.loc 1 347 25 is_stmt 0 view .LVU405
 1588 01da 8D2F      		mov r24,r29
 1589 01dc 9C2F      		mov r25,r28
 1590 01de 9370      		andi r25,lo8(3)
 346:tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 1591               		.loc 1 346 24 view .LVU406
 1592 01e0 1111      		cpse r17,__zero_reg__
 1593 01e2 00C0      		rjmp .L225
 349:tmk_core/common/action.c ****                     }
 1594               		.loc 1 349 25 is_stmt 1 view .LVU407
 1595 01e4 90E0      		ldi r25,0
 1596 01e6 80E0      		ldi r24,0
 1597               	.L225:
 1598 01e8 0E94 0000 		call host_system_send
 1599               	.LVL174:
 1600 01ec 00C0      		rjmp .L91
 1601               	.L96:
 402:tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1602               		.loc 1 402 13 view .LVU408
 402:tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1603               		.loc 1 402 39 is_stmt 0 view .LVU409
 1604 01ee 8C2F      		mov r24,r28
 1605 01f0 8370      		andi r24,lo8(3)
 402:tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1606               		.loc 1 402 16 view .LVU410
 1607 01f2 01F0      		breq .+2
 1608 01f4 00C0      		rjmp .L129
 404:tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 1609               		.loc 1 404 17 is_stmt 1 view .LVU411
 404:tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 1610               		.loc 1 404 20 is_stmt 0 view .LVU412
 1611 01f6 1111      		cpse r17,__zero_reg__
 1612 01f8 00C0      		rjmp .L91
 1613               	.LBB29:
 405:tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1614               		.loc 1 405 21 is_stmt 1 view .LVU413
 1615               	.LVL175:
 406:tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1616               		.loc 1 406 21 view .LVU414
 405:tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1617               		.loc 1 405 55 is_stmt 0 view .LVU415
 1618 01fa 2D2F      		mov r18,r29
 1619 01fc 2295      		swap r18
 1620 01fe 2695      		lsr r18
 1621 0200 2770      		andi r18,lo8(7)
 405:tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1622               		.loc 1 405 29 view .LVU416
 1623 0202 220F      		lsl r18
 1624 0204 220F      		lsl r18
 406:tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1625               		.loc 1 406 66 view .LVU417
 1626 0206 6D2F      		mov r22,r29
 1627 0208 6F70      		andi r22,lo8(15)
 406:tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1628               		.loc 1 406 38 view .LVU418
 1629 020a 862E      		mov r8,r22
 1630 020c 912C      		mov r9,__zero_reg__
 1631 020e B12C      		mov r11,__zero_reg__
 1632 0210 A12C      		mov r10,__zero_reg__
 406:tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1633               		.loc 1 406 30 view .LVU419
 1634 0212 022E      		mov r0,r18
 1635 0214 00C0      		rjmp 2f
 1636               		1:
 1637 0216 880C      		lsl r8
 1638 0218 991C      		rol r9
 1639 021a AA1C      		rol r10
 1640 021c BB1C      		rol r11
 1641               		2:
 1642 021e 0A94      		dec r0
 1643 0220 02F4      		brpl 1b
 1644               	.LVL176:
 407:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1645               		.loc 1 407 21 is_stmt 1 view .LVU420
 407:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1646               		.loc 1 407 91 is_stmt 0 view .LVU421
 1647 0222 60E0      		ldi r22,0
 1648 0224 70E0      		ldi r23,0
 1649 0226 CB01      		movw r24,r22
 1650 0228 D4FF      		sbrs r29,4
 1651 022a 00C0      		rjmp .L130
 407:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1652               		.loc 1 407 82 discriminator 1 view .LVU422
 1653 022c 6FE0      		ldi r22,lo8(15)
 1654 022e 70E0      		ldi r23,0
 1655 0230 80E0      		ldi r24,0
 1656 0232 90E0      		ldi r25,0
 1657 0234 00C0      		rjmp 2f
 1658               		1:
 1659 0236 660F      		lsl r22
 1660 0238 771F      		rol r23
 1661 023a 881F      		rol r24
 1662 023c 991F      		rol r25
 1663               		2:
 1664 023e 2A95      		dec r18
 1665 0240 02F4      		brpl 1b
 407:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1666               		.loc 1 407 91 discriminator 1 view .LVU423
 1667 0242 6095      		com r22
 1668 0244 7095      		com r23
 1669 0246 8095      		com r24
 1670 0248 9095      		com r25
 1671               	.L130:
 1672               	.LVL177:
 408:tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1673               		.loc 1 408 21 is_stmt 1 discriminator 4 view .LVU424
 408:tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1674               		.loc 1 408 47 is_stmt 0 discriminator 4 view .LVU425
 1675 024a C695      		lsr r28
 1676 024c C695      		lsr r28
 1677               	.LVL178:
 408:tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1678               		.loc 1 408 47 discriminator 4 view .LVU426
 1679 024e C370      		andi r28,lo8(3)
 1680 0250 C230      		cpi r28,lo8(2)
 1681 0252 01F0      		breq .L131
 1682 0254 00F4      		brsh .L132
 1683 0256 6829      		or r22,r8
 1684               	.LVL179:
 408:tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1685               		.loc 1 408 47 discriminator 4 view .LVU427
 1686 0258 7929      		or r23,r9
 1687 025a 8A29      		or r24,r10
 1688 025c 9B29      		or r25,r11
 1689 025e C130      		cpi r28,lo8(1)
 1690 0260 01F0      		breq .L232
 409:tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 1691               		.loc 1 409 42 is_stmt 1 view .LVU428
 1692 0262 0E94 0000 		call default_layer_and
 1693               	.LVL180:
 409:tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 1694               		.loc 1 409 74 view .LVU429
 409:tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 1695               		.loc 1 409 25 is_stmt 0 view .LVU430
 1696 0266 00C0      		rjmp .L91
 1697               	.LVL181:
 1698               	.L131:
 411:tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1699               		.loc 1 411 42 is_stmt 1 view .LVU431
 1700 0268 6829      		or r22,r8
 1701               	.LVL182:
 411:tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1702               		.loc 1 411 42 is_stmt 0 view .LVU432
 1703 026a 7929      		or r23,r9
 1704 026c 8A29      		or r24,r10
 1705 026e 9B29      		or r25,r11
 1706 0270 0E94 0000 		call default_layer_xor
 1707               	.LVL183:
 411:tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1708               		.loc 1 411 74 is_stmt 1 view .LVU433
 411:tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1709               		.loc 1 411 25 is_stmt 0 view .LVU434
 1710 0274 00C0      		rjmp .L91
 1711               	.LVL184:
 1712               	.L132:
 412:tmk_core/common/action.c ****                     }
 1713               		.loc 1 412 42 is_stmt 1 view .LVU435
 1714 0276 0E94 0000 		call default_layer_and
 1715               	.LVL185:
 412:tmk_core/common/action.c ****                     }
 1716               		.loc 1 412 67 view .LVU436
 1717 027a C501      		movw r24,r10
 1718 027c B401      		movw r22,r8
 1719               	.L232:
 1720 027e 0E94 0000 		call default_layer_or
 1721               	.LVL186:
 412:tmk_core/common/action.c ****                     }
 1722               		.loc 1 412 91 view .LVU437
 412:tmk_core/common/action.c ****                     }
 1723               		.loc 1 412 25 is_stmt 0 view .LVU438
 1724 0282 00C0      		rjmp .L91
 1725               	.LVL187:
 1726               	.L129:
 412:tmk_core/common/action.c ****                     }
 1727               		.loc 1 412 25 view .LVU439
 1728               	.LBE29:
 417:tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1729               		.loc 1 417 17 is_stmt 1 view .LVU440
 417:tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1730               		.loc 1 417 21 is_stmt 0 view .LVU441
 1731 0284 8695      		lsr r24
 1732 0286 1123      		tst r17
 1733 0288 01F0      		breq .L135
 417:tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1734               		.loc 1 417 21 discriminator 1 view .LVU442
 1735 028a 8C2F      		mov r24,r28
 1736 028c 8170      		andi r24,lo8(1)
 1737               	.L135:
 417:tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1738               		.loc 1 417 20 discriminator 4 view .LVU443
 1739 028e 8823      		tst r24
 1740 0290 01F4      		brne .+2
 1741 0292 00C0      		rjmp .L91
 1742               	.LBB30:
 419:tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1743               		.loc 1 419 21 is_stmt 1 view .LVU444
 1744               	.LVL188:
 420:tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1745               		.loc 1 420 21 view .LVU445
 419:tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1746               		.loc 1 419 55 is_stmt 0 view .LVU446
 1747 0294 2D2F      		mov r18,r29
 1748 0296 2295      		swap r18
 1749 0298 2695      		lsr r18
 1750 029a 2770      		andi r18,lo8(7)
 419:tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1751               		.loc 1 419 29 view .LVU447
 1752 029c 220F      		lsl r18
 1753 029e 220F      		lsl r18
 420:tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1754               		.loc 1 420 66 view .LVU448
 1755 02a0 6D2F      		mov r22,r29
 1756 02a2 6F70      		andi r22,lo8(15)
 420:tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1757               		.loc 1 420 38 view .LVU449
 1758 02a4 862E      		mov r8,r22
 1759 02a6 912C      		mov r9,__zero_reg__
 1760 02a8 B12C      		mov r11,__zero_reg__
 1761 02aa A12C      		mov r10,__zero_reg__
 420:tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1762               		.loc 1 420 30 view .LVU450
 1763 02ac 022E      		mov r0,r18
 1764 02ae 00C0      		rjmp 2f
 1765               		1:
 1766 02b0 880C      		lsl r8
 1767 02b2 991C      		rol r9
 1768 02b4 AA1C      		rol r10
 1769 02b6 BB1C      		rol r11
 1770               		2:
 1771 02b8 0A94      		dec r0
 1772 02ba 02F4      		brpl 1b
 1773               	.LVL189:
 421:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1774               		.loc 1 421 21 is_stmt 1 view .LVU451
 421:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1775               		.loc 1 421 91 is_stmt 0 view .LVU452
 1776 02bc 60E0      		ldi r22,0
 1777 02be 70E0      		ldi r23,0
 1778 02c0 CB01      		movw r24,r22
 1779 02c2 D4FF      		sbrs r29,4
 1780 02c4 00C0      		rjmp .L136
 421:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1781               		.loc 1 421 82 discriminator 1 view .LVU453
 1782 02c6 6FE0      		ldi r22,lo8(15)
 1783 02c8 70E0      		ldi r23,0
 1784 02ca 80E0      		ldi r24,0
 1785 02cc 90E0      		ldi r25,0
 1786 02ce 00C0      		rjmp 2f
 1787               		1:
 1788 02d0 660F      		lsl r22
 1789 02d2 771F      		rol r23
 1790 02d4 881F      		rol r24
 1791 02d6 991F      		rol r25
 1792               		2:
 1793 02d8 2A95      		dec r18
 1794 02da 02F4      		brpl 1b
 421:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1795               		.loc 1 421 91 discriminator 1 view .LVU454
 1796 02dc 6095      		com r22
 1797 02de 7095      		com r23
 1798 02e0 8095      		com r24
 1799 02e2 9095      		com r25
 1800               	.L136:
 1801               	.LVL190:
 422:tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1802               		.loc 1 422 21 is_stmt 1 discriminator 4 view .LVU455
 422:tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1803               		.loc 1 422 47 is_stmt 0 discriminator 4 view .LVU456
 1804 02e4 C695      		lsr r28
 1805 02e6 C695      		lsr r28
 1806               	.LVL191:
 422:tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1807               		.loc 1 422 47 discriminator 4 view .LVU457
 1808 02e8 C370      		andi r28,lo8(3)
 1809 02ea C230      		cpi r28,lo8(2)
 1810 02ec 01F0      		breq .L137
 1811 02ee 00F4      		brsh .L138
 1812 02f0 6829      		or r22,r8
 1813               	.LVL192:
 422:tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1814               		.loc 1 422 47 discriminator 4 view .LVU458
 1815 02f2 7929      		or r23,r9
 1816 02f4 8A29      		or r24,r10
 1817 02f6 9B29      		or r25,r11
 1818 02f8 C130      		cpi r28,lo8(1)
 1819 02fa 01F0      		breq .L233
 423:tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 1820               		.loc 1 423 42 is_stmt 1 view .LVU459
 1821 02fc 0E94 0000 		call layer_and
 1822               	.LVL193:
 423:tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 1823               		.loc 1 423 66 view .LVU460
 423:tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 1824               		.loc 1 423 25 is_stmt 0 view .LVU461
 1825 0300 00C0      		rjmp .L91
 1826               	.LVL194:
 1827               	.L137:
 425:tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1828               		.loc 1 425 42 is_stmt 1 view .LVU462
 1829 0302 6829      		or r22,r8
 1830               	.LVL195:
 425:tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1831               		.loc 1 425 42 is_stmt 0 view .LVU463
 1832 0304 7929      		or r23,r9
 1833 0306 8A29      		or r24,r10
 1834 0308 9B29      		or r25,r11
 1835 030a 0E94 0000 		call layer_xor
 1836               	.LVL196:
 425:tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1837               		.loc 1 425 66 is_stmt 1 view .LVU464
 425:tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1838               		.loc 1 425 25 is_stmt 0 view .LVU465
 1839 030e 00C0      		rjmp .L91
 1840               	.LVL197:
 1841               	.L138:
 426:tmk_core/common/action.c ****                     }
 1842               		.loc 1 426 42 is_stmt 1 view .LVU466
 1843 0310 0E94 0000 		call layer_and
 1844               	.LVL198:
 426:tmk_core/common/action.c ****                     }
 1845               		.loc 1 426 59 view .LVU467
 1846 0314 C501      		movw r24,r10
 1847 0316 B401      		movw r22,r8
 1848               	.L233:
 1849 0318 0E94 0000 		call layer_or
 1850               	.LVL199:
 426:tmk_core/common/action.c ****                     }
 1851               		.loc 1 426 75 view .LVU468
 426:tmk_core/common/action.c ****                     }
 1852               		.loc 1 426 25 is_stmt 0 view .LVU469
 1853 031c 00C0      		rjmp .L91
 1854               	.LVL200:
 1855               	.L95:
 426:tmk_core/common/action.c ****                     }
 1856               		.loc 1 426 25 view .LVU470
 1857               	.LBE30:
 434:tmk_core/common/action.c ****                 case 0xe0 ... 0xef:
 1858               		.loc 1 434 13 is_stmt 1 view .LVU471
 1859 031e E0E2      		ldi r30,lo8(32)
 1860 0320 ED0F      		add r30,r29
 1861 0322 E531      		cpi r30,lo8(21)
 1862 0324 00F0      		brlo .+2
 1863 0326 00C0      		rjmp .L140
 1864 0328 F0E0      		ldi r31,0
 1865 032a E050      		subi r30,lo8(-(gs(.L142)))
 1866 032c F040      		sbci r31,hi8(-(gs(.L142)))
 1867 032e 0C94 0000 		jmp __tablejump2__
 1868               		.section	.jumptables.gcc.process_action,"a",@progbits
 1869               		.p2align	1
 1870               	.L142:
 1871 0020 0000      		.word gs(.L147)
 1872 0022 0000      		.word gs(.L147)
 1873 0024 0000      		.word gs(.L147)
 1874 0026 0000      		.word gs(.L147)
 1875 0028 0000      		.word gs(.L147)
 1876 002a 0000      		.word gs(.L147)
 1877 002c 0000      		.word gs(.L147)
 1878 002e 0000      		.word gs(.L147)
 1879 0030 0000      		.word gs(.L147)
 1880 0032 0000      		.word gs(.L147)
 1881 0034 0000      		.word gs(.L147)
 1882 0036 0000      		.word gs(.L147)
 1883 0038 0000      		.word gs(.L147)
 1884 003a 0000      		.word gs(.L147)
 1885 003c 0000      		.word gs(.L147)
 1886 003e 0000      		.word gs(.L147)
 1887 0040 0000      		.word gs(.L146)
 1888 0042 0000      		.word gs(.L145)
 1889 0044 0000      		.word gs(.L144)
 1890 0046 0000      		.word gs(.L143)
 1891 0048 0000      		.word gs(.L141)
 1892               		.section	.text.process_action
 1893               	.L147:
 437:tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1894               		.loc 1 437 21 view .LVU472
 1895 0332 DF70      		andi r29,lo8(15)
 1896               	.LVL201:
 437:tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1897               		.loc 1 437 21 is_stmt 0 view .LVU473
 1898 0334 8C2F      		mov r24,r28
 1899 0336 8F71      		andi r24,lo8(31)
 437:tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1900               		.loc 1 437 24 view .LVU474
 1901 0338 1123      		tst r17
 1902 033a 01F0      		breq .L148
 438:tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 1903               		.loc 1 438 25 is_stmt 1 view .LVU475
 1904 033c 0E94 0000 		call layer_on
 1905               	.LVL202:
 439:tmk_core/common/action.c ****                     } else {
 1906               		.loc 1 439 25 view .LVU476
 1907 0340 8D2F      		mov r24,r29
 1908 0342 00C0      		rjmp .L227
 1909               	.L148:
 441:tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 1910               		.loc 1 441 25 view .LVU477
 1911 0344 0E94 0000 		call layer_off
 1912               	.LVL203:
 442:tmk_core/common/action.c ****                     }
 1913               		.loc 1 442 25 view .LVU478
 1914 0348 8D2F      		mov r24,r29
 1915 034a 00C0      		rjmp .L228
 1916               	.LVL204:
 1917               	.L146:
 447:tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1918               		.loc 1 447 21 view .LVU479
 447:tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1919               		.loc 1 447 24 is_stmt 0 view .LVU480
 1920 034c 1123      		tst r17
 1921 034e 01F0      		breq .L149
 448:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1922               		.loc 1 448 25 is_stmt 1 view .LVU481
 448:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1923               		.loc 1 448 28 is_stmt 0 view .LVU482
 1924 0350 0111      		cpse r16,__zero_reg__
 1925 0352 00C0      		rjmp .L91
 1926               	.L150:
 449:tmk_core/common/action.c ****                         }
 1927               		.loc 1 449 29 is_stmt 1 view .LVU483
 1928 0354 8C2F      		mov r24,r28
 1929 0356 8F71      		andi r24,lo8(31)
 1930 0358 0E94 0000 		call layer_invert
 1931               	.LVL205:
 1932 035c 00C0      		rjmp .L91
 1933               	.L149:
 452:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1934               		.loc 1 452 25 view .LVU484
 452:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1935               		.loc 1 452 28 is_stmt 0 view .LVU485
 1936 035e 0230      		cpi r16,lo8(2)
 1937 0360 00F0      		brlo .+2
 1938 0362 00C0      		rjmp .L91
 1939 0364 00C0      		rjmp .L150
 1940               	.L145:
 458:tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1941               		.loc 1 458 21 is_stmt 1 view .LVU486
 1942 0366 8C2F      		mov r24,r28
 1943 0368 8F71      		andi r24,lo8(31)
 458:tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1944               		.loc 1 458 68 is_stmt 0 view .LVU487
 1945 036a 1123      		tst r17
 1946 036c 01F0      		breq .L224
 1947               	.L226:
 515:tmk_core/common/action.c ****                         }
 1948               		.loc 1 515 29 view .LVU488
 1949 036e 0E94 0000 		call layer_on
 1950               	.LVL206:
 1951 0372 00C0      		rjmp .L91
 1952               	.L144:
 462:tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 1953               		.loc 1 462 21 is_stmt 1 view .LVU489
 1954 0374 8C2F      		mov r24,r28
 1955 0376 8F71      		andi r24,lo8(31)
 462:tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 1956               		.loc 1 462 69 is_stmt 0 view .LVU490
 1957 0378 1123      		tst r17
 1958 037a 01F0      		breq .L226
 1959               	.L224:
 526:tmk_core/common/action.c ****                         }
 1960               		.loc 1 526 29 view .LVU491
 1961 037c 0E94 0000 		call layer_off
 1962               	.LVL207:
 1963 0380 00C0      		rjmp .L91
 1964               	.L143:
 466:tmk_core/common/action.c ****                                     layer_clear();
 1965               		.loc 1 466 21 is_stmt 1 view .LVU492
 466:tmk_core/common/action.c ****                                     layer_clear();
 1966               		.loc 1 466 70 is_stmt 0 view .LVU493
 1967 0382 1123      		tst r17
 1968 0384 01F0      		breq .L153
 466:tmk_core/common/action.c ****                                     layer_clear();
 1969               		.loc 1 466 37 discriminator 1 view .LVU494
 1970 0386 8C2F      		mov r24,r28
 1971 0388 8F71      		andi r24,lo8(31)
 1972 038a 0E94 0000 		call layer_move
 1973               	.LVL208:
 1974 038e 00C0      		rjmp .L91
 1975               	.L153:
 467:tmk_core/common/action.c ****                     break;
 1976               		.loc 1 467 37 view .LVU495
 1977 0390 0E94 0000 		call layer_clear
 1978               	.LVL209:
 1979 0394 00C0      		rjmp .L91
 1980               	.L141:
 495:tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1981               		.loc 1 495 21 is_stmt 1 view .LVU496
 495:tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1982               		.loc 1 495 24 is_stmt 0 view .LVU497
 1983 0396 1123      		tst r17
 1984 0398 01F0      		breq .L154
 496:tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 1985               		.loc 1 496 25 is_stmt 1 view .LVU498
 496:tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 1986               		.loc 1 496 50 is_stmt 0 view .LVU499
 1987 039a CF71      		andi r28,lo8(31)
 1988               	.LVL210:
 496:tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 1989               		.loc 1 496 25 view .LVU500
 1990 039c 8C2F      		mov r24,r28
 1991 039e 0E94 0000 		call layer_on
 1992               	.LVL211:
 497:tmk_core/common/action.c ****                     } else {
 1993               		.loc 1 497 25 is_stmt 1 view .LVU501
 1994 03a2 63E0      		ldi r22,lo8(3)
 1995 03a4 8C2F      		mov r24,r28
 1996 03a6 0E94 0000 		call set_oneshot_layer
 1997               	.LVL212:
 1998 03aa 00C0      		rjmp .L91
 1999               	.LVL213:
 2000               	.L154:
 499:tmk_core/common/action.c ****                         if (tap_count > 1) {
 2001               		.loc 1 499 25 view .LVU502
 2002 03ac 81E0      		ldi r24,lo8(1)
 2003 03ae 0E94 0000 		call clear_oneshot_layer_state
 2004               	.LVL214:
 500:tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 2005               		.loc 1 500 25 view .LVU503
 500:tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 2006               		.loc 1 500 28 is_stmt 0 view .LVU504
 2007 03b2 0230      		cpi r16,lo8(2)
 2008 03b4 00F4      		brsh .+2
 2009 03b6 00C0      		rjmp .L91
 501:tmk_core/common/action.c ****                         }
 2010               		.loc 1 501 29 is_stmt 1 view .LVU505
 2011 03b8 82E0      		ldi r24,lo8(2)
 2012 03ba 0E94 0000 		call clear_oneshot_layer_state
 2013               	.LVL215:
 2014 03be 00C0      		rjmp .L91
 2015               	.L140:
 509:tmk_core/common/action.c ****                         if (tap_count > 0) {
 2016               		.loc 1 509 21 view .LVU506
 509:tmk_core/common/action.c ****                         if (tap_count > 0) {
 2017               		.loc 1 509 24 is_stmt 0 view .LVU507
 2018 03c0 1123      		tst r17
 2019 03c2 01F0      		breq .L155
 510:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 2020               		.loc 1 510 25 is_stmt 1 view .LVU508
 510:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 2021               		.loc 1 510 28 is_stmt 0 view .LVU509
 2022 03c4 0111      		cpse r16,__zero_reg__
 2023 03c6 00C0      		rjmp .L229
 514:tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 2024               		.loc 1 514 76 is_stmt 1 view .LVU510
 515:tmk_core/common/action.c ****                         }
 2025               		.loc 1 515 29 view .LVU511
 2026 03c8 8C2F      		mov r24,r28
 2027 03ca 8F71      		andi r24,lo8(31)
 2028 03cc 00C0      		rjmp .L226
 2029               	.L155:
 518:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 2030               		.loc 1 518 25 view .LVU512
 518:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 2031               		.loc 1 518 28 is_stmt 0 view .LVU513
 2032 03ce 0023      		tst r16
 2033 03d0 01F0      		breq .L157
 519:tmk_core/common/action.c ****                             if (action.layer_tap.code == KC_CAPS) {
 2034               		.loc 1 519 77 is_stmt 1 view .LVU514
 520:tmk_core/common/action.c ****                                 wait_ms(80);
 2035               		.loc 1 520 29 view .LVU515
 520:tmk_core/common/action.c ****                                 wait_ms(80);
 2036               		.loc 1 520 32 is_stmt 0 view .LVU516
 2037 03d2 D933      		cpi r29,lo8(57)
 2038 03d4 01F0      		breq .+2
 2039 03d6 00C0      		rjmp .L158
 521:tmk_core/common/action.c ****                             }
 2040               		.loc 1 521 33 is_stmt 1 view .LVU517
 2041               	.LVL216:
 2042               	.LBB31:
 2043               	.LBI31:
 166:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** {
 2044               		.loc 3 166 1 view .LVU518
 2045               	.LBB32:
 168:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 2046               		.loc 3 168 2 view .LVU519
 172:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 2047               		.loc 3 172 2 view .LVU520
 173:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 2048               		.loc 3 173 2 view .LVU521
 174:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 2049               		.loc 3 174 2 view .LVU522
 184:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#endif
 2050               		.loc 3 184 3 view .LVU523
 2051               		.loc 3 187 2 view .LVU524
 2052 03d8 FFEF      		ldi r31,lo8(255999)
 2053 03da 27EE      		ldi r18,hi8(255999)
 2054 03dc 83E0      		ldi r24,hlo8(255999)
 2055 03de F150      	1:	subi r31,1
 2056 03e0 2040      		sbci r18,0
 2057 03e2 8040      		sbci r24,0
 2058 03e4 01F4      		brne 1b
 2059 03e6 00C0      		rjmp .
 2060 03e8 0000      		nop
 2061 03ea 00C0      		rjmp .L158
 2062               	.LVL217:
 2063               	.L157:
 2064               		.loc 3 187 2 is_stmt 0 view .LVU525
 2065               	.LBE32:
 2066               	.LBE31:
 525:tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 2067               		.loc 1 525 79 is_stmt 1 view .LVU526
 526:tmk_core/common/action.c ****                         }
 2068               		.loc 1 526 29 view .LVU527
 2069 03ec 8C2F      		mov r24,r28
 2070 03ee 8F71      		andi r24,lo8(31)
 2071 03f0 00C0      		rjmp .L224
 2072               	.L94:
 537:tmk_core/common/action.c ****             break;
 2073               		.loc 1 537 13 view .LVU528
 537:tmk_core/common/action.c ****             break;
 2074               		.loc 1 537 83 is_stmt 0 view .LVU529
 2075 03f2 4C2F      		mov r20,r28
 2076 03f4 4F70      		andi r20,lo8(15)
 537:tmk_core/common/action.c ****             break;
 2077               		.loc 1 537 13 view .LVU530
 2078 03f6 6D2F      		mov r22,r29
 2079 03f8 C701      		movw r24,r14
 2080 03fa 0E94 0000 		call action_get_macro
 2081               	.LVL218:
 2082 03fe 0E94 0000 		call action_macro_play
 2083               	.LVL219:
 538:tmk_core/common/action.c **** #endif
 2084               		.loc 1 538 13 is_stmt 1 view .LVU531
 2085 0402 00C0      		rjmp .L91
 2086               	.L97:
 570:tmk_core/common/action.c ****                 case OP_SH_TOGGLE:
 2087               		.loc 1 570 13 view .LVU532
 2088 0404 D23F      		cpi r29,lo8(-14)
 2089 0406 01F0      		breq .L223
 2090 0408 00F4      		brsh .L160
 2091 040a D03F      		cpi r29,lo8(-16)
 2092 040c 01F0      		breq .L161
 2093 040e D13F      		cpi r29,lo8(-15)
 2094 0410 01F0      		breq .L162
 2095               	.L163:
 610:tmk_core/common/action.c ****                         if (swap_held) {
 2096               		.loc 1 610 21 view .LVU533
 2097 0412 8091 0000 		lds r24,swap_held
 610:tmk_core/common/action.c ****                         if (swap_held) {
 2098               		.loc 1 610 24 is_stmt 0 view .LVU534
 2099 0416 0023      		tst r16
 2100 0418 01F4      		brne .+2
 2101 041a 00C0      		rjmp .L169
 611:tmk_core/common/action.c ****                             swap_hands = !swap_hands; // undo hold set up in _tap_hint
 2102               		.loc 1 611 25 is_stmt 1 view .LVU535
 611:tmk_core/common/action.c ****                             swap_hands = !swap_hands; // undo hold set up in _tap_hint
 2103               		.loc 1 611 28 is_stmt 0 view .LVU536
 2104 041c 8823      		tst r24
 2105 041e 01F0      		breq .L170
 612:tmk_core/common/action.c ****                             swap_held = false;
 2106               		.loc 1 612 29 is_stmt 1 view .LVU537
 2107 0420 8091 0000 		lds r24,swap_hands
 2108 0424 91E0      		ldi r25,lo8(1)
 2109 0426 8927      		eor r24,r25
 612:tmk_core/common/action.c ****                             swap_held = false;
 2110               		.loc 1 612 40 is_stmt 0 view .LVU538
 2111 0428 8093 0000 		sts swap_hands,r24
 613:tmk_core/common/action.c ****                         }
 2112               		.loc 1 613 29 is_stmt 1 view .LVU539
 613:tmk_core/common/action.c ****                         }
 2113               		.loc 1 613 39 is_stmt 0 view .LVU540
 2114 042c 1092 0000 		sts swap_held,__zero_reg__
 2115               	.L170:
 615:tmk_core/common/action.c ****                             register_code(action.swap.code);
 2116               		.loc 1 615 25 is_stmt 1 view .LVU541
 616:tmk_core/common/action.c ****                         } else {
 2117               		.loc 1 616 29 is_stmt 0 view .LVU542
 2118 0430 8D2F      		mov r24,r29
 615:tmk_core/common/action.c ****                             register_code(action.swap.code);
 2119               		.loc 1 615 28 view .LVU543
 2120 0432 1123      		tst r17
 2121 0434 01F0      		breq .L171
 616:tmk_core/common/action.c ****                         } else {
 2122               		.loc 1 616 29 is_stmt 1 view .LVU544
 2123 0436 0E94 0000 		call register_code
 2124               	.LVL220:
 2125 043a 00C0      		rjmp .L92
 2126               	.L160:
 2127 043c D43F      		cpi r29,lo8(-12)
 2128 043e 01F0      		breq .L164
 2129 0440 00F0      		brlo .L165
 2130 0442 D53F      		cpi r29,lo8(-11)
 2131 0444 01F4      		brne .L163
 583:tmk_core/common/action.c ****                         swap_hands = true;
 2132               		.loc 1 583 21 view .LVU545
 583:tmk_core/common/action.c ****                         swap_hands = true;
 2133               		.loc 1 583 24 is_stmt 0 view .LVU546
 2134 0446 1111      		cpse r17,__zero_reg__
 2135 0448 00C0      		rjmp .L92
 584:tmk_core/common/action.c ****                     }
 2136               		.loc 1 584 25 is_stmt 1 view .LVU547
 584:tmk_core/common/action.c ****                     }
 2137               		.loc 1 584 36 is_stmt 0 view .LVU548
 2138 044a 81E0      		ldi r24,lo8(1)
 2139 044c 00C0      		rjmp .L222
 2140               	.L161:
 572:tmk_core/common/action.c ****                         swap_hands = !swap_hands;
 2141               		.loc 1 572 21 is_stmt 1 view .LVU549
 572:tmk_core/common/action.c ****                         swap_hands = !swap_hands;
 2142               		.loc 1 572 24 is_stmt 0 view .LVU550
 2143 044e 1123      		tst r17
 2144 0450 01F0      		breq .L92
 2145               	.L168:
 573:tmk_core/common/action.c ****                     }
 2146               		.loc 1 573 25 is_stmt 1 view .LVU551
 2147 0452 8091 0000 		lds r24,swap_hands
 2148 0456 91E0      		ldi r25,lo8(1)
 2149 0458 8927      		eor r24,r25
 2150               	.L222:
 584:tmk_core/common/action.c ****                     }
 2151               		.loc 1 584 36 is_stmt 0 view .LVU552
 2152 045a 8093 0000 		sts swap_hands,r24
 2153 045e 00C0      		rjmp .L92
 2154               	.L165:
 580:tmk_core/common/action.c ****                     break;
 2155               		.loc 1 580 21 is_stmt 1 view .LVU553
 2156 0460 81E0      		ldi r24,lo8(1)
 2157 0462 1827      		eor r17,r24
 2158               	.LVL221:
 2159               	.L223:
 580:tmk_core/common/action.c ****                     break;
 2160               		.loc 1 580 32 is_stmt 0 view .LVU554
 2161 0464 1093 0000 		sts swap_hands,r17
 581:tmk_core/common/action.c ****                 case OP_SH_ON:
 2162               		.loc 1 581 21 is_stmt 1 view .LVU555
 2163               	.L92:
 632:tmk_core/common/action.c ****             break;
 2164               		.loc 1 632 13 view .LVU556
 632:tmk_core/common/action.c ****             break;
 2165               		.loc 1 632 64 is_stmt 0 view .LVU557
 2166 0468 4C2F      		mov r20,r28
 2167 046a 4F70      		andi r20,lo8(15)
 632:tmk_core/common/action.c ****             break;
 2168               		.loc 1 632 13 view .LVU558
 2169 046c 6D2F      		mov r22,r29
 2170 046e C701      		movw r24,r14
 2171 0470 0E94 0000 		call action_function
 2172               	.LVL222:
 633:tmk_core/common/action.c **** #endif
 2173               		.loc 1 633 13 is_stmt 1 view .LVU559
 2174 0474 00C0      		rjmp .L91
 2175               	.LVL223:
 2176               	.L164:
 588:tmk_core/common/action.c ****                         swap_hands = false;
 2177               		.loc 1 588 21 view .LVU560
 588:tmk_core/common/action.c ****                         swap_hands = false;
 2178               		.loc 1 588 24 is_stmt 0 view .LVU561
 2179 0476 1111      		cpse r17,__zero_reg__
 2180 0478 00C0      		rjmp .L92
 589:tmk_core/common/action.c ****                     }
 2181               		.loc 1 589 25 is_stmt 1 view .LVU562
 589:tmk_core/common/action.c ****                     }
 2182               		.loc 1 589 36 is_stmt 0 view .LVU563
 2183 047a 1092 0000 		sts swap_hands,__zero_reg__
 2184 047e 00C0      		rjmp .L92
 2185               	.L162:
 596:tmk_core/common/action.c ****                         if (swap_held) {
 2186               		.loc 1 596 21 is_stmt 1 view .LVU564
 596:tmk_core/common/action.c ****                         if (swap_held) {
 2187               		.loc 1 596 24 is_stmt 0 view .LVU565
 2188 0480 1123      		tst r17
 2189 0482 01F0      		breq .L167
 597:tmk_core/common/action.c ****                             swap_held = false;
 2190               		.loc 1 597 25 is_stmt 1 view .LVU566
 597:tmk_core/common/action.c ****                             swap_held = false;
 2191               		.loc 1 597 28 is_stmt 0 view .LVU567
 2192 0484 8091 0000 		lds r24,swap_held
 2193 0488 8823      		tst r24
 2194 048a 01F0      		breq .L168
 2195               	.L221:
 624:tmk_core/common/action.c ****                         }
 2196               		.loc 1 624 29 is_stmt 1 view .LVU568
 624:tmk_core/common/action.c ****                         }
 2197               		.loc 1 624 39 is_stmt 0 view .LVU569
 2198 048c 1092 0000 		sts swap_held,__zero_reg__
 2199 0490 00C0      		rjmp .L92
 2200               	.L167:
 603:tmk_core/common/action.c ****                             swap_hands = !swap_hands;
 2201               		.loc 1 603 25 is_stmt 1 view .LVU570
 603:tmk_core/common/action.c ****                             swap_hands = !swap_hands;
 2202               		.loc 1 603 28 is_stmt 0 view .LVU571
 2203 0492 0023      		tst r16
 2204 0494 01F0      		breq .L168
 2205 0496 00C0      		rjmp .L92
 2206               	.L171:
 618:tmk_core/common/action.c ****                             *record = (keyrecord_t){}; // hack: reset tap mode
 2207               		.loc 1 618 29 is_stmt 1 view .LVU572
 2208 0498 0E94 0000 		call unregister_code
 2209               	.LVL224:
 619:tmk_core/common/action.c ****                         }
 2210               		.loc 1 619 29 view .LVU573
 619:tmk_core/common/action.c ****                         }
 2211               		.loc 1 619 37 is_stmt 0 view .LVU574
 2212 049c 86E0      		ldi r24,lo8(6)
 2213 049e F701      		movw r30,r14
 2214               		0:
 2215 04a0 1192      		st Z+,__zero_reg__
 2216 04a2 8A95      		dec r24
 2217 04a4 01F4      		brne 0b
 2218 04a6 00C0      		rjmp .L92
 2219               	.L169:
 622:tmk_core/common/action.c ****                             swap_hands = !swap_hands; // undo hold set up in _tap_hint
 2220               		.loc 1 622 25 is_stmt 1 view .LVU575
 622:tmk_core/common/action.c ****                             swap_hands = !swap_hands; // undo hold set up in _tap_hint
 2221               		.loc 1 622 28 is_stmt 0 view .LVU576
 2222 04a8 8823      		tst r24
 2223 04aa 01F0      		breq .L92
 622:tmk_core/common/action.c ****                             swap_hands = !swap_hands; // undo hold set up in _tap_hint
 2224               		.loc 1 622 39 discriminator 1 view .LVU577
 2225 04ac 1111      		cpse r17,__zero_reg__
 2226 04ae 00C0      		rjmp .L92
 623:tmk_core/common/action.c ****                             swap_held = false;
 2227               		.loc 1 623 29 is_stmt 1 view .LVU578
 2228 04b0 8091 0000 		lds r24,swap_hands
 2229 04b4 91E0      		ldi r25,lo8(1)
 2230 04b6 8927      		eor r24,r25
 623:tmk_core/common/action.c ****                             swap_held = false;
 2231               		.loc 1 623 40 is_stmt 0 view .LVU579
 2232 04b8 8093 0000 		sts swap_hands,r24
 2233 04bc 00C0      		rjmp .L221
 2234               	.LVL225:
 2235               	.L88:
 2236               	/* epilogue start */
 691:tmk_core/common/action.c **** 
 2237               		.loc 1 691 1 view .LVU580
 2238 04be DF91      		pop r29
 2239               	.LVL226:
 691:tmk_core/common/action.c **** 
 2240               		.loc 1 691 1 view .LVU581
 2241 04c0 CF91      		pop r28
 691:tmk_core/common/action.c **** 
 2242               		.loc 1 691 1 view .LVU582
 2243 04c2 1F91      		pop r17
 2244 04c4 0F91      		pop r16
 2245 04c6 FF90      		pop r15
 2246 04c8 EF90      		pop r14
 2247               	.LVL227:
 691:tmk_core/common/action.c **** 
 2248               		.loc 1 691 1 view .LVU583
 2249 04ca DF90      		pop r13
 2250 04cc CF90      		pop r12
 2251               	.LVL228:
 691:tmk_core/common/action.c **** 
 2252               		.loc 1 691 1 view .LVU584
 2253 04ce BF90      		pop r11
 2254 04d0 AF90      		pop r10
 2255 04d2 9F90      		pop r9
 2256 04d4 8F90      		pop r8
 2257 04d6 0895      		ret
 2258               		.cfi_endproc
 2259               	.LFE112:
 2261               		.section	.text.process_record,"ax",@progbits
 2262               	.global	process_record
 2264               	process_record:
 2265               	.LVL229:
 2266               	.LFB111:
 173:tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) { return; }
 2267               		.loc 1 173 1 is_stmt 1 view -0
 2268               		.cfi_startproc
 173:tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) { return; }
 2269               		.loc 1 173 1 is_stmt 0 view .LVU586
 2270 0000 0F93      		push r16
 2271               	.LCFI19:
 2272               		.cfi_def_cfa_offset 3
 2273               		.cfi_offset 16, -2
 2274 0002 1F93      		push r17
 2275               	.LCFI20:
 2276               		.cfi_def_cfa_offset 4
 2277               		.cfi_offset 17, -3
 2278 0004 CF93      		push r28
 2279               	.LCFI21:
 2280               		.cfi_def_cfa_offset 5
 2281               		.cfi_offset 28, -4
 2282 0006 DF93      		push r29
 2283               	.LCFI22:
 2284               		.cfi_def_cfa_offset 6
 2285               		.cfi_offset 29, -5
 2286               	/* prologue: function */
 2287               	/* frame size = 0 */
 2288               	/* stack size = 4 */
 2289               	.L__stack_usage = 4
 2290 0008 EC01      		movw r28,r24
 174:tmk_core/common/action.c **** 
 2291               		.loc 1 174 5 is_stmt 1 view .LVU587
 2292               	.LBB35:
 2293               	.LBI35:
 2294               		.loc 2 49 20 view .LVU588
 2295               	.LBB36:
 2296               		.loc 2 49 51 view .LVU589
 2297               		.loc 2 49 74 is_stmt 0 view .LVU590
 2298 000a 8B81      		ldd r24,Y+3
 2299 000c 9C81      		ldd r25,Y+4
 2300               	.LVL230:
 2301               		.loc 2 49 74 view .LVU591
 2302 000e 892B      		or r24,r25
 2303 0010 01F0      		breq .L235
 2304 0012 8881      		ld r24,Y
 2305 0014 9981      		ldd r25,Y+1
 2306 0016 8923      		and r24,r25
 2307 0018 8F3F      		cpi r24,lo8(-1)
 2308 001a 01F4      		brne .L245
 2309               	.L235:
 2310               	/* epilogue start */
 2311               	.LBE36:
 2312               	.LBE35:
 188:tmk_core/common/action.c **** 
 2313               		.loc 1 188 1 view .LVU592
 2314 001c DF91      		pop r29
 2315 001e CF91      		pop r28
 2316               	.LVL231:
 188:tmk_core/common/action.c **** 
 2317               		.loc 1 188 1 view .LVU593
 2318 0020 1F91      		pop r17
 2319 0022 0F91      		pop r16
 2320 0024 0895      		ret
 2321               	.LVL232:
 2322               	.L245:
 176:tmk_core/common/action.c ****         return;
 2323               		.loc 1 176 5 is_stmt 1 view .LVU594
 176:tmk_core/common/action.c ****         return;
 2324               		.loc 1 176 9 is_stmt 0 view .LVU595
 2325 0026 CE01      		movw r24,r28
 2326 0028 0E94 0000 		call process_record_quantum
 2327               	.LVL233:
 176:tmk_core/common/action.c ****         return;
 2328               		.loc 1 176 7 view .LVU596
 2329 002c 8823      		tst r24
 2330 002e 01F0      		breq .L235
 179:tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
 2331               		.loc 1 179 5 is_stmt 1 view .LVU597
 179:tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
 2332               		.loc 1 179 23 is_stmt 0 view .LVU598
 2333 0030 6881      		ld r22,Y
 2334 0032 7981      		ldd r23,Y+1
 2335 0034 8A81      		ldd r24,Y+2
 2336 0036 0E94 0000 		call store_or_get_action
 2337               	.LVL234:
 2338 003a 8C01      		movw r16,r24
 2339               	.LVL235:
 180:tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 2340               		.loc 1 180 23 is_stmt 1 view .LVU599
 180:tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 2341               		.loc 1 180 25 view .LVU600
 182:tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 2342               		.loc 1 182 29 view .LVU601
 182:tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 2343               		.loc 1 182 31 view .LVU602
 2344 003c 0E94 0000 		call layer_debug
 2345               	.LVL236:
 183:tmk_core/common/action.c **** #endif
 2346               		.loc 1 183 37 view .LVU603
 183:tmk_core/common/action.c **** #endif
 2347               		.loc 1 183 39 view .LVU604
 2348 0040 0E94 0000 		call default_layer_debug
 2349               	.LVL237:
 185:tmk_core/common/action.c **** 
 2350               		.loc 1 185 15 view .LVU605
 187:tmk_core/common/action.c **** }
 2351               		.loc 1 187 5 view .LVU606
 187:tmk_core/common/action.c **** }
 2352               		.loc 1 187 5 is_stmt 0 view .LVU607
 2353 0044 B801      		movw r22,r16
 2354 0046 CE01      		movw r24,r28
 2355               	/* epilogue start */
 188:tmk_core/common/action.c **** 
 2356               		.loc 1 188 1 view .LVU608
 2357 0048 DF91      		pop r29
 2358 004a CF91      		pop r28
 2359               	.LVL238:
 188:tmk_core/common/action.c **** 
 2360               		.loc 1 188 1 view .LVU609
 2361 004c 1F91      		pop r17
 2362 004e 0F91      		pop r16
 2363               	.LVL239:
 187:tmk_core/common/action.c **** }
 2364               		.loc 1 187 5 view .LVU610
 2365 0050 0C94 0000 		jmp process_action
 2366               	.LVL240:
 187:tmk_core/common/action.c **** }
 2367               		.loc 1 187 5 view .LVU611
 2368               		.cfi_endproc
 2369               	.LFE111:
 2371               		.section	.text.process_record_nocache,"ax",@progbits
 2372               	.global	process_record_nocache
 2374               	process_record_nocache:
 2375               	.LVL241:
 2376               	.LFB108:
 127:tmk_core/common/action.c ****     disable_action_cache = true;
 2377               		.loc 1 127 1 is_stmt 1 view -0
 2378               		.cfi_startproc
 2379               	/* prologue: function */
 2380               	/* frame size = 0 */
 2381               	/* stack size = 0 */
 2382               	.L__stack_usage = 0
 128:tmk_core/common/action.c ****     process_record(record);
 2383               		.loc 1 128 5 view .LVU613
 128:tmk_core/common/action.c ****     process_record(record);
 2384               		.loc 1 128 26 is_stmt 0 view .LVU614
 2385 0000 21E0      		ldi r18,lo8(1)
 2386 0002 2093 0000 		sts disable_action_cache,r18
 129:tmk_core/common/action.c ****     disable_action_cache = false;
 2387               		.loc 1 129 5 is_stmt 1 view .LVU615
 2388 0006 0E94 0000 		call process_record
 2389               	.LVL242:
 130:tmk_core/common/action.c **** }
 2390               		.loc 1 130 5 view .LVU616
 130:tmk_core/common/action.c **** }
 2391               		.loc 1 130 26 is_stmt 0 view .LVU617
 2392 000a 1092 0000 		sts disable_action_cache,__zero_reg__
 2393               	/* epilogue start */
 131:tmk_core/common/action.c **** #else
 2394               		.loc 1 131 1 view .LVU618
 2395 000e 0895      		ret
 2396               		.cfi_endproc
 2397               	.LFE108:
 2399               		.section	.text.clear_keyboard_but_mods_and_keys,"ax",@progbits
 2400               	.global	clear_keyboard_but_mods_and_keys
 2402               	clear_keyboard_but_mods_and_keys:
 2403               	.LFB120:
 885:tmk_core/common/action.c **** 
 886:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 887:tmk_core/common/action.c ****  *
 888:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 889:tmk_core/common/action.c ****  */
 890:tmk_core/common/action.c **** void clear_keyboard(void)
 891:tmk_core/common/action.c **** {
 892:tmk_core/common/action.c ****     clear_mods();
 893:tmk_core/common/action.c ****     clear_keyboard_but_mods();
 894:tmk_core/common/action.c **** }
 895:tmk_core/common/action.c **** 
 896:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 897:tmk_core/common/action.c ****  *
 898:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 899:tmk_core/common/action.c ****  */
 900:tmk_core/common/action.c **** void clear_keyboard_but_mods(void)
 901:tmk_core/common/action.c **** {
 902:tmk_core/common/action.c ****     clear_keys();
 903:tmk_core/common/action.c ****     clear_keyboard_but_mods_and_keys();
 904:tmk_core/common/action.c **** }
 905:tmk_core/common/action.c **** 
 906:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 907:tmk_core/common/action.c ****  *
 908:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 909:tmk_core/common/action.c ****  */
 910:tmk_core/common/action.c **** void clear_keyboard_but_mods_and_keys()
 911:tmk_core/common/action.c **** {
 2404               		.loc 1 911 1 is_stmt 1 view -0
 2405               		.cfi_startproc
 2406               	/* prologue: function */
 2407               	/* frame size = 0 */
 2408               	/* stack size = 0 */
 2409               	.L__stack_usage = 0
 912:tmk_core/common/action.c ****     clear_weak_mods();
 2410               		.loc 1 912 5 view .LVU620
 2411 0000 0E94 0000 		call clear_weak_mods
 2412               	.LVL243:
 913:tmk_core/common/action.c ****     clear_macro_mods();
 2413               		.loc 1 913 5 view .LVU621
 2414 0004 0E94 0000 		call clear_macro_mods
 2415               	.LVL244:
 914:tmk_core/common/action.c ****     send_keyboard_report();
 2416               		.loc 1 914 5 view .LVU622
 2417 0008 0E94 0000 		call send_keyboard_report
 2418               	.LVL245:
 915:tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 916:tmk_core/common/action.c ****     mousekey_clear();
 917:tmk_core/common/action.c ****     mousekey_send();
 918:tmk_core/common/action.c **** #endif
 919:tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 920:tmk_core/common/action.c ****     host_system_send(0);
 2419               		.loc 1 920 5 view .LVU623
 2420 000c 90E0      		ldi r25,0
 2421 000e 80E0      		ldi r24,0
 2422 0010 0E94 0000 		call host_system_send
 2423               	.LVL246:
 921:tmk_core/common/action.c ****     host_consumer_send(0);
 2424               		.loc 1 921 5 view .LVU624
 2425 0014 90E0      		ldi r25,0
 2426 0016 80E0      		ldi r24,0
 2427 0018 0C94 0000 		jmp host_consumer_send
 2428               	.LVL247:
 2429               		.cfi_endproc
 2430               	.LFE120:
 2432               		.section	.text.clear_keyboard_but_mods,"ax",@progbits
 2433               	.global	clear_keyboard_but_mods
 2435               	clear_keyboard_but_mods:
 2436               	.LFB119:
 901:tmk_core/common/action.c ****     clear_keys();
 2437               		.loc 1 901 1 view -0
 2438               		.cfi_startproc
 2439               	/* prologue: function */
 2440               	/* frame size = 0 */
 2441               	/* stack size = 0 */
 2442               	.L__stack_usage = 0
 902:tmk_core/common/action.c ****     clear_keyboard_but_mods_and_keys();
 2443               		.loc 1 902 5 view .LVU626
 2444 0000 0E94 0000 		call clear_keys
 2445               	.LVL248:
 903:tmk_core/common/action.c **** }
 2446               		.loc 1 903 5 view .LVU627
 2447 0004 0C94 0000 		jmp clear_keyboard_but_mods_and_keys
 2448               	.LVL249:
 2449               		.cfi_endproc
 2450               	.LFE119:
 2452               		.section	.text.clear_keyboard,"ax",@progbits
 2453               	.global	clear_keyboard
 2455               	clear_keyboard:
 2456               	.LFB118:
 891:tmk_core/common/action.c ****     clear_mods();
 2457               		.loc 1 891 1 view -0
 2458               		.cfi_startproc
 2459               	/* prologue: function */
 2460               	/* frame size = 0 */
 2461               	/* stack size = 0 */
 2462               	.L__stack_usage = 0
 892:tmk_core/common/action.c ****     clear_keyboard_but_mods();
 2463               		.loc 1 892 5 view .LVU629
 2464 0000 0E94 0000 		call clear_mods
 2465               	.LVL250:
 893:tmk_core/common/action.c **** }
 2466               		.loc 1 893 5 view .LVU630
 2467 0004 0C94 0000 		jmp clear_keyboard_but_mods
 2468               	.LVL251:
 2469               		.cfi_endproc
 2470               	.LFE118:
 2472               		.section	.text.is_tap_action,"ax",@progbits
 2473               	.global	is_tap_action
 2475               	is_tap_action:
 2476               	.LVL252:
 2477               	.LFB122:
 922:tmk_core/common/action.c **** #endif
 923:tmk_core/common/action.c **** }
 924:tmk_core/common/action.c **** 
 925:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 926:tmk_core/common/action.c ****  *
 927:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 928:tmk_core/common/action.c ****  */
 929:tmk_core/common/action.c **** bool is_tap_key(keypos_t key)
 930:tmk_core/common/action.c **** {
 931:tmk_core/common/action.c ****     action_t action = layer_switch_get_action(key);
 932:tmk_core/common/action.c ****     return is_tap_action(action);
 933:tmk_core/common/action.c **** }
 934:tmk_core/common/action.c **** 
 935:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 936:tmk_core/common/action.c ****  *
 937:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 938:tmk_core/common/action.c ****  */
 939:tmk_core/common/action.c **** bool is_tap_action(action_t action)
 940:tmk_core/common/action.c **** {
 2478               		.loc 1 940 1 view -0
 2479               		.cfi_startproc
 2480               	/* prologue: function */
 2481               	/* frame size = 0 */
 2482               	/* stack size = 0 */
 2483               	.L__stack_usage = 0
 941:tmk_core/common/action.c ****     switch (action.kind.id) {
 2484               		.loc 1 941 5 view .LVU632
 2485               		.loc 1 941 24 is_stmt 0 view .LVU633
 2486 0000 E92F      		mov r30,r25
 2487 0002 E295      		swap r30
 2488 0004 EF70      		andi r30,lo8(15)
 2489               		.loc 1 941 5 view .LVU634
 2490 0006 E250      		subi r30,lo8(-(-2))
 2491 0008 EE30      		cpi r30,lo8(14)
 2492 000a 00F4      		brsh .L259
 2493 000c F0E0      		ldi r31,0
 2494 000e E050      		subi r30,lo8(-(gs(.L253)))
 2495 0010 F040      		sbci r31,hi8(-(gs(.L253)))
 2496 0012 0C94 0000 		jmp __tablejump2__
 2497               		.section	.jumptables.gcc.is_tap_action,"a",@progbits
 2498               		.p2align	1
 2499               	.L253:
 2500 0000 0000      		.word gs(.L254)
 2501 0002 0000      		.word gs(.L254)
 2502 0004 0000      		.word gs(.L259)
 2503 0006 0000      		.word gs(.L259)
 2504 0008 0000      		.word gs(.L255)
 2505 000a 0000      		.word gs(.L259)
 2506 000c 0000      		.word gs(.L259)
 2507 000e 0000      		.word gs(.L259)
 2508 0010 0000      		.word gs(.L254)
 2509 0012 0000      		.word gs(.L254)
 2510 0014 0000      		.word gs(.L252)
 2511 0016 0000      		.word gs(.L259)
 2512 0018 0000      		.word gs(.L259)
 2513 001a 0000      		.word gs(.L252)
 2514               		.section	.text.is_tap_action
 2515               	.L254:
 942:tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 943:tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 944:tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 945:tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 946:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 2516               		.loc 1 946 13 is_stmt 1 view .LVU635
 2517 0016 803F      		cpi r24,lo8(-16)
 2518 0018 01F0      		breq .L262
 2519 001a 00F4      		brsh .L256
 2520 001c 803E      		cpi r24,lo8(-32)
 2521 001e 00F4      		brsh .L259
 2522               	.L262:
 947:tmk_core/common/action.c ****                 case 0x00 ... 0xdf:
 948:tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 949:tmk_core/common/action.c ****                 case OP_ONESHOT:
 950:tmk_core/common/action.c ****                     return true;
 2523               		.loc 1 950 28 is_stmt 0 view .LVU636
 2524 0020 81E0      		ldi r24,lo8(1)
 2525               	.LVL253:
 2526               	/* epilogue start */
 951:tmk_core/common/action.c ****             }
 952:tmk_core/common/action.c ****             return false;
 953:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 954:tmk_core/common/action.c ****             switch (action.swap.code) {
 955:tmk_core/common/action.c ****                 case 0x00 ... 0xdf:
 956:tmk_core/common/action.c ****                 case OP_SH_TAP_TOGGLE:
 957:tmk_core/common/action.c ****                     return true;
 958:tmk_core/common/action.c ****             }
 959:tmk_core/common/action.c ****             return false;
 960:tmk_core/common/action.c ****         case ACT_MACRO:
 961:tmk_core/common/action.c ****         case ACT_FUNCTION:
 962:tmk_core/common/action.c ****             if (action.func.opt & FUNC_TAP) { return true; }
 963:tmk_core/common/action.c ****             return false;
 964:tmk_core/common/action.c ****     }
 965:tmk_core/common/action.c ****     return false;
 966:tmk_core/common/action.c **** }
 2527               		.loc 1 966 1 view .LVU637
 2528 0022 0895      		ret
 2529               	.LVL254:
 2530               	.L256:
 2531               		.loc 1 966 1 view .LVU638
 2532 0024 843F      		cpi r24,lo8(-12)
 2533 0026 01F0      		breq .L262
 2534               	.L259:
 952:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 2535               		.loc 1 952 20 view .LVU639
 2536 0028 80E0      		ldi r24,0
 2537               	.LVL255:
 952:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 2538               		.loc 1 952 20 view .LVU640
 2539 002a 0895      		ret
 2540               	.LVL256:
 2541               	.L255:
 954:tmk_core/common/action.c ****                 case 0x00 ... 0xdf:
 2542               		.loc 1 954 13 is_stmt 1 view .LVU641
 2543 002c 803E      		cpi r24,lo8(-32)
 2544 002e 00F0      		brlo .L262
 2545 0030 813F      		cpi r24,lo8(-15)
 2546 0032 01F4      		brne .L259
 2547 0034 00C0      		rjmp .L262
 2548               	.L252:
 962:tmk_core/common/action.c ****             return false;
 2549               		.loc 1 962 13 view .LVU642
 962:tmk_core/common/action.c ****             return false;
 2550               		.loc 1 962 16 is_stmt 0 view .LVU643
 2551 0036 93FB      		bst r25,3
 2552 0038 8827      		clr r24
 2553 003a 80F9      		bld r24,0
 2554               	.LVL257:
 962:tmk_core/common/action.c ****             return false;
 2555               		.loc 1 962 16 view .LVU644
 2556 003c 0895      		ret
 2557               		.cfi_endproc
 2558               	.LFE122:
 2560               		.section	.text.is_tap_key,"ax",@progbits
 2561               	.global	is_tap_key
 2563               	is_tap_key:
 2564               	.LVL258:
 2565               	.LFB121:
 930:tmk_core/common/action.c ****     action_t action = layer_switch_get_action(key);
 2566               		.loc 1 930 1 is_stmt 1 view -0
 2567               		.cfi_startproc
 2568               	/* prologue: function */
 2569               	/* frame size = 0 */
 2570               	/* stack size = 0 */
 2571               	.L__stack_usage = 0
 931:tmk_core/common/action.c ****     return is_tap_action(action);
 2572               		.loc 1 931 5 view .LVU646
 931:tmk_core/common/action.c ****     return is_tap_action(action);
 2573               		.loc 1 931 23 is_stmt 0 view .LVU647
 2574 0000 0E94 0000 		call layer_switch_get_action
 2575               	.LVL259:
 932:tmk_core/common/action.c **** }
 2576               		.loc 1 932 5 is_stmt 1 view .LVU648
 932:tmk_core/common/action.c **** }
 2577               		.loc 1 932 12 is_stmt 0 view .LVU649
 2578 0004 0C94 0000 		jmp is_tap_action
 2579               	.LVL260:
 2580               		.cfi_endproc
 2581               	.LFE121:
 2583               		.section	.text.debug_event,"ax",@progbits
 2584               	.global	debug_event
 2586               	debug_event:
 2587               	.LFB123:
 967:tmk_core/common/action.c **** 
 968:tmk_core/common/action.c **** 
 969:tmk_core/common/action.c **** /** \brief Debug print (FIXME: Needs better description)
 970:tmk_core/common/action.c ****  *
 971:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 972:tmk_core/common/action.c ****  */
 973:tmk_core/common/action.c **** void debug_event(keyevent_t event)
 974:tmk_core/common/action.c **** {
 2588               		.loc 1 974 1 is_stmt 1 view -0
 2589               		.cfi_startproc
 2590 0000 CF93      		push r28
 2591               	.LCFI23:
 2592               		.cfi_def_cfa_offset 3
 2593               		.cfi_offset 28, -2
 2594 0002 DF93      		push r29
 2595               	.LCFI24:
 2596               		.cfi_def_cfa_offset 4
 2597               		.cfi_offset 29, -3
 2598 0004 00D0      		rcall .
 2599 0006 00D0      		rcall .
 2600 0008 0F92      		push __tmp_reg__
 2601               	.LCFI25:
 2602               		.cfi_def_cfa_offset 9
 2603 000a CDB7      		in r28,__SP_L__
 2604 000c DEB7      		in r29,__SP_H__
 2605               	.LCFI26:
 2606               		.cfi_def_cfa_register 28
 2607               	/* prologue: function */
 2608               	/* frame size = 5 */
 2609               	/* stack size = 7 */
 2610               	.L__stack_usage = 7
 975:tmk_core/common/action.c ****     dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.ti
 2611               		.loc 1 975 103 view .LVU651
 2612               	/* epilogue start */
 976:tmk_core/common/action.c **** }
 2613               		.loc 1 976 1 is_stmt 0 view .LVU652
 2614 000e 0F90      		pop __tmp_reg__
 2615 0010 0F90      		pop __tmp_reg__
 2616 0012 0F90      		pop __tmp_reg__
 2617 0014 0F90      		pop __tmp_reg__
 2618 0016 0F90      		pop __tmp_reg__
 2619 0018 DF91      		pop r29
 2620 001a CF91      		pop r28
 2621 001c 0895      		ret
 2622               		.cfi_endproc
 2623               	.LFE123:
 2625               		.section	.text.debug_record,"ax",@progbits
 2626               	.global	debug_record
 2628               	debug_record:
 2629               	.LFB124:
 977:tmk_core/common/action.c **** 
 978:tmk_core/common/action.c **** /** \brief Debug print (FIXME: Needs better description)
 979:tmk_core/common/action.c ****  *
 980:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 981:tmk_core/common/action.c ****  */
 982:tmk_core/common/action.c **** void debug_record(keyrecord_t record)
 983:tmk_core/common/action.c **** {
 2630               		.loc 1 983 1 is_stmt 1 view -0
 2631               		.cfi_startproc
 2632 0000 CF93      		push r28
 2633               	.LCFI27:
 2634               		.cfi_def_cfa_offset 3
 2635               		.cfi_offset 28, -2
 2636 0002 DF93      		push r29
 2637               	.LCFI28:
 2638               		.cfi_def_cfa_offset 4
 2639               		.cfi_offset 29, -3
 2640 0004 00D0      		rcall .
 2641 0006 00D0      		rcall .
 2642 0008 00D0      		rcall .
 2643               	.LCFI29:
 2644               		.cfi_def_cfa_offset 10
 2645 000a CDB7      		in r28,__SP_L__
 2646 000c DEB7      		in r29,__SP_H__
 2647               	.LCFI30:
 2648               		.cfi_def_cfa_register 28
 2649               	/* prologue: function */
 2650               	/* frame size = 6 */
 2651               	/* stack size = 8 */
 2652               	.L__stack_usage = 8
 984:tmk_core/common/action.c ****     debug_event(record.event);
 2653               		.loc 1 984 5 view .LVU654
 985:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 986:tmk_core/common/action.c ****     dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
 2654               		.loc 1 986 77 view .LVU655
 2655               	/* epilogue start */
 987:tmk_core/common/action.c **** #endif
 988:tmk_core/common/action.c **** }
 2656               		.loc 1 988 1 is_stmt 0 view .LVU656
 2657 000e 2696      		adiw r28,6
 2658 0010 0FB6      		in __tmp_reg__,__SREG__
 2659 0012 F894      		cli
 2660 0014 DEBF      		out __SP_H__,r29
 2661 0016 0FBE      		out __SREG__,__tmp_reg__
 2662 0018 CDBF      		out __SP_L__,r28
 2663 001a DF91      		pop r29
 2664 001c CF91      		pop r28
 2665 001e 0895      		ret
 2666               		.cfi_endproc
 2667               	.LFE124:
 2669               		.section	.text.debug_action,"ax",@progbits
 2670               	.global	debug_action
 2672               	debug_action:
 2673               	.LVL261:
 2674               	.LFB125:
 989:tmk_core/common/action.c **** 
 990:tmk_core/common/action.c **** /** \brief Debug print (FIXME: Needs better description)
 991:tmk_core/common/action.c ****  *
 992:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 993:tmk_core/common/action.c ****  */
 994:tmk_core/common/action.c **** void debug_action(action_t action)
 995:tmk_core/common/action.c **** {
 2675               		.loc 1 995 1 is_stmt 1 view -0
 2676               		.cfi_startproc
 2677               	/* prologue: function */
 2678               	/* frame size = 0 */
 2679               	/* stack size = 0 */
 2680               	.L__stack_usage = 0
 996:tmk_core/common/action.c ****     switch (action.kind.id) {
 2681               		.loc 1 996 5 view .LVU658
 997:tmk_core/common/action.c ****         case ACT_LMODS:             dprint("ACT_LMODS");             break;
 998:tmk_core/common/action.c ****         case ACT_RMODS:             dprint("ACT_RMODS");             break;
 999:tmk_core/common/action.c ****         case ACT_LMODS_TAP:         dprint("ACT_LMODS_TAP");         break;
1000:tmk_core/common/action.c ****         case ACT_RMODS_TAP:         dprint("ACT_RMODS_TAP");         break;
1001:tmk_core/common/action.c ****         case ACT_USAGE:             dprint("ACT_USAGE");             break;
1002:tmk_core/common/action.c ****         case ACT_MOUSEKEY:          dprint("ACT_MOUSEKEY");          break;
1003:tmk_core/common/action.c ****         case ACT_LAYER:             dprint("ACT_LAYER");             break;
1004:tmk_core/common/action.c ****         case ACT_LAYER_TAP:         dprint("ACT_LAYER_TAP");         break;
1005:tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:     dprint("ACT_LAYER_TAP_EXT");     break;
1006:tmk_core/common/action.c ****         case ACT_MACRO:             dprint("ACT_MACRO");             break;
1007:tmk_core/common/action.c ****         case ACT_COMMAND:           dprint("ACT_COMMAND");           break;
1008:tmk_core/common/action.c ****         case ACT_FUNCTION:          dprint("ACT_FUNCTION");          break;
1009:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:        dprint("ACT_SWAP_HANDS");        break;
1010:tmk_core/common/action.c ****         default:                    dprint("UNKNOWN");               break;
1011:tmk_core/common/action.c ****     }
1012:tmk_core/common/action.c ****     dprintf("[%X:%02X]", action.kind.param>>8, action.kind.param&0xff);
 2682               		.loc 1 1012 71 view .LVU659
 2683               	/* epilogue start */
1013:tmk_core/common/action.c **** }
 2684               		.loc 1 1013 1 is_stmt 0 view .LVU660
 2685 0000 0895      		ret
 2686               		.cfi_endproc
 2687               	.LFE125:
 2689               		.section	.bss.swap_state.4985,"aw",@nobits
 2692               	swap_state.4985:
 2693 0000 0000 0000 		.zero	14
 2693      0000 0000 
 2693      0000 0000 
 2693      0000 
 2694               	.global	disable_action_cache
 2695               		.section	.bss.disable_action_cache,"aw",@nobits
 2698               	disable_action_cache:
 2699 0000 00        		.zero	1
 2700               	.global	swap_held
 2701               		.section	.bss.swap_held,"aw",@nobits
 2704               	swap_held:
 2705 0000 00        		.zero	1
 2706               	.global	swap_hands
 2707               		.section	.bss.swap_hands,"aw",@nobits
 2710               	swap_hands:
 2711 0000 00        		.zero	1
 2712               		.comm	tp_buttons,2,1
 2713               		.text
 2714               	.Letext0:
 2715               		.file 4 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/stdint.h"
 2716               		.file 5 "tmk_core/common/keycode.h"
 2717               		.file 6 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 2718               		.file 7 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 2719               		.file 8 "lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 2720               		.file 9 "lib/lufa/LUFA/Drivers/USB/Core/HostStandardReq.h"
 2721               		.file 10 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/stdio.h"
 2722               		.file 11 "tmk_core/common/report.h"
 2723               		.file 12 "tmk_core/common/host.h"
 2724               		.file 13 "tmk_core/common/mousekey.h"
 2725               		.file 14 "tmk_core/common/command.h"
 2726               		.file 15 "tmk_core/common/action_code.h"
 2727               		.file 16 "tmk_core/common/action.h"
 2728               		.file 17 "tmk_core/common/action_layer.h"
 2729               		.file 18 "tmk_core/common/action_util.h"
 2730               		.file 19 "tmk_core/common/debug.h"
 2731               		.file 20 "tmk_core/common/led.h"
 2732               		.file 21 "tmk_core/common/action_macro.h"
 2733               		.file 22 "tmk_core/common/action_tapping.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action.c
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccv3KiDQ.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccv3KiDQ.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccv3KiDQ.s:4      *ABS*:000000000000003f __SREG__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccv3KiDQ.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccv3KiDQ.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccv3KiDQ.s:13     .text.process_hand_swap:0000000000000000 process_hand_swap
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccv3KiDQ.s:2692   .bss.swap_state.4985:0000000000000000 swap_state.4985
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccv3KiDQ.s:2710   .bss.swap_hands:0000000000000000 swap_hands
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccv3KiDQ.s:130    .text.action_exec:0000000000000000 action_exec
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccv3KiDQ.s:231    .text.process_record_quantum:0000000000000000 process_record_quantum
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccv3KiDQ.s:253    .text.process_record_tap_hint:0000000000000000 process_record_tap_hint
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccv3KiDQ.s:2704   .bss.swap_held:0000000000000000 swap_held
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccv3KiDQ.s:299    .text.register_code:0000000000000000 register_code
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccv3KiDQ.s:837    .text.unregister_code:0000000000000000 unregister_code
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccv3KiDQ.s:995    .text.tap_code:0000000000000000 tap_code
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccv3KiDQ.s:1029   .text.register_mods:0000000000000000 register_mods
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccv3KiDQ.s:1058   .text.unregister_mods:0000000000000000 unregister_mods
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccv3KiDQ.s:1087   .text.process_action:0000000000000000 process_action
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccv3KiDQ.s:2264   .text.process_record:0000000000000000 process_record
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccv3KiDQ.s:2374   .text.process_record_nocache:0000000000000000 process_record_nocache
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccv3KiDQ.s:2698   .bss.disable_action_cache:0000000000000000 disable_action_cache
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccv3KiDQ.s:2402   .text.clear_keyboard_but_mods_and_keys:0000000000000000 clear_keyboard_but_mods_and_keys
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccv3KiDQ.s:2435   .text.clear_keyboard_but_mods:0000000000000000 clear_keyboard_but_mods
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccv3KiDQ.s:2455   .text.clear_keyboard:0000000000000000 clear_keyboard
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccv3KiDQ.s:2475   .text.is_tap_action:0000000000000000 is_tap_action
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccv3KiDQ.s:2563   .text.is_tap_key:0000000000000000 is_tap_key
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccv3KiDQ.s:2586   .text.debug_event:0000000000000000 debug_event
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccv3KiDQ.s:2628   .text.debug_record:0000000000000000 debug_record
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccv3KiDQ.s:2672   .text.debug_action:0000000000000000 debug_action
                            *COM*:0000000000000002 tp_buttons

UNDEFINED SYMBOLS
hand_swap_config
action_tapping_process
layer_switch_get_action
host_keyboard_leds
add_key
send_keyboard_report
del_key
add_mods
host_system_send
host_consumer_send
del_mods
clear_weak_mods
is_oneshot_layer_active
clear_oneshot_layer_state
__tablejump2__
add_weak_mods
led_set
get_oneshot_layer_state
get_oneshot_layer
layer_on
layer_off
del_weak_mods
get_oneshot_mods
set_oneshot_mods
clear_oneshot_mods
default_layer_and
default_layer_xor
default_layer_or
layer_and
layer_xor
layer_or
layer_invert
layer_move
layer_clear
set_oneshot_layer
action_get_macro
action_macro_play
action_function
store_or_get_action
layer_debug
default_layer_debug
clear_macro_mods
clear_keys
clear_mods
__do_clear_bss
