   1               		.file	"lufa.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.keyboard_leds,"ax",@progbits
  12               	keyboard_leds:
  13               	.LFB128:
  14               		.file 1 "tmk_core/protocol/lufa/lufa.c"
   1:tmk_core/protocol/lufa/lufa.c **** /*
   2:tmk_core/protocol/lufa/lufa.c ****  * Copyright 2012 Jun Wako <wakojun@gmail.com>
   3:tmk_core/protocol/lufa/lufa.c ****  * This file is based on:
   4:tmk_core/protocol/lufa/lufa.c ****  *     LUFA-120219/Demos/Device/Lowlevel/KeyboardMouse
   5:tmk_core/protocol/lufa/lufa.c ****  *     LUFA-120219/Demos/Device/Lowlevel/GenericHID
   6:tmk_core/protocol/lufa/lufa.c ****  */
   7:tmk_core/protocol/lufa/lufa.c **** 
   8:tmk_core/protocol/lufa/lufa.c **** /*
   9:tmk_core/protocol/lufa/lufa.c ****              LUFA Library
  10:tmk_core/protocol/lufa/lufa.c ****      Copyright (C) Dean Camera, 2012.
  11:tmk_core/protocol/lufa/lufa.c **** 
  12:tmk_core/protocol/lufa/lufa.c ****   dean [at] fourwalledcubicle [dot] com
  13:tmk_core/protocol/lufa/lufa.c ****            www.lufa-lib.org
  14:tmk_core/protocol/lufa/lufa.c **** */
  15:tmk_core/protocol/lufa/lufa.c **** 
  16:tmk_core/protocol/lufa/lufa.c **** /*
  17:tmk_core/protocol/lufa/lufa.c ****   Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  18:tmk_core/protocol/lufa/lufa.c ****   Copyright 2010  Denver Gingerich (denver [at] ossguy [dot] com)
  19:tmk_core/protocol/lufa/lufa.c **** 
  20:tmk_core/protocol/lufa/lufa.c ****   Permission to use, copy, modify, distribute, and sell this
  21:tmk_core/protocol/lufa/lufa.c ****   software and its documentation for any purpose is hereby granted
  22:tmk_core/protocol/lufa/lufa.c ****   without fee, provided that the above copyright notice appear in
  23:tmk_core/protocol/lufa/lufa.c ****   all copies and that both that the copyright notice and this
  24:tmk_core/protocol/lufa/lufa.c ****   permission notice and warranty disclaimer appear in supporting
  25:tmk_core/protocol/lufa/lufa.c ****   documentation, and that the name of the author not be used in
  26:tmk_core/protocol/lufa/lufa.c ****   advertising or publicity pertaining to distribution of the
  27:tmk_core/protocol/lufa/lufa.c ****   software without specific, written prior permission.
  28:tmk_core/protocol/lufa/lufa.c **** 
  29:tmk_core/protocol/lufa/lufa.c ****   The author disclaim all warranties with regard to this
  30:tmk_core/protocol/lufa/lufa.c ****   software, including all implied warranties of merchantability
  31:tmk_core/protocol/lufa/lufa.c ****   and fitness.  In no event shall the author be liable for any
  32:tmk_core/protocol/lufa/lufa.c ****   special, indirect or consequential damages or any damages
  33:tmk_core/protocol/lufa/lufa.c ****   whatsoever resulting from loss of use, data or profits, whether
  34:tmk_core/protocol/lufa/lufa.c ****   in an action of contract, negligence or other tortious action,
  35:tmk_core/protocol/lufa/lufa.c ****   arising out of or in connection with the use or performance of
  36:tmk_core/protocol/lufa/lufa.c ****   this software.
  37:tmk_core/protocol/lufa/lufa.c **** */
  38:tmk_core/protocol/lufa/lufa.c **** 
  39:tmk_core/protocol/lufa/lufa.c **** #include "report.h"
  40:tmk_core/protocol/lufa/lufa.c **** #include "host.h"
  41:tmk_core/protocol/lufa/lufa.c **** #include "host_driver.h"
  42:tmk_core/protocol/lufa/lufa.c **** #include "keyboard.h"
  43:tmk_core/protocol/lufa/lufa.c **** #include "action.h"
  44:tmk_core/protocol/lufa/lufa.c **** #include "led.h"
  45:tmk_core/protocol/lufa/lufa.c **** #include "sendchar.h"
  46:tmk_core/protocol/lufa/lufa.c **** #include "debug.h"
  47:tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
  48:tmk_core/protocol/lufa/lufa.c **** #include "sleep_led.h"
  49:tmk_core/protocol/lufa/lufa.c **** #endif
  50:tmk_core/protocol/lufa/lufa.c **** #include "suspend.h"
  51:tmk_core/protocol/lufa/lufa.c **** 
  52:tmk_core/protocol/lufa/lufa.c **** #include "usb_descriptor.h"
  53:tmk_core/protocol/lufa/lufa.c **** #include "lufa.h"
  54:tmk_core/protocol/lufa/lufa.c **** #include "quantum.h"
  55:tmk_core/protocol/lufa/lufa.c **** #include <util/atomic.h>
  56:tmk_core/protocol/lufa/lufa.c **** #include "outputselect.h"
  57:tmk_core/protocol/lufa/lufa.c **** #include "rgblight_reconfig.h"
  58:tmk_core/protocol/lufa/lufa.c **** 
  59:tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
  60:tmk_core/protocol/lufa/lufa.c ****   #include "keycode_config.h"
  61:tmk_core/protocol/lufa/lufa.c **** 
  62:tmk_core/protocol/lufa/lufa.c ****   extern keymap_config_t keymap_config;
  63:tmk_core/protocol/lufa/lufa.c **** #endif
  64:tmk_core/protocol/lufa/lufa.c **** 
  65:tmk_core/protocol/lufa/lufa.c **** 
  66:tmk_core/protocol/lufa/lufa.c **** #ifdef AUDIO_ENABLE
  67:tmk_core/protocol/lufa/lufa.c ****     #include <audio.h>
  68:tmk_core/protocol/lufa/lufa.c **** #endif
  69:tmk_core/protocol/lufa/lufa.c **** 
  70:tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
  71:tmk_core/protocol/lufa/lufa.c ****   #ifdef MODULE_ADAFRUIT_BLE
  72:tmk_core/protocol/lufa/lufa.c ****     #include "adafruit_ble.h"
  73:tmk_core/protocol/lufa/lufa.c ****   #else
  74:tmk_core/protocol/lufa/lufa.c ****     #include "bluetooth.h"
  75:tmk_core/protocol/lufa/lufa.c ****   #endif
  76:tmk_core/protocol/lufa/lufa.c **** #endif
  77:tmk_core/protocol/lufa/lufa.c **** 
  78:tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
  79:tmk_core/protocol/lufa/lufa.c ****     #include "virtser.h"
  80:tmk_core/protocol/lufa/lufa.c **** #endif
  81:tmk_core/protocol/lufa/lufa.c **** 
  82:tmk_core/protocol/lufa/lufa.c **** #if (defined(RGB_MIDI) | defined(RGBLIGHT_ANIMATIONS)) & defined(RGBLIGHT_ENABLE)
  83:tmk_core/protocol/lufa/lufa.c ****     #include "rgblight.h"
  84:tmk_core/protocol/lufa/lufa.c **** #endif
  85:tmk_core/protocol/lufa/lufa.c **** 
  86:tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
  87:tmk_core/protocol/lufa/lufa.c ****   #include "qmk_midi.h"
  88:tmk_core/protocol/lufa/lufa.c **** #endif
  89:tmk_core/protocol/lufa/lufa.c **** 
  90:tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
  91:tmk_core/protocol/lufa/lufa.c **** 	#include "raw_hid.h"
  92:tmk_core/protocol/lufa/lufa.c **** #endif
  93:tmk_core/protocol/lufa/lufa.c **** 
  94:tmk_core/protocol/lufa/lufa.c **** uint8_t keyboard_idle = 0;
  95:tmk_core/protocol/lufa/lufa.c **** /* 0: Boot Protocol, 1: Report Protocol(default) */
  96:tmk_core/protocol/lufa/lufa.c **** uint8_t keyboard_protocol = 1;
  97:tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_led_stats = 0;
  98:tmk_core/protocol/lufa/lufa.c **** 
  99:tmk_core/protocol/lufa/lufa.c **** static report_keyboard_t keyboard_report_sent;
 100:tmk_core/protocol/lufa/lufa.c **** 
 101:tmk_core/protocol/lufa/lufa.c **** /* Host driver */
 102:tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_leds(void);
 103:tmk_core/protocol/lufa/lufa.c **** static void send_keyboard(report_keyboard_t *report);
 104:tmk_core/protocol/lufa/lufa.c **** static void send_mouse(report_mouse_t *report);
 105:tmk_core/protocol/lufa/lufa.c **** static void send_system(uint16_t data);
 106:tmk_core/protocol/lufa/lufa.c **** static void send_consumer(uint16_t data);
 107:tmk_core/protocol/lufa/lufa.c **** host_driver_t lufa_driver = {
 108:tmk_core/protocol/lufa/lufa.c ****     keyboard_leds,
 109:tmk_core/protocol/lufa/lufa.c ****     send_keyboard,
 110:tmk_core/protocol/lufa/lufa.c ****     send_mouse,
 111:tmk_core/protocol/lufa/lufa.c ****     send_system,
 112:tmk_core/protocol/lufa/lufa.c ****     send_consumer,
 113:tmk_core/protocol/lufa/lufa.c **** };
 114:tmk_core/protocol/lufa/lufa.c **** 
 115:tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 116:tmk_core/protocol/lufa/lufa.c **** USB_ClassInfo_CDC_Device_t cdc_device =
 117:tmk_core/protocol/lufa/lufa.c **** {
 118:tmk_core/protocol/lufa/lufa.c ****   .Config =
 119:tmk_core/protocol/lufa/lufa.c ****   {
 120:tmk_core/protocol/lufa/lufa.c ****     .ControlInterfaceNumber = CCI_INTERFACE,
 121:tmk_core/protocol/lufa/lufa.c ****     .DataINEndpoint         =
 122:tmk_core/protocol/lufa/lufa.c ****     {
 123:tmk_core/protocol/lufa/lufa.c ****       .Address		= CDC_IN_EPADDR,
 124:tmk_core/protocol/lufa/lufa.c ****       .Size		= CDC_EPSIZE,
 125:tmk_core/protocol/lufa/lufa.c ****       .Banks		= 1,
 126:tmk_core/protocol/lufa/lufa.c ****     },
 127:tmk_core/protocol/lufa/lufa.c ****     .DataOUTEndpoint	    =
 128:tmk_core/protocol/lufa/lufa.c ****     {
 129:tmk_core/protocol/lufa/lufa.c ****       .Address		= CDC_OUT_EPADDR,
 130:tmk_core/protocol/lufa/lufa.c ****       .Size		= CDC_EPSIZE,
 131:tmk_core/protocol/lufa/lufa.c ****       .Banks		= 1,
 132:tmk_core/protocol/lufa/lufa.c ****     },
 133:tmk_core/protocol/lufa/lufa.c ****     .NotificationEndpoint   =
 134:tmk_core/protocol/lufa/lufa.c ****     {
 135:tmk_core/protocol/lufa/lufa.c ****       .Address		= CDC_NOTIFICATION_EPADDR,
 136:tmk_core/protocol/lufa/lufa.c ****       .Size		= CDC_NOTIFICATION_EPSIZE,
 137:tmk_core/protocol/lufa/lufa.c ****       .Banks		= 1,
 138:tmk_core/protocol/lufa/lufa.c ****     },
 139:tmk_core/protocol/lufa/lufa.c ****   },
 140:tmk_core/protocol/lufa/lufa.c **** };
 141:tmk_core/protocol/lufa/lufa.c **** #endif
 142:tmk_core/protocol/lufa/lufa.c **** 
 143:tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
 144:tmk_core/protocol/lufa/lufa.c **** 
 145:tmk_core/protocol/lufa/lufa.c **** /** \brief Raw HID Send
 146:tmk_core/protocol/lufa/lufa.c ****  *
 147:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 148:tmk_core/protocol/lufa/lufa.c ****  */
 149:tmk_core/protocol/lufa/lufa.c **** void raw_hid_send( uint8_t *data, uint8_t length )
 150:tmk_core/protocol/lufa/lufa.c **** {
 151:tmk_core/protocol/lufa/lufa.c **** 	// TODO: implement variable size packet
 152:tmk_core/protocol/lufa/lufa.c **** 	if ( length != RAW_EPSIZE )
 153:tmk_core/protocol/lufa/lufa.c **** 	{
 154:tmk_core/protocol/lufa/lufa.c **** 		return;
 155:tmk_core/protocol/lufa/lufa.c **** 	}
 156:tmk_core/protocol/lufa/lufa.c **** 
 157:tmk_core/protocol/lufa/lufa.c **** 	if (USB_DeviceState != DEVICE_STATE_Configured)
 158:tmk_core/protocol/lufa/lufa.c **** 	{
 159:tmk_core/protocol/lufa/lufa.c **** 		return;
 160:tmk_core/protocol/lufa/lufa.c **** 	}
 161:tmk_core/protocol/lufa/lufa.c **** 
 162:tmk_core/protocol/lufa/lufa.c **** 	// TODO: decide if we allow calls to raw_hid_send() in the middle
 163:tmk_core/protocol/lufa/lufa.c **** 	// of other endpoint usage.
 164:tmk_core/protocol/lufa/lufa.c **** 	uint8_t ep = Endpoint_GetCurrentEndpoint();
 165:tmk_core/protocol/lufa/lufa.c **** 
 166:tmk_core/protocol/lufa/lufa.c **** 	Endpoint_SelectEndpoint(RAW_IN_EPNUM);
 167:tmk_core/protocol/lufa/lufa.c **** 
 168:tmk_core/protocol/lufa/lufa.c **** 	// Check to see if the host is ready to accept another packet
 169:tmk_core/protocol/lufa/lufa.c **** 	if (Endpoint_IsINReady())
 170:tmk_core/protocol/lufa/lufa.c **** 	{
 171:tmk_core/protocol/lufa/lufa.c **** 		// Write data
 172:tmk_core/protocol/lufa/lufa.c **** 		Endpoint_Write_Stream_LE(data, RAW_EPSIZE, NULL);
 173:tmk_core/protocol/lufa/lufa.c **** 		// Finalize the stream transfer to send the last packet
 174:tmk_core/protocol/lufa/lufa.c **** 		Endpoint_ClearIN();
 175:tmk_core/protocol/lufa/lufa.c **** 	}
 176:tmk_core/protocol/lufa/lufa.c **** 
 177:tmk_core/protocol/lufa/lufa.c **** 	Endpoint_SelectEndpoint(ep);
 178:tmk_core/protocol/lufa/lufa.c **** }
 179:tmk_core/protocol/lufa/lufa.c **** 
 180:tmk_core/protocol/lufa/lufa.c **** /** \brief Raw HID Receive
 181:tmk_core/protocol/lufa/lufa.c ****  *
 182:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 183:tmk_core/protocol/lufa/lufa.c ****  */
 184:tmk_core/protocol/lufa/lufa.c **** __attribute__ ((weak))
 185:tmk_core/protocol/lufa/lufa.c **** void raw_hid_receive( uint8_t *data, uint8_t length )
 186:tmk_core/protocol/lufa/lufa.c **** {
 187:tmk_core/protocol/lufa/lufa.c **** 	// Users should #include "raw_hid.h" in their own code
 188:tmk_core/protocol/lufa/lufa.c **** 	// and implement this function there. Leave this as weak linkage
 189:tmk_core/protocol/lufa/lufa.c **** 	// so users can opt to not handle data coming in.
 190:tmk_core/protocol/lufa/lufa.c **** }
 191:tmk_core/protocol/lufa/lufa.c **** 
 192:tmk_core/protocol/lufa/lufa.c **** /** \brief Raw HID Task
 193:tmk_core/protocol/lufa/lufa.c ****  *
 194:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 195:tmk_core/protocol/lufa/lufa.c ****  */
 196:tmk_core/protocol/lufa/lufa.c **** static void raw_hid_task(void)
 197:tmk_core/protocol/lufa/lufa.c **** {
 198:tmk_core/protocol/lufa/lufa.c **** 	// Create a temporary buffer to hold the read in data from the host
 199:tmk_core/protocol/lufa/lufa.c **** 	uint8_t data[RAW_EPSIZE];
 200:tmk_core/protocol/lufa/lufa.c **** 	bool data_read = false;
 201:tmk_core/protocol/lufa/lufa.c **** 
 202:tmk_core/protocol/lufa/lufa.c **** 	// Device must be connected and configured for the task to run
 203:tmk_core/protocol/lufa/lufa.c **** 	if (USB_DeviceState != DEVICE_STATE_Configured)
 204:tmk_core/protocol/lufa/lufa.c **** 	return;
 205:tmk_core/protocol/lufa/lufa.c **** 
 206:tmk_core/protocol/lufa/lufa.c **** 	Endpoint_SelectEndpoint(RAW_OUT_EPNUM);
 207:tmk_core/protocol/lufa/lufa.c **** 
 208:tmk_core/protocol/lufa/lufa.c **** 	// Check to see if a packet has been sent from the host
 209:tmk_core/protocol/lufa/lufa.c **** 	if (Endpoint_IsOUTReceived())
 210:tmk_core/protocol/lufa/lufa.c **** 	{
 211:tmk_core/protocol/lufa/lufa.c **** 		// Check to see if the packet contains data
 212:tmk_core/protocol/lufa/lufa.c **** 		if (Endpoint_IsReadWriteAllowed())
 213:tmk_core/protocol/lufa/lufa.c **** 		{
 214:tmk_core/protocol/lufa/lufa.c **** 			/* Read data */
 215:tmk_core/protocol/lufa/lufa.c **** 			Endpoint_Read_Stream_LE(data, sizeof(data), NULL);
 216:tmk_core/protocol/lufa/lufa.c **** 			data_read = true;
 217:tmk_core/protocol/lufa/lufa.c **** 		}
 218:tmk_core/protocol/lufa/lufa.c **** 
 219:tmk_core/protocol/lufa/lufa.c **** 		// Finalize the stream transfer to receive the last packet
 220:tmk_core/protocol/lufa/lufa.c **** 		Endpoint_ClearOUT();
 221:tmk_core/protocol/lufa/lufa.c **** 
 222:tmk_core/protocol/lufa/lufa.c **** 		if ( data_read )
 223:tmk_core/protocol/lufa/lufa.c **** 		{
 224:tmk_core/protocol/lufa/lufa.c **** 			raw_hid_receive( data, sizeof(data) );
 225:tmk_core/protocol/lufa/lufa.c **** 		}
 226:tmk_core/protocol/lufa/lufa.c **** 	}
 227:tmk_core/protocol/lufa/lufa.c **** }
 228:tmk_core/protocol/lufa/lufa.c **** #endif
 229:tmk_core/protocol/lufa/lufa.c **** 
 230:tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 231:tmk_core/protocol/lufa/lufa.c ****  * Console
 232:tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 233:tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 234:tmk_core/protocol/lufa/lufa.c **** /** \brief Console Task
 235:tmk_core/protocol/lufa/lufa.c ****  *
 236:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 237:tmk_core/protocol/lufa/lufa.c ****  */
 238:tmk_core/protocol/lufa/lufa.c **** static void Console_Task(void)
 239:tmk_core/protocol/lufa/lufa.c **** {
 240:tmk_core/protocol/lufa/lufa.c ****     /* Device must be connected and configured for the task to run */
 241:tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 242:tmk_core/protocol/lufa/lufa.c ****         return;
 243:tmk_core/protocol/lufa/lufa.c **** 
 244:tmk_core/protocol/lufa/lufa.c ****     uint8_t ep = Endpoint_GetCurrentEndpoint();
 245:tmk_core/protocol/lufa/lufa.c **** 
 246:tmk_core/protocol/lufa/lufa.c **** #if 0
 247:tmk_core/protocol/lufa/lufa.c ****     // TODO: impl receivechar()/recvchar()
 248:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_OUT_EPNUM);
 249:tmk_core/protocol/lufa/lufa.c **** 
 250:tmk_core/protocol/lufa/lufa.c ****     /* Check to see if a packet has been sent from the host */
 251:tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsOUTReceived())
 252:tmk_core/protocol/lufa/lufa.c ****     {
 253:tmk_core/protocol/lufa/lufa.c ****         /* Check to see if the packet contains data */
 254:tmk_core/protocol/lufa/lufa.c ****         if (Endpoint_IsReadWriteAllowed())
 255:tmk_core/protocol/lufa/lufa.c ****         {
 256:tmk_core/protocol/lufa/lufa.c ****             /* Create a temporary buffer to hold the read in report from the host */
 257:tmk_core/protocol/lufa/lufa.c ****             uint8_t ConsoleData[CONSOLE_EPSIZE];
 258:tmk_core/protocol/lufa/lufa.c **** 
 259:tmk_core/protocol/lufa/lufa.c ****             /* Read Console Report Data */
 260:tmk_core/protocol/lufa/lufa.c ****             Endpoint_Read_Stream_LE(&ConsoleData, sizeof(ConsoleData), NULL);
 261:tmk_core/protocol/lufa/lufa.c **** 
 262:tmk_core/protocol/lufa/lufa.c ****             /* Process Console Report Data */
 263:tmk_core/protocol/lufa/lufa.c ****             //ProcessConsoleHIDReport(ConsoleData);
 264:tmk_core/protocol/lufa/lufa.c ****         }
 265:tmk_core/protocol/lufa/lufa.c **** 
 266:tmk_core/protocol/lufa/lufa.c ****         /* Finalize the stream transfer to send the last packet */
 267:tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearOUT();
 268:tmk_core/protocol/lufa/lufa.c ****     }
 269:tmk_core/protocol/lufa/lufa.c **** #endif
 270:tmk_core/protocol/lufa/lufa.c **** 
 271:tmk_core/protocol/lufa/lufa.c ****     /* IN packet */
 272:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
 273:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 274:tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
 275:tmk_core/protocol/lufa/lufa.c ****         return;
 276:tmk_core/protocol/lufa/lufa.c ****     }
 277:tmk_core/protocol/lufa/lufa.c **** 
 278:tmk_core/protocol/lufa/lufa.c ****     // fill empty bank
 279:tmk_core/protocol/lufa/lufa.c ****     while (Endpoint_IsReadWriteAllowed())
 280:tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_8(0);
 281:tmk_core/protocol/lufa/lufa.c **** 
 282:tmk_core/protocol/lufa/lufa.c ****     // flash senchar packet
 283:tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsINReady()) {
 284:tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 285:tmk_core/protocol/lufa/lufa.c ****     }
 286:tmk_core/protocol/lufa/lufa.c **** 
 287:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 288:tmk_core/protocol/lufa/lufa.c **** }
 289:tmk_core/protocol/lufa/lufa.c **** #endif
 290:tmk_core/protocol/lufa/lufa.c **** 
 291:tmk_core/protocol/lufa/lufa.c **** 
 292:tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 293:tmk_core/protocol/lufa/lufa.c ****  * USB Events
 294:tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 295:tmk_core/protocol/lufa/lufa.c **** /*
 296:tmk_core/protocol/lufa/lufa.c ****  * Event Order of Plug in:
 297:tmk_core/protocol/lufa/lufa.c ****  * 0) EVENT_USB_Device_Connect
 298:tmk_core/protocol/lufa/lufa.c ****  * 1) EVENT_USB_Device_Suspend
 299:tmk_core/protocol/lufa/lufa.c ****  * 2) EVENT_USB_Device_Reset
 300:tmk_core/protocol/lufa/lufa.c ****  * 3) EVENT_USB_Device_Wake
 301:tmk_core/protocol/lufa/lufa.c **** */
 302:tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 303:tmk_core/protocol/lufa/lufa.c ****  *
 304:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 305:tmk_core/protocol/lufa/lufa.c ****  */
 306:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Connect(void)
 307:tmk_core/protocol/lufa/lufa.c **** {
 308:tmk_core/protocol/lufa/lufa.c ****     print("[C]");
 309:tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 310:tmk_core/protocol/lufa/lufa.c ****     if (!USB_IsInitialized) {
 311:tmk_core/protocol/lufa/lufa.c ****         USB_Disable();
 312:tmk_core/protocol/lufa/lufa.c ****         USB_Init();
 313:tmk_core/protocol/lufa/lufa.c ****         USB_Device_EnableSOFEvents();
 314:tmk_core/protocol/lufa/lufa.c ****     }
 315:tmk_core/protocol/lufa/lufa.c **** }
 316:tmk_core/protocol/lufa/lufa.c **** 
 317:tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 318:tmk_core/protocol/lufa/lufa.c ****  *
 319:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 320:tmk_core/protocol/lufa/lufa.c ****  */
 321:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Disconnect(void)
 322:tmk_core/protocol/lufa/lufa.c **** {
 323:tmk_core/protocol/lufa/lufa.c ****     print("[D]");
 324:tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 325:tmk_core/protocol/lufa/lufa.c ****     USB_IsInitialized = false;
 326:tmk_core/protocol/lufa/lufa.c **** /* TODO: This doesn't work. After several plug in/outs can not be enumerated.
 327:tmk_core/protocol/lufa/lufa.c ****     if (USB_IsInitialized) {
 328:tmk_core/protocol/lufa/lufa.c ****         USB_Disable();  // Disable all interrupts
 329:tmk_core/protocol/lufa/lufa.c **** 	USB_Controller_Enable();
 330:tmk_core/protocol/lufa/lufa.c ****         USB_INT_Enable(USB_INT_VBUSTI);
 331:tmk_core/protocol/lufa/lufa.c ****     }
 332:tmk_core/protocol/lufa/lufa.c **** */
 333:tmk_core/protocol/lufa/lufa.c **** }
 334:tmk_core/protocol/lufa/lufa.c **** 
 335:tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 336:tmk_core/protocol/lufa/lufa.c ****  *
 337:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 338:tmk_core/protocol/lufa/lufa.c ****  */
 339:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Reset(void)
 340:tmk_core/protocol/lufa/lufa.c **** {
 341:tmk_core/protocol/lufa/lufa.c ****     print("[R]");
 342:tmk_core/protocol/lufa/lufa.c **** }
 343:tmk_core/protocol/lufa/lufa.c **** 
 344:tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 345:tmk_core/protocol/lufa/lufa.c ****  *
 346:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 347:tmk_core/protocol/lufa/lufa.c ****  */
 348:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Suspend()
 349:tmk_core/protocol/lufa/lufa.c **** {
 350:tmk_core/protocol/lufa/lufa.c ****     print("[S]");
 351:tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 352:tmk_core/protocol/lufa/lufa.c ****     sleep_led_enable();
 353:tmk_core/protocol/lufa/lufa.c **** #endif
 354:tmk_core/protocol/lufa/lufa.c **** }
 355:tmk_core/protocol/lufa/lufa.c **** 
 356:tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 357:tmk_core/protocol/lufa/lufa.c ****  *
 358:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 359:tmk_core/protocol/lufa/lufa.c ****  */
 360:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_WakeUp()
 361:tmk_core/protocol/lufa/lufa.c **** {
 362:tmk_core/protocol/lufa/lufa.c ****     print("[W]");
 363:tmk_core/protocol/lufa/lufa.c ****     suspend_wakeup_init();
 364:tmk_core/protocol/lufa/lufa.c **** 
 365:tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 366:tmk_core/protocol/lufa/lufa.c ****     sleep_led_disable();
 367:tmk_core/protocol/lufa/lufa.c ****     // NOTE: converters may not accept this
 368:tmk_core/protocol/lufa/lufa.c ****     led_set(host_keyboard_leds());
 369:tmk_core/protocol/lufa/lufa.c **** #endif
 370:tmk_core/protocol/lufa/lufa.c **** }
 371:tmk_core/protocol/lufa/lufa.c **** 
 372:tmk_core/protocol/lufa/lufa.c **** 
 373:tmk_core/protocol/lufa/lufa.c **** 
 374:tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 375:tmk_core/protocol/lufa/lufa.c **** static bool console_flush = false;
 376:tmk_core/protocol/lufa/lufa.c **** #define CONSOLE_FLUSH_SET(b)   do { \
 377:tmk_core/protocol/lufa/lufa.c ****   ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {\
 378:tmk_core/protocol/lufa/lufa.c ****     console_flush = b; \
 379:tmk_core/protocol/lufa/lufa.c ****   } \
 380:tmk_core/protocol/lufa/lufa.c **** } while (0)
 381:tmk_core/protocol/lufa/lufa.c **** 
 382:tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Start Of Frame
 383:tmk_core/protocol/lufa/lufa.c ****  *
 384:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 385:tmk_core/protocol/lufa/lufa.c ****  * called every 1ms
 386:tmk_core/protocol/lufa/lufa.c ****  */
 387:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_StartOfFrame(void)
 388:tmk_core/protocol/lufa/lufa.c **** {
 389:tmk_core/protocol/lufa/lufa.c ****     static uint8_t count;
 390:tmk_core/protocol/lufa/lufa.c ****     if (++count % 50) return;
 391:tmk_core/protocol/lufa/lufa.c ****     count = 0;
 392:tmk_core/protocol/lufa/lufa.c **** 
 393:tmk_core/protocol/lufa/lufa.c ****     if (!console_flush) return;
 394:tmk_core/protocol/lufa/lufa.c ****     Console_Task();
 395:tmk_core/protocol/lufa/lufa.c ****     console_flush = false;
 396:tmk_core/protocol/lufa/lufa.c **** }
 397:tmk_core/protocol/lufa/lufa.c **** 
 398:tmk_core/protocol/lufa/lufa.c **** #endif
 399:tmk_core/protocol/lufa/lufa.c **** 
 400:tmk_core/protocol/lufa/lufa.c **** /** \brief Event handler for the USB_ConfigurationChanged event.
 401:tmk_core/protocol/lufa/lufa.c ****  *
 402:tmk_core/protocol/lufa/lufa.c ****  * This is fired when the host sets the current configuration of the USB device after enumeration.
 403:tmk_core/protocol/lufa/lufa.c ****  *
 404:tmk_core/protocol/lufa/lufa.c ****  * ATMega32u2 supports dual bank(ping-pong mode) only on endpoint 3 and 4,
 405:tmk_core/protocol/lufa/lufa.c ****  * it is safe to use single bank for all endpoints.
 406:tmk_core/protocol/lufa/lufa.c ****  */
 407:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_ConfigurationChanged(void)
 408:tmk_core/protocol/lufa/lufa.c **** {
 409:tmk_core/protocol/lufa/lufa.c ****     bool ConfigSuccess = true;
 410:tmk_core/protocol/lufa/lufa.c **** 
 411:tmk_core/protocol/lufa/lufa.c ****     /* Setup Keyboard HID Report Endpoints */
 412:tmk_core/protocol/lufa/lufa.c **** #ifndef KEYBOARD_SHARED_EP
 413:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(KEYBOARD_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 414:tmk_core/protocol/lufa/lufa.c ****                                      KEYBOARD_EPSIZE, ENDPOINT_BANK_SINGLE);
 415:tmk_core/protocol/lufa/lufa.c **** #endif
 416:tmk_core/protocol/lufa/lufa.c **** 
 417:tmk_core/protocol/lufa/lufa.c **** #if defined(MOUSE_ENABLE) && !defined(MOUSE_SHARED_EP)
 418:tmk_core/protocol/lufa/lufa.c ****     /* Setup Mouse HID Report Endpoint */
 419:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(MOUSE_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 420:tmk_core/protocol/lufa/lufa.c ****                                      MOUSE_EPSIZE, ENDPOINT_BANK_SINGLE);
 421:tmk_core/protocol/lufa/lufa.c **** #endif
 422:tmk_core/protocol/lufa/lufa.c **** 
 423:tmk_core/protocol/lufa/lufa.c **** #ifdef SHARED_EP_ENABLE
 424:tmk_core/protocol/lufa/lufa.c ****     /* Setup Shared HID Report Endpoint */
 425:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(SHARED_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 426:tmk_core/protocol/lufa/lufa.c ****                                      SHARED_EPSIZE, ENDPOINT_BANK_SINGLE);
 427:tmk_core/protocol/lufa/lufa.c **** #endif
 428:tmk_core/protocol/lufa/lufa.c **** 
 429:tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
 430:tmk_core/protocol/lufa/lufa.c ****     /* Setup Raw HID Report Endpoints */
 431:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(RAW_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 432:tmk_core/protocol/lufa/lufa.c **** 									 RAW_EPSIZE, ENDPOINT_BANK_SINGLE);
 433:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(RAW_OUT_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_OUT,
 434:tmk_core/protocol/lufa/lufa.c **** 									 RAW_EPSIZE, ENDPOINT_BANK_SINGLE);
 435:tmk_core/protocol/lufa/lufa.c **** #endif
 436:tmk_core/protocol/lufa/lufa.c **** 
 437:tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 438:tmk_core/protocol/lufa/lufa.c ****     /* Setup Console HID Report Endpoints */
 439:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(CONSOLE_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 440:tmk_core/protocol/lufa/lufa.c ****                                      CONSOLE_EPSIZE, ENDPOINT_BANK_SINGLE);
 441:tmk_core/protocol/lufa/lufa.c **** #if 0
 442:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(CONSOLE_OUT_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_OUT,
 443:tmk_core/protocol/lufa/lufa.c ****                                      CONSOLE_EPSIZE, ENDPOINT_BANK_SINGLE);
 444:tmk_core/protocol/lufa/lufa.c **** #endif
 445:tmk_core/protocol/lufa/lufa.c **** #endif
 446:tmk_core/protocol/lufa/lufa.c **** 
 447:tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 448:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_IN_EPADDR, EP_TYPE_BULK, MIDI_STREAM_EP
 449:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_OUT_EPADDR, EP_TYPE_BULK, MIDI_STREAM_E
 450:tmk_core/protocol/lufa/lufa.c **** #endif
 451:tmk_core/protocol/lufa/lufa.c **** 
 452:tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 453:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_NOTIFICATION_EPADDR, EP_TYPE_INTERRUPT, CDC_NOT
 454:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_OUT_EPADDR, EP_TYPE_BULK, CDC_EPSIZE, ENDPOINT_
 455:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_IN_EPADDR, EP_TYPE_BULK, CDC_EPSIZE, ENDPOINT_B
 456:tmk_core/protocol/lufa/lufa.c **** #endif
 457:tmk_core/protocol/lufa/lufa.c **** }
 458:tmk_core/protocol/lufa/lufa.c **** 
 459:tmk_core/protocol/lufa/lufa.c **** /* FIXME: Expose this table in the docs somehow
 460:tmk_core/protocol/lufa/lufa.c **** Appendix G: HID Request Support Requirements
 461:tmk_core/protocol/lufa/lufa.c **** 
 462:tmk_core/protocol/lufa/lufa.c **** The following table enumerates the requests that need to be supported by various types of HID class
 463:tmk_core/protocol/lufa/lufa.c **** 
 464:tmk_core/protocol/lufa/lufa.c **** Device type     GetReport   SetReport   GetIdle     SetIdle     GetProtocol SetProtocol
 465:tmk_core/protocol/lufa/lufa.c **** ------------------------------------------------------------------------------------------
 466:tmk_core/protocol/lufa/lufa.c **** Boot Mouse      Required    Optional    Optional    Optional    Required    Required
 467:tmk_core/protocol/lufa/lufa.c **** Non-Boot Mouse  Required    Optional    Optional    Optional    Optional    Optional
 468:tmk_core/protocol/lufa/lufa.c **** Boot Keyboard   Required    Optional    Required    Required    Required    Required
 469:tmk_core/protocol/lufa/lufa.c **** Non-Boot Keybrd Required    Optional    Required    Required    Optional    Optional
 470:tmk_core/protocol/lufa/lufa.c **** Other Device    Required    Optional    Optional    Optional    Optional    Optional
 471:tmk_core/protocol/lufa/lufa.c **** */
 472:tmk_core/protocol/lufa/lufa.c **** /** \brief Event handler for the USB_ControlRequest event.
 473:tmk_core/protocol/lufa/lufa.c ****  *
 474:tmk_core/protocol/lufa/lufa.c ****  *  This is fired before passing along unhandled control requests to the library for processing int
 475:tmk_core/protocol/lufa/lufa.c ****  */
 476:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_ControlRequest(void)
 477:tmk_core/protocol/lufa/lufa.c **** {
 478:tmk_core/protocol/lufa/lufa.c ****     uint8_t* ReportData = NULL;
 479:tmk_core/protocol/lufa/lufa.c ****     uint8_t  ReportSize = 0;
 480:tmk_core/protocol/lufa/lufa.c **** 
 481:tmk_core/protocol/lufa/lufa.c ****     /* Handle HID Class specific requests */
 482:tmk_core/protocol/lufa/lufa.c ****     switch (USB_ControlRequest.bRequest)
 483:tmk_core/protocol/lufa/lufa.c ****     {
 484:tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetReport:
 485:tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 486:tmk_core/protocol/lufa/lufa.c ****             {
 487:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 488:tmk_core/protocol/lufa/lufa.c **** 
 489:tmk_core/protocol/lufa/lufa.c ****                 // Interface
 490:tmk_core/protocol/lufa/lufa.c ****                 switch (USB_ControlRequest.wIndex) {
 491:tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 492:tmk_core/protocol/lufa/lufa.c ****                     // TODO: test/check
 493:tmk_core/protocol/lufa/lufa.c ****                     ReportData = (uint8_t*)&keyboard_report_sent;
 494:tmk_core/protocol/lufa/lufa.c ****                     ReportSize = sizeof(keyboard_report_sent);
 495:tmk_core/protocol/lufa/lufa.c ****                     break;
 496:tmk_core/protocol/lufa/lufa.c ****                 }
 497:tmk_core/protocol/lufa/lufa.c **** 
 498:tmk_core/protocol/lufa/lufa.c ****                 /* Write the report data to the control endpoint */
 499:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
 500:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearOUT();
 501:tmk_core/protocol/lufa/lufa.c ****             }
 502:tmk_core/protocol/lufa/lufa.c **** 
 503:tmk_core/protocol/lufa/lufa.c ****             break;
 504:tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetReport:
 505:tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 506:tmk_core/protocol/lufa/lufa.c ****             {
 507:tmk_core/protocol/lufa/lufa.c **** 
 508:tmk_core/protocol/lufa/lufa.c ****                 // Interface
 509:tmk_core/protocol/lufa/lufa.c ****                 switch (USB_ControlRequest.wIndex) {
 510:tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 511:tmk_core/protocol/lufa/lufa.c **** #if defined(SHARED_EP_ENABLE) && !defined(KEYBOARD_SHARED_EP)
 512:tmk_core/protocol/lufa/lufa.c ****                 case SHARED_INTERFACE:
 513:tmk_core/protocol/lufa/lufa.c **** #endif
 514:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 515:tmk_core/protocol/lufa/lufa.c **** 
 516:tmk_core/protocol/lufa/lufa.c ****                     while (!(Endpoint_IsOUTReceived())) {
 517:tmk_core/protocol/lufa/lufa.c ****                         if (USB_DeviceState == DEVICE_STATE_Unattached)
 518:tmk_core/protocol/lufa/lufa.c ****                           return;
 519:tmk_core/protocol/lufa/lufa.c ****                     }
 520:tmk_core/protocol/lufa/lufa.c **** 
 521:tmk_core/protocol/lufa/lufa.c ****                     if (Endpoint_BytesInEndpoint() == 2) {
 522:tmk_core/protocol/lufa/lufa.c ****                       uint8_t report_id = Endpoint_Read_8();
 523:tmk_core/protocol/lufa/lufa.c **** 
 524:tmk_core/protocol/lufa/lufa.c ****                       if (report_id == REPORT_ID_KEYBOARD || report_id == REPORT_ID_NKRO) {
 525:tmk_core/protocol/lufa/lufa.c ****                         keyboard_led_stats = Endpoint_Read_8();
 526:tmk_core/protocol/lufa/lufa.c ****                       }
 527:tmk_core/protocol/lufa/lufa.c ****                     } else {
 528:tmk_core/protocol/lufa/lufa.c ****                       keyboard_led_stats = Endpoint_Read_8();
 529:tmk_core/protocol/lufa/lufa.c ****                     }
 530:tmk_core/protocol/lufa/lufa.c **** 
 531:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearOUT();
 532:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 533:tmk_core/protocol/lufa/lufa.c ****                     break;
 534:tmk_core/protocol/lufa/lufa.c ****                 }
 535:tmk_core/protocol/lufa/lufa.c **** 
 536:tmk_core/protocol/lufa/lufa.c ****             }
 537:tmk_core/protocol/lufa/lufa.c **** 
 538:tmk_core/protocol/lufa/lufa.c ****             break;
 539:tmk_core/protocol/lufa/lufa.c **** 
 540:tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetProtocol:
 541:tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 542:tmk_core/protocol/lufa/lufa.c ****             {
 543:tmk_core/protocol/lufa/lufa.c ****                 if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
 544:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 545:tmk_core/protocol/lufa/lufa.c ****                     while (!(Endpoint_IsINReady()));
 546:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_Write_8(keyboard_protocol);
 547:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearIN();
 548:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 549:tmk_core/protocol/lufa/lufa.c ****                 }
 550:tmk_core/protocol/lufa/lufa.c ****             }
 551:tmk_core/protocol/lufa/lufa.c **** 
 552:tmk_core/protocol/lufa/lufa.c ****             break;
 553:tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetProtocol:
 554:tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 555:tmk_core/protocol/lufa/lufa.c ****             {
 556:tmk_core/protocol/lufa/lufa.c ****                 if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
 557:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 558:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 559:tmk_core/protocol/lufa/lufa.c **** 
 560:tmk_core/protocol/lufa/lufa.c ****                     keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
 561:tmk_core/protocol/lufa/lufa.c ****                     clear_keyboard();
 562:tmk_core/protocol/lufa/lufa.c ****                 }
 563:tmk_core/protocol/lufa/lufa.c ****             }
 564:tmk_core/protocol/lufa/lufa.c **** 
 565:tmk_core/protocol/lufa/lufa.c ****             break;
 566:tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetIdle:
 567:tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 568:tmk_core/protocol/lufa/lufa.c ****             {
 569:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 570:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 571:tmk_core/protocol/lufa/lufa.c **** 
 572:tmk_core/protocol/lufa/lufa.c ****                 keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
 573:tmk_core/protocol/lufa/lufa.c ****             }
 574:tmk_core/protocol/lufa/lufa.c **** 
 575:tmk_core/protocol/lufa/lufa.c ****             break;
 576:tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetIdle:
 577:tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 578:tmk_core/protocol/lufa/lufa.c ****             {
 579:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 580:tmk_core/protocol/lufa/lufa.c ****                 while (!(Endpoint_IsINReady()));
 581:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_8(keyboard_idle);
 582:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearIN();
 583:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 584:tmk_core/protocol/lufa/lufa.c ****             }
 585:tmk_core/protocol/lufa/lufa.c **** 
 586:tmk_core/protocol/lufa/lufa.c ****             break;
 587:tmk_core/protocol/lufa/lufa.c ****     }
 588:tmk_core/protocol/lufa/lufa.c **** 
 589:tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 590:tmk_core/protocol/lufa/lufa.c ****     CDC_Device_ProcessControlRequest(&cdc_device);
 591:tmk_core/protocol/lufa/lufa.c **** #endif
 592:tmk_core/protocol/lufa/lufa.c **** }
 593:tmk_core/protocol/lufa/lufa.c **** 
 594:tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 595:tmk_core/protocol/lufa/lufa.c ****  * Host driver
 596:tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 597:tmk_core/protocol/lufa/lufa.c **** /** \brief Keyboard LEDs
 598:tmk_core/protocol/lufa/lufa.c ****  *
 599:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 600:tmk_core/protocol/lufa/lufa.c ****  */
 601:tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_leds(void)
 602:tmk_core/protocol/lufa/lufa.c **** {
  15               		.loc 1 602 1 view -0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
 603:tmk_core/protocol/lufa/lufa.c ****     return keyboard_led_stats;
  21               		.loc 1 603 5 view .LVU1
 604:tmk_core/protocol/lufa/lufa.c **** }
  22               		.loc 1 604 1 is_stmt 0 view .LVU2
  23 0000 8091 0000 		lds r24,keyboard_led_stats
  24               	/* epilogue start */
  25 0004 0895      		ret
  26               		.cfi_endproc
  27               	.LFE128:
  29               		.section	.text.send_mouse,"ax",@progbits
  31               	send_mouse:
  32               	.LVL0:
  33               	.LFB130:
 605:tmk_core/protocol/lufa/lufa.c **** 
 606:tmk_core/protocol/lufa/lufa.c **** /** \brief Send Keyboard
 607:tmk_core/protocol/lufa/lufa.c ****  *
 608:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 609:tmk_core/protocol/lufa/lufa.c ****  */
 610:tmk_core/protocol/lufa/lufa.c **** static void send_keyboard(report_keyboard_t *report)
 611:tmk_core/protocol/lufa/lufa.c **** {
 612:tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 613:tmk_core/protocol/lufa/lufa.c ****     uint8_t where = where_to_send();
 614:tmk_core/protocol/lufa/lufa.c **** 
 615:tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 616:tmk_core/protocol/lufa/lufa.c ****   if (where == OUTPUT_BLUETOOTH || where == OUTPUT_USB_AND_BT) {
 617:tmk_core/protocol/lufa/lufa.c ****     #ifdef MODULE_ADAFRUIT_BLE
 618:tmk_core/protocol/lufa/lufa.c ****       adafruit_ble_send_keys(report->mods, report->keys, sizeof(report->keys));
 619:tmk_core/protocol/lufa/lufa.c ****     #elif MODULE_RN42
 620:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0xFD);
 621:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0x09);
 622:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0x01);
 623:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->mods);
 624:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->reserved);
 625:tmk_core/protocol/lufa/lufa.c ****       for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
 626:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(report->keys[i]);
 627:tmk_core/protocol/lufa/lufa.c ****       }
 628:tmk_core/protocol/lufa/lufa.c ****     #else
 629:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0xFD);
 630:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->mods);
 631:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->reserved);
 632:tmk_core/protocol/lufa/lufa.c ****       for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
 633:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(report->keys[i]);
 634:tmk_core/protocol/lufa/lufa.c ****       }
 635:tmk_core/protocol/lufa/lufa.c ****     #endif
 636:tmk_core/protocol/lufa/lufa.c ****   }
 637:tmk_core/protocol/lufa/lufa.c **** #endif
 638:tmk_core/protocol/lufa/lufa.c **** 
 639:tmk_core/protocol/lufa/lufa.c ****     if (where != OUTPUT_USB && where != OUTPUT_USB_AND_BT) {
 640:tmk_core/protocol/lufa/lufa.c ****       return;
 641:tmk_core/protocol/lufa/lufa.c ****     }
 642:tmk_core/protocol/lufa/lufa.c **** 
 643:tmk_core/protocol/lufa/lufa.c ****     /* Select the Keyboard Report Endpoint */
 644:tmk_core/protocol/lufa/lufa.c ****     uint8_t ep = KEYBOARD_IN_EPNUM;
 645:tmk_core/protocol/lufa/lufa.c ****     uint8_t size = KEYBOARD_REPORT_SIZE;
 646:tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 647:tmk_core/protocol/lufa/lufa.c ****     if (keyboard_protocol && keymap_config.nkro) {
 648:tmk_core/protocol/lufa/lufa.c ****         ep = SHARED_IN_EPNUM;
 649:tmk_core/protocol/lufa/lufa.c ****         size = sizeof(struct nkro_report);
 650:tmk_core/protocol/lufa/lufa.c ****     }
 651:tmk_core/protocol/lufa/lufa.c **** #endif
 652:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 653:tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 654:tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 655:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 656:tmk_core/protocol/lufa/lufa.c **** 
 657:tmk_core/protocol/lufa/lufa.c ****     /* If we're in Boot Protocol, don't send any report ID or other funky fields */
 658:tmk_core/protocol/lufa/lufa.c ****     if (!keyboard_protocol) {
 659:tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(&report->mods, 8, NULL);
 660:tmk_core/protocol/lufa/lufa.c ****     } else {
 661:tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(report, size, NULL);
 662:tmk_core/protocol/lufa/lufa.c ****     }
 663:tmk_core/protocol/lufa/lufa.c **** 
 664:tmk_core/protocol/lufa/lufa.c ****     /* Finalize the stream transfer to send the last packet */
 665:tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 666:tmk_core/protocol/lufa/lufa.c **** 
 667:tmk_core/protocol/lufa/lufa.c ****     keyboard_report_sent = *report;
 668:tmk_core/protocol/lufa/lufa.c **** }
 669:tmk_core/protocol/lufa/lufa.c ****  
 670:tmk_core/protocol/lufa/lufa.c **** /** \brief Send Mouse
 671:tmk_core/protocol/lufa/lufa.c ****  *
 672:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 673:tmk_core/protocol/lufa/lufa.c ****  */
 674:tmk_core/protocol/lufa/lufa.c **** static void send_mouse(report_mouse_t *report)
 675:tmk_core/protocol/lufa/lufa.c **** {
  34               		.loc 1 675 1 is_stmt 1 view -0
  35               		.cfi_startproc
  36               	/* prologue: function */
  37               	/* frame size = 0 */
  38               	/* stack size = 0 */
  39               	.L__stack_usage = 0
 676:tmk_core/protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
 677:tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 678:tmk_core/protocol/lufa/lufa.c ****     uint8_t where = where_to_send();
 679:tmk_core/protocol/lufa/lufa.c **** 
 680:tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 681:tmk_core/protocol/lufa/lufa.c ****   if (where == OUTPUT_BLUETOOTH || where == OUTPUT_USB_AND_BT) {
 682:tmk_core/protocol/lufa/lufa.c ****     #ifdef MODULE_ADAFRUIT_BLE
 683:tmk_core/protocol/lufa/lufa.c ****       // FIXME: mouse buttons
 684:tmk_core/protocol/lufa/lufa.c ****       adafruit_ble_send_mouse_move(report->x, report->y, report->v, report->h, report->buttons);
 685:tmk_core/protocol/lufa/lufa.c ****     #else
 686:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0xFD);
 687:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0x00);
 688:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0x03);
 689:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->buttons);
 690:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->x);
 691:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->y);
 692:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->v); // should try sending the wheel v here
 693:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->h); // should try sending the wheel h here
 694:tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0x00);
 695:tmk_core/protocol/lufa/lufa.c ****     #endif
 696:tmk_core/protocol/lufa/lufa.c ****   }
 697:tmk_core/protocol/lufa/lufa.c **** #endif
 698:tmk_core/protocol/lufa/lufa.c **** 
 699:tmk_core/protocol/lufa/lufa.c ****     if (where != OUTPUT_USB && where != OUTPUT_USB_AND_BT) {
 700:tmk_core/protocol/lufa/lufa.c ****       return;
 701:tmk_core/protocol/lufa/lufa.c ****     }
 702:tmk_core/protocol/lufa/lufa.c **** 
 703:tmk_core/protocol/lufa/lufa.c ****     /* Select the Mouse Report Endpoint */
 704:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);
 705:tmk_core/protocol/lufa/lufa.c **** 
 706:tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 707:tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 708:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 709:tmk_core/protocol/lufa/lufa.c **** 
 710:tmk_core/protocol/lufa/lufa.c ****     /* Write Mouse Report Data */
 711:tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
 712:tmk_core/protocol/lufa/lufa.c **** 
 713:tmk_core/protocol/lufa/lufa.c ****     /* Finalize the stream transfer to send the last packet */
 714:tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 715:tmk_core/protocol/lufa/lufa.c **** #endif
 716:tmk_core/protocol/lufa/lufa.c **** }
  40               		.loc 1 716 1 view .LVU4
  41               	/* epilogue start */
  42 0000 0895      		ret
  43               		.cfi_endproc
  44               	.LFE130:
  46               		.section	.text.send_consumer,"ax",@progbits
  48               	send_consumer:
  49               	.LVL1:
  50               	.LFB132:
 717:tmk_core/protocol/lufa/lufa.c **** 
 718:tmk_core/protocol/lufa/lufa.c **** /** \brief Send System
 719:tmk_core/protocol/lufa/lufa.c ****  *
 720:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 721:tmk_core/protocol/lufa/lufa.c ****  */
 722:tmk_core/protocol/lufa/lufa.c **** static void send_system(uint16_t data)
 723:tmk_core/protocol/lufa/lufa.c **** {
 724:tmk_core/protocol/lufa/lufa.c **** #ifdef EXTRAKEY_ENABLE
 725:tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 726:tmk_core/protocol/lufa/lufa.c **** 
 727:tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 728:tmk_core/protocol/lufa/lufa.c ****         return;
 729:tmk_core/protocol/lufa/lufa.c **** 
 730:tmk_core/protocol/lufa/lufa.c ****     report_extra_t r = {
 731:tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_SYSTEM,
 732:tmk_core/protocol/lufa/lufa.c ****         .usage = data - SYSTEM_POWER_DOWN + 1
 733:tmk_core/protocol/lufa/lufa.c ****     };
 734:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(SHARED_IN_EPNUM);
 735:tmk_core/protocol/lufa/lufa.c **** 
 736:tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 737:tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 738:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 739:tmk_core/protocol/lufa/lufa.c **** 
 740:tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 741:tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 742:tmk_core/protocol/lufa/lufa.c **** #endif
 743:tmk_core/protocol/lufa/lufa.c **** }
 744:tmk_core/protocol/lufa/lufa.c **** 
 745:tmk_core/protocol/lufa/lufa.c **** /** \brief Send Consumer
 746:tmk_core/protocol/lufa/lufa.c ****  *
 747:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 748:tmk_core/protocol/lufa/lufa.c ****  */
 749:tmk_core/protocol/lufa/lufa.c **** static void send_consumer(uint16_t data)
 750:tmk_core/protocol/lufa/lufa.c **** {
  51               		.loc 1 750 1 view -0
  52               		.cfi_startproc
  53               		.loc 1 750 1 is_stmt 0 view .LVU6
  54 0000 0F93      		push r16
  55               	.LCFI0:
  56               		.cfi_def_cfa_offset 3
  57               		.cfi_offset 16, -2
  58 0002 1F93      		push r17
  59               	.LCFI1:
  60               		.cfi_def_cfa_offset 4
  61               		.cfi_offset 17, -3
  62 0004 CF93      		push r28
  63               	.LCFI2:
  64               		.cfi_def_cfa_offset 5
  65               		.cfi_offset 28, -4
  66 0006 DF93      		push r29
  67               	.LCFI3:
  68               		.cfi_def_cfa_offset 6
  69               		.cfi_offset 29, -5
  70 0008 00D0      		rcall .
  71 000a 0F92      		push __tmp_reg__
  72               	.LCFI4:
  73               		.cfi_def_cfa_offset 9
  74 000c CDB7      		in r28,__SP_L__
  75 000e DEB7      		in r29,__SP_H__
  76               	.LCFI5:
  77               		.cfi_def_cfa_register 28
  78               	/* prologue: function */
  79               	/* frame size = 3 */
  80               	/* stack size = 7 */
  81               	.L__stack_usage = 7
  82 0010 8C01      		movw r16,r24
 751:tmk_core/protocol/lufa/lufa.c **** #ifdef EXTRAKEY_ENABLE
 752:tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
  83               		.loc 1 752 5 is_stmt 1 view .LVU7
  84               	.LVL2:
 753:tmk_core/protocol/lufa/lufa.c ****     uint8_t where = where_to_send();
  85               		.loc 1 753 5 view .LVU8
  86               		.loc 1 753 21 is_stmt 0 view .LVU9
  87 0012 0E94 0000 		call where_to_send
  88               	.LVL3:
 754:tmk_core/protocol/lufa/lufa.c **** 
 755:tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 756:tmk_core/protocol/lufa/lufa.c ****     if (where == OUTPUT_BLUETOOTH || where == OUTPUT_USB_AND_BT) {
 757:tmk_core/protocol/lufa/lufa.c ****       #ifdef MODULE_ADAFRUIT_BLE
 758:tmk_core/protocol/lufa/lufa.c ****         adafruit_ble_send_consumer_key(data, 0);
 759:tmk_core/protocol/lufa/lufa.c ****       #elif MODULE_RN42
 760:tmk_core/protocol/lufa/lufa.c ****         static uint16_t last_data = 0;
 761:tmk_core/protocol/lufa/lufa.c ****         if (data == last_data) return;
 762:tmk_core/protocol/lufa/lufa.c ****         last_data = data;
 763:tmk_core/protocol/lufa/lufa.c ****         uint16_t bitmap = CONSUMER2RN42(data);
 764:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0xFD);
 765:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x03);
 766:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x03);
 767:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(bitmap&0xFF);
 768:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send((bitmap>>8)&0xFF);
 769:tmk_core/protocol/lufa/lufa.c ****       #else
 770:tmk_core/protocol/lufa/lufa.c ****         static uint16_t last_data = 0;
 771:tmk_core/protocol/lufa/lufa.c ****         if (data == last_data) return;
 772:tmk_core/protocol/lufa/lufa.c ****         last_data = data;
 773:tmk_core/protocol/lufa/lufa.c ****         uint16_t bitmap = CONSUMER2BLUEFRUIT(data);
 774:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0xFD);
 775:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 776:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x02);
 777:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send((bitmap>>8)&0xFF);
 778:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(bitmap&0xFF);
 779:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 780:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 781:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 782:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 783:tmk_core/protocol/lufa/lufa.c ****       #endif
 784:tmk_core/protocol/lufa/lufa.c ****     }
 785:tmk_core/protocol/lufa/lufa.c **** #endif
 786:tmk_core/protocol/lufa/lufa.c **** 
 787:tmk_core/protocol/lufa/lufa.c ****     if (where != OUTPUT_USB && where != OUTPUT_USB_AND_BT) {
  89               		.loc 1 787 5 is_stmt 1 view .LVU10
  90               		.loc 1 787 8 is_stmt 0 view .LVU11
  91 0016 8230      		cpi r24,lo8(2)
  92 0018 01F0      		breq .L4
  93               		.loc 1 787 29 discriminator 1 view .LVU12
  94 001a 8430      		cpi r24,lo8(4)
  95 001c 01F4      		brne .L3
  96               	.L4:
 788:tmk_core/protocol/lufa/lufa.c ****       return;
 789:tmk_core/protocol/lufa/lufa.c ****     }
 790:tmk_core/protocol/lufa/lufa.c **** 
 791:tmk_core/protocol/lufa/lufa.c ****     report_extra_t r = {
  97               		.loc 1 791 5 is_stmt 1 view .LVU13
  98               		.loc 1 791 20 is_stmt 0 view .LVU14
  99 001e 84E0      		ldi r24,lo8(4)
 100               	.LVL4:
 101               		.loc 1 791 20 view .LVU15
 102 0020 8983      		std Y+1,r24
 103 0022 1B83      		std Y+3,r17
 104 0024 0A83      		std Y+2,r16
 792:tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_CONSUMER,
 793:tmk_core/protocol/lufa/lufa.c ****         .usage = data
 794:tmk_core/protocol/lufa/lufa.c ****     };
 795:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(SHARED_IN_EPNUM);
 105               		.loc 1 795 5 is_stmt 1 view .LVU16
 106               	.LVL5:
 107               	.LBB94:
 108               	.LBI94:
 109               		.file 2 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h"
   1:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
   2:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****              LUFA Library
   3:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****      Copyright (C) Dean Camera, 2017.
   4:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   5:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****            www.lufa-lib.org
   7:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
   8:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   9:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
  10:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Copyright 2017  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  12:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   all copies and that both that the copyright notice and this
  16:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   documentation, and that the name of the author not be used in
  18:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software without specific, written prior permission.
  20:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  21:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   The author disclaims all warranties with regard to this
  22:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software, including all implied warranties of merchantability
  23:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   special, indirect or consequential damages or any damages
  25:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   arising out of or in connection with the use or performance of
  28:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   this software.
  29:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
  30:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  31:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \file
  32:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief USB Endpoint definitions for the AVR8 microcontrollers.
  33:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \copydetails Group_EndpointManagement_AVR8
  34:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  35:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  38:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  39:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointRW
  40:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointRW_AVR8 Endpoint Data Reading and Writing (AVR8)
  41:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint data read/write definitions for the Atmel AVR8 architecture.
  42:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  43:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing from and to e
  44:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  45:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  46:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPrimitiveRW
  47:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPrimitiveRW_AVR8 Read/Write of Primitive Data Types (AVR8)
  48:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint primitive read/write definitions for the Atmel AVR8 architecture.
  49:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  50:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of primitive 
  51:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  from and to endpoints.
  52:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  53:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  54:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPacketManagement
  55:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPacketManagement_AVR8 Endpoint Packet Management (AVR8)
  56:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint packet management definitions for the Atmel AVR8 architecture.
  57:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  58:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to packet management of endpoints.
  59:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  60:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  61:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointManagement
  62:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointManagement_AVR8 Endpoint Management (AVR8)
  63:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint management definitions for the Atmel AVR8 architecture.
  64:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  65:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros and enums related to endpoint management when in USB Device mode. This
  66:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  module contains the endpoint management macros, as well as endpoint interrupt and data
  67:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  send/receive functions for various data types.
  68:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  69:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  @{
  70:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  71:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  72:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #ifndef __ENDPOINT_AVR8_H__
  73:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #define __ENDPOINT_AVR8_H__
  74:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  75:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Includes: */
  76:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../../../../Common/Common.h"
  77:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBTask.h"
  78:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBInterrupt.h"
  79:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  80:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  81:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if defined(__cplusplus)
  82:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			extern "C" {
  83:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  84:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  85:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Preprocessor Checks: */
  86:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  87:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  88:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  89:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  90:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Private Interface - For use in library only: */
  91:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#if !defined(__DOXYGEN__)
  92:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
  93:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT A
  94:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                                                       ATTR_ALWAYS_INLINE;
  95:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
  96:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
  97:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t  MaskVal    = 0;
  98:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint16_t CheckBytes = 8;
  99:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 100:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (CheckBytes < Bytes)
 101:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 102:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					MaskVal++;
 103:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					CheckBytes <<= 1;
 104:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 105:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 106:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (MaskVal << EPSIZE0);
 107:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 108:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 109:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Function Prototypes: */
 110:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			void Endpoint_ClearEndpoints(void);
 111:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
 112:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG0XData,
 113:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG1XData);
 114:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 115:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#endif
 116:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 117:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Public Interface - May be used in end-application: */
 118:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */
 119:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 120:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Default size of the default control endpoint's bank, until altered by the control endpoint 
 121:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  value in the device descriptor. Not available if the \c FIXED_CONTROL_ENDPOINT_SIZE token i
 122:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 123:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_CONTROLEP_DEFAULT_SIZE     8
 124:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 125:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 126:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if !defined(CONTROL_ONLY_DEVICE) || defined(__DOXYGEN__)
 127:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defi
 128:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					/** Total number of endpoints (including the default control endpoint at address 0) which may
 129:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 *  be used in the device. Different USB AVR models support different amounts of endpoints,
 130:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 *  this value reflects the maximum number of endpoints for the currently selected AVR model.
 131:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 */
 132:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS        7
 133:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 134:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS        5
 135:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 136:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 137:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            1
 138:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 139:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 140:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Enums: */
 141:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enum for the possible error return codes of the \ref Endpoint_WaitUntilReady() function.
 142:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 143:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 144:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 145:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			enum Endpoint_WaitUntilReady_ErrorCodes_t
 146:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 147:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_NoError                 = 0, /**< Endpoint is ready for next packet, no erro
 148:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_EndpointStalled         = 1, /**< The endpoint was stalled during the stream
 149:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   transfer by the host or device.
 150:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 151:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_DeviceDisconnected      = 2,	/**< Device was disconnected from the host whil
 152:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   waiting for the endpoint to become ready.
 153:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 154:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_BusSuspended            = 3, /**< The USB bus has been suspended by the host
 155:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   no USB endpoint traffic can occur until th
 156:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   has resumed.
 157:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 158:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_Timeout                 = 4, /**< The host failed to accept or send the next
 159:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   within the software timeout period set by 
 160:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   \ref USB_STREAM_TIMEOUT_MS macro.
 161:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 162:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			};
 163:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 164:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 165:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Configures the specified endpoint address with the given endpoint type, bank size and number
 166:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  banks. Once configured, the endpoint may be read from or written to, depending on its direct
 167:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 168:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address    Endpoint address to configure.
 169:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 170:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Type       Type of endpoint to configure, a \c EP_TYPE_* mask. Not all endpoint t
 171:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        are available on Low Speed USB devices - refer to the USB 2.0 specific
 172:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 173:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Size       Size of the endpoint's bank, where packets are stored before they are 
 174:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        to the USB host, or after they have been received from the USB host (d
 175:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        the endpoint's data direction). The bank size must indicate the maximu
 176:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        that the endpoint can handle.
 177:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 178:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Banks      Number of banks to use for the endpoint being configured.
 179:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 180:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \attention When the \c ORDERED_EP_CONFIG compile time option is used, Endpoints <b>must</b> 
 181:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *             ascending order, or bank corruption will occur.
 182:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 183:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Different endpoints may have different maximum packet sizes based on the endpoint's in
 184:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        refer to the chosen microcontroller model's datasheet to determine the maximum bank si
 185:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 186:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 187:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The default control endpoint should not be manually configured by the user application
 188:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        it is automatically configured by the library internally.
 189:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 190:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 191:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This routine will automatically select the specified endpoint upon success. Upon failu
 192:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        which failed to reconfigure correctly will be selected.
 193:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 194:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the configuration succeeded, \c false otherwise.
 195:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 196:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
 197:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 198:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 199:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks) ATTR_ALWAYS_INLINE;
 200:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
 201:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 202:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 203:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks)
 204:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 205:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
 206:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 207:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
 208:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				  return false;
 209:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 210:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number,
 211:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 212:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Endpoi
 213:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 214:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 215:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Indicates the number of bytes currently stored in the current endpoint's selected bank.
 216:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 217:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 218:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 219:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
 220:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 221:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
 222:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void)
 223:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 224:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
 225:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCX;
 226:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_4_AVR)
 227:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 228:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_2_AVR)
 229:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCLX;
 230:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 231:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 232:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 233:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines the currently selected endpoint's direction.
 234:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 235:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
 236:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 237:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_IN
 238:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void)
 239:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 240:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 241:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 242:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 243:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Get the endpoint address of the currently selected endpoint. This is typically used to save
 244:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint so that it can be restored after another endpoint has been
 245:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  manipulated.
 246:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 247:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Index of the currently selected endpoint.
 248:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 249:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLI
 250:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
 251:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 252:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 253:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 254:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 255:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ENDPOINT_CONTROLEP;
 256:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 257:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 258:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 259:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Selects the given endpoint address.
 260:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 261:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  Any endpoint operations which do not require the endpoint address to be indicated will opera
 262:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint.
 263:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 264:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address Endpoint address to select.
 265:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 266:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
 267:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
 110               		.loc 2 267 23 view .LVU17
 111               	.LBB95:
 268:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 269:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 270:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 112               		.loc 2 270 6 view .LVU18
 113               		.loc 2 270 12 is_stmt 0 view .LVU19
 114 0026 82E0      		ldi r24,lo8(2)
 115 0028 8093 E900 		sts 233,r24
 116               	.LVL6:
 117               		.loc 2 270 12 view .LVU20
 118 002c 8FEF      		ldi r24,lo8(-1)
 119               	.LVL7:
 120               	.L6:
 121               		.loc 2 270 12 view .LVU21
 122               	.LBE95:
 123               	.LBE94:
 124               	.LBB96:
 125               	.LBI96:
 271:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 272:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 273:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 274:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the endpoint bank FIFO. This clears all the endpoint banks and resets the USB control
 275:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  data In and Out pointers to the bank's contents.
 276:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 277:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
 278:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 279:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
 280:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
 281:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 282:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 283:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = 0;
 284:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 285:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 286:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enables the currently selected endpoint so that data can be sent and received through it to
 287:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and from a host.
 288:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 289:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
 290:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 291:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
 292:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void)
 293:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 294:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << EPEN);
 295:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 296:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 297:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Disables the currently selected endpoint so that data cannot be sent and received through it
 298:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  to and from a host.
 299:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 300:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
 301:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void)
 302:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 303:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX &= ~(1 << EPEN);
 304:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 305:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 306:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is enabled, but not necessarily configured.
 307:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 308:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
 309:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 310:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 311:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void)
 312:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 313:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
 314:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 315:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 316:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the number of busy banks in the currently selected endpoint, which have been queue
 317:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  transmission via the \ref Endpoint_ClearIN() command, or are awaiting acknowledgment via the
 318:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ref Endpoint_ClearOUT() command.
 319:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 320:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 321:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 322:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of busy banks in the selected endpoint.
 323:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 324:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
 325:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void)
 326:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 327:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UESTA0X & (0x03 << NBUSYBK0));
 328:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 329:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 330:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Aborts all pending IN transactions on the currently selected endpoint, once the bank
 331:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  has been queued for transmission to the host via \ref Endpoint_ClearIN(). This function
 332:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  will terminate all queued transactions, resetting the endpoint banks ready for a new
 333:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  packet.
 334:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 335:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 336:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 337:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_AbortPendingIN(void)
 338:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 339:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (Endpoint_GetBusyBanks() != 0)
 340:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 341:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX |= (1 << RXOUTI);
 342:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					while (UEINTX & (1 << RXOUTI));
 343:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 344:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 345:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 346:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint may be read from (if data is waiting in the en
 347:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank and the endpoint is an OUT direction, or if the bank is not yet full if the endpoint is
 348:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction). This function will return false if an error has occurred in the endpoint, if the
 349:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is an OUT direction and no packet (or an empty packet) has been received, or if the endpoint
 350:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction and the endpoint bank is full.
 351:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 352:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 353:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 354:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint may be read from or written to, d
 355:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *          on its direction.
 356:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 357:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 358:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void)
 126               		.loc 2 358 23 is_stmt 1 view .LVU22
 127               	.LBB97:
 359:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 360:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 128               		.loc 2 360 5 view .LVU23
 129               		.loc 2 360 14 is_stmt 0 view .LVU24
 130 002e 9091 E800 		lds r25,232
 131 0032 8150      		subi r24,lo8(-(-1))
 132               	.LVL8:
 133               		.loc 2 360 14 view .LVU25
 134               	.LBE97:
 135               	.LBE96:
 796:tmk_core/protocol/lufa/lufa.c **** 
 797:tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 798:tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 136               		.loc 1 798 22 view .LVU26
 137 0034 95FD      		sbrc r25,5
 138 0036 00C0      		rjmp .L7
 139               		.loc 1 798 57 is_stmt 1 view .LVU27
 140               	.LVL9:
 141               	.LBB98:
 142               	.LBI98:
 143               		.file 3 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 189:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #else
 190:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	uint16_t __ticks;
 191:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 193:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 195:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	{
 196:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		{
 200:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		}
 204:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		return;
 205:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	}
 206:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	else
 207:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 208:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 209:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
 210:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** }
 211:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 212:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /**
 213:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \ingroup util_delay
 214:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 215:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 217:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 218:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 220:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 222:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    will not be informed about this case.
 225:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 226:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 229:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    no delay i.e., 0us.
 230:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 231:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __us
 234:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    microseconds of delay.
 235:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 236:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    respectively.
 240:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 241:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \note
 242:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 243:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 244:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 246:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 248:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 249:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    not available to the compiler then.
 252:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 253:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****  */
 254:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** void
 255:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** _delay_us(double __us)
 144               		.loc 3 255 1 view .LVU28
 145               	.LBB99:
 256:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** {
 257:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	double __tmp ;
 146               		.loc 3 257 2 view .LVU29
 258:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 261:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 147               		.loc 3 261 2 view .LVU30
 262:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 148               		.loc 3 262 2 view .LVU31
 263:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 149               		.loc 3 263 2 view .LVU32
 264:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 265:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 268:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 271:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#else
 272:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		//round up by default
 273:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 150               		.loc 3 273 3 view .LVU33
 274:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#endif
 275:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 276:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 151               		.loc 3 276 2 view .LVU34
 152 0038 95ED      		ldi r25,lo8(-43)
 153 003a 9A95      	1:	dec r25
 154 003c 01F4      		brne 1b
 155 003e 0000      		nop
 156               	.LVL10:
 157               		.loc 3 276 2 is_stmt 0 view .LVU35
 158               	.LBE99:
 159               	.LBE98:
 160               		.loc 1 798 11 view .LVU36
 161 0040 8111      		cpse r24,__zero_reg__
 162 0042 00C0      		rjmp .L6
 163               	.LVL11:
 164               	.L7:
 799:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 165               		.loc 1 799 5 is_stmt 1 view .LVU37
 166               	.LBB100:
 167               	.LBI100:
 358:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 168               		.loc 2 358 23 view .LVU38
 169               	.LBB101:
 170               		.loc 2 360 5 view .LVU39
 171               		.loc 2 360 14 is_stmt 0 view .LVU40
 172 0044 8091 E800 		lds r24,232
 173               	.LBE101:
 174               	.LBE100:
 175               		.loc 1 799 8 view .LVU41
 176 0048 85FF      		sbrs r24,5
 177 004a 00C0      		rjmp .L3
 800:tmk_core/protocol/lufa/lufa.c **** 
 801:tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 178               		.loc 1 801 5 is_stmt 1 view .LVU42
 179 004c 50E0      		ldi r21,0
 180 004e 40E0      		ldi r20,0
 181 0050 63E0      		ldi r22,lo8(3)
 182 0052 70E0      		ldi r23,0
 183 0054 CE01      		movw r24,r28
 184 0056 0196      		adiw r24,1
 185 0058 0E94 0000 		call Endpoint_Write_Stream_LE
 186               	.LVL12:
 802:tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 187               		.loc 1 802 5 view .LVU43
 188               	.LBB102:
 189               	.LBI102:
 361:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 362:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 363:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is configured.
 364:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 365:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false oth
 366:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 367:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 368:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void)
 369:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 370:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 371:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 372:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 373:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Returns a mask indicating which INTERRUPT type endpoints have interrupted - i.e. their
 374:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  interrupt duration has elapsed. Which endpoints have interrupted can be determined by
 375:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  masking the return value against <tt>(1 << <i>{Endpoint Number}</i>)</tt>.
 376:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 377:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Mask whose bits indicate which endpoints have interrupted.
 378:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 379:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_I
 380:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void)
 381:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 382:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEINT;
 383:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 384:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 385:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the specified endpoint number has interrupted (valid only for INTERRUPT type
 386:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoints).
 387:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 388:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address  Address of the endpoint whose interrupt flag should be tested.
 389:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 390:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the specified endpoint has interrupted, \c false otherwise.
 391:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 392:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t Address) ATTR_WARN_UNUSED_RESUL
 393:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t Address)
 394:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 395:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((Endpoint_GetEndpointInterrupts() & (1 << (Address & ENDPOINT_EPNUM_MASK))) ? true : fa
 396:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 397:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 398:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected IN endpoint is ready for a new packet to be sent to the host.
 399:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 400:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 401:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 402:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwis
 403:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 404:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 405:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void)
 406:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 407:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 408:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 409:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 410:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected OUT endpoint has received new packet from the host.
 411:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 412:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 413:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 414:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwis
 415:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 416:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 417:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void)
 418:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 419:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 420:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 421:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 422:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the current CONTROL type endpoint has received a SETUP packet.
 423:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 424:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 425:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 426:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false other
 427:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 428:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 429:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void)
 430:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 431:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 432:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 433:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 434:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears a received SETUP packet on the currently selected CONTROL type endpoint, freeing up t
 435:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint for the next packet.
 436:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 437:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 438:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 439:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This is not applicable for non CONTROL type endpoints.
 440:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 441:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
 442:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void)
 443:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 445:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 446:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 447:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sends an IN packet to the host on the currently selected endpoint, freeing up the endpoint f
 448:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  next packet and switching to the alternative endpoint bank if double banked.
 449:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 450:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 451:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 452:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
 453:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void)
 190               		.loc 2 453 23 view .LVU44
 191               	.LBB103:
 454:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 455:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 456:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 192               		.loc 2 456 6 view .LVU45
 193               		.loc 2 456 13 is_stmt 0 view .LVU46
 194 005c 8091 E800 		lds r24,232
 195 0060 8E77      		andi r24,lo8(126)
 196 0062 8093 E800 		sts 232,r24
 197               	.LVL13:
 198               	.L3:
 199               	/* epilogue start */
 200               		.loc 2 456 13 view .LVU47
 201               	.LBE103:
 202               	.LBE102:
 803:tmk_core/protocol/lufa/lufa.c **** #endif
 804:tmk_core/protocol/lufa/lufa.c **** }
 203               		.loc 1 804 1 view .LVU48
 204 0066 0F90      		pop __tmp_reg__
 205 0068 0F90      		pop __tmp_reg__
 206 006a 0F90      		pop __tmp_reg__
 207 006c DF91      		pop r29
 208 006e CF91      		pop r28
 209 0070 1F91      		pop r17
 210 0072 0F91      		pop r16
 211               	.LVL14:
 212               		.loc 1 804 1 view .LVU49
 213 0074 0895      		ret
 214               		.cfi_endproc
 215               	.LFE132:
 217               		.section	.text.send_system,"ax",@progbits
 219               	send_system:
 220               	.LVL15:
 221               	.LFB131:
 723:tmk_core/protocol/lufa/lufa.c **** #ifdef EXTRAKEY_ENABLE
 222               		.loc 1 723 1 is_stmt 1 view -0
 223               		.cfi_startproc
 723:tmk_core/protocol/lufa/lufa.c **** #ifdef EXTRAKEY_ENABLE
 224               		.loc 1 723 1 is_stmt 0 view .LVU51
 225 0000 CF93      		push r28
 226               	.LCFI6:
 227               		.cfi_def_cfa_offset 3
 228               		.cfi_offset 28, -2
 229 0002 DF93      		push r29
 230               	.LCFI7:
 231               		.cfi_def_cfa_offset 4
 232               		.cfi_offset 29, -3
 233 0004 00D0      		rcall .
 234 0006 0F92      		push __tmp_reg__
 235               	.LCFI8:
 236               		.cfi_def_cfa_offset 7
 237 0008 CDB7      		in r28,__SP_L__
 238 000a DEB7      		in r29,__SP_H__
 239               	.LCFI9:
 240               		.cfi_def_cfa_register 28
 241               	/* prologue: function */
 242               	/* frame size = 3 */
 243               	/* stack size = 5 */
 244               	.L__stack_usage = 5
 725:tmk_core/protocol/lufa/lufa.c **** 
 245               		.loc 1 725 5 is_stmt 1 view .LVU52
 246               	.LVL16:
 727:tmk_core/protocol/lufa/lufa.c ****         return;
 247               		.loc 1 727 5 view .LVU53
 727:tmk_core/protocol/lufa/lufa.c ****         return;
 248               		.loc 1 727 25 is_stmt 0 view .LVU54
 249 000c 2091 0000 		lds r18,USB_DeviceState
 727:tmk_core/protocol/lufa/lufa.c ****         return;
 250               		.loc 1 727 8 view .LVU55
 251 0010 2430      		cpi r18,lo8(4)
 252 0012 01F4      		brne .L19
 730:tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_SYSTEM,
 253               		.loc 1 730 5 is_stmt 1 view .LVU56
 730:tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_SYSTEM,
 254               		.loc 1 730 20 is_stmt 0 view .LVU57
 255 0014 23E0      		ldi r18,lo8(3)
 256 0016 2983      		std Y+1,r18
 732:tmk_core/protocol/lufa/lufa.c ****     };
 257               		.loc 1 732 43 view .LVU58
 258 0018 8058      		subi r24,-128
 259 001a 9109      		sbc r25,__zero_reg__
 260               	.LVL17:
 730:tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_SYSTEM,
 261               		.loc 1 730 20 view .LVU59
 262 001c 9B83      		std Y+3,r25
 263 001e 8A83      		std Y+2,r24
 734:tmk_core/protocol/lufa/lufa.c **** 
 264               		.loc 1 734 5 is_stmt 1 view .LVU60
 265               	.LVL18:
 266               	.LBB104:
 267               	.LBI104:
 267:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 268               		.loc 2 267 23 view .LVU61
 269               	.LBB105:
 270:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 270               		.loc 2 270 6 view .LVU62
 270:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 271               		.loc 2 270 12 is_stmt 0 view .LVU63
 272 0020 82E0      		ldi r24,lo8(2)
 273               	.LVL19:
 270:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 274               		.loc 2 270 12 view .LVU64
 275 0022 8093 E900 		sts 233,r24
 276               	.LVL20:
 270:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 277               		.loc 2 270 12 view .LVU65
 278 0026 8FEF      		ldi r24,lo8(-1)
 279               	.LVL21:
 280               	.L21:
 270:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 281               		.loc 2 270 12 view .LVU66
 282               	.LBE105:
 283               	.LBE104:
 284               	.LBB106:
 285               	.LBI106:
 358:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 286               		.loc 2 358 23 is_stmt 1 view .LVU67
 287               	.LBB107:
 360:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 288               		.loc 2 360 5 view .LVU68
 360:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 289               		.loc 2 360 14 is_stmt 0 view .LVU69
 290 0028 9091 E800 		lds r25,232
 291 002c 8150      		subi r24,lo8(-(-1))
 292               	.LVL22:
 360:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 293               		.loc 2 360 14 view .LVU70
 294               	.LBE107:
 295               	.LBE106:
 737:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 296               		.loc 1 737 22 view .LVU71
 297 002e 95FD      		sbrc r25,5
 298 0030 00C0      		rjmp .L22
 737:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 299               		.loc 1 737 57 is_stmt 1 view .LVU72
 300               	.LVL23:
 301               	.LBB108:
 302               	.LBI108:
 255:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** {
 303               		.loc 3 255 1 view .LVU73
 304               	.LBB109:
 257:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 305               		.loc 3 257 2 view .LVU74
 261:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 306               		.loc 3 261 2 view .LVU75
 262:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 307               		.loc 3 262 2 view .LVU76
 263:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 308               		.loc 3 263 2 view .LVU77
 273:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#endif
 309               		.loc 3 273 3 view .LVU78
 310               		.loc 3 276 2 view .LVU79
 311 0032 95ED      		ldi r25,lo8(-43)
 312 0034 9A95      	1:	dec r25
 313 0036 01F4      		brne 1b
 314 0038 0000      		nop
 315               	.LVL24:
 316               		.loc 3 276 2 is_stmt 0 view .LVU80
 317               	.LBE109:
 318               	.LBE108:
 737:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 319               		.loc 1 737 11 view .LVU81
 320 003a 8111      		cpse r24,__zero_reg__
 321 003c 00C0      		rjmp .L21
 322               	.LVL25:
 323               	.L22:
 738:tmk_core/protocol/lufa/lufa.c **** 
 324               		.loc 1 738 5 is_stmt 1 view .LVU82
 325               	.LBB110:
 326               	.LBI110:
 358:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 327               		.loc 2 358 23 view .LVU83
 328               	.LBB111:
 360:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 329               		.loc 2 360 5 view .LVU84
 360:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 330               		.loc 2 360 14 is_stmt 0 view .LVU85
 331 003e 8091 E800 		lds r24,232
 332               	.LBE111:
 333               	.LBE110:
 738:tmk_core/protocol/lufa/lufa.c **** 
 334               		.loc 1 738 8 view .LVU86
 335 0042 85FF      		sbrs r24,5
 336 0044 00C0      		rjmp .L19
 740:tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 337               		.loc 1 740 5 is_stmt 1 view .LVU87
 338 0046 50E0      		ldi r21,0
 339 0048 40E0      		ldi r20,0
 340 004a 63E0      		ldi r22,lo8(3)
 341 004c 70E0      		ldi r23,0
 342 004e CE01      		movw r24,r28
 343 0050 0196      		adiw r24,1
 344 0052 0E94 0000 		call Endpoint_Write_Stream_LE
 345               	.LVL26:
 741:tmk_core/protocol/lufa/lufa.c **** #endif
 346               		.loc 1 741 5 view .LVU88
 347               	.LBB112:
 348               	.LBI112:
 453:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 349               		.loc 2 453 23 view .LVU89
 350               	.LBB113:
 351               		.loc 2 456 6 view .LVU90
 352               		.loc 2 456 13 is_stmt 0 view .LVU91
 353 0056 8091 E800 		lds r24,232
 354 005a 8E77      		andi r24,lo8(126)
 355 005c 8093 E800 		sts 232,r24
 356               	.LVL27:
 357               	.L19:
 358               	/* epilogue start */
 359               		.loc 2 456 13 view .LVU92
 360               	.LBE113:
 361               	.LBE112:
 743:tmk_core/protocol/lufa/lufa.c **** 
 362               		.loc 1 743 1 view .LVU93
 363 0060 0F90      		pop __tmp_reg__
 364 0062 0F90      		pop __tmp_reg__
 365 0064 0F90      		pop __tmp_reg__
 366 0066 DF91      		pop r29
 367 0068 CF91      		pop r28
 368 006a 0895      		ret
 369               		.cfi_endproc
 370               	.LFE131:
 372               		.section	.text.send_keyboard,"ax",@progbits
 374               	send_keyboard:
 375               	.LVL28:
 376               	.LFB129:
 611:tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 377               		.loc 1 611 1 is_stmt 1 view -0
 378               		.cfi_startproc
 611:tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 379               		.loc 1 611 1 is_stmt 0 view .LVU95
 380 0000 CF93      		push r28
 381               	.LCFI10:
 382               		.cfi_def_cfa_offset 3
 383               		.cfi_offset 28, -2
 384 0002 DF93      		push r29
 385               	.LCFI11:
 386               		.cfi_def_cfa_offset 4
 387               		.cfi_offset 29, -3
 388               	/* prologue: function */
 389               	/* frame size = 0 */
 390               	/* stack size = 2 */
 391               	.L__stack_usage = 2
 392 0004 EC01      		movw r28,r24
 612:tmk_core/protocol/lufa/lufa.c ****     uint8_t where = where_to_send();
 393               		.loc 1 612 5 is_stmt 1 view .LVU96
 394               	.LVL29:
 613:tmk_core/protocol/lufa/lufa.c **** 
 395               		.loc 1 613 5 view .LVU97
 613:tmk_core/protocol/lufa/lufa.c **** 
 396               		.loc 1 613 21 is_stmt 0 view .LVU98
 397 0006 0E94 0000 		call where_to_send
 398               	.LVL30:
 639:tmk_core/protocol/lufa/lufa.c ****       return;
 399               		.loc 1 639 5 is_stmt 1 view .LVU99
 639:tmk_core/protocol/lufa/lufa.c ****       return;
 400               		.loc 1 639 8 is_stmt 0 view .LVU100
 401 000a 8230      		cpi r24,lo8(2)
 402 000c 01F0      		breq .L32
 639:tmk_core/protocol/lufa/lufa.c ****       return;
 403               		.loc 1 639 29 discriminator 1 view .LVU101
 404 000e 8430      		cpi r24,lo8(4)
 405 0010 01F4      		brne .L31
 406               	.L32:
 644:tmk_core/protocol/lufa/lufa.c ****     uint8_t size = KEYBOARD_REPORT_SIZE;
 407               		.loc 1 644 5 is_stmt 1 view .LVU102
 408               	.LVL31:
 645:tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 409               		.loc 1 645 5 view .LVU103
 647:tmk_core/protocol/lufa/lufa.c ****         ep = SHARED_IN_EPNUM;
 410               		.loc 1 647 5 view .LVU104
 647:tmk_core/protocol/lufa/lufa.c ****         ep = SHARED_IN_EPNUM;
 411               		.loc 1 647 8 is_stmt 0 view .LVU105
 412 0012 8091 0000 		lds r24,keyboard_protocol
 413               	.LVL32:
 647:tmk_core/protocol/lufa/lufa.c ****         ep = SHARED_IN_EPNUM;
 414               		.loc 1 647 8 view .LVU106
 415 0016 8823      		tst r24
 416 0018 01F0      		breq .L42
 647:tmk_core/protocol/lufa/lufa.c ****         ep = SHARED_IN_EPNUM;
 417               		.loc 1 647 27 discriminator 1 view .LVU107
 418 001a 8091 0000 		lds r24,keymap_config
 419 001e 87FF      		sbrs r24,7
 420 0020 00C0      		rjmp .L42
 649:tmk_core/protocol/lufa/lufa.c ****     }
 421               		.loc 1 649 14 view .LVU108
 422 0022 60E2      		ldi r22,lo8(32)
 648:tmk_core/protocol/lufa/lufa.c ****         size = sizeof(struct nkro_report);
 423               		.loc 1 648 12 view .LVU109
 424 0024 82E0      		ldi r24,lo8(2)
 425               	.L34:
 426               	.LVL33:
 652:tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 427               		.loc 1 652 5 is_stmt 1 view .LVU110
 428               	.LBB114:
 429               	.LBI114:
 267:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 430               		.loc 2 267 23 view .LVU111
 431               	.LBB115:
 270:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 432               		.loc 2 270 6 view .LVU112
 270:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 433               		.loc 2 270 12 is_stmt 0 view .LVU113
 434 0026 8093 E900 		sts 233,r24
 435               	.LVL34:
 270:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 436               		.loc 2 270 12 view .LVU114
 437 002a 8FEF      		ldi r24,lo8(-1)
 438               	.LVL35:
 439               	.L35:
 270:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 440               		.loc 2 270 12 view .LVU115
 441               	.LBE115:
 442               	.LBE114:
 443               	.LBB116:
 444               	.LBI116:
 358:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 445               		.loc 2 358 23 is_stmt 1 view .LVU116
 446               	.LBB117:
 360:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 447               		.loc 2 360 5 view .LVU117
 360:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 448               		.loc 2 360 14 is_stmt 0 view .LVU118
 449 002c 9091 E800 		lds r25,232
 450 0030 8150      		subi r24,lo8(-(-1))
 451               	.LVL36:
 360:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 452               		.loc 2 360 14 view .LVU119
 453               	.LBE117:
 454               	.LBE116:
 654:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 455               		.loc 1 654 22 view .LVU120
 456 0032 95FD      		sbrc r25,5
 457 0034 00C0      		rjmp .L36
 654:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 458               		.loc 1 654 57 is_stmt 1 view .LVU121
 459               	.LVL37:
 460               	.LBB118:
 461               	.LBI118:
 255:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** {
 462               		.loc 3 255 1 view .LVU122
 463               	.LBB119:
 257:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 464               		.loc 3 257 2 view .LVU123
 261:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 465               		.loc 3 261 2 view .LVU124
 262:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 466               		.loc 3 262 2 view .LVU125
 263:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 467               		.loc 3 263 2 view .LVU126
 273:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#endif
 468               		.loc 3 273 3 view .LVU127
 469               		.loc 3 276 2 view .LVU128
 470 0036 95ED      		ldi r25,lo8(-43)
 471 0038 9A95      	1:	dec r25
 472 003a 01F4      		brne 1b
 473 003c 0000      		nop
 474               	.LVL38:
 475               		.loc 3 276 2 is_stmt 0 view .LVU129
 476               	.LBE119:
 477               	.LBE118:
 654:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 478               		.loc 1 654 11 view .LVU130
 479 003e 8111      		cpse r24,__zero_reg__
 480 0040 00C0      		rjmp .L35
 481               	.LVL39:
 482               	.L36:
 655:tmk_core/protocol/lufa/lufa.c **** 
 483               		.loc 1 655 5 is_stmt 1 view .LVU131
 484               	.LBB120:
 485               	.LBI120:
 358:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 486               		.loc 2 358 23 view .LVU132
 487               	.LBB121:
 360:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 488               		.loc 2 360 5 view .LVU133
 360:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 489               		.loc 2 360 14 is_stmt 0 view .LVU134
 490 0042 8091 E800 		lds r24,232
 491               	.LBE121:
 492               	.LBE120:
 655:tmk_core/protocol/lufa/lufa.c **** 
 493               		.loc 1 655 8 view .LVU135
 494 0046 85FF      		sbrs r24,5
 495 0048 00C0      		rjmp .L31
 658:tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(&report->mods, 8, NULL);
 496               		.loc 1 658 5 is_stmt 1 view .LVU136
 658:tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(&report->mods, 8, NULL);
 497               		.loc 1 658 8 is_stmt 0 view .LVU137
 498 004a 8091 0000 		lds r24,keyboard_protocol
 661:tmk_core/protocol/lufa/lufa.c ****     }
 499               		.loc 1 661 9 view .LVU138
 500 004e 70E0      		ldi r23,0
 501 0050 50E0      		ldi r21,0
 502 0052 40E0      		ldi r20,0
 658:tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(&report->mods, 8, NULL);
 503               		.loc 1 658 8 view .LVU139
 504 0054 8111      		cpse r24,__zero_reg__
 505 0056 00C0      		rjmp .L55
 659:tmk_core/protocol/lufa/lufa.c ****     } else {
 506               		.loc 1 659 9 is_stmt 1 view .LVU140
 507 0058 50E0      		ldi r21,0
 508 005a 40E0      		ldi r20,0
 509 005c 68E0      		ldi r22,lo8(8)
 510 005e 70E0      		ldi r23,0
 511               	.LVL40:
 512               	.L55:
 661:tmk_core/protocol/lufa/lufa.c ****     }
 513               		.loc 1 661 9 is_stmt 0 view .LVU141
 514 0060 CE01      		movw r24,r28
 515 0062 0E94 0000 		call Endpoint_Write_Stream_LE
 516               	.LVL41:
 665:tmk_core/protocol/lufa/lufa.c **** 
 517               		.loc 1 665 5 is_stmt 1 view .LVU142
 518               	.LBB122:
 519               	.LBI122:
 453:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 520               		.loc 2 453 23 view .LVU143
 521               	.LBB123:
 522               		.loc 2 456 6 view .LVU144
 523               		.loc 2 456 13 is_stmt 0 view .LVU145
 524 0066 8091 E800 		lds r24,232
 525 006a 8E77      		andi r24,lo8(126)
 526 006c 8093 E800 		sts 232,r24
 527               	.LBE123:
 528               	.LBE122:
 667:tmk_core/protocol/lufa/lufa.c **** }
 529               		.loc 1 667 5 is_stmt 1 view .LVU146
 667:tmk_core/protocol/lufa/lufa.c **** }
 530               		.loc 1 667 26 is_stmt 0 view .LVU147
 531 0070 80E2      		ldi r24,lo8(32)
 532 0072 FE01      		movw r30,r28
 533 0074 A0E0      		ldi r26,lo8(keyboard_report_sent)
 534 0076 B0E0      		ldi r27,hi8(keyboard_report_sent)
 535               		0:
 536 0078 0190      		ld r0,Z+
 537 007a 0D92      		st X+,r0
 538 007c 8A95      		dec r24
 539 007e 01F4      		brne 0b
 540               	.L31:
 541               	/* epilogue start */
 668:tmk_core/protocol/lufa/lufa.c ****  
 542               		.loc 1 668 1 view .LVU148
 543 0080 DF91      		pop r29
 544 0082 CF91      		pop r28
 545               	.LVL42:
 668:tmk_core/protocol/lufa/lufa.c ****  
 546               		.loc 1 668 1 view .LVU149
 547 0084 0895      		ret
 548               	.LVL43:
 549               	.L42:
 645:tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 550               		.loc 1 645 13 view .LVU150
 551 0086 68E0      		ldi r22,lo8(8)
 644:tmk_core/protocol/lufa/lufa.c ****     uint8_t size = KEYBOARD_REPORT_SIZE;
 552               		.loc 1 644 13 view .LVU151
 553 0088 81E0      		ldi r24,lo8(1)
 554 008a 00C0      		rjmp .L34
 555               		.cfi_endproc
 556               	.LFE129:
 558               		.section	.text.EVENT_USB_Device_Connect,"ax",@progbits
 559               	.global	EVENT_USB_Device_Connect
 561               	EVENT_USB_Device_Connect:
 562               	.LFB121:
 307:tmk_core/protocol/lufa/lufa.c ****     print("[C]");
 563               		.loc 1 307 1 is_stmt 1 view -0
 564               		.cfi_startproc
 565               	/* prologue: function */
 566               	/* frame size = 0 */
 567               	/* stack size = 0 */
 568               	.L__stack_usage = 0
 308:tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 569               		.loc 1 308 17 view .LVU153
 310:tmk_core/protocol/lufa/lufa.c ****         USB_Disable();
 570               		.loc 1 310 5 view .LVU154
 310:tmk_core/protocol/lufa/lufa.c ****         USB_Disable();
 571               		.loc 1 310 9 is_stmt 0 view .LVU155
 572 0000 8091 0000 		lds r24,USB_IsInitialized
 310:tmk_core/protocol/lufa/lufa.c ****         USB_Disable();
 573               		.loc 1 310 8 view .LVU156
 574 0004 8111      		cpse r24,__zero_reg__
 575 0006 00C0      		rjmp .L56
 311:tmk_core/protocol/lufa/lufa.c ****         USB_Init();
 576               		.loc 1 311 9 is_stmt 1 view .LVU157
 577 0008 0E94 0000 		call USB_Disable
 578               	.LVL44:
 312:tmk_core/protocol/lufa/lufa.c ****         USB_Device_EnableSOFEvents();
 579               		.loc 1 312 9 view .LVU158
 580 000c 0E94 0000 		call USB_Init
 581               	.LVL45:
 313:tmk_core/protocol/lufa/lufa.c ****     }
 582               		.loc 1 313 9 view .LVU159
 583               	.LBB124:
 584               	.LBI124:
 585               		.file 4 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h"
   1:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** /*
   2:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****              LUFA Library
   3:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****      Copyright (C) Dean Camera, 2017.
   4:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
   5:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****            www.lufa-lib.org
   7:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** */
   8:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
   9:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** /*
  10:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   Copyright 2017  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  12:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   all copies and that both that the copyright notice and this
  16:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   documentation, and that the name of the author not be used in
  18:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   software without specific, written prior permission.
  20:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  21:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   The author disclaims all warranties with regard to this
  22:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   software, including all implied warranties of merchantability
  23:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   special, indirect or consequential damages or any damages
  25:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   arising out of or in connection with the use or performance of
  28:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   this software.
  29:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** */
  30:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  31:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** /** \file
  32:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *  \brief USB Device definitions for the AVR8 microcontrollers.
  33:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *  \copydetails Group_Device_AVR8
  34:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *
  35:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  */
  38:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  39:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** /** \ingroup Group_Device
  40:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *  \defgroup Group_Device_AVR8 Device Management (AVR8)
  41:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *  \brief USB Device definitions for the AVR8 microcontrollers.
  42:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *
  43:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *  Architecture specific USB Device definitions for the Atmel 8-bit AVR microcontrollers.
  44:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *
  45:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *  @{
  46:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  */
  47:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  48:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** #ifndef __USBDEVICE_AVR8_H__
  49:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** #define __USBDEVICE_AVR8_H__
  50:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  51:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 	/* Includes: */
  52:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#include "../../../../Common/Common.h"
  53:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#include "../USBController.h"
  54:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#include "../StdDescriptors.h"
  55:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#include "../USBInterrupt.h"
  56:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#include "../Endpoint.h"
  57:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  58:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  59:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#if defined(__cplusplus)
  60:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			extern "C" {
  61:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#endif
  62:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  63:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 	/* Preprocessor Checks: */
  64:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  65:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  66:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#endif
  67:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  68:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#if (defined(USE_RAM_DESCRIPTORS) && defined(USE_EEPROM_DESCRIPTORS))
  69:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#error USE_RAM_DESCRIPTORS and USE_EEPROM_DESCRIPTORS are mutually exclusive.
  70:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#endif
  71:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  72:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#if (defined(USE_FLASH_DESCRIPTORS) && defined(USE_EEPROM_DESCRIPTORS))
  73:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#error USE_FLASH_DESCRIPTORS and USE_EEPROM_DESCRIPTORS are mutually exclusive.
  74:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#endif
  75:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  76:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#if (defined(USE_FLASH_DESCRIPTORS) && defined(USE_RAM_DESCRIPTORS))
  77:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#error USE_FLASH_DESCRIPTORS and USE_RAM_DESCRIPTORS are mutually exclusive.
  78:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#endif
  79:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  80:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 	/* Public Interface - May be used in end-application: */
  81:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		/* Macros: */
  82:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			/** \name USB Device Mode Option Masks */
  83:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			//@{
  84:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defin
  85:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				/** Mask for the Options parameter of the \ref USB_Init() function. This indicates that the
  86:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  USB interface should be initialized in low speed (1.5Mb/s) mode.
  87:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *
  88:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  \note Low Speed mode is not available on all USB AVR models.
  89:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *        \n
  90:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *
  91:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  \note Restrictions apply on the number, size and type of endpoints which can be used
  92:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *        when running in low speed mode - please refer to the USB 2.0 specification.
  93:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 */
  94:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				#define USB_DEVICE_OPT_LOWSPEED            (1 << 0)
  95:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#endif
  96:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  97:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			/** Mask for the Options parameter of the \ref USB_Init() function. This indicates that the
  98:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  USB interface should be initialized in full speed (12Mb/s) mode.
  99:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 */
 100:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#define USB_DEVICE_OPT_FULLSPEED               (0 << 0)
 101:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			//@}
 102:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 103:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#if (!defined(NO_INTERNAL_SERIAL) && \
 104:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			     (defined(USB_SERIES_7_AVR) || defined(USB_SERIES_6_AVR) || \
 105:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			      defined(USB_SERIES_4_AVR) || defined(USB_SERIES_2_AVR) || \
 106:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				  defined(__DOXYGEN__)))
 107:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				/** String descriptor index for the device's unique serial number string descriptor within the 
 108:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  This unique serial number is used by the host to associate resources to the device (such as
 109:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  number allocations) to a device regardless of the port it is plugged in to on the host. Som
 110:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  a unique serial number internally, and setting the device descriptors serial number string 
 111:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  will cause it to use the internal serial number.
 112:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *
 113:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  On unsupported devices, this will evaluate to \ref NO_DESCRIPTOR and so will force the host
 114:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  number for the device.
 115:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 */
 116:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				#define USE_INTERNAL_SERIAL            0xDC
 117:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 118:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				/** Length of the device's unique internal serial number, in bits, if present on the selected m
 119:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  model.
 120:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 */
 121:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				#define INTERNAL_SERIAL_LENGTH_BITS    80
 122:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 123:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				/** Start address of the internal serial number, in the appropriate address space, if present o
 124:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  model.
 125:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 */
 126:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				#define INTERNAL_SERIAL_START_ADDRESS  0x0E
 127:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#else
 128:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				#define USE_INTERNAL_SERIAL            NO_DESCRIPTOR
 129:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 130:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				#define INTERNAL_SERIAL_LENGTH_BITS    0
 131:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				#define INTERNAL_SERIAL_START_ADDRESS  0
 132:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#endif
 133:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 134:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		/* Function Prototypes: */
 135:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			/** Sends a Remote Wakeup request to the host. This signals to the host that the device should
 136:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  be taken out of suspended mode, and communications should resume.
 137:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *
 138:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  Typically, this is implemented so that HID devices (mice, keyboards, etc.) can wake up the
 139:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  host computer when the host has suspended all USB devices to enter a low power state.
 140:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *
 141:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  \attention This function should only be used if the device has indicated to the host that it
 142:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *             supports the Remote Wakeup feature in the device descriptors, and should only be
 143:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *             issued if the host is currently allowing remote wakeup events from the device (i.
 144:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *             the \ref USB_Device_RemoteWakeupEnabled flag is set). When the \c NO_DEVICE_REMOT
 145:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *             compile time option is used, this function is unavailable.
 146:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *             \n\n
 147:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *
 148:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  \attention The USB clock must be running for this function to operate. If the stack is initi
 149:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *             the \ref USB_OPT_MANUAL_PLL option enabled, the user must ensure that the PLL is 
 150:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *             before attempting to call this function.
 151:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *
 152:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  \see \ref Group_StdDescriptors for more information on the RMWAKEUP feature and device descr
 153:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 */
 154:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			void USB_Device_SendRemoteWakeup(void);
 155:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 156:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		/* Inline Functions: */
 157:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			/** Returns the current USB frame number, when in device mode. Every millisecond the USB bus is 
 158:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  the frame number is incremented by one.
 159:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *
 160:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  \return Current USB frame number from the USB controller.
 161:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 */
 162:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESUL
 163:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			static inline uint16_t USB_Device_GetFrameNumber(void)
 164:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			{
 165:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				return UDFNUM;
 166:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			}
 167:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 168:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#if !defined(NO_SOF_EVENTS)
 169:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				/** Enables the device mode Start Of Frame events. When enabled, this causes the
 170:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  \ref EVENT_USB_Device_StartOfFrame() event to fire once per millisecond, synchronized to th
 171:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  at the start of each USB frame when enumerated in device mode.
 172:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *
 173:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  \note This function is not available when the \c NO_SOF_EVENTS compile time token is define
 174:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 */
 175:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				static inline void USB_Device_EnableSOFEvents(void) ATTR_ALWAYS_INLINE;
 176:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				static inline void USB_Device_EnableSOFEvents(void)
 586               		.loc 4 176 24 view .LVU160
 587               	.LBE124:
 177:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				{
 178:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 					USB_INT_Enable(USB_INT_SOFI);
 588               		.loc 4 178 6 view .LVU161
 589               	.LBB127:
 590               	.LBB125:
 591               	.LBI125:
 592               		.file 5 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h"
   1:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /*
   2:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****              LUFA Library
   3:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****      Copyright (C) Dean Camera, 2017.
   4:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
   5:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****            www.lufa-lib.org
   7:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** */
   8:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
   9:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /*
  10:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   Copyright 2017  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  12:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   all copies and that both that the copyright notice and this
  16:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   documentation, and that the name of the author not be used in
  18:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software without specific, written prior permission.
  20:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  21:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   The author disclaims all warranties with regard to this
  22:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software, including all implied warranties of merchantability
  23:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   special, indirect or consequential damages or any damages
  25:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   arising out of or in connection with the use or performance of
  28:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   this software.
  29:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** */
  30:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  31:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /** \file
  32:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  \brief USB Controller Interrupt definitions for the AVR8 microcontrollers.
  33:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *
  34:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  This file contains definitions required for the correct handling of low level USB service routi
  35:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  from the USB controller.
  36:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *
  37:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  38:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  39:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  */
  40:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  41:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** #ifndef __USBINTERRUPT_AVR8_H__
  42:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** #define __USBINTERRUPT_AVR8_H__
  43:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  44:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Includes: */
  45:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#include "../../../../Common/Common.h"
  46:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  47:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  48:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#if defined(__cplusplus)
  49:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			extern "C" {
  50:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#endif
  51:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  52:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Preprocessor Checks: */
  53:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  54:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  55:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#endif
  56:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  57:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Private Interface - For use in library only: */
  58:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	#if !defined(__DOXYGEN__)
  59:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		/* Enums: */
  60:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			enum USB_Interrupts_t
  61:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			{
  62:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || def
  63:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_VBUSTI  = 0,
  64:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  65:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_BOTH) || defined(__DOXYGEN__))
  66:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_IDTI    = 1,
  67:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  68:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_DEVICE) || defined(__DOXYGEN__))
  69:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_WAKEUPI = 2,
  70:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SUSPI   = 3,
  71:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_EORSTI  = 4,
  72:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SOFI    = 5,
  73:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_RXSTPI  = 6,
  74:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  75:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_HOST) || defined(__DOXYGEN__))
  76:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_HSOFI   = 7,
  77:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_DCONNI  = 8,
  78:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_DDISCI  = 9,
  79:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_RSTI    = 10,
  80:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_BCERRI  = 11,
  81:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_VBERRI  = 12,
  82:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SRPI    = 13,
  83:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  84:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			};
  85:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  86:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		/* Inline Functions: */
  87:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			static inline void USB_INT_Enable(const uint8_t Interrupt) ATTR_ALWAYS_INLINE;
  88:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			static inline void USB_INT_Enable(const uint8_t Interrupt)
 593               		.loc 5 88 23 view .LVU162
 594               	.LBB126:
  89:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			{
  90:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				switch (Interrupt)
 595               		.loc 5 90 5 view .LVU163
  91:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				{
  92:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
  93:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_VBUSTI:
  94:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						USBCON |= (1 << VBUSTE);
  95:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
  96:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#endif
  97:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if defined(USB_CAN_BE_BOTH)
  98:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_IDTI:
  99:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						USBCON |= (1 << IDTE);
 100:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 101:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#endif
 102:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if defined(USB_CAN_BE_DEVICE)
 103:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_WAKEUPI:
 104:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << WAKEUPE);
 105:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 106:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_SUSPI:
 107:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << SUSPE);
 108:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 109:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_EORSTI:
 110:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << EORSTE);
 111:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 112:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_SOFI:
 113:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << SOFE);
 596               		.loc 5 113 7 view .LVU164
 597               		.loc 5 113 14 is_stmt 0 view .LVU165
 598 0010 8091 E200 		lds r24,226
 599 0014 8460      		ori r24,lo8(4)
 600 0016 8093 E200 		sts 226,r24
 114:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 601               		.loc 5 114 7 is_stmt 1 view .LVU166
 602               	.LVL46:
 603               	.L56:
 604               	/* epilogue start */
 605               		.loc 5 114 7 is_stmt 0 view .LVU167
 606               	.LBE126:
 607               	.LBE125:
 608               	.LBE127:
 315:tmk_core/protocol/lufa/lufa.c **** 
 609               		.loc 1 315 1 view .LVU168
 610 001a 0895      		ret
 611               		.cfi_endproc
 612               	.LFE121:
 614               		.section	.text.EVENT_USB_Device_Disconnect,"ax",@progbits
 615               	.global	EVENT_USB_Device_Disconnect
 617               	EVENT_USB_Device_Disconnect:
 618               	.LFB122:
 322:tmk_core/protocol/lufa/lufa.c ****     print("[D]");
 619               		.loc 1 322 1 is_stmt 1 view -0
 620               		.cfi_startproc
 621               	/* prologue: function */
 622               	/* frame size = 0 */
 623               	/* stack size = 0 */
 624               	.L__stack_usage = 0
 323:tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 625               		.loc 1 323 17 view .LVU170
 325:tmk_core/protocol/lufa/lufa.c **** /* TODO: This doesn't work. After several plug in/outs can not be enumerated.
 626               		.loc 1 325 5 view .LVU171
 325:tmk_core/protocol/lufa/lufa.c **** /* TODO: This doesn't work. After several plug in/outs can not be enumerated.
 627               		.loc 1 325 23 is_stmt 0 view .LVU172
 628 0000 1092 0000 		sts USB_IsInitialized,__zero_reg__
 629               	/* epilogue start */
 333:tmk_core/protocol/lufa/lufa.c **** 
 630               		.loc 1 333 1 view .LVU173
 631 0004 0895      		ret
 632               		.cfi_endproc
 633               	.LFE122:
 635               		.section	.text.EVENT_USB_Device_Reset,"ax",@progbits
 636               	.global	EVENT_USB_Device_Reset
 638               	EVENT_USB_Device_Reset:
 639               	.LFB139:
 640               		.cfi_startproc
 641               	/* prologue: function */
 642               	/* frame size = 0 */
 643               	/* stack size = 0 */
 644               	.L__stack_usage = 0
 645               	/* epilogue start */
 646 0000 0895      		ret
 647               		.cfi_endproc
 648               	.LFE139:
 650               		.section	.text.EVENT_USB_Device_Suspend,"ax",@progbits
 651               	.global	EVENT_USB_Device_Suspend
 653               	EVENT_USB_Device_Suspend:
 654               	.LFB124:
 349:tmk_core/protocol/lufa/lufa.c ****     print("[S]");
 655               		.loc 1 349 1 is_stmt 1 view -0
 656               		.cfi_startproc
 657               	/* prologue: function */
 658               	/* frame size = 0 */
 659               	/* stack size = 0 */
 660               	.L__stack_usage = 0
 350:tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 661               		.loc 1 350 17 view .LVU175
 662               	/* epilogue start */
 354:tmk_core/protocol/lufa/lufa.c **** 
 663               		.loc 1 354 1 is_stmt 0 view .LVU176
 664 0000 0895      		ret
 665               		.cfi_endproc
 666               	.LFE124:
 668               		.section	.text.EVENT_USB_Device_WakeUp,"ax",@progbits
 669               	.global	EVENT_USB_Device_WakeUp
 671               	EVENT_USB_Device_WakeUp:
 672               	.LFB125:
 361:tmk_core/protocol/lufa/lufa.c ****     print("[W]");
 673               		.loc 1 361 1 is_stmt 1 view -0
 674               		.cfi_startproc
 675               	/* prologue: function */
 676               	/* frame size = 0 */
 677               	/* stack size = 0 */
 678               	.L__stack_usage = 0
 362:tmk_core/protocol/lufa/lufa.c ****     suspend_wakeup_init();
 679               		.loc 1 362 17 view .LVU178
 363:tmk_core/protocol/lufa/lufa.c **** 
 680               		.loc 1 363 5 view .LVU179
 681 0000 0C94 0000 		jmp suspend_wakeup_init
 682               	.LVL47:
 683               		.cfi_endproc
 684               	.LFE125:
 686               		.section	.text.EVENT_USB_Device_ConfigurationChanged,"ax",@progbits
 687               	.global	EVENT_USB_Device_ConfigurationChanged
 689               	EVENT_USB_Device_ConfigurationChanged:
 690               	.LFB126:
 408:tmk_core/protocol/lufa/lufa.c ****     bool ConfigSuccess = true;
 691               		.loc 1 408 1 view -0
 692               		.cfi_startproc
 693               	/* prologue: function */
 694               	/* frame size = 0 */
 695               	/* stack size = 0 */
 696               	.L__stack_usage = 0
 409:tmk_core/protocol/lufa/lufa.c **** 
 697               		.loc 1 409 5 view .LVU181
 698               	.LVL48:
 413:tmk_core/protocol/lufa/lufa.c ****                                      KEYBOARD_EPSIZE, ENDPOINT_BANK_SINGLE);
 699               		.loc 1 413 5 view .LVU182
 700               	.LBB128:
 701               	.LBI128:
 200:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 702               		.loc 2 200 23 view .LVU183
 703               	.LBB129:
 205:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 704               		.loc 2 205 5 view .LVU184
 207:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				  return false;
 705               		.loc 2 207 5 view .LVU185
 210:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 706               		.loc 2 210 5 view .LVU186
 210:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 707               		.loc 2 210 5 is_stmt 0 view .LVU187
 708               	.LBE129:
 709               	.LBE128:
  97:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint16_t CheckBytes = 8;
 710               		.loc 2 97 5 is_stmt 1 view .LVU188
  98:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 711               		.loc 2 98 5 view .LVU189
 100:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 712               		.loc 2 100 5 view .LVU190
 106:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 713               		.loc 2 106 5 view .LVU191
 714               	.LBB131:
 715               	.LBB130:
 210:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 716               		.loc 2 210 12 is_stmt 0 view .LVU192
 717 0000 42E0      		ldi r20,lo8(2)
 718 0002 61EC      		ldi r22,lo8(-63)
 719 0004 81E0      		ldi r24,lo8(1)
 720 0006 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 721               	.LVL49:
 210:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 722               		.loc 2 210 12 view .LVU193
 723               	.LBE130:
 724               	.LBE131:
 425:tmk_core/protocol/lufa/lufa.c ****                                      SHARED_EPSIZE, ENDPOINT_BANK_SINGLE);
 725               		.loc 1 425 5 is_stmt 1 view .LVU194
 726               	.LBB132:
 727               	.LBI132:
 200:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 728               		.loc 2 200 23 view .LVU195
 729               	.LBB133:
 205:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 730               		.loc 2 205 5 view .LVU196
 207:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				  return false;
 731               		.loc 2 207 5 view .LVU197
 207:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				  return false;
 732               		.loc 2 207 5 is_stmt 0 view .LVU198
 733               	.LBE133:
 734               	.LBE132:
 102:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					CheckBytes <<= 1;
 735               		.loc 2 102 6 is_stmt 1 view .LVU199
 103:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 736               		.loc 2 103 6 view .LVU200
 102:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					CheckBytes <<= 1;
 737               		.loc 2 102 6 view .LVU201
 103:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 738               		.loc 2 103 6 view .LVU202
 106:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 739               		.loc 2 106 5 view .LVU203
 740               	.LBB135:
 741               	.LBB134:
 210:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 742               		.loc 2 210 12 is_stmt 0 view .LVU204
 743 000a 42E2      		ldi r20,lo8(34)
 744 000c 61EC      		ldi r22,lo8(-63)
 745 000e 82E0      		ldi r24,lo8(2)
 746 0010 0C94 0000 		jmp Endpoint_ConfigureEndpoint_Prv
 747               	.LVL50:
 748               	.LBE134:
 749               	.LBE135:
 750               		.cfi_endproc
 751               	.LFE126:
 753               		.section	.text.EVENT_USB_Device_ControlRequest,"ax",@progbits
 754               	.global	EVENT_USB_Device_ControlRequest
 756               	EVENT_USB_Device_ControlRequest:
 757               	.LFB127:
 477:tmk_core/protocol/lufa/lufa.c ****     uint8_t* ReportData = NULL;
 758               		.loc 1 477 1 is_stmt 1 view -0
 759               		.cfi_startproc
 760               	/* prologue: function */
 761               	/* frame size = 0 */
 762               	/* stack size = 0 */
 763               	.L__stack_usage = 0
 478:tmk_core/protocol/lufa/lufa.c ****     uint8_t  ReportSize = 0;
 764               		.loc 1 478 5 view .LVU206
 765               	.LVL51:
 479:tmk_core/protocol/lufa/lufa.c **** 
 766               		.loc 1 479 5 view .LVU207
 482:tmk_core/protocol/lufa/lufa.c ****     {
 767               		.loc 1 482 5 view .LVU208
 482:tmk_core/protocol/lufa/lufa.c ****     {
 768               		.loc 1 482 31 is_stmt 0 view .LVU209
 769 0000 8091 0000 		lds r24,USB_ControlRequest+1
 770 0004 8330      		cpi r24,lo8(3)
 771 0006 01F4      		brne .+2
 772 0008 00C0      		rjmp .L64
 773 000a 00F4      		brsh .L65
 774 000c 8130      		cpi r24,lo8(1)
 775 000e 01F0      		breq .L66
 776 0010 8230      		cpi r24,lo8(2)
 777 0012 01F4      		brne .+2
 778 0014 00C0      		rjmp .L67
 779 0016 0895      		ret
 780               	.L65:
 781 0018 8A30      		cpi r24,lo8(10)
 782 001a 01F4      		brne .+2
 783 001c 00C0      		rjmp .L69
 784 001e 8B30      		cpi r24,lo8(11)
 785 0020 01F4      		brne .+2
 786 0022 00C0      		rjmp .L70
 787 0024 8930      		cpi r24,lo8(9)
 788 0026 01F0      		breq .+2
 789 0028 00C0      		rjmp .L63
 505:tmk_core/protocol/lufa/lufa.c ****             {
 790               		.loc 1 505 13 is_stmt 1 view .LVU210
 505:tmk_core/protocol/lufa/lufa.c ****             {
 791               		.loc 1 505 16 is_stmt 0 view .LVU211
 792 002a 8091 0000 		lds r24,USB_ControlRequest
 793 002e 8132      		cpi r24,lo8(33)
 794 0030 01F0      		breq .+2
 795 0032 00C0      		rjmp .L63
 509:tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 796               		.loc 1 509 17 is_stmt 1 view .LVU212
 797 0034 8091 0000 		lds r24,USB_ControlRequest+4
 798 0038 9091 0000 		lds r25,USB_ControlRequest+4+1
 799 003c 0297      		sbiw r24,2
 800 003e 00F0      		brlo .+2
 801 0040 00C0      		rjmp .L63
 514:tmk_core/protocol/lufa/lufa.c **** 
 802               		.loc 1 514 21 view .LVU213
 803               	.LBB136:
 804               	.LBI136:
 442:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 805               		.loc 2 442 23 view .LVU214
 806               	.LBB137:
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 807               		.loc 2 444 5 view .LVU215
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 808               		.loc 2 444 12 is_stmt 0 view .LVU216
 809 0042 8091 E800 		lds r24,232
 810 0046 877F      		andi r24,lo8(-9)
 811 0048 8093 E800 		sts 232,r24
 812               	.L75:
 813               	.LBE137:
 814               	.LBE136:
 815               	.LBB138:
 816               	.LBI138:
 417:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 817               		.loc 2 417 23 is_stmt 1 view .LVU217
 818               	.LBB139:
 419:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 819               		.loc 2 419 5 view .LVU218
 419:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 820               		.loc 2 419 14 is_stmt 0 view .LVU219
 821 004c 8091 E800 		lds r24,232
 822               	.LBE139:
 823               	.LBE138:
 516:tmk_core/protocol/lufa/lufa.c ****                         if (USB_DeviceState == DEVICE_STATE_Unattached)
 824               		.loc 1 516 27 view .LVU220
 825 0050 82FF      		sbrs r24,2
 826 0052 00C0      		rjmp .L76
 521:tmk_core/protocol/lufa/lufa.c ****                       uint8_t report_id = Endpoint_Read_8();
 827               		.loc 1 521 21 is_stmt 1 view .LVU221
 828               	.LBB140:
 829               	.LBI140:
 222:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 830               		.loc 2 222 27 view .LVU222
 831               	.LBB141:
 227:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_2_AVR)
 832               		.loc 2 227 6 view .LVU223
 227:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_2_AVR)
 833               		.loc 2 227 25 is_stmt 0 view .LVU224
 834 0054 9091 F300 		lds r25,243
 227:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_2_AVR)
 835               		.loc 2 227 40 view .LVU225
 836 0058 8091 F200 		lds r24,242
 837               	.LBE141:
 838               	.LBE140:
 521:tmk_core/protocol/lufa/lufa.c ****                       uint8_t report_id = Endpoint_Read_8();
 839               		.loc 1 521 24 view .LVU226
 840 005c 0297      		sbiw r24,2
 841 005e 01F4      		brne .L77
 842               	.LBB142:
 522:tmk_core/protocol/lufa/lufa.c **** 
 843               		.loc 1 522 23 is_stmt 1 view .LVU227
 844               	.LBB143:
 845               	.LBI143:
 457:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 458:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << TXINI);
 459:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 460:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 461:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 462:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Acknowledges an OUT packet to the host on the currently selected endpoint, freeing up the en
 463:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  for the next packet and switching to the alternative endpoint bank if double banked.
 464:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 465:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 466:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 467:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
 468:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void)
 469:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 470:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 471:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 472:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 473:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << RXOUTI);
 474:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 475:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 476:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 477:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Stalls the current endpoint, indicating to the host that a logical problem occurred with the
 478:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  indicated endpoint and that the current transfer sequence should be aborted. This provides a
 479:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  way for devices to indicate invalid commands to the host so that the current transfer can be
 480:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  aborted and the host can begin its own recovery sequence.
 481:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 482:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  The currently selected endpoint remains stalled until either the \ref Endpoint_ClearStall() 
 483:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is called, or the host issues a CLEAR FEATURE request to the device for the currently select
 484:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint.
 485:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 486:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 487:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 488:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
 489:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void)
 490:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 491:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQ);
 492:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 493:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 494:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears the STALL condition on the currently selected endpoint.
 495:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 496:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 497:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 498:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
 499:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void)
 500:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 501:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQC);
 502:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 503:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 504:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is stalled, \c false otherwise.
 505:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 506:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 507:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 508:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
 509:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 510:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 511:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void)
 512:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 513:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << STALLRQ)) ? true : false);
 514:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 515:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 516:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the data toggle of the currently selected endpoint. */
 517:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
 518:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void)
 519:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 520:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << RSTDT);
 521:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 522:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 523:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sets the direction of the currently selected endpoint.
 524:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 525:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
 526:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 527:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE
 528:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
 529:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 530:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
 531:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 532:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 533:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Reads one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 534:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 535:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 536:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 537:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
 538:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 539:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 540:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void)
 846               		.loc 2 540 26 view .LVU228
 847               	.LBB144:
 541:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 542:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEDATX;
 848               		.loc 2 542 5 view .LVU229
 849               		.loc 2 542 12 is_stmt 0 view .LVU230
 850 0060 8091 F100 		lds r24,241
 851               	.LVL52:
 852               		.loc 2 542 12 view .LVU231
 853               	.LBE144:
 854               	.LBE143:
 524:tmk_core/protocol/lufa/lufa.c ****                         keyboard_led_stats = Endpoint_Read_8();
 855               		.loc 1 524 23 is_stmt 1 view .LVU232
 524:tmk_core/protocol/lufa/lufa.c ****                         keyboard_led_stats = Endpoint_Read_8();
 856               		.loc 1 524 26 is_stmt 0 view .LVU233
 857 0064 8B7F      		andi r24,lo8(-5)
 858               	.LVL53:
 524:tmk_core/protocol/lufa/lufa.c ****                         keyboard_led_stats = Endpoint_Read_8();
 859               		.loc 1 524 26 view .LVU234
 860 0066 8130      		cpi r24,lo8(1)
 861 0068 01F4      		brne .L78
 862               	.L77:
 524:tmk_core/protocol/lufa/lufa.c ****                         keyboard_led_stats = Endpoint_Read_8();
 863               		.loc 1 524 26 view .LVU235
 864               	.LBE142:
 528:tmk_core/protocol/lufa/lufa.c ****                     }
 865               		.loc 1 528 23 is_stmt 1 view .LVU236
 866               	.LBB145:
 867               	.LBI145:
 540:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 868               		.loc 2 540 26 view .LVU237
 869               	.LBB146:
 870               		.loc 2 542 5 view .LVU238
 871               		.loc 2 542 12 is_stmt 0 view .LVU239
 872 006a 8091 F100 		lds r24,241
 873               	.LBE146:
 874               	.LBE145:
 528:tmk_core/protocol/lufa/lufa.c ****                     }
 875               		.loc 1 528 42 view .LVU240
 876 006e 8093 0000 		sts keyboard_led_stats,r24
 877               	.L78:
 531:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 878               		.loc 1 531 21 is_stmt 1 view .LVU241
 879               	.LBB147:
 880               	.LBI147:
 468:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 881               		.loc 2 468 23 view .LVU242
 882               	.LBB148:
 471:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 883               		.loc 2 471 6 view .LVU243
 471:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 884               		.loc 2 471 13 is_stmt 0 view .LVU244
 885 0072 8091 E800 		lds r24,232
 886 0076 8B77      		andi r24,lo8(123)
 887               	.L89:
 888               	.LBE148:
 889               	.LBE147:
 890               	.LBB149:
 891               	.LBB150:
 456:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 892               		.loc 2 456 13 view .LVU245
 893 0078 8093 E800 		sts 232,r24
 894               	.LBE150:
 895               	.LBE149:
 583:tmk_core/protocol/lufa/lufa.c ****             }
 896               		.loc 1 583 17 is_stmt 1 view .LVU246
 897 007c 0C94 0000 		jmp Endpoint_ClearStatusStage
 898               	.LVL54:
 899               	.L66:
 485:tmk_core/protocol/lufa/lufa.c ****             {
 900               		.loc 1 485 13 view .LVU247
 485:tmk_core/protocol/lufa/lufa.c ****             {
 901               		.loc 1 485 16 is_stmt 0 view .LVU248
 902 0080 8091 0000 		lds r24,USB_ControlRequest
 903 0084 813A      		cpi r24,lo8(-95)
 904 0086 01F4      		brne .L63
 487:tmk_core/protocol/lufa/lufa.c **** 
 905               		.loc 1 487 17 is_stmt 1 view .LVU249
 906               	.LBB152:
 907               	.LBI152:
 442:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 908               		.loc 2 442 23 view .LVU250
 909               	.LBB153:
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 910               		.loc 2 444 5 view .LVU251
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 911               		.loc 2 444 12 is_stmt 0 view .LVU252
 912 0088 8091 E800 		lds r24,232
 913 008c 877F      		andi r24,lo8(-9)
 914 008e 8093 E800 		sts 232,r24
 915               	.LBE153:
 916               	.LBE152:
 490:tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 917               		.loc 1 490 17 is_stmt 1 view .LVU253
 918 0092 8091 0000 		lds r24,USB_ControlRequest+4
 919 0096 9091 0000 		lds r25,USB_ControlRequest+4+1
 920 009a 892B      		or r24,r25
 921 009c 01F4      		brne .L81
 494:tmk_core/protocol/lufa/lufa.c ****                     break;
 922               		.loc 1 494 32 is_stmt 0 view .LVU254
 923 009e 60E2      		ldi r22,lo8(32)
 493:tmk_core/protocol/lufa/lufa.c ****                     ReportSize = sizeof(keyboard_report_sent);
 924               		.loc 1 493 32 view .LVU255
 925 00a0 80E0      		ldi r24,lo8(keyboard_report_sent)
 926 00a2 90E0      		ldi r25,hi8(keyboard_report_sent)
 927               	.L73:
 928               	.LVL55:
 499:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearOUT();
 929               		.loc 1 499 17 is_stmt 1 view .LVU256
 930 00a4 70E0      		ldi r23,0
 931 00a6 0E94 0000 		call Endpoint_Write_Control_Stream_LE
 932               	.LVL56:
 500:tmk_core/protocol/lufa/lufa.c ****             }
 933               		.loc 1 500 17 view .LVU257
 934               	.LBB154:
 935               	.LBI154:
 468:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 936               		.loc 2 468 23 view .LVU258
 937               	.LBB155:
 471:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 938               		.loc 2 471 6 view .LVU259
 471:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 939               		.loc 2 471 13 is_stmt 0 view .LVU260
 940 00aa 8091 E800 		lds r24,232
 941 00ae 8B77      		andi r24,lo8(123)
 942 00b0 8093 E800 		sts 232,r24
 943 00b4 0895      		ret
 944               	.LVL57:
 945               	.L81:
 471:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 946               		.loc 2 471 13 view .LVU261
 947               	.LBE155:
 948               	.LBE154:
 479:tmk_core/protocol/lufa/lufa.c **** 
 949               		.loc 1 479 14 view .LVU262
 950 00b6 60E0      		ldi r22,0
 478:tmk_core/protocol/lufa/lufa.c ****     uint8_t  ReportSize = 0;
 951               		.loc 1 478 14 view .LVU263
 952 00b8 90E0      		ldi r25,0
 953 00ba 80E0      		ldi r24,0
 954 00bc 00C0      		rjmp .L73
 955               	.L76:
 517:tmk_core/protocol/lufa/lufa.c ****                           return;
 956               		.loc 1 517 25 is_stmt 1 view .LVU264
 517:tmk_core/protocol/lufa/lufa.c ****                           return;
 957               		.loc 1 517 45 is_stmt 0 view .LVU265
 958 00be 8091 0000 		lds r24,USB_DeviceState
 517:tmk_core/protocol/lufa/lufa.c ****                           return;
 959               		.loc 1 517 28 view .LVU266
 960 00c2 8111      		cpse r24,__zero_reg__
 961 00c4 00C0      		rjmp .L75
 962               	.L63:
 963               	/* epilogue start */
 592:tmk_core/protocol/lufa/lufa.c **** 
 964               		.loc 1 592 1 view .LVU267
 965 00c6 0895      		ret
 966               	.L64:
 541:tmk_core/protocol/lufa/lufa.c ****             {
 967               		.loc 1 541 13 is_stmt 1 view .LVU268
 541:tmk_core/protocol/lufa/lufa.c ****             {
 968               		.loc 1 541 16 is_stmt 0 view .LVU269
 969 00c8 8091 0000 		lds r24,USB_ControlRequest
 970 00cc 813A      		cpi r24,lo8(-95)
 971 00ce 01F4      		brne .L63
 543:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 972               		.loc 1 543 17 is_stmt 1 view .LVU270
 543:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 973               		.loc 1 543 20 is_stmt 0 view .LVU271
 974 00d0 8091 0000 		lds r24,USB_ControlRequest+4
 975 00d4 9091 0000 		lds r25,USB_ControlRequest+4+1
 976 00d8 892B      		or r24,r25
 977 00da 01F4      		brne .L63
 544:tmk_core/protocol/lufa/lufa.c ****                     while (!(Endpoint_IsINReady()));
 978               		.loc 1 544 21 is_stmt 1 view .LVU272
 979               	.LBB156:
 980               	.LBI156:
 442:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 981               		.loc 2 442 23 view .LVU273
 982               	.LBB157:
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 983               		.loc 2 444 5 view .LVU274
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 984               		.loc 2 444 12 is_stmt 0 view .LVU275
 985 00dc 8091 E800 		lds r24,232
 986 00e0 877F      		andi r24,lo8(-9)
 987 00e2 8093 E800 		sts 232,r24
 988               	.L79:
 989               	.LBE157:
 990               	.LBE156:
 545:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_Write_8(keyboard_protocol);
 991               		.loc 1 545 52 is_stmt 1 discriminator 1 view .LVU276
 992               	.LBB158:
 993               	.LBI158:
 405:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 994               		.loc 2 405 23 discriminator 1 view .LVU277
 995               	.LBB159:
 407:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 996               		.loc 2 407 5 discriminator 1 view .LVU278
 407:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 997               		.loc 2 407 14 is_stmt 0 discriminator 1 view .LVU279
 998 00e6 8091 E800 		lds r24,232
 999               	.LBE159:
 1000               	.LBE158:
 545:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_Write_8(keyboard_protocol);
 1001               		.loc 1 545 27 discriminator 1 view .LVU280
 1002 00ea 80FF      		sbrs r24,0
 1003 00ec 00C0      		rjmp .L79
 546:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearIN();
 1004               		.loc 1 546 21 is_stmt 1 view .LVU281
 1005 00ee 8091 0000 		lds r24,keyboard_protocol
 1006               	.LVL58:
 1007               	.LBB160:
 1008               	.LBI160:
 543:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 544:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 545:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Writes one byte to the currently selected endpoint's bank, for IN direction endpoints.
 546:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 547:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 548:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 549:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
 550:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 551:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
 552:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data)
 1009               		.loc 2 552 23 view .LVU282
 1010               	.LBB161:
 553:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 554:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = Data;
 1011               		.loc 2 554 5 view .LVU283
 1012               	.L90:
 1013               		.loc 2 554 5 is_stmt 0 view .LVU284
 1014               	.LBE161:
 1015               	.LBE160:
 1016               	.LBB162:
 1017               	.LBI162:
 552:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 1018               		.loc 2 552 23 is_stmt 1 view .LVU285
 1019               	.LBB163:
 1020               		.loc 2 554 5 view .LVU286
 1021               		.loc 2 554 12 is_stmt 0 view .LVU287
 1022 00f2 8093 F100 		sts 241,r24
 1023               	.LVL59:
 1024               		.loc 2 554 12 view .LVU288
 1025               	.LBE163:
 1026               	.LBE162:
 582:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 1027               		.loc 1 582 17 is_stmt 1 view .LVU289
 1028               	.LBB164:
 1029               	.LBI149:
 453:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 1030               		.loc 2 453 23 view .LVU290
 1031               	.LBB151:
 456:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1032               		.loc 2 456 6 view .LVU291
 456:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1033               		.loc 2 456 13 is_stmt 0 view .LVU292
 1034 00f6 8091 E800 		lds r24,232
 1035 00fa 8E77      		andi r24,lo8(126)
 1036 00fc 00C0      		rjmp .L89
 1037               	.L70:
 1038               	.LBE151:
 1039               	.LBE164:
 554:tmk_core/protocol/lufa/lufa.c ****             {
 1040               		.loc 1 554 13 is_stmt 1 view .LVU293
 554:tmk_core/protocol/lufa/lufa.c ****             {
 1041               		.loc 1 554 16 is_stmt 0 view .LVU294
 1042 00fe 8091 0000 		lds r24,USB_ControlRequest
 1043 0102 8132      		cpi r24,lo8(33)
 1044 0104 01F4      		brne .L63
 556:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 1045               		.loc 1 556 17 is_stmt 1 view .LVU295
 556:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 1046               		.loc 1 556 20 is_stmt 0 view .LVU296
 1047 0106 8091 0000 		lds r24,USB_ControlRequest+4
 1048 010a 9091 0000 		lds r25,USB_ControlRequest+4+1
 1049 010e 892B      		or r24,r25
 1050 0110 01F4      		brne .L63
 557:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 1051               		.loc 1 557 21 is_stmt 1 view .LVU297
 1052               	.LBB165:
 1053               	.LBI165:
 442:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 1054               		.loc 2 442 23 view .LVU298
 1055               	.LBB166:
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1056               		.loc 2 444 5 view .LVU299
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1057               		.loc 2 444 12 is_stmt 0 view .LVU300
 1058 0112 8091 E800 		lds r24,232
 1059 0116 877F      		andi r24,lo8(-9)
 1060 0118 8093 E800 		sts 232,r24
 1061               	.LBE166:
 1062               	.LBE165:
 558:tmk_core/protocol/lufa/lufa.c **** 
 1063               		.loc 1 558 21 is_stmt 1 view .LVU301
 1064 011c 0E94 0000 		call Endpoint_ClearStatusStage
 1065               	.LVL60:
 560:tmk_core/protocol/lufa/lufa.c ****                     clear_keyboard();
 1066               		.loc 1 560 21 view .LVU302
 560:tmk_core/protocol/lufa/lufa.c ****                     clear_keyboard();
 1067               		.loc 1 560 39 is_stmt 0 view .LVU303
 1068 0120 8091 0000 		lds r24,USB_ControlRequest+2
 1069 0124 8093 0000 		sts keyboard_protocol,r24
 561:tmk_core/protocol/lufa/lufa.c ****                 }
 1070               		.loc 1 561 21 is_stmt 1 view .LVU304
 1071 0128 0C94 0000 		jmp clear_keyboard
 1072               	.LVL61:
 1073               	.L69:
 567:tmk_core/protocol/lufa/lufa.c ****             {
 1074               		.loc 1 567 13 view .LVU305
 567:tmk_core/protocol/lufa/lufa.c ****             {
 1075               		.loc 1 567 16 is_stmt 0 view .LVU306
 1076 012c 8091 0000 		lds r24,USB_ControlRequest
 1077 0130 8132      		cpi r24,lo8(33)
 1078 0132 01F4      		brne .L63
 569:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 1079               		.loc 1 569 17 is_stmt 1 view .LVU307
 1080               	.LBB167:
 1081               	.LBI167:
 442:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 1082               		.loc 2 442 23 view .LVU308
 1083               	.LBB168:
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1084               		.loc 2 444 5 view .LVU309
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1085               		.loc 2 444 12 is_stmt 0 view .LVU310
 1086 0134 8091 E800 		lds r24,232
 1087 0138 877F      		andi r24,lo8(-9)
 1088 013a 8093 E800 		sts 232,r24
 1089               	.LBE168:
 1090               	.LBE167:
 570:tmk_core/protocol/lufa/lufa.c **** 
 1091               		.loc 1 570 17 is_stmt 1 view .LVU311
 1092 013e 0E94 0000 		call Endpoint_ClearStatusStage
 1093               	.LVL62:
 572:tmk_core/protocol/lufa/lufa.c ****             }
 1094               		.loc 1 572 17 view .LVU312
 572:tmk_core/protocol/lufa/lufa.c ****             }
 1095               		.loc 1 572 71 is_stmt 0 view .LVU313
 1096 0142 8091 0000 		lds r24,USB_ControlRequest+3
 572:tmk_core/protocol/lufa/lufa.c ****             }
 1097               		.loc 1 572 31 view .LVU314
 1098 0146 8093 0000 		sts keyboard_idle,r24
 1099 014a 0895      		ret
 1100               	.L67:
 577:tmk_core/protocol/lufa/lufa.c ****             {
 1101               		.loc 1 577 13 is_stmt 1 view .LVU315
 577:tmk_core/protocol/lufa/lufa.c ****             {
 1102               		.loc 1 577 16 is_stmt 0 view .LVU316
 1103 014c 8091 0000 		lds r24,USB_ControlRequest
 1104 0150 813A      		cpi r24,lo8(-95)
 1105 0152 01F0      		breq .+2
 1106 0154 00C0      		rjmp .L63
 579:tmk_core/protocol/lufa/lufa.c ****                 while (!(Endpoint_IsINReady()));
 1107               		.loc 1 579 17 is_stmt 1 view .LVU317
 1108               	.LBB169:
 1109               	.LBI169:
 442:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 1110               		.loc 2 442 23 view .LVU318
 1111               	.LBB170:
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1112               		.loc 2 444 5 view .LVU319
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1113               		.loc 2 444 12 is_stmt 0 view .LVU320
 1114 0156 8091 E800 		lds r24,232
 1115 015a 877F      		andi r24,lo8(-9)
 1116 015c 8093 E800 		sts 232,r24
 1117               	.L80:
 1118               	.LBE170:
 1119               	.LBE169:
 580:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_8(keyboard_idle);
 1120               		.loc 1 580 48 is_stmt 1 discriminator 1 view .LVU321
 1121               	.LBB171:
 1122               	.LBI171:
 405:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 1123               		.loc 2 405 23 discriminator 1 view .LVU322
 1124               	.LBB172:
 407:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1125               		.loc 2 407 5 discriminator 1 view .LVU323
 407:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1126               		.loc 2 407 14 is_stmt 0 discriminator 1 view .LVU324
 1127 0160 8091 E800 		lds r24,232
 1128               	.LBE172:
 1129               	.LBE171:
 580:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_8(keyboard_idle);
 1130               		.loc 1 580 23 discriminator 1 view .LVU325
 1131 0164 80FF      		sbrs r24,0
 1132 0166 00C0      		rjmp .L80
 581:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearIN();
 1133               		.loc 1 581 17 is_stmt 1 view .LVU326
 1134 0168 8091 0000 		lds r24,keyboard_idle
 1135 016c 00C0      		rjmp .L90
 1136               		.cfi_endproc
 1137               	.LFE127:
 1139               		.section	.text.sendchar,"ax",@progbits
 1140               	.global	sendchar
 1142               	sendchar:
 1143               	.LVL63:
 1144               	.LFB133:
 805:tmk_core/protocol/lufa/lufa.c **** 
 806:tmk_core/protocol/lufa/lufa.c **** 
 807:tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 808:tmk_core/protocol/lufa/lufa.c ****  * sendchar
 809:tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 810:tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 811:tmk_core/protocol/lufa/lufa.c **** #define SEND_TIMEOUT 5
 812:tmk_core/protocol/lufa/lufa.c **** /** \brief Send Char
 813:tmk_core/protocol/lufa/lufa.c ****  *
 814:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 815:tmk_core/protocol/lufa/lufa.c ****  */
 816:tmk_core/protocol/lufa/lufa.c **** int8_t sendchar(uint8_t c)
 817:tmk_core/protocol/lufa/lufa.c **** {
 818:tmk_core/protocol/lufa/lufa.c ****     // Not wait once timeouted.
 819:tmk_core/protocol/lufa/lufa.c ****     // Because sendchar() is called so many times, waiting each call causes big lag.
 820:tmk_core/protocol/lufa/lufa.c ****     static bool timeouted = false;
 821:tmk_core/protocol/lufa/lufa.c **** 
 822:tmk_core/protocol/lufa/lufa.c ****     // prevents Console_Task() from running during sendchar() runs.
 823:tmk_core/protocol/lufa/lufa.c ****     // or char will be lost. These two function is mutually exclusive.
 824:tmk_core/protocol/lufa/lufa.c ****     CONSOLE_FLUSH_SET(false);
 825:tmk_core/protocol/lufa/lufa.c **** 
 826:tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 827:tmk_core/protocol/lufa/lufa.c ****         return -1;
 828:tmk_core/protocol/lufa/lufa.c **** 
 829:tmk_core/protocol/lufa/lufa.c ****     uint8_t ep = Endpoint_GetCurrentEndpoint();
 830:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
 831:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 832:tmk_core/protocol/lufa/lufa.c ****         goto ERROR_EXIT;
 833:tmk_core/protocol/lufa/lufa.c ****     }
 834:tmk_core/protocol/lufa/lufa.c **** 
 835:tmk_core/protocol/lufa/lufa.c ****     if (timeouted && !Endpoint_IsReadWriteAllowed()) {
 836:tmk_core/protocol/lufa/lufa.c ****         goto ERROR_EXIT;
 837:tmk_core/protocol/lufa/lufa.c ****     }
 838:tmk_core/protocol/lufa/lufa.c **** 
 839:tmk_core/protocol/lufa/lufa.c ****     timeouted = false;
 840:tmk_core/protocol/lufa/lufa.c **** 
 841:tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = SEND_TIMEOUT;
 842:tmk_core/protocol/lufa/lufa.c ****     while (!Endpoint_IsReadWriteAllowed()) {
 843:tmk_core/protocol/lufa/lufa.c ****         if (USB_DeviceState != DEVICE_STATE_Configured) {
 844:tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 845:tmk_core/protocol/lufa/lufa.c ****         }
 846:tmk_core/protocol/lufa/lufa.c ****         if (Endpoint_IsStalled()) {
 847:tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 848:tmk_core/protocol/lufa/lufa.c ****         }
 849:tmk_core/protocol/lufa/lufa.c ****         if (!(timeout--)) {
 850:tmk_core/protocol/lufa/lufa.c ****             timeouted = true;
 851:tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 852:tmk_core/protocol/lufa/lufa.c ****         }
 853:tmk_core/protocol/lufa/lufa.c ****         _delay_ms(1);
 854:tmk_core/protocol/lufa/lufa.c ****     }
 855:tmk_core/protocol/lufa/lufa.c **** 
 856:tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_8(c);
 857:tmk_core/protocol/lufa/lufa.c **** 
 858:tmk_core/protocol/lufa/lufa.c ****     // send when bank is full
 859:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) {
 860:tmk_core/protocol/lufa/lufa.c ****         while (!(Endpoint_IsINReady()));
 861:tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 862:tmk_core/protocol/lufa/lufa.c ****     } else {
 863:tmk_core/protocol/lufa/lufa.c ****         CONSOLE_FLUSH_SET(true);
 864:tmk_core/protocol/lufa/lufa.c ****     }
 865:tmk_core/protocol/lufa/lufa.c **** 
 866:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 867:tmk_core/protocol/lufa/lufa.c ****     return 0;
 868:tmk_core/protocol/lufa/lufa.c **** ERROR_EXIT:
 869:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 870:tmk_core/protocol/lufa/lufa.c ****     return -1;
 871:tmk_core/protocol/lufa/lufa.c **** }
 872:tmk_core/protocol/lufa/lufa.c **** #else
 873:tmk_core/protocol/lufa/lufa.c **** int8_t sendchar(uint8_t c)
 874:tmk_core/protocol/lufa/lufa.c **** {
 1145               		.loc 1 874 1 view -0
 1146               		.cfi_startproc
 1147               	/* prologue: function */
 1148               	/* frame size = 0 */
 1149               	/* stack size = 0 */
 1150               	.L__stack_usage = 0
 875:tmk_core/protocol/lufa/lufa.c ****     return 0;
 1151               		.loc 1 875 5 view .LVU328
 876:tmk_core/protocol/lufa/lufa.c **** }
 1152               		.loc 1 876 1 is_stmt 0 view .LVU329
 1153 0000 80E0      		ldi r24,0
 1154               	.LVL64:
 1155               	/* epilogue start */
 1156               		.loc 1 876 1 view .LVU330
 1157 0002 0895      		ret
 1158               		.cfi_endproc
 1159               	.LFE133:
 1161               		.section	.text.startup.main,"ax",@progbits
 1162               		.weak	main
 1164               	main:
 1165               	.LFB136:
 877:tmk_core/protocol/lufa/lufa.c **** #endif
 878:tmk_core/protocol/lufa/lufa.c **** 
 879:tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 880:tmk_core/protocol/lufa/lufa.c ****  * MIDI
 881:tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 882:tmk_core/protocol/lufa/lufa.c **** 
 883:tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 884:tmk_core/protocol/lufa/lufa.c **** USB_ClassInfo_MIDI_Device_t USB_MIDI_Interface =
 885:tmk_core/protocol/lufa/lufa.c **** {
 886:tmk_core/protocol/lufa/lufa.c ****   .Config =
 887:tmk_core/protocol/lufa/lufa.c ****   {
 888:tmk_core/protocol/lufa/lufa.c ****     .StreamingInterfaceNumber = AS_INTERFACE,
 889:tmk_core/protocol/lufa/lufa.c ****     .DataINEndpoint           =
 890:tmk_core/protocol/lufa/lufa.c ****     {
 891:tmk_core/protocol/lufa/lufa.c ****       .Address          = MIDI_STREAM_IN_EPADDR,
 892:tmk_core/protocol/lufa/lufa.c ****       .Size             = MIDI_STREAM_EPSIZE,
 893:tmk_core/protocol/lufa/lufa.c ****       .Banks            = 1,
 894:tmk_core/protocol/lufa/lufa.c ****     },
 895:tmk_core/protocol/lufa/lufa.c ****     .DataOUTEndpoint          =
 896:tmk_core/protocol/lufa/lufa.c ****     {
 897:tmk_core/protocol/lufa/lufa.c ****       .Address          = MIDI_STREAM_OUT_EPADDR,
 898:tmk_core/protocol/lufa/lufa.c ****       .Size             = MIDI_STREAM_EPSIZE,
 899:tmk_core/protocol/lufa/lufa.c ****       .Banks            = 1,
 900:tmk_core/protocol/lufa/lufa.c ****     },
 901:tmk_core/protocol/lufa/lufa.c ****   },
 902:tmk_core/protocol/lufa/lufa.c **** };
 903:tmk_core/protocol/lufa/lufa.c **** 
 904:tmk_core/protocol/lufa/lufa.c **** void send_midi_packet(MIDI_EventPacket_t* event) {
 905:tmk_core/protocol/lufa/lufa.c ****   MIDI_Device_SendEventPacket(&USB_MIDI_Interface, event);
 906:tmk_core/protocol/lufa/lufa.c **** }
 907:tmk_core/protocol/lufa/lufa.c **** 
 908:tmk_core/protocol/lufa/lufa.c **** bool recv_midi_packet(MIDI_EventPacket_t* const event) {
 909:tmk_core/protocol/lufa/lufa.c ****   return MIDI_Device_ReceiveEventPacket(&USB_MIDI_Interface, event);
 910:tmk_core/protocol/lufa/lufa.c **** }
 911:tmk_core/protocol/lufa/lufa.c **** 
 912:tmk_core/protocol/lufa/lufa.c **** #endif
 913:tmk_core/protocol/lufa/lufa.c **** 
 914:tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 915:tmk_core/protocol/lufa/lufa.c ****  * VIRTUAL SERIAL
 916:tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 917:tmk_core/protocol/lufa/lufa.c **** 
 918:tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 919:tmk_core/protocol/lufa/lufa.c **** /** \brief Virtual Serial Init
 920:tmk_core/protocol/lufa/lufa.c ****  *
 921:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 922:tmk_core/protocol/lufa/lufa.c ****  */
 923:tmk_core/protocol/lufa/lufa.c **** void virtser_init(void)
 924:tmk_core/protocol/lufa/lufa.c **** {
 925:tmk_core/protocol/lufa/lufa.c ****   cdc_device.State.ControlLineStates.DeviceToHost = CDC_CONTROL_LINE_IN_DSR ;
 926:tmk_core/protocol/lufa/lufa.c ****   CDC_Device_SendControlLineStateChange(&cdc_device);
 927:tmk_core/protocol/lufa/lufa.c **** }
 928:tmk_core/protocol/lufa/lufa.c **** 
 929:tmk_core/protocol/lufa/lufa.c **** /** \brief Virtual Serial Receive
 930:tmk_core/protocol/lufa/lufa.c ****  *
 931:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 932:tmk_core/protocol/lufa/lufa.c ****  */
 933:tmk_core/protocol/lufa/lufa.c **** void virtser_recv(uint8_t c) __attribute__ ((weak));
 934:tmk_core/protocol/lufa/lufa.c **** void virtser_recv(uint8_t c)
 935:tmk_core/protocol/lufa/lufa.c **** {
 936:tmk_core/protocol/lufa/lufa.c ****   // Ignore by default
 937:tmk_core/protocol/lufa/lufa.c **** }
 938:tmk_core/protocol/lufa/lufa.c **** 
 939:tmk_core/protocol/lufa/lufa.c **** /** \brief Virtual Serial Task
 940:tmk_core/protocol/lufa/lufa.c ****  *
 941:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 942:tmk_core/protocol/lufa/lufa.c ****  */
 943:tmk_core/protocol/lufa/lufa.c **** void virtser_task(void)
 944:tmk_core/protocol/lufa/lufa.c **** {
 945:tmk_core/protocol/lufa/lufa.c ****   uint16_t count = CDC_Device_BytesReceived(&cdc_device);
 946:tmk_core/protocol/lufa/lufa.c ****   uint8_t ch;
 947:tmk_core/protocol/lufa/lufa.c ****   if (count)
 948:tmk_core/protocol/lufa/lufa.c ****   {
 949:tmk_core/protocol/lufa/lufa.c ****     ch = CDC_Device_ReceiveByte(&cdc_device);
 950:tmk_core/protocol/lufa/lufa.c ****     virtser_recv(ch);
 951:tmk_core/protocol/lufa/lufa.c ****   }
 952:tmk_core/protocol/lufa/lufa.c **** }
 953:tmk_core/protocol/lufa/lufa.c **** /** \brief Virtual Serial Send
 954:tmk_core/protocol/lufa/lufa.c ****  *
 955:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 956:tmk_core/protocol/lufa/lufa.c ****  */
 957:tmk_core/protocol/lufa/lufa.c **** void virtser_send(const uint8_t byte)
 958:tmk_core/protocol/lufa/lufa.c **** {
 959:tmk_core/protocol/lufa/lufa.c ****   uint8_t timeout = 255;
 960:tmk_core/protocol/lufa/lufa.c ****   uint8_t ep = Endpoint_GetCurrentEndpoint();
 961:tmk_core/protocol/lufa/lufa.c **** 
 962:tmk_core/protocol/lufa/lufa.c ****   if (cdc_device.State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR)
 963:tmk_core/protocol/lufa/lufa.c ****   {
 964:tmk_core/protocol/lufa/lufa.c ****     /* IN packet */
 965:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(cdc_device.Config.DataINEndpoint.Address);
 966:tmk_core/protocol/lufa/lufa.c **** 
 967:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 968:tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
 969:tmk_core/protocol/lufa/lufa.c ****         return;
 970:tmk_core/protocol/lufa/lufa.c ****     }
 971:tmk_core/protocol/lufa/lufa.c **** 
 972:tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 973:tmk_core/protocol/lufa/lufa.c **** 
 974:tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_8(byte);
 975:tmk_core/protocol/lufa/lufa.c ****     CDC_Device_Flush(&cdc_device);
 976:tmk_core/protocol/lufa/lufa.c **** 
 977:tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsINReady()) {
 978:tmk_core/protocol/lufa/lufa.c ****       Endpoint_ClearIN();
 979:tmk_core/protocol/lufa/lufa.c ****     }
 980:tmk_core/protocol/lufa/lufa.c **** 
 981:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 982:tmk_core/protocol/lufa/lufa.c ****   }
 983:tmk_core/protocol/lufa/lufa.c **** }
 984:tmk_core/protocol/lufa/lufa.c **** #endif
 985:tmk_core/protocol/lufa/lufa.c **** 
 986:tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 987:tmk_core/protocol/lufa/lufa.c ****  * main
 988:tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 989:tmk_core/protocol/lufa/lufa.c **** /** \brief Setup MCU
 990:tmk_core/protocol/lufa/lufa.c ****  *
 991:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 992:tmk_core/protocol/lufa/lufa.c ****  */
 993:tmk_core/protocol/lufa/lufa.c **** static void setup_mcu(void)
 994:tmk_core/protocol/lufa/lufa.c **** {
 995:tmk_core/protocol/lufa/lufa.c ****     /* Disable watchdog if enabled by bootloader/fuses */
 996:tmk_core/protocol/lufa/lufa.c ****     MCUSR &= ~(1 << WDRF);
 997:tmk_core/protocol/lufa/lufa.c ****     wdt_disable();
 998:tmk_core/protocol/lufa/lufa.c **** 
 999:tmk_core/protocol/lufa/lufa.c ****     /* Disable clock division */
1000:tmk_core/protocol/lufa/lufa.c ****     // clock_prescale_set(clock_div_1);
1001:tmk_core/protocol/lufa/lufa.c **** 
1002:tmk_core/protocol/lufa/lufa.c ****     CLKPR = (1 << CLKPCE);
1003:tmk_core/protocol/lufa/lufa.c ****     CLKPR = (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0);
1004:tmk_core/protocol/lufa/lufa.c **** }
1005:tmk_core/protocol/lufa/lufa.c **** 
1006:tmk_core/protocol/lufa/lufa.c **** /** \brief Setup USB
1007:tmk_core/protocol/lufa/lufa.c ****  *
1008:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
1009:tmk_core/protocol/lufa/lufa.c ****  */
1010:tmk_core/protocol/lufa/lufa.c **** static void setup_usb(void)
1011:tmk_core/protocol/lufa/lufa.c **** {
1012:tmk_core/protocol/lufa/lufa.c ****     // Leonardo needs. Without this USB device is not recognized.
1013:tmk_core/protocol/lufa/lufa.c ****     USB_Disable();
1014:tmk_core/protocol/lufa/lufa.c **** 
1015:tmk_core/protocol/lufa/lufa.c ****     USB_Init();
1016:tmk_core/protocol/lufa/lufa.c **** 
1017:tmk_core/protocol/lufa/lufa.c ****     // for Console_Task
1018:tmk_core/protocol/lufa/lufa.c ****     USB_Device_EnableSOFEvents();
1019:tmk_core/protocol/lufa/lufa.c ****     print_set_sendchar(sendchar);
1020:tmk_core/protocol/lufa/lufa.c **** }
1021:tmk_core/protocol/lufa/lufa.c **** 
1022:tmk_core/protocol/lufa/lufa.c **** /** \brief Main
1023:tmk_core/protocol/lufa/lufa.c ****  *
1024:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
1025:tmk_core/protocol/lufa/lufa.c ****  */
1026:tmk_core/protocol/lufa/lufa.c **** int main(void)  __attribute__ ((weak));
1027:tmk_core/protocol/lufa/lufa.c **** int main(void)
1028:tmk_core/protocol/lufa/lufa.c **** {
 1166               		.loc 1 1028 1 is_stmt 1 view -0
 1167               		.cfi_startproc
 1168               	/* prologue: function */
 1169               	/* frame size = 0 */
 1170               	/* stack size = 0 */
 1171               	.L__stack_usage = 0
1029:tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
1030:tmk_core/protocol/lufa/lufa.c ****     setup_midi();
1031:tmk_core/protocol/lufa/lufa.c **** #endif
1032:tmk_core/protocol/lufa/lufa.c **** 
1033:tmk_core/protocol/lufa/lufa.c ****     setup_mcu();
 1172               		.loc 1 1033 5 view .LVU332
 1173               	.LBB182:
 1174               	.LBI182:
 993:tmk_core/protocol/lufa/lufa.c **** {
 1175               		.loc 1 993 13 view .LVU333
 1176               	.LBB183:
 996:tmk_core/protocol/lufa/lufa.c ****     wdt_disable();
 1177               		.loc 1 996 5 view .LVU334
 996:tmk_core/protocol/lufa/lufa.c ****     wdt_disable();
 1178               		.loc 1 996 11 is_stmt 0 view .LVU335
 1179 0000 84B7      		in r24,0x34
 1180 0002 877F      		andi r24,lo8(-9)
 1181 0004 84BF      		out 0x34,r24
 997:tmk_core/protocol/lufa/lufa.c **** 
 1182               		.loc 1 997 5 is_stmt 1 view .LVU336
 1183               	.LBB184:
 1184               	.LBI184:
 1185               		.file 6 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h"
   1:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** /* Copyright (c) 2002, 2004 Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****    Copyright (c) 2005, 2006, 2007 Eric B. Weddington
   3:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****    All rights reserved.
   4:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 
   5:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 
   8:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 
  11:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****      the documentation and/or other materials provided with the
  14:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****      distribution.
  15:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 
  16:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****      contributors may be used to endorse or promote products derived
  18:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****      from this software without specific prior written permission.
  19:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 
  20:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 
  32:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** /* $Id: wdt.h 2503 2016-02-07 22:59:47Z joerg_wunsch $ */
  33:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 
  34:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** /*
  35:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****    avr/wdt.h - macros for AVR watchdog timer
  36:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****  */
  37:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 
  38:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** #ifndef _AVR_WDT_H_
  39:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** #define _AVR_WDT_H_
  40:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 
  41:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** #include <avr/io.h>
  42:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** #include <stdint.h>
  43:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 
  44:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** /** \file */
  45:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** /** \defgroup avr_watchdog <avr/wdt.h>: Watchdog timer handling
  46:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     \code #include <avr/wdt.h> \endcode
  47:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 
  48:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     This header file declares the interface to some inline macros
  49:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     handling the watchdog timer present in many AVR devices.  In order
  50:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     to prevent the watchdog timer configuration from being
  51:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     accidentally altered by a crashing application, a special timed
  52:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     sequence is required in order to change it.  The macros within
  53:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     this header file handle the required sequence automatically
  54:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     before changing any value.  Interrupts will be disabled during
  55:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     the manipulation.
  56:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 
  57:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     \note Depending on the fuse configuration of the particular
  58:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     device, further restrictions might apply, in particular it might
  59:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     be disallowed to turn off the watchdog timer.
  60:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 
  61:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     Note that for newer devices (ATmega88 and newer, effectively any
  62:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     AVR that has the option to also generate interrupts), the watchdog
  63:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     timer remains active even after a system reset (except a power-on
  64:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     condition), using the fastest prescaler value (approximately 15
  65:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     ms).  It is therefore required to turn off the watchdog early
  66:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     during program startup, the datasheet recommends a sequence like
  67:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     the following:
  68:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 
  69:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     \code
  70:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     #include <stdint.h>
  71:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     #include <avr/wdt.h>
  72:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 
  73:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     uint8_t mcusr_mirror __attribute__ ((section (".noinit")));
  74:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 
  75:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     void get_mcusr(void) \
  76:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****       __attribute__((naked)) \
  77:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****       __attribute__((section(".init3")));
  78:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     void get_mcusr(void)
  79:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     {
  80:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****       mcusr_mirror = MCUSR;
  81:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****       MCUSR = 0;
  82:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****       wdt_disable();
  83:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     }
  84:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     \endcode
  85:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 
  86:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     Saving the value of MCUSR in \c mcusr_mirror is only needed if the
  87:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     application later wants to examine the reset source, but in particular, 
  88:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     clearing the watchdog reset flag before disabling the
  89:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     watchdog is required, according to the datasheet.
  90:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** */
  91:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 
  92:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** /**
  93:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
  94:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****    Reset the watchdog timer.  When the watchdog timer is enabled,
  95:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****    a call to this instruction is required before the timer expires,
  96:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****    otherwise a watchdog-initiated device reset will occur. 
  97:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** */
  98:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 
  99:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** #define wdt_reset() __asm__ __volatile__ ("wdr")
 100:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 
 101:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** #ifndef __DOXYGEN__
 102:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 
 103:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** #if defined(WDP3)
 104:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       _BV(WDP3)
 105:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** #else
 106:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       0x00
 107:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** #endif
 108:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 
 109:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** #if defined(WDTCSR)
 110:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCSR
 111:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** #elif defined(WDTCR)
 112:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCR
 113:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** #else
 114:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDT
 115:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** #endif
 116:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 
 117:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** #if defined(WDTOE)
 118:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDTOE
 119:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** #else
 120:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDCE
 121:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** #endif
 122:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 
 123:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** #endif	/* !__DOXYGEN__ */
 124:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 
 125:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 
 126:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** /**
 127:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
 128:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****    Enable the watchdog timer, configuring it for expiry after
 129:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****    \c timeout (which is a combination of the \c WDP0 through
 130:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****    \c WDP2 bits to write into the \c WDTCR register; For those devices 
 131:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****    that have a \c WDTCSR register, it uses the combination of the \c WDP0 
 132:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****    through \c WDP3 bits).
 133:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 
 134:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****    See also the symbolic constants \c WDTO_15MS et al.
 135:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** */
 136:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 
 137:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 
 138:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** #if defined(__AVR_XMEGA__)
 139:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 
 140:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** /*
 141:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****    wdt_enable(timeout) for xmega devices
 142:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** ** write signature (CCP_IOREG_gc) that enables change of protected I/O
 143:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****    registers to the CCP register
 144:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** ** At the same time,
 145:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****    1) set WDT change enable (WDT_CEN_bm)
 146:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****    2) enable WDT (WDT_ENABLE_bm)
 147:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****    3) set timeout (timeout)
 148:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** ** Synchronization starts when ENABLE bit of WDT is set. So, wait till it
 149:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****    finishes (SYNCBUSY of STATUS register is automatically cleared after the
 150:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****    sync is finished).
 151:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** */
 152:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** #define wdt_enable(timeout) \
 153:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** do { \
 154:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** uint8_t temp; \
 155:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** __asm__ __volatile__ (         \
 156:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"              "\n\t" \
 157:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"            "\n\t" \
 158:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]"     "\n\t" \
 159:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[wdt_enable_timeout]" "\n\t" \
 160:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     "1:lds %[tmp], %[wdt_status_reg]"       "\n\t" \
 161:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     "sbrc %[tmp], %[wdt_syncbusy_bit]"      "\n\t" \
 162:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     "rjmp 1b"                               "\n\t" \
 163:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"             "\n\t" \
 164:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     : [tmp]                "=r" (temp) \
 165:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     : [rampd]              "I" (_SFR_IO_ADDR(RAMPD)),      \
 166:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****       [ccp_reg]            "I" (_SFR_IO_ADDR(CCP)),        \
 167:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****       [ioreg_cen_mask]     "r" ((uint8_t)CCP_IOREG_gc),     \
 168:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****       [wdt_reg]            "n" (_SFR_MEM_ADDR(WDT_CTRL)),   \
 169:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****       [wdt_enable_timeout] "r" ((uint8_t)(WDT_CEN_bm | WDT_ENABLE_bm | timeout)), \
 170:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****       [wdt_status_reg]     "n" (_SFR_MEM_ADDR(WDT_STATUS)), \
 171:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****       [wdt_syncbusy_bit]   "I" (WDT_SYNCBUSY_bm)            \
 172:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     : "r0" \
 173:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** ); \
 174:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** } while(0)
 175:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 
 176:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** #define wdt_disable() \
 177:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** __asm__ __volatile__ (  \
 178:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"          "\n\t" \
 179:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"        "\n\t" \
 180:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 181:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[disable_mask]"   "\n\t" \
 182:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"         "\n\t" \
 183:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     : \
 184:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     : [rampd]             "I" (_SFR_IO_ADDR(RAMPD)),    \
 185:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****       [ccp_reg]           "I" (_SFR_IO_ADDR(CCP)),      \
 186:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****       [ioreg_cen_mask]    "r" ((uint8_t)CCP_IOREG_gc),   \
 187:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****       [wdt_reg]           "n" (_SFR_MEM_ADDR(WDT_CTRL)), \
 188:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****       [disable_mask]      "r" ((uint8_t)((~WDT_ENABLE_bm) | WDT_CEN_bm)) \
 189:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     : "r0" \
 190:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** );
 191:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 
 192:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** #elif defined(__AVR_TINY__)
 193:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 
 194:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** #define wdt_enable(value) \
 195:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 196:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 197:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 198:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 199:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 200:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     "out %[WDTREG],%[WDVALUE]" "\n\t"  \
 201:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t"  \
 202:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     : /* no outputs */  \
 203:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),  \
 204:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 205:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 206:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****       [WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00) \
 207:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****       | _BV(WDE) | (value & 0x07) )) \
 208:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     : "r16" \
 209:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** )
 210:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 
 211:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** #define wdt_disable() \
 212:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** do { \
 213:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** uint8_t temp_wd; \
 214:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 215:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 216:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 217:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 218:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 219:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     "in  %[TEMP_WD],%[WDTREG]" "\n\t" \
 220:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     "cbr %[TEMP_WD],%[WDVALUE]" "\n\t" \
 221:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     "out %[WDTREG],%[TEMP_WD]" "\n\t" \
 222:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t" \
 223:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     : /*no output */ \
 224:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)), \
 225:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 226:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 227:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****       [TEMP_WD] "d" (temp_wd), \
 228:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****       [WDVALUE] "n" (1 << WDE) \
 229:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****     : "r16" \
 230:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** ); \
 231:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** }while(0)
 232:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 
 233:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** #elif defined(CCP)
 234:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 
 235:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** static __inline__
 236:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 237:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 238:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** {
 239:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 240:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 	{
 241:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 242:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 243:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 244:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 245:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 246:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 247:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 248:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			: /* no outputs */
 249:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 250:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 251:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 252:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 253:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 254:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			: "r0"
 255:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			);
 256:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 	}
 257:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P (_WD_CONTROL_REG))
 258:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 	{
 259:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 260:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 261:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 262:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 263:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 264:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 265:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 266:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			: /* no outputs */
 267:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 268:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 269:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 270:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 271:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 272:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			: "r0"
 273:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			);
 274:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 	}
 275:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 276:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 	{
 277:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 278:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 279:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 280:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 281:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 282:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 283:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 284:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			: /* no outputs */
 285:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 286:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 287:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 288:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 289:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 290:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			: "r0"
 291:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			);
 292:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 	}
 293:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 	else
 294:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****  	{
 295:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 296:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 297:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 298:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 299:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 300:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 301:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 302:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			: /* no outputs */
 303:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 304:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 305:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 306:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 307:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 308:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			: "r0"
 309:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 			);
 310:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 	}
 311:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** }
 312:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 
 313:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** static __inline__
 314:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 315:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** void wdt_disable (void)
 316:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** {
 317:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 318:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 	{
 319:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 320:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 321:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 322:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 323:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 324:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 325:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 326:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 327:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 328:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 329:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				: /*no output */
 330:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 331:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 332:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 333:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 334:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 335:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				: "r0"
 336:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				);
 337:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 	}
 338:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P(_WD_CONTROL_REG))
 339:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 	{
 340:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 341:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 342:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 343:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 344:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 345:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 346:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 347:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 348:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 349:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 350:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				: /*no output */
 351:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 352:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 353:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 354:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 355:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 356:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				: "r0"
 357:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				);
 358:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 	}
 359:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 360:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 	{
 361:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 362:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 363:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 364:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 365:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 366:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 367:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 368:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 369:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 370:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 371:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				: /*no output */
 372:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 373:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 374:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 375:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 376:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 377:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				: "r0"
 378:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				);
 379:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 	}
 380:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 	else
 381:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 	{
 382:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 383:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 384:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 385:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 386:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 387:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 388:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 389:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 390:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 391:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 392:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				: /*no output */
 393:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 394:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 395:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 396:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 397:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 398:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				: "r0"
 399:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				);
 400:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 	}
 401:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** }
 402:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 
 403:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** #else
 404:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 
 405:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** static __inline__
 406:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 407:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 408:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** {
 409:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 410:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 	{
 411:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 412:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 413:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 414:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 415:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"out %0, %1" "\n\t"
 416:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 417:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"out %0, %2" "\n \t"
 418:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				: /* no outputs */
 419:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 420:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 421:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 422:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 423:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				: "r0"
 424:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 		);
 425:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 	}
 426:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 	else
 427:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 	{
 428:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 429:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 430:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 431:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 432:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"sts %0, %1" "\n\t"
 433:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 434:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"sts %0, %2" "\n \t"
 435:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				: /* no outputs */
 436:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 437:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 438:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 439:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 440:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				: "r0"
 441:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 		);
 442:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 	}
 443:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** }
 444:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 
 445:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** static __inline__
 446:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 447:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** void wdt_disable (void)
 1186               		.loc 6 447 6 view .LVU337
 1187               	.LBE184:
 1188               	.LBE183:
 1189               	.LBE182:
 448:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** {
 449:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 1190               		.loc 6 449 2 view .LVU338
 1191               	.LBB188:
 1192               	.LBB187:
 1193               	.LBB186:
 1194               	.LBB185:
 450:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 	{
 451:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 452:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 453:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__"    "\n\t"
 454:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"cli"                        "\n\t"
 455:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"wdr"                        "\n\t"
 456:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"in  %[TEMPREG],%[WDTREG]"   "\n\t"
 457:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"ori %[TEMPREG],%[WDCE_WDE]" "\n\t"
 458:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMPREG]"   "\n\t"
 459:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"out %[WDTREG],__zero_reg__" "\n\t"
 460:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__"   "\n\t"
 461:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				: [TEMPREG] "=d" (temp_reg)
 462:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				: [WDTREG]  "I"  (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 463:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
 464:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 				: "r0"
 465:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 		);
 466:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 	}
 467:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 	else
 468:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 	{
 469:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 1195               		.loc 6 469 9 view .LVU339
 470:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 1196               		.loc 6 470 3 view .LVU340
 1197               	/* #APP */
 1198               	 ;  470 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/wdt.h" 1
 1199 0006 0FB6      		in __tmp_reg__,__SREG__
 1200 0008 F894      		cli
 1201 000a A895      		wdr
 1202 000c 8091 6000 		lds r24,96
 1203 0010 8861      		ori r24,24
 1204 0012 8093 6000 		sts 96,r24
 1205 0016 1092 6000 		sts 96,__zero_reg__
 1206 001a 0FBE      		out __SREG__,__tmp_reg__
 1207               		
 1208               	 ;  0 "" 2
 1209               	/* #NOAPP */
 1210               	.LBE185:
 1211               	.LBE186:
1002:tmk_core/protocol/lufa/lufa.c ****     CLKPR = (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0);
 1212               		.loc 1 1002 5 view .LVU341
1002:tmk_core/protocol/lufa/lufa.c ****     CLKPR = (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0);
 1213               		.loc 1 1002 11 is_stmt 0 view .LVU342
 1214 001c 80E8      		ldi r24,lo8(-128)
 1215 001e 8093 6100 		sts 97,r24
1003:tmk_core/protocol/lufa/lufa.c **** }
 1216               		.loc 1 1003 5 is_stmt 1 view .LVU343
1003:tmk_core/protocol/lufa/lufa.c **** }
 1217               		.loc 1 1003 11 is_stmt 0 view .LVU344
 1218 0022 1092 6100 		sts 97,__zero_reg__
 1219               	.LBE187:
 1220               	.LBE188:
1034:tmk_core/protocol/lufa/lufa.c ****     keyboard_setup();
 1221               		.loc 1 1034 5 is_stmt 1 view .LVU345
 1222 0026 0E94 0000 		call keyboard_setup
 1223               	.LVL65:
1035:tmk_core/protocol/lufa/lufa.c ****     setup_usb();
 1224               		.loc 1 1035 5 view .LVU346
 1225               	.LBB189:
 1226               	.LBI189:
1010:tmk_core/protocol/lufa/lufa.c **** {
 1227               		.loc 1 1010 13 view .LVU347
 1228               	.LBB190:
1013:tmk_core/protocol/lufa/lufa.c **** 
 1229               		.loc 1 1013 5 view .LVU348
 1230 002a 0E94 0000 		call USB_Disable
 1231               	.LVL66:
1015:tmk_core/protocol/lufa/lufa.c **** 
 1232               		.loc 1 1015 5 view .LVU349
 1233 002e 0E94 0000 		call USB_Init
 1234               	.LVL67:
1018:tmk_core/protocol/lufa/lufa.c ****     print_set_sendchar(sendchar);
 1235               		.loc 1 1018 5 view .LVU350
 1236               	.LBB191:
 1237               	.LBI191:
 176:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				{
 1238               		.loc 4 176 24 view .LVU351
 1239               	.LBE191:
 1240               	.LBE190:
 1241               	.LBE189:
 1242               		.loc 4 178 6 view .LVU352
 1243               	.LBB196:
 1244               	.LBB195:
 1245               	.LBB194:
 1246               	.LBB192:
 1247               	.LBI192:
  88:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			{
 1248               		.loc 5 88 23 view .LVU353
 1249               	.LBB193:
  90:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				{
 1250               		.loc 5 90 5 view .LVU354
 113:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 1251               		.loc 5 113 7 view .LVU355
 113:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 1252               		.loc 5 113 14 is_stmt 0 view .LVU356
 1253 0032 8091 E200 		lds r24,226
 1254 0036 8460      		ori r24,lo8(4)
 1255 0038 8093 E200 		sts 226,r24
 1256               		.loc 5 114 7 is_stmt 1 view .LVU357
 1257               	.LVL68:
 1258               		.loc 5 114 7 is_stmt 0 view .LVU358
 1259               	.LBE193:
 1260               	.LBE192:
 1261               	.LBE194:
1019:tmk_core/protocol/lufa/lufa.c **** }
 1262               		.loc 1 1019 33 is_stmt 1 view .LVU359
 1263               	.LBE195:
 1264               	.LBE196:
1036:tmk_core/protocol/lufa/lufa.c ****     sei();
 1265               		.loc 1 1036 5 view .LVU360
 1266               	/* #APP */
 1267               	 ;  1036 "tmk_core/protocol/lufa/lufa.c" 1
 1268 003c 7894      		sei
 1269               	 ;  0 "" 2
1037:tmk_core/protocol/lufa/lufa.c **** 
1038:tmk_core/protocol/lufa/lufa.c **** #if defined(MODULE_ADAFRUIT_EZKEY) || defined(MODULE_RN42)
1039:tmk_core/protocol/lufa/lufa.c ****     serial_init();
1040:tmk_core/protocol/lufa/lufa.c **** #endif
1041:tmk_core/protocol/lufa/lufa.c **** 
1042:tmk_core/protocol/lufa/lufa.c ****     /* wait for USB startup & debug output */
1043:tmk_core/protocol/lufa/lufa.c **** 
1044:tmk_core/protocol/lufa/lufa.c **** #ifdef WAIT_FOR_USB
1045:tmk_core/protocol/lufa/lufa.c ****     while (USB_DeviceState != DEVICE_STATE_Configured) {
1046:tmk_core/protocol/lufa/lufa.c ****     #if defined(INTERRUPT_CONTROL_ENDPOINT)
1047:tmk_core/protocol/lufa/lufa.c ****             ;
1048:tmk_core/protocol/lufa/lufa.c ****     #else
1049:tmk_core/protocol/lufa/lufa.c ****             USB_USBTask();
1050:tmk_core/protocol/lufa/lufa.c ****     #endif
1051:tmk_core/protocol/lufa/lufa.c ****     }
1052:tmk_core/protocol/lufa/lufa.c ****     print("USB configured.\n");
1053:tmk_core/protocol/lufa/lufa.c **** #else
1054:tmk_core/protocol/lufa/lufa.c ****     USB_USBTask();
 1270               		.loc 1 1054 5 view .LVU361
 1271               	/* #NOAPP */
 1272 003e 0E94 0000 		call USB_USBTask
 1273               	.LVL69:
1055:tmk_core/protocol/lufa/lufa.c **** #endif
1056:tmk_core/protocol/lufa/lufa.c ****     /* init modules */
1057:tmk_core/protocol/lufa/lufa.c ****     keyboard_init();
 1274               		.loc 1 1057 5 view .LVU362
 1275 0042 0E94 0000 		call keyboard_init
 1276               	.LVL70:
1058:tmk_core/protocol/lufa/lufa.c ****     host_set_driver(&lufa_driver);
 1277               		.loc 1 1058 5 view .LVU363
 1278 0046 80E0      		ldi r24,lo8(lufa_driver)
 1279 0048 90E0      		ldi r25,hi8(lufa_driver)
 1280 004a 0E94 0000 		call host_set_driver
 1281               	.LVL71:
 1282               	.L93:
1059:tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
1060:tmk_core/protocol/lufa/lufa.c ****     sleep_led_init();
1061:tmk_core/protocol/lufa/lufa.c **** #endif
1062:tmk_core/protocol/lufa/lufa.c **** 
1063:tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
1064:tmk_core/protocol/lufa/lufa.c ****     virtser_init();
1065:tmk_core/protocol/lufa/lufa.c **** #endif
1066:tmk_core/protocol/lufa/lufa.c **** 
1067:tmk_core/protocol/lufa/lufa.c ****     print("Keyboard start.\n");
1068:tmk_core/protocol/lufa/lufa.c ****     while (1) {
1069:tmk_core/protocol/lufa/lufa.c ****         #if !defined(NO_USB_STARTUP_CHECK)
1070:tmk_core/protocol/lufa/lufa.c ****         while (USB_DeviceState == DEVICE_STATE_Suspended) {
 1283               		.loc 1 1070 32 is_stmt 0 view .LVU364
 1284 004e 8091 0000 		lds r24,USB_DeviceState
 1285               		.loc 1 1070 15 view .LVU365
 1286 0052 8530      		cpi r24,lo8(5)
 1287 0054 01F0      		breq .L97
1071:tmk_core/protocol/lufa/lufa.c ****             print("[s]");
1072:tmk_core/protocol/lufa/lufa.c ****             suspend_power_down();
1073:tmk_core/protocol/lufa/lufa.c ****             if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
1074:tmk_core/protocol/lufa/lufa.c ****                     USB_Device_SendRemoteWakeup();
1075:tmk_core/protocol/lufa/lufa.c ****             }
1076:tmk_core/protocol/lufa/lufa.c ****         }
1077:tmk_core/protocol/lufa/lufa.c ****         #endif
1078:tmk_core/protocol/lufa/lufa.c **** 
1079:tmk_core/protocol/lufa/lufa.c ****         keyboard_task();
 1288               		.loc 1 1079 9 is_stmt 1 view .LVU366
 1289 0056 0E94 0000 		call keyboard_task
 1290               	.LVL72:
1070:tmk_core/protocol/lufa/lufa.c ****             print("[s]");
 1291               		.loc 1 1070 15 is_stmt 0 view .LVU367
 1292 005a 00C0      		rjmp .L93
 1293               	.L97:
1071:tmk_core/protocol/lufa/lufa.c ****             print("[s]");
 1294               		.loc 1 1071 25 is_stmt 1 view .LVU368
1072:tmk_core/protocol/lufa/lufa.c ****             if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
 1295               		.loc 1 1072 13 view .LVU369
 1296 005c 0E94 0000 		call suspend_power_down
 1297               	.LVL73:
1073:tmk_core/protocol/lufa/lufa.c ****                     USB_Device_SendRemoteWakeup();
 1298               		.loc 1 1073 13 view .LVU370
1073:tmk_core/protocol/lufa/lufa.c ****                     USB_Device_SendRemoteWakeup();
 1299               		.loc 1 1073 16 is_stmt 0 view .LVU371
 1300 0060 8091 0000 		lds r24,USB_Device_RemoteWakeupEnabled
 1301 0064 8823      		tst r24
 1302 0066 01F0      		breq .L93
1073:tmk_core/protocol/lufa/lufa.c ****                     USB_Device_SendRemoteWakeup();
 1303               		.loc 1 1073 51 discriminator 1 view .LVU372
 1304 0068 0E94 0000 		call suspend_wakeup_condition
 1305               	.LVL74:
1073:tmk_core/protocol/lufa/lufa.c ****                     USB_Device_SendRemoteWakeup();
 1306               		.loc 1 1073 48 discriminator 1 view .LVU373
 1307 006c 8823      		tst r24
 1308 006e 01F0      		breq .L93
1074:tmk_core/protocol/lufa/lufa.c ****             }
 1309               		.loc 1 1074 21 is_stmt 1 view .LVU374
 1310 0070 0E94 0000 		call USB_Device_SendRemoteWakeup
 1311               	.LVL75:
 1312 0074 00C0      		rjmp .L93
 1313               		.cfi_endproc
 1314               	.LFE136:
 1316               		.section	.text.CALLBACK_USB_GetDescriptor,"ax",@progbits
 1317               	.global	CALLBACK_USB_GetDescriptor
 1319               	CALLBACK_USB_GetDescriptor:
 1320               	.LVL76:
 1321               	.LFB137:
1080:tmk_core/protocol/lufa/lufa.c **** 
1081:tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
1082:tmk_core/protocol/lufa/lufa.c ****         MIDI_Device_USBTask(&USB_MIDI_Interface);
1083:tmk_core/protocol/lufa/lufa.c **** #endif
1084:tmk_core/protocol/lufa/lufa.c **** 
1085:tmk_core/protocol/lufa/lufa.c **** #if defined(RGBLIGHT_ANIMATIONS) & defined(RGBLIGHT_ENABLE)
1086:tmk_core/protocol/lufa/lufa.c ****         rgblight_task();
1087:tmk_core/protocol/lufa/lufa.c **** #endif
1088:tmk_core/protocol/lufa/lufa.c **** 
1089:tmk_core/protocol/lufa/lufa.c **** #ifdef MODULE_ADAFRUIT_BLE
1090:tmk_core/protocol/lufa/lufa.c ****         adafruit_ble_task();
1091:tmk_core/protocol/lufa/lufa.c **** #endif
1092:tmk_core/protocol/lufa/lufa.c **** 
1093:tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
1094:tmk_core/protocol/lufa/lufa.c ****         virtser_task();
1095:tmk_core/protocol/lufa/lufa.c ****         CDC_Device_USBTask(&cdc_device);
1096:tmk_core/protocol/lufa/lufa.c **** #endif
1097:tmk_core/protocol/lufa/lufa.c **** 
1098:tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
1099:tmk_core/protocol/lufa/lufa.c ****         raw_hid_task();
1100:tmk_core/protocol/lufa/lufa.c **** #endif
1101:tmk_core/protocol/lufa/lufa.c **** 
1102:tmk_core/protocol/lufa/lufa.c **** #if !defined(INTERRUPT_CONTROL_ENDPOINT)
1103:tmk_core/protocol/lufa/lufa.c ****         USB_USBTask();
1104:tmk_core/protocol/lufa/lufa.c **** #endif
1105:tmk_core/protocol/lufa/lufa.c **** 
1106:tmk_core/protocol/lufa/lufa.c ****     }
1107:tmk_core/protocol/lufa/lufa.c **** }
1108:tmk_core/protocol/lufa/lufa.c **** 
1109:tmk_core/protocol/lufa/lufa.c **** uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
1110:tmk_core/protocol/lufa/lufa.c ****                                     const uint16_t wIndex,
1111:tmk_core/protocol/lufa/lufa.c ****                                     const void** const DescriptorAddress)
1112:tmk_core/protocol/lufa/lufa.c **** {
 1322               		.loc 1 1112 1 view -0
 1323               		.cfi_startproc
 1324               	/* prologue: function */
 1325               	/* frame size = 0 */
 1326               	/* stack size = 0 */
 1327               	.L__stack_usage = 0
1113:tmk_core/protocol/lufa/lufa.c ****   return get_usb_descriptor(wValue, wIndex, DescriptorAddress);
 1328               		.loc 1 1113 3 view .LVU376
 1329               		.loc 1 1113 10 is_stmt 0 view .LVU377
 1330 0000 0C94 0000 		jmp get_usb_descriptor
 1331               	.LVL77:
 1332               		.loc 1 1113 10 view .LVU378
 1333               		.cfi_endproc
 1334               	.LFE137:
 1336               	.global	lufa_driver
 1337               		.section	.data.lufa_driver,"aw",@progbits
 1340               	lufa_driver:
 1341 0000 0000      		.word	gs(keyboard_leds)
 1342 0002 0000      		.word	gs(send_keyboard)
 1343 0004 0000      		.word	gs(send_mouse)
 1344 0006 0000      		.word	gs(send_system)
 1345 0008 0000      		.word	gs(send_consumer)
 1346               		.section	.bss.keyboard_report_sent,"aw",@nobits
 1349               	keyboard_report_sent:
 1350 0000 0000 0000 		.zero	32
 1350      0000 0000 
 1350      0000 0000 
 1350      0000 0000 
 1350      0000 0000 
 1351               		.section	.bss.keyboard_led_stats,"aw",@nobits
 1354               	keyboard_led_stats:
 1355 0000 00        		.zero	1
 1356               	.global	keyboard_protocol
 1357               		.section	.data.keyboard_protocol,"aw",@progbits
 1360               	keyboard_protocol:
 1361 0000 01        		.byte	1
 1362               	.global	keyboard_idle
 1363               		.section	.bss.keyboard_idle,"aw",@nobits
 1366               	keyboard_idle:
 1367 0000 00        		.zero	1
 1368               		.text
 1369               	.Letext0:
 1370               		.file 7 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/stdint.h"
 1371               		.file 8 "/usr/local/Cellar/avr-gcc/8.1.0/lib/avr-gcc/8/gcc/avr/8.1.0/include/stddef.h"
 1372               		.file 9 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../Device.h"
 1373               		.file 10 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 1374               		.file 11 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 1375               		.file 12 "lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 1376               		.file 13 "lib/lufa/LUFA/Drivers/USB/Core/HostStandardReq.h"
 1377               		.file 14 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/stdio.h"
 1378               		.file 15 "lib/lufa/LUFA/Drivers/USB/Class/Device/../Common/HIDClassCommon.h"
 1379               		.file 16 "tmk_core/protocol/usb_descriptor.h"
 1380               		.file 17 "tmk_core/common/report.h"
 1381               		.file 18 "tmk_core/common/host_driver.h"
 1382               		.file 19 "tmk_core/common/host.h"
 1383               		.file 20 "tmk_core/common/keyboard.h"
 1384               		.file 21 "tmk_core/common/action.h"
 1385               		.file 22 "tmk_core/common/debug.h"
 1386               		.file 23 "tmk_core/protocol/lufa/lufa.h"
 1387               		.file 24 "quantum/keycode_config.h"
 1388               		.file 25 "quantum/keymap.h"
 1389               		.file 26 "tmk_core/common/action_layer.h"
 1390               		.file 27 "tmk_core/common/timer.h"
 1391               		.file 28 "tmk_core/common/action_util.h"
 1392               		.file 29 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/stdlib.h"
 1393               		.file 30 "quantum/quantum.h"
 1394               		.file 31 "tmk_core/protocol/lufa/outputselect.h"
 1395               		.file 32 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h"
 1396               		.file 33 "tmk_core/common/suspend.h"
 1397               		.file 34 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/EndpointStream_AVR8.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 lufa.c
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccXk1g48.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccXk1g48.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccXk1g48.s:4      *ABS*:000000000000003f __SREG__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccXk1g48.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccXk1g48.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccXk1g48.s:12     .text.keyboard_leds:0000000000000000 keyboard_leds
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccXk1g48.s:1354   .bss.keyboard_led_stats:0000000000000000 keyboard_led_stats
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccXk1g48.s:31     .text.send_mouse:0000000000000000 send_mouse
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccXk1g48.s:48     .text.send_consumer:0000000000000000 send_consumer
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccXk1g48.s:219    .text.send_system:0000000000000000 send_system
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccXk1g48.s:374    .text.send_keyboard:0000000000000000 send_keyboard
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccXk1g48.s:1360   .data.keyboard_protocol:0000000000000000 keyboard_protocol
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccXk1g48.s:1349   .bss.keyboard_report_sent:0000000000000000 keyboard_report_sent
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccXk1g48.s:561    .text.EVENT_USB_Device_Connect:0000000000000000 EVENT_USB_Device_Connect
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccXk1g48.s:617    .text.EVENT_USB_Device_Disconnect:0000000000000000 EVENT_USB_Device_Disconnect
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccXk1g48.s:638    .text.EVENT_USB_Device_Reset:0000000000000000 EVENT_USB_Device_Reset
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccXk1g48.s:653    .text.EVENT_USB_Device_Suspend:0000000000000000 EVENT_USB_Device_Suspend
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccXk1g48.s:671    .text.EVENT_USB_Device_WakeUp:0000000000000000 EVENT_USB_Device_WakeUp
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccXk1g48.s:689    .text.EVENT_USB_Device_ConfigurationChanged:0000000000000000 EVENT_USB_Device_ConfigurationChanged
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccXk1g48.s:756    .text.EVENT_USB_Device_ControlRequest:0000000000000000 EVENT_USB_Device_ControlRequest
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccXk1g48.s:1366   .bss.keyboard_idle:0000000000000000 keyboard_idle
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccXk1g48.s:1142   .text.sendchar:0000000000000000 sendchar
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccXk1g48.s:1164   .text.startup.main:0000000000000000 main
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccXk1g48.s:1340   .data.lufa_driver:0000000000000000 lufa_driver
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccXk1g48.s:1319   .text.CALLBACK_USB_GetDescriptor:0000000000000000 CALLBACK_USB_GetDescriptor

UNDEFINED SYMBOLS
where_to_send
Endpoint_Write_Stream_LE
USB_DeviceState
keymap_config
USB_IsInitialized
USB_Disable
USB_Init
suspend_wakeup_init
Endpoint_ConfigureEndpoint_Prv
USB_ControlRequest
Endpoint_ClearStatusStage
Endpoint_Write_Control_Stream_LE
clear_keyboard
keyboard_setup
USB_USBTask
keyboard_init
host_set_driver
keyboard_task
suspend_power_down
USB_Device_RemoteWakeupEnabled
suspend_wakeup_condition
USB_Device_SendRemoteWakeup
get_usb_descriptor
__do_copy_data
__do_clear_bss
