   1               		.file	"quantum.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.do_code16,"ax",@progbits
  12               	do_code16:
  13               	.LVL0:
  14               	.LFB111:
  15               		.file 1 "quantum/quantum.c"
   1:quantum/quantum.c **** /* Copyright 2016-2017 Jack Humbert
   2:quantum/quantum.c ****  *
   3:quantum/quantum.c ****  * This program is free software: you can redistribute it and/or modify
   4:quantum/quantum.c ****  * it under the terms of the GNU General Public License as published by
   5:quantum/quantum.c ****  * the Free Software Foundation, either version 2 of the License, or
   6:quantum/quantum.c ****  * (at your option) any later version.
   7:quantum/quantum.c ****  *
   8:quantum/quantum.c ****  * This program is distributed in the hope that it will be useful,
   9:quantum/quantum.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:quantum/quantum.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:quantum/quantum.c ****  * GNU General Public License for more details.
  12:quantum/quantum.c ****  *
  13:quantum/quantum.c ****  * You should have received a copy of the GNU General Public License
  14:quantum/quantum.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  15:quantum/quantum.c ****  */
  16:quantum/quantum.c **** 
  17:quantum/quantum.c **** #include "quantum.h"
  18:quantum/quantum.c **** 
  19:quantum/quantum.c **** #if !defined(RGBLIGHT_ENABLE) && !defined(RGB_MATRIX_ENABLE)
  20:quantum/quantum.c **** 	#include "rgb.h"
  21:quantum/quantum.c **** #endif
  22:quantum/quantum.c **** 
  23:quantum/quantum.c **** #ifdef PROTOCOL_LUFA
  24:quantum/quantum.c **** #include "outputselect.h"
  25:quantum/quantum.c **** #endif
  26:quantum/quantum.c **** 
  27:quantum/quantum.c **** #ifndef BREATHING_PERIOD
  28:quantum/quantum.c **** #define BREATHING_PERIOD 6
  29:quantum/quantum.c **** #endif
  30:quantum/quantum.c **** 
  31:quantum/quantum.c **** #include "backlight.h"
  32:quantum/quantum.c **** extern backlight_config_t backlight_config;
  33:quantum/quantum.c **** 
  34:quantum/quantum.c **** #ifdef FAUXCLICKY_ENABLE
  35:quantum/quantum.c **** #include "fauxclicky.h"
  36:quantum/quantum.c **** #endif
  37:quantum/quantum.c **** 
  38:quantum/quantum.c **** #ifdef API_ENABLE
  39:quantum/quantum.c **** #include "api.h"
  40:quantum/quantum.c **** #endif
  41:quantum/quantum.c **** 
  42:quantum/quantum.c **** #ifdef MIDI_ENABLE
  43:quantum/quantum.c **** #include "process_midi.h"
  44:quantum/quantum.c **** #endif
  45:quantum/quantum.c **** 
  46:quantum/quantum.c **** #ifdef VELOCIKEY_ENABLE
  47:quantum/quantum.c **** #include "velocikey.h"
  48:quantum/quantum.c **** #endif
  49:quantum/quantum.c **** 
  50:quantum/quantum.c **** #ifdef HAPTIC_ENABLE
  51:quantum/quantum.c ****     #include "haptic.h"
  52:quantum/quantum.c **** #endif
  53:quantum/quantum.c **** 
  54:quantum/quantum.c **** #ifdef ENCODER_ENABLE
  55:quantum/quantum.c **** #include "encoder.h"
  56:quantum/quantum.c **** #endif
  57:quantum/quantum.c **** 
  58:quantum/quantum.c **** #ifdef AUDIO_ENABLE
  59:quantum/quantum.c ****   #ifndef GOODBYE_SONG
  60:quantum/quantum.c ****     #define GOODBYE_SONG SONG(GOODBYE_SOUND)
  61:quantum/quantum.c ****   #endif
  62:quantum/quantum.c ****   #ifndef AG_NORM_SONG
  63:quantum/quantum.c ****     #define AG_NORM_SONG SONG(AG_NORM_SOUND)
  64:quantum/quantum.c ****   #endif
  65:quantum/quantum.c ****   #ifndef AG_SWAP_SONG
  66:quantum/quantum.c ****     #define AG_SWAP_SONG SONG(AG_SWAP_SOUND)
  67:quantum/quantum.c ****   #endif
  68:quantum/quantum.c ****   float goodbye_song[][2] = GOODBYE_SONG;
  69:quantum/quantum.c ****   float ag_norm_song[][2] = AG_NORM_SONG;
  70:quantum/quantum.c ****   float ag_swap_song[][2] = AG_SWAP_SONG;
  71:quantum/quantum.c ****   #ifdef DEFAULT_LAYER_SONGS
  72:quantum/quantum.c ****     float default_layer_songs[][16][2] = DEFAULT_LAYER_SONGS;
  73:quantum/quantum.c ****   #endif
  74:quantum/quantum.c **** #endif
  75:quantum/quantum.c **** 
  76:quantum/quantum.c **** static void do_code16 (uint16_t code, void (*f) (uint8_t)) {
  16               		.loc 1 76 60 view -0
  17               		.cfi_startproc
  18               		.loc 1 76 60 is_stmt 0 view .LVU1
  19 0000 0F93      		push r16
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 16, -2
  23 0002 1F93      		push r17
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 17, -3
  27 0004 CF93      		push r28
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 28, -4
  31 0006 DF93      		push r29
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 29, -5
  35               	/* prologue: function */
  36               	/* frame size = 0 */
  37               	/* stack size = 4 */
  38               	.L__stack_usage = 4
  39 0008 8C01      		movw r16,r24
  40 000a EB01      		movw r28,r22
  77:quantum/quantum.c ****   switch (code) {
  41               		.loc 1 77 3 is_stmt 1 view .LVU2
  42 000c 9A95      		dec r25
  43               	.LVL1:
  44               		.loc 1 77 3 is_stmt 0 view .LVU3
  45 000e 8115      		cp r24,__zero_reg__
  46 0010 9F41      		sbci r25,31
  47 0012 00F4      		brsh .L1
  78:quantum/quantum.c ****   case QK_MODS ... QK_MODS_MAX:
  79:quantum/quantum.c ****     break;
  48               		.loc 1 79 5 is_stmt 1 view .LVU4
  80:quantum/quantum.c ****   default:
  81:quantum/quantum.c ****     return;
  82:quantum/quantum.c ****   }
  83:quantum/quantum.c **** 
  84:quantum/quantum.c ****   if (code & QK_LCTL)
  49               		.loc 1 84 3 view .LVU5
  50               		.loc 1 84 6 is_stmt 0 view .LVU6
  51 0014 10FF      		sbrs r17,0
  52 0016 00C0      		rjmp .L4
  85:quantum/quantum.c ****     f(KC_LCTL);
  53               		.loc 1 85 5 is_stmt 1 view .LVU7
  54 0018 80EE      		ldi r24,lo8(-32)
  55 001a FB01      		movw r30,r22
  56 001c 0995      		icall
  57               	.LVL2:
  58               	.L4:
  86:quantum/quantum.c ****   if (code & QK_LSFT)
  59               		.loc 1 86 3 view .LVU8
  60               		.loc 1 86 6 is_stmt 0 view .LVU9
  61 001e 11FF      		sbrs r17,1
  62 0020 00C0      		rjmp .L5
  87:quantum/quantum.c ****     f(KC_LSFT);
  63               		.loc 1 87 5 is_stmt 1 view .LVU10
  64 0022 81EE      		ldi r24,lo8(-31)
  65 0024 FE01      		movw r30,r28
  66 0026 0995      		icall
  67               	.LVL3:
  68               	.L5:
  88:quantum/quantum.c ****   if (code & QK_LALT)
  69               		.loc 1 88 3 view .LVU11
  70               		.loc 1 88 6 is_stmt 0 view .LVU12
  71 0028 12FF      		sbrs r17,2
  72 002a 00C0      		rjmp .L6
  89:quantum/quantum.c ****     f(KC_LALT);
  73               		.loc 1 89 5 is_stmt 1 view .LVU13
  74 002c 82EE      		ldi r24,lo8(-30)
  75 002e FE01      		movw r30,r28
  76 0030 0995      		icall
  77               	.LVL4:
  78               	.L6:
  90:quantum/quantum.c ****   if (code & QK_LGUI)
  79               		.loc 1 90 3 view .LVU14
  80               		.loc 1 90 6 is_stmt 0 view .LVU15
  81 0032 13FF      		sbrs r17,3
  82 0034 00C0      		rjmp .L7
  91:quantum/quantum.c ****     f(KC_LGUI);
  83               		.loc 1 91 5 is_stmt 1 view .LVU16
  84 0036 83EE      		ldi r24,lo8(-29)
  85 0038 FE01      		movw r30,r28
  86 003a 0995      		icall
  87               	.LVL5:
  88               	.L7:
  92:quantum/quantum.c **** 
  93:quantum/quantum.c ****   if (code < QK_RMODS_MIN) return;
  89               		.loc 1 93 3 view .LVU17
  90               		.loc 1 93 6 is_stmt 0 view .LVU18
  91 003c 0115      		cp r16,__zero_reg__
  92 003e 1041      		sbci r17,16
  93 0040 00F0      		brlo .L1
  94:quantum/quantum.c **** 
  95:quantum/quantum.c ****   if (code & QK_RCTL)
  94               		.loc 1 95 3 is_stmt 1 view .LVU19
  96:quantum/quantum.c ****     f(KC_RCTL);
  95               		.loc 1 96 5 view .LVU20
  96 0042 84EE      		ldi r24,lo8(-28)
  97 0044 FE01      		movw r30,r28
  98 0046 0995      		icall
  99               	.LVL6:
  97:quantum/quantum.c ****   if (code & QK_RSFT)
 100               		.loc 1 97 3 view .LVU21
  98:quantum/quantum.c ****     f(KC_RSFT);
 101               		.loc 1 98 5 view .LVU22
 102 0048 85EE      		ldi r24,lo8(-27)
 103 004a FE01      		movw r30,r28
 104 004c 0995      		icall
 105               	.LVL7:
  99:quantum/quantum.c ****   if (code & QK_RALT)
 106               		.loc 1 99 3 view .LVU23
 100:quantum/quantum.c ****     f(KC_RALT);
 107               		.loc 1 100 5 view .LVU24
 108 004e 86EE      		ldi r24,lo8(-26)
 109 0050 FE01      		movw r30,r28
 110 0052 0995      		icall
 111               	.LVL8:
 101:quantum/quantum.c ****   if (code & QK_RGUI)
 112               		.loc 1 101 3 view .LVU25
 102:quantum/quantum.c ****     f(KC_RGUI);
 113               		.loc 1 102 5 view .LVU26
 114 0054 87EE      		ldi r24,lo8(-25)
 115 0056 FE01      		movw r30,r28
 116               	/* epilogue start */
 103:quantum/quantum.c **** }
 117               		.loc 1 103 1 is_stmt 0 view .LVU27
 118 0058 DF91      		pop r29
 119 005a CF91      		pop r28
 120               	.LVL9:
 121               		.loc 1 103 1 view .LVU28
 122 005c 1F91      		pop r17
 123 005e 0F91      		pop r16
 124               	.LVL10:
 102:quantum/quantum.c ****     f(KC_RGUI);
 125               		.loc 1 102 5 view .LVU29
 126 0060 0994      		ijmp
 127               	.LVL11:
 128               	.L1:
 129               	/* epilogue start */
 130               		.loc 1 103 1 view .LVU30
 131 0062 DF91      		pop r29
 132 0064 CF91      		pop r28
 133               	.LVL12:
 134               		.loc 1 103 1 view .LVU31
 135 0066 1F91      		pop r17
 136 0068 0F91      		pop r16
 137               	.LVL13:
 138               		.loc 1 103 1 view .LVU32
 139 006a 0895      		ret
 140               		.cfi_endproc
 141               	.LFE111:
 143               		.section	.text.qk_register_weak_mods,"ax",@progbits
 145               	qk_register_weak_mods:
 146               	.LVL14:
 147               	.LFB112:
 104:quantum/quantum.c **** 
 105:quantum/quantum.c **** static inline void qk_register_weak_mods(uint8_t kc) {
 148               		.loc 1 105 54 is_stmt 1 view -0
 149               		.cfi_startproc
 150               	/* prologue: function */
 151               	/* frame size = 0 */
 152               	/* stack size = 0 */
 153               	.L__stack_usage = 0
 106:quantum/quantum.c ****     add_weak_mods(MOD_BIT(kc));
 154               		.loc 1 106 5 view .LVU34
 155               		.loc 1 106 19 is_stmt 0 view .LVU35
 156 0000 8770      		andi r24,lo8(7)
 157               	.LVL15:
 158               		.loc 1 106 5 view .LVU36
 159 0002 91E0      		ldi r25,lo8(1)
 160 0004 00C0      		rjmp 2f
 161               		1:
 162 0006 990F      		lsl r25
 163               		2:
 164 0008 8A95      		dec r24
 165 000a 02F4      		brpl 1b
 166 000c 892F      		mov r24,r25
 167 000e 0E94 0000 		call add_weak_mods
 168               	.LVL16:
 107:quantum/quantum.c ****     send_keyboard_report();
 169               		.loc 1 107 5 is_stmt 1 view .LVU37
 170 0012 0C94 0000 		jmp send_keyboard_report
 171               	.LVL17:
 172               		.cfi_endproc
 173               	.LFE112:
 175               		.section	.text.qk_register_mods,"ax",@progbits
 177               	qk_register_mods:
 178               	.LFB161:
 179               		.cfi_startproc
 180               	/* prologue: function */
 181               	/* frame size = 0 */
 182               	/* stack size = 0 */
 183               	.L__stack_usage = 0
 184 0000 0C94 0000 		jmp qk_register_weak_mods
 185               		.cfi_endproc
 186               	.LFE161:
 188               		.section	.text.qk_unregister_weak_mods,"ax",@progbits
 190               	qk_unregister_weak_mods:
 191               	.LVL18:
 192               	.LFB113:
 108:quantum/quantum.c **** }
 109:quantum/quantum.c **** 
 110:quantum/quantum.c **** static inline void qk_unregister_weak_mods(uint8_t kc) {
 193               		.loc 1 110 56 view -0
 194               		.cfi_startproc
 195               	/* prologue: function */
 196               	/* frame size = 0 */
 197               	/* stack size = 0 */
 198               	.L__stack_usage = 0
 111:quantum/quantum.c ****     del_weak_mods(MOD_BIT(kc));
 199               		.loc 1 111 5 view .LVU39
 200               		.loc 1 111 19 is_stmt 0 view .LVU40
 201 0000 8770      		andi r24,lo8(7)
 202               	.LVL19:
 203               		.loc 1 111 5 view .LVU41
 204 0002 91E0      		ldi r25,lo8(1)
 205 0004 00C0      		rjmp 2f
 206               		1:
 207 0006 990F      		lsl r25
 208               		2:
 209 0008 8A95      		dec r24
 210 000a 02F4      		brpl 1b
 211 000c 892F      		mov r24,r25
 212 000e 0E94 0000 		call del_weak_mods
 213               	.LVL20:
 112:quantum/quantum.c ****     send_keyboard_report();
 214               		.loc 1 112 5 is_stmt 1 view .LVU42
 215 0012 0C94 0000 		jmp send_keyboard_report
 216               	.LVL21:
 217               		.cfi_endproc
 218               	.LFE113:
 220               		.section	.text.qk_unregister_mods,"ax",@progbits
 222               	qk_unregister_mods:
 223               	.LFB163:
 224               		.cfi_startproc
 225               	/* prologue: function */
 226               	/* frame size = 0 */
 227               	/* stack size = 0 */
 228               	.L__stack_usage = 0
 229 0000 0C94 0000 		jmp qk_unregister_weak_mods
 230               		.cfi_endproc
 231               	.LFE163:
 233               		.section	.text.register_code16,"ax",@progbits
 234               	.global	register_code16
 236               	register_code16:
 237               	.LVL22:
 238               	.LFB116:
 113:quantum/quantum.c **** }
 114:quantum/quantum.c **** 
 115:quantum/quantum.c **** static inline void qk_register_mods(uint8_t kc) {
 116:quantum/quantum.c ****     add_weak_mods(MOD_BIT(kc));
 117:quantum/quantum.c ****     send_keyboard_report();
 118:quantum/quantum.c **** }
 119:quantum/quantum.c **** 
 120:quantum/quantum.c **** static inline void qk_unregister_mods(uint8_t kc) {
 121:quantum/quantum.c ****     del_weak_mods(MOD_BIT(kc));
 122:quantum/quantum.c ****     send_keyboard_report();
 123:quantum/quantum.c **** }
 124:quantum/quantum.c **** 
 125:quantum/quantum.c **** void register_code16 (uint16_t code) {
 239               		.loc 1 125 38 view -0
 240               		.cfi_startproc
 241               		.loc 1 125 38 is_stmt 0 view .LVU44
 242 0000 CF93      		push r28
 243               	.LCFI4:
 244               		.cfi_def_cfa_offset 3
 245               		.cfi_offset 28, -2
 246 0002 DF93      		push r29
 247               	.LCFI5:
 248               		.cfi_def_cfa_offset 4
 249               		.cfi_offset 29, -3
 250               	/* prologue: function */
 251               	/* frame size = 0 */
 252               	/* stack size = 2 */
 253               	.L__stack_usage = 2
 254 0004 EC01      		movw r28,r24
 126:quantum/quantum.c ****   if (IS_MOD(code) || code == KC_NO) {
 255               		.loc 1 126 3 is_stmt 1 view .LVU45
 256               		.loc 1 126 7 is_stmt 0 view .LVU46
 257 0006 805E      		subi r24,-32
 258 0008 9109      		sbc r25,__zero_reg__
 259               	.LVL23:
 260               		.loc 1 126 6 view .LVU47
 261 000a 0897      		sbiw r24,8
 262 000c 00F0      		brlo .L26
 127:quantum/quantum.c ****       do_code16 (code, qk_register_mods);
 128:quantum/quantum.c ****   } else {
 129:quantum/quantum.c ****       do_code16 (code, qk_register_weak_mods);
 263               		.loc 1 129 7 discriminator 1 view .LVU48
 264 000e 60E0      		ldi r22,lo8(gs(qk_register_weak_mods))
 265 0010 70E0      		ldi r23,hi8(gs(qk_register_weak_mods))
 126:quantum/quantum.c ****   if (IS_MOD(code) || code == KC_NO) {
 266               		.loc 1 126 20 discriminator 1 view .LVU49
 267 0012 2097      		sbiw r28,0
 268 0014 01F4      		brne .L29
 269               	.L26:
 127:quantum/quantum.c ****       do_code16 (code, qk_register_mods);
 270               		.loc 1 127 7 is_stmt 1 view .LVU50
 271 0016 60E0      		ldi r22,lo8(gs(qk_register_mods))
 272 0018 70E0      		ldi r23,hi8(gs(qk_register_mods))
 273               	.L29:
 274               		.loc 1 129 7 is_stmt 0 view .LVU51
 275 001a CE01      		movw r24,r28
 276 001c 0E94 0000 		call do_code16
 277               	.LVL24:
 130:quantum/quantum.c ****   }
 131:quantum/quantum.c ****   register_code (code);
 278               		.loc 1 131 3 is_stmt 1 view .LVU52
 279 0020 8C2F      		mov r24,r28
 280               	/* epilogue start */
 132:quantum/quantum.c **** }
 281               		.loc 1 132 1 is_stmt 0 view .LVU53
 282 0022 DF91      		pop r29
 283 0024 CF91      		pop r28
 284               	.LVL25:
 131:quantum/quantum.c **** }
 285               		.loc 1 131 3 view .LVU54
 286 0026 0C94 0000 		jmp register_code
 287               	.LVL26:
 288               		.cfi_endproc
 289               	.LFE116:
 291               		.section	.text.unregister_code16,"ax",@progbits
 292               	.global	unregister_code16
 294               	unregister_code16:
 295               	.LVL27:
 296               	.LFB117:
 133:quantum/quantum.c **** 
 134:quantum/quantum.c **** void unregister_code16 (uint16_t code) {
 297               		.loc 1 134 40 is_stmt 1 view -0
 298               		.cfi_startproc
 299               		.loc 1 134 40 is_stmt 0 view .LVU56
 300 0000 CF93      		push r28
 301               	.LCFI6:
 302               		.cfi_def_cfa_offset 3
 303               		.cfi_offset 28, -2
 304 0002 DF93      		push r29
 305               	.LCFI7:
 306               		.cfi_def_cfa_offset 4
 307               		.cfi_offset 29, -3
 308               	/* prologue: function */
 309               	/* frame size = 0 */
 310               	/* stack size = 2 */
 311               	.L__stack_usage = 2
 312 0004 EC01      		movw r28,r24
 135:quantum/quantum.c ****   unregister_code (code);
 313               		.loc 1 135 3 is_stmt 1 view .LVU57
 314 0006 0E94 0000 		call unregister_code
 315               	.LVL28:
 136:quantum/quantum.c ****   if (IS_MOD(code) || code == KC_NO) {
 316               		.loc 1 136 3 view .LVU58
 317               		.loc 1 136 7 is_stmt 0 view .LVU59
 318 000a CE01      		movw r24,r28
 319 000c 805E      		subi r24,-32
 320 000e 9109      		sbc r25,__zero_reg__
 321               		.loc 1 136 6 view .LVU60
 322 0010 0897      		sbiw r24,8
 323 0012 00F0      		brlo .L31
 137:quantum/quantum.c ****       do_code16 (code, qk_unregister_mods);
 138:quantum/quantum.c ****   } else {
 139:quantum/quantum.c ****       do_code16 (code, qk_unregister_weak_mods);
 324               		.loc 1 139 7 discriminator 1 view .LVU61
 325 0014 60E0      		ldi r22,lo8(gs(qk_unregister_weak_mods))
 326 0016 70E0      		ldi r23,hi8(gs(qk_unregister_weak_mods))
 136:quantum/quantum.c ****   if (IS_MOD(code) || code == KC_NO) {
 327               		.loc 1 136 20 discriminator 1 view .LVU62
 328 0018 2097      		sbiw r28,0
 329 001a 01F4      		brne .L33
 330               	.L31:
 137:quantum/quantum.c ****       do_code16 (code, qk_unregister_mods);
 331               		.loc 1 137 7 is_stmt 1 view .LVU63
 332 001c 60E0      		ldi r22,lo8(gs(qk_unregister_mods))
 333 001e 70E0      		ldi r23,hi8(gs(qk_unregister_mods))
 334               	.L33:
 335               		.loc 1 139 7 is_stmt 0 view .LVU64
 336 0020 CE01      		movw r24,r28
 337               	/* epilogue start */
 140:quantum/quantum.c ****   }
 141:quantum/quantum.c **** }
 338               		.loc 1 141 1 view .LVU65
 339 0022 DF91      		pop r29
 340 0024 CF91      		pop r28
 341               	.LVL29:
 139:quantum/quantum.c ****   }
 342               		.loc 1 139 7 view .LVU66
 343 0026 0C94 0000 		jmp do_code16
 344               	.LVL30:
 139:quantum/quantum.c ****   }
 345               		.loc 1 139 7 view .LVU67
 346               		.cfi_endproc
 347               	.LFE117:
 349               		.section	.text.tap_code16,"ax",@progbits
 350               	.global	tap_code16
 352               	tap_code16:
 353               	.LVL31:
 354               	.LFB118:
 142:quantum/quantum.c **** 
 143:quantum/quantum.c **** void tap_code16(uint16_t code) {
 355               		.loc 1 143 32 is_stmt 1 view -0
 356               		.cfi_startproc
 357               		.loc 1 143 32 is_stmt 0 view .LVU69
 358 0000 CF93      		push r28
 359               	.LCFI8:
 360               		.cfi_def_cfa_offset 3
 361               		.cfi_offset 28, -2
 362 0002 DF93      		push r29
 363               	.LCFI9:
 364               		.cfi_def_cfa_offset 4
 365               		.cfi_offset 29, -3
 366               	/* prologue: function */
 367               	/* frame size = 0 */
 368               	/* stack size = 2 */
 369               	.L__stack_usage = 2
 370 0004 EC01      		movw r28,r24
 144:quantum/quantum.c ****   register_code16(code);
 371               		.loc 1 144 3 is_stmt 1 view .LVU70
 372 0006 0E94 0000 		call register_code16
 373               	.LVL32:
 145:quantum/quantum.c ****   #if TAP_CODE_DELAY > 0
 146:quantum/quantum.c ****     wait_ms(TAP_CODE_DELAY);
 147:quantum/quantum.c ****   #endif
 148:quantum/quantum.c ****   unregister_code16(code);
 374               		.loc 1 148 3 view .LVU71
 375 000a CE01      		movw r24,r28
 376               	/* epilogue start */
 149:quantum/quantum.c **** }
 377               		.loc 1 149 1 is_stmt 0 view .LVU72
 378 000c DF91      		pop r29
 379 000e CF91      		pop r28
 380               	.LVL33:
 148:quantum/quantum.c **** }
 381               		.loc 1 148 3 view .LVU73
 382 0010 0C94 0000 		jmp unregister_code16
 383               	.LVL34:
 148:quantum/quantum.c **** }
 384               		.loc 1 148 3 view .LVU74
 385               		.cfi_endproc
 386               	.LFE118:
 388               		.section	.text.process_action_kb,"ax",@progbits
 389               		.weak	process_action_kb
 391               	process_action_kb:
 392               	.LVL35:
 393               	.LFB119:
 150:quantum/quantum.c **** 
 151:quantum/quantum.c **** __attribute__ ((weak))
 152:quantum/quantum.c **** bool process_action_kb(keyrecord_t *record) {
 394               		.loc 1 152 45 is_stmt 1 view -0
 395               		.cfi_startproc
 396               	/* prologue: function */
 397               	/* frame size = 0 */
 398               	/* stack size = 0 */
 399               	.L__stack_usage = 0
 153:quantum/quantum.c ****   return true;
 400               		.loc 1 153 3 view .LVU76
 154:quantum/quantum.c **** }
 401               		.loc 1 154 1 is_stmt 0 view .LVU77
 402 0000 81E0      		ldi r24,lo8(1)
 403               	.LVL36:
 404               	/* epilogue start */
 405               		.loc 1 154 1 view .LVU78
 406 0002 0895      		ret
 407               		.cfi_endproc
 408               	.LFE119:
 410               		.section	.text.process_record_user,"ax",@progbits
 411               		.weak	process_record_user
 413               	process_record_user:
 414               	.LVL37:
 415               	.LFB121:
 155:quantum/quantum.c **** 
 156:quantum/quantum.c **** __attribute__ ((weak))
 157:quantum/quantum.c **** bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
 158:quantum/quantum.c ****   return process_record_user(keycode, record);
 159:quantum/quantum.c **** }
 160:quantum/quantum.c **** 
 161:quantum/quantum.c **** __attribute__ ((weak))
 162:quantum/quantum.c **** bool process_record_user(uint16_t keycode, keyrecord_t *record) {
 416               		.loc 1 162 65 is_stmt 1 view -0
 417               		.cfi_startproc
 418               	/* prologue: function */
 419               	/* frame size = 0 */
 420               	/* stack size = 0 */
 421               	.L__stack_usage = 0
 163:quantum/quantum.c ****   return true;
 422               		.loc 1 163 3 view .LVU80
 164:quantum/quantum.c **** }
 423               		.loc 1 164 1 is_stmt 0 view .LVU81
 424 0000 81E0      		ldi r24,lo8(1)
 425               	.LVL38:
 426               	/* epilogue start */
 427               		.loc 1 164 1 view .LVU82
 428 0002 0895      		ret
 429               		.cfi_endproc
 430               	.LFE121:
 432               		.section	.text.process_record_kb,"ax",@progbits
 433               		.weak	process_record_kb
 435               	process_record_kb:
 436               	.LVL39:
 437               	.LFB120:
 157:quantum/quantum.c ****   return process_record_user(keycode, record);
 438               		.loc 1 157 63 is_stmt 1 view -0
 439               		.cfi_startproc
 440               	/* prologue: function */
 441               	/* frame size = 0 */
 442               	/* stack size = 0 */
 443               	.L__stack_usage = 0
 158:quantum/quantum.c **** }
 444               		.loc 1 158 3 view .LVU84
 158:quantum/quantum.c **** }
 445               		.loc 1 158 10 is_stmt 0 view .LVU85
 446 0000 0C94 0000 		jmp process_record_user
 447               	.LVL40:
 158:quantum/quantum.c **** }
 448               		.loc 1 158 10 view .LVU86
 449               		.cfi_endproc
 450               	.LFE120:
 452               		.section	.text.get_event_keycode,"ax",@progbits
 453               	.global	get_event_keycode
 455               	get_event_keycode:
 456               	.LFB124:
 165:quantum/quantum.c **** 
 166:quantum/quantum.c **** void reset_keyboard(void) {
 167:quantum/quantum.c ****   clear_keyboard();
 168:quantum/quantum.c **** #if defined(MIDI_ENABLE) && defined(MIDI_BASIC)
 169:quantum/quantum.c ****   process_midi_all_notes_off();
 170:quantum/quantum.c **** #endif
 171:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 172:quantum/quantum.c ****   #ifndef NO_MUSIC_MODE
 173:quantum/quantum.c ****     music_all_notes_off();
 174:quantum/quantum.c ****   #endif
 175:quantum/quantum.c ****   uint16_t timer_start = timer_read();
 176:quantum/quantum.c ****   PLAY_SONG(goodbye_song);
 177:quantum/quantum.c ****   shutdown_user();
 178:quantum/quantum.c ****   while(timer_elapsed(timer_start) < 250)
 179:quantum/quantum.c ****     wait_ms(1);
 180:quantum/quantum.c ****   stop_all_notes();
 181:quantum/quantum.c **** #else
 182:quantum/quantum.c ****   shutdown_user();
 183:quantum/quantum.c ****   wait_ms(250);
 184:quantum/quantum.c **** #endif
 185:quantum/quantum.c **** #ifdef HAPTIC_ENABLE
 186:quantum/quantum.c ****   haptic_shutdown();
 187:quantum/quantum.c **** #endif
 188:quantum/quantum.c **** // this is also done later in bootloader.c - not sure if it's neccesary here
 189:quantum/quantum.c **** #ifdef BOOTLOADER_CATERINA
 190:quantum/quantum.c ****   *(uint16_t *)0x0800 = 0x7777; // these two are a-star-specific
 191:quantum/quantum.c **** #endif
 192:quantum/quantum.c ****   bootloader_jump();
 193:quantum/quantum.c **** }
 194:quantum/quantum.c **** 
 195:quantum/quantum.c **** /* true if the last press of GRAVE_ESC was shifted (i.e. GUI or SHIFT were pressed), false otherwis
 196:quantum/quantum.c ****  * Used to ensure that the correct keycode is released if the key is released.
 197:quantum/quantum.c ****  */
 198:quantum/quantum.c **** static bool grave_esc_was_shifted = false;
 199:quantum/quantum.c **** 
 200:quantum/quantum.c **** /* Convert record into usable keycode via the contained event. */
 201:quantum/quantum.c **** uint16_t get_record_keycode(keyrecord_t *record) {
 202:quantum/quantum.c ****   return get_event_keycode(record->event);
 203:quantum/quantum.c **** }
 204:quantum/quantum.c **** 
 205:quantum/quantum.c **** 
 206:quantum/quantum.c **** /* Convert event into usable keycode. Checks the layer cache to ensure that it
 207:quantum/quantum.c ****  * retains the correct keycode after a layer change, if the key is still pressed.
 208:quantum/quantum.c ****  */
 209:quantum/quantum.c **** uint16_t get_event_keycode(keyevent_t event) {
 457               		.loc 1 209 46 is_stmt 1 view -0
 458               		.cfi_startproc
 459 0000 1F93      		push r17
 460               	.LCFI10:
 461               		.cfi_def_cfa_offset 3
 462               		.cfi_offset 17, -2
 463 0002 CF93      		push r28
 464               	.LCFI11:
 465               		.cfi_def_cfa_offset 4
 466               		.cfi_offset 28, -3
 467 0004 DF93      		push r29
 468               	.LCFI12:
 469               		.cfi_def_cfa_offset 5
 470               		.cfi_offset 29, -4
 471 0006 00D0      		rcall .
 472 0008 00D0      		rcall .
 473 000a 0F92      		push __tmp_reg__
 474               	.LCFI13:
 475               		.cfi_def_cfa_offset 10
 476 000c CDB7      		in r28,__SP_L__
 477 000e DEB7      		in r29,__SP_H__
 478               	.LCFI14:
 479               		.cfi_def_cfa_register 28
 480               	/* prologue: function */
 481               	/* frame size = 5 */
 482               	/* stack size = 8 */
 483               	.L__stack_usage = 8
 484 0010 4983      		std Y+1,r20
 485 0012 5A83      		std Y+2,r21
 486 0014 6B83      		std Y+3,r22
 210:quantum/quantum.c **** 
 211:quantum/quantum.c ****   #if !defined(NO_ACTION_LAYER) && !defined(STRICT_LAYER_RELEASE)
 212:quantum/quantum.c ****     /* TODO: Use store_or_get_action() or a similar function. */
 213:quantum/quantum.c ****     if (!disable_action_cache) {
 487               		.loc 1 213 5 view .LVU88
 488               		.loc 1 213 8 is_stmt 0 view .LVU89
 489 0016 2091 0000 		lds r18,disable_action_cache
 490 001a 8981      		ldd r24,Y+1
 491 001c 9A81      		ldd r25,Y+2
 492 001e 2111      		cpse r18,__zero_reg__
 493 0020 00C0      		rjmp .L39
 494               	.LBB24:
 214:quantum/quantum.c ****       uint8_t layer;
 495               		.loc 1 214 7 is_stmt 1 view .LVU90
 215:quantum/quantum.c **** 
 216:quantum/quantum.c ****       if (event.pressed) {
 496               		.loc 1 216 7 view .LVU91
 497               		.loc 1 216 10 is_stmt 0 view .LVU92
 498 0022 6623      		tst r22
 499 0024 01F0      		breq .L40
 217:quantum/quantum.c ****         layer = layer_switch_get_layer(event.key);
 500               		.loc 1 217 9 is_stmt 1 view .LVU93
 501               		.loc 1 217 17 is_stmt 0 view .LVU94
 502 0026 0E94 0000 		call layer_switch_get_layer
 503               	.LVL41:
 504 002a 182F      		mov r17,r24
 505               	.LVL42:
 218:quantum/quantum.c ****         update_source_layers_cache(event.key, layer);
 506               		.loc 1 218 9 is_stmt 1 view .LVU95
 507 002c 682F      		mov r22,r24
 508 002e 8981      		ldd r24,Y+1
 509 0030 9A81      		ldd r25,Y+2
 510 0032 0E94 0000 		call update_source_layers_cache
 511               	.LVL43:
 512               	.L41:
 219:quantum/quantum.c ****       } else {
 220:quantum/quantum.c ****         layer = read_source_layers_cache(event.key);
 221:quantum/quantum.c ****       }
 222:quantum/quantum.c ****       return keymap_key_to_keycode(layer, event.key);
 513               		.loc 1 222 7 view .LVU96
 514               		.loc 1 222 14 is_stmt 0 view .LVU97
 515 0036 6981      		ldd r22,Y+1
 516 0038 7A81      		ldd r23,Y+2
 517 003a 812F      		mov r24,r17
 518               	.LVL44:
 519               	.L42:
 520               	/* epilogue start */
 521               		.loc 1 222 14 view .LVU98
 522               	.LBE24:
 223:quantum/quantum.c ****     } else
 224:quantum/quantum.c ****   #endif
 225:quantum/quantum.c ****     return keymap_key_to_keycode(layer_switch_get_layer(event.key), event.key);
 226:quantum/quantum.c **** }
 523               		.loc 1 226 1 view .LVU99
 524 003c 0F90      		pop __tmp_reg__
 525 003e 0F90      		pop __tmp_reg__
 526 0040 0F90      		pop __tmp_reg__
 527 0042 0F90      		pop __tmp_reg__
 528 0044 0F90      		pop __tmp_reg__
 529 0046 DF91      		pop r29
 530 0048 CF91      		pop r28
 531 004a 1F91      		pop r17
 225:quantum/quantum.c **** }
 532               		.loc 1 225 12 view .LVU100
 533 004c 0C94 0000 		jmp keymap_key_to_keycode
 534               	.LVL45:
 535               	.L40:
 536               	.LBB25:
 220:quantum/quantum.c ****       }
 537               		.loc 1 220 9 is_stmt 1 view .LVU101
 220:quantum/quantum.c ****       }
 538               		.loc 1 220 17 is_stmt 0 view .LVU102
 539 0050 0E94 0000 		call read_source_layers_cache
 540               	.LVL46:
 541 0054 182F      		mov r17,r24
 542               	.LVL47:
 220:quantum/quantum.c ****       }
 543               		.loc 1 220 17 view .LVU103
 544 0056 00C0      		rjmp .L41
 545               	.LVL48:
 546               	.L39:
 220:quantum/quantum.c ****       }
 547               		.loc 1 220 17 view .LVU104
 548               	.LBE25:
 225:quantum/quantum.c **** }
 549               		.loc 1 225 5 is_stmt 1 view .LVU105
 225:quantum/quantum.c **** }
 550               		.loc 1 225 12 is_stmt 0 view .LVU106
 551 0058 0E94 0000 		call layer_switch_get_layer
 552               	.LVL49:
 553 005c 6981      		ldd r22,Y+1
 554 005e 7A81      		ldd r23,Y+2
 555 0060 00C0      		rjmp .L42
 556               		.cfi_endproc
 557               	.LFE124:
 559               		.section	.text.get_record_keycode,"ax",@progbits
 560               	.global	get_record_keycode
 562               	get_record_keycode:
 563               	.LVL50:
 564               	.LFB123:
 201:quantum/quantum.c ****   return get_event_keycode(record->event);
 565               		.loc 1 201 50 is_stmt 1 view -0
 566               		.cfi_startproc
 567               	/* prologue: function */
 568               	/* frame size = 0 */
 569               	/* stack size = 0 */
 570               	.L__stack_usage = 0
 201:quantum/quantum.c ****   return get_event_keycode(record->event);
 571               		.loc 1 201 50 is_stmt 0 view .LVU108
 572 0000 FC01      		movw r30,r24
 202:quantum/quantum.c **** }
 573               		.loc 1 202 3 is_stmt 1 view .LVU109
 202:quantum/quantum.c **** }
 574               		.loc 1 202 10 is_stmt 0 view .LVU110
 575 0002 4081      		ld r20,Z
 576 0004 5181      		ldd r21,Z+1
 577 0006 6281      		ldd r22,Z+2
 578 0008 7381      		ldd r23,Z+3
 579 000a 8481      		ldd r24,Z+4
 580               	.LVL51:
 202:quantum/quantum.c **** }
 581               		.loc 1 202 10 view .LVU111
 582 000c 0C94 0000 		jmp get_event_keycode
 583               	.LVL52:
 202:quantum/quantum.c **** }
 584               		.loc 1 202 10 view .LVU112
 585               		.cfi_endproc
 586               	.LFE123:
 588               		.section	.text.send_char,"ax",@progbits
 589               	.global	send_char
 591               	send_char:
 592               	.LVL53:
 593               	.LFB130:
 227:quantum/quantum.c **** 
 228:quantum/quantum.c **** /* Main keycode processing function. Hands off handling to other functions,
 229:quantum/quantum.c ****  * then processes internal Quantum keycodes, then processes ACTIONs.
 230:quantum/quantum.c ****  */
 231:quantum/quantum.c **** bool process_record_quantum(keyrecord_t *record) {
 232:quantum/quantum.c ****     uint16_t keycode = get_record_keycode(record);
 233:quantum/quantum.c **** 
 234:quantum/quantum.c ****     // This is how you use actions here
 235:quantum/quantum.c ****     // if (keycode == KC_LEAD) {
 236:quantum/quantum.c ****     //   action_t action;
 237:quantum/quantum.c ****     //   action.code = ACTION_DEFAULT_LAYER_SET(0);
 238:quantum/quantum.c ****     //   process_action(record, action);
 239:quantum/quantum.c ****     //   return false;
 240:quantum/quantum.c ****     // }
 241:quantum/quantum.c **** 
 242:quantum/quantum.c ****   #ifdef VELOCIKEY_ENABLE
 243:quantum/quantum.c ****     if (velocikey_enabled() && record->event.pressed) { velocikey_accelerate(); }
 244:quantum/quantum.c ****   #endif
 245:quantum/quantum.c **** 
 246:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
 247:quantum/quantum.c ****     preprocess_tap_dance(keycode, record);
 248:quantum/quantum.c ****   #endif
 249:quantum/quantum.c **** 
 250:quantum/quantum.c ****   if (!(
 251:quantum/quantum.c ****   #if defined(KEY_LOCK_ENABLE)
 252:quantum/quantum.c ****     // Must run first to be able to mask key_up events.
 253:quantum/quantum.c ****     process_key_lock(&keycode, record) &&
 254:quantum/quantum.c ****   #endif
 255:quantum/quantum.c ****   #if defined(AUDIO_ENABLE) && defined(AUDIO_CLICKY)
 256:quantum/quantum.c ****     process_clicky(keycode, record) &&
 257:quantum/quantum.c ****   #endif //AUDIO_CLICKY
 258:quantum/quantum.c ****   #ifdef HAPTIC_ENABLE
 259:quantum/quantum.c ****     process_haptic(keycode, record) &&
 260:quantum/quantum.c ****   #endif //HAPTIC_ENABLE
 261:quantum/quantum.c ****   #if defined(RGB_MATRIX_ENABLE)
 262:quantum/quantum.c ****     process_rgb_matrix(keycode, record) &&
 263:quantum/quantum.c ****   #endif
 264:quantum/quantum.c ****     process_record_kb(keycode, record) &&
 265:quantum/quantum.c ****   #if defined(MIDI_ENABLE) && defined(MIDI_ADVANCED)
 266:quantum/quantum.c ****     process_midi(keycode, record) &&
 267:quantum/quantum.c ****   #endif
 268:quantum/quantum.c ****   #ifdef AUDIO_ENABLE
 269:quantum/quantum.c ****     process_audio(keycode, record) &&
 270:quantum/quantum.c ****   #endif
 271:quantum/quantum.c ****   #ifdef STENO_ENABLE
 272:quantum/quantum.c ****     process_steno(keycode, record) &&
 273:quantum/quantum.c ****   #endif
 274:quantum/quantum.c ****   #if (defined(AUDIO_ENABLE) || (defined(MIDI_ENABLE) && defined(MIDI_BASIC))) && !defined(NO_MUSIC
 275:quantum/quantum.c ****     process_music(keycode, record) &&
 276:quantum/quantum.c ****   #endif
 277:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
 278:quantum/quantum.c ****     process_tap_dance(keycode, record) &&
 279:quantum/quantum.c ****   #endif
 280:quantum/quantum.c ****   #if defined(UNICODE_ENABLE) || defined(UNICODEMAP_ENABLE) || defined(UCIS_ENABLE)
 281:quantum/quantum.c ****     process_unicode_common(keycode, record) &&
 282:quantum/quantum.c ****   #endif
 283:quantum/quantum.c ****   #ifdef LEADER_ENABLE
 284:quantum/quantum.c ****     process_leader(keycode, record) &&
 285:quantum/quantum.c ****   #endif
 286:quantum/quantum.c ****   #ifdef COMBO_ENABLE
 287:quantum/quantum.c ****     process_combo(keycode, record) &&
 288:quantum/quantum.c ****   #endif
 289:quantum/quantum.c ****   #ifdef PRINTING_ENABLE
 290:quantum/quantum.c ****     process_printer(keycode, record) &&
 291:quantum/quantum.c ****   #endif
 292:quantum/quantum.c ****   #ifdef AUTO_SHIFT_ENABLE
 293:quantum/quantum.c ****     process_auto_shift(keycode, record) &&
 294:quantum/quantum.c ****   #endif
 295:quantum/quantum.c ****   #ifdef TERMINAL_ENABLE
 296:quantum/quantum.c ****     process_terminal(keycode, record) &&
 297:quantum/quantum.c ****   #endif
 298:quantum/quantum.c ****   #ifdef SPACE_CADET_ENABLE
 299:quantum/quantum.c ****     process_space_cadet(keycode, record) &&
 300:quantum/quantum.c ****   #endif
 301:quantum/quantum.c ****       true)) {
 302:quantum/quantum.c ****     return false;
 303:quantum/quantum.c ****   }
 304:quantum/quantum.c **** 
 305:quantum/quantum.c ****   // Shift / paren setup
 306:quantum/quantum.c **** 
 307:quantum/quantum.c ****   switch(keycode) {
 308:quantum/quantum.c ****     case RESET:
 309:quantum/quantum.c ****       if (record->event.pressed) {
 310:quantum/quantum.c ****         reset_keyboard();
 311:quantum/quantum.c ****       }
 312:quantum/quantum.c ****     return false;
 313:quantum/quantum.c ****     case DEBUG:
 314:quantum/quantum.c ****       if (record->event.pressed) {
 315:quantum/quantum.c ****           debug_enable = true;
 316:quantum/quantum.c ****           print("DEBUG: enabled.\n");
 317:quantum/quantum.c ****       }
 318:quantum/quantum.c ****     return false;
 319:quantum/quantum.c ****     case EEPROM_RESET:
 320:quantum/quantum.c ****       if (record->event.pressed) {
 321:quantum/quantum.c ****           eeconfig_init();
 322:quantum/quantum.c ****       }
 323:quantum/quantum.c ****     return false;
 324:quantum/quantum.c ****   #ifdef FAUXCLICKY_ENABLE
 325:quantum/quantum.c ****   case FC_TOG:
 326:quantum/quantum.c ****     if (record->event.pressed) {
 327:quantum/quantum.c ****       FAUXCLICKY_TOGGLE;
 328:quantum/quantum.c ****     }
 329:quantum/quantum.c ****     return false;
 330:quantum/quantum.c ****   case FC_ON:
 331:quantum/quantum.c ****     if (record->event.pressed) {
 332:quantum/quantum.c ****       FAUXCLICKY_ON;
 333:quantum/quantum.c ****     }
 334:quantum/quantum.c ****     return false;
 335:quantum/quantum.c ****   case FC_OFF:
 336:quantum/quantum.c ****     if (record->event.pressed) {
 337:quantum/quantum.c ****       FAUXCLICKY_OFF;
 338:quantum/quantum.c ****     }
 339:quantum/quantum.c ****     return false;
 340:quantum/quantum.c ****   #endif
 341:quantum/quantum.c ****   #if defined(RGBLIGHT_ENABLE) || defined(RGB_MATRIX_ENABLE)
 342:quantum/quantum.c ****   case RGB_TOG:
 343:quantum/quantum.c ****     // Split keyboards need to trigger on key-up for edge-case issue
 344:quantum/quantum.c ****     #ifndef SPLIT_KEYBOARD
 345:quantum/quantum.c ****     if (record->event.pressed) {
 346:quantum/quantum.c ****     #else
 347:quantum/quantum.c ****     if (!record->event.pressed) {
 348:quantum/quantum.c ****     #endif
 349:quantum/quantum.c ****       rgblight_toggle();
 350:quantum/quantum.c ****     }
 351:quantum/quantum.c ****     return false;
 352:quantum/quantum.c ****   case RGB_MODE_FORWARD:
 353:quantum/quantum.c ****     if (record->event.pressed) {
 354:quantum/quantum.c ****       uint8_t shifted = get_mods() & (MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RSHIFT));
 355:quantum/quantum.c ****       if(shifted) {
 356:quantum/quantum.c ****         rgblight_step_reverse();
 357:quantum/quantum.c ****       }
 358:quantum/quantum.c ****       else {
 359:quantum/quantum.c ****         rgblight_step();
 360:quantum/quantum.c ****       }
 361:quantum/quantum.c ****     }
 362:quantum/quantum.c ****     return false;
 363:quantum/quantum.c ****   case RGB_MODE_REVERSE:
 364:quantum/quantum.c ****     if (record->event.pressed) {
 365:quantum/quantum.c ****       uint8_t shifted = get_mods() & (MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RSHIFT));
 366:quantum/quantum.c ****       if(shifted) {
 367:quantum/quantum.c ****         rgblight_step();
 368:quantum/quantum.c ****       }
 369:quantum/quantum.c ****       else {
 370:quantum/quantum.c ****         rgblight_step_reverse();
 371:quantum/quantum.c ****       }
 372:quantum/quantum.c ****     }
 373:quantum/quantum.c ****     return false;
 374:quantum/quantum.c ****   case RGB_HUI:
 375:quantum/quantum.c ****     // Split keyboards need to trigger on key-up for edge-case issue
 376:quantum/quantum.c ****     #ifndef SPLIT_KEYBOARD
 377:quantum/quantum.c ****     if (record->event.pressed) {
 378:quantum/quantum.c ****     #else
 379:quantum/quantum.c ****     if (!record->event.pressed) {
 380:quantum/quantum.c ****     #endif
 381:quantum/quantum.c ****       rgblight_increase_hue();
 382:quantum/quantum.c ****     }
 383:quantum/quantum.c ****     return false;
 384:quantum/quantum.c ****   case RGB_HUD:
 385:quantum/quantum.c ****     // Split keyboards need to trigger on key-up for edge-case issue
 386:quantum/quantum.c ****     #ifndef SPLIT_KEYBOARD
 387:quantum/quantum.c ****     if (record->event.pressed) {
 388:quantum/quantum.c ****     #else
 389:quantum/quantum.c ****     if (!record->event.pressed) {
 390:quantum/quantum.c ****     #endif
 391:quantum/quantum.c ****       rgblight_decrease_hue();
 392:quantum/quantum.c ****     }
 393:quantum/quantum.c ****     return false;
 394:quantum/quantum.c ****   case RGB_SAI:
 395:quantum/quantum.c ****     // Split keyboards need to trigger on key-up for edge-case issue
 396:quantum/quantum.c ****     #ifndef SPLIT_KEYBOARD
 397:quantum/quantum.c ****     if (record->event.pressed) {
 398:quantum/quantum.c ****     #else
 399:quantum/quantum.c ****     if (!record->event.pressed) {
 400:quantum/quantum.c ****     #endif
 401:quantum/quantum.c ****       rgblight_increase_sat();
 402:quantum/quantum.c ****     }
 403:quantum/quantum.c ****     return false;
 404:quantum/quantum.c ****   case RGB_SAD:
 405:quantum/quantum.c ****     // Split keyboards need to trigger on key-up for edge-case issue
 406:quantum/quantum.c ****     #ifndef SPLIT_KEYBOARD
 407:quantum/quantum.c ****     if (record->event.pressed) {
 408:quantum/quantum.c ****     #else
 409:quantum/quantum.c ****     if (!record->event.pressed) {
 410:quantum/quantum.c ****     #endif
 411:quantum/quantum.c ****       rgblight_decrease_sat();
 412:quantum/quantum.c ****     }
 413:quantum/quantum.c ****     return false;
 414:quantum/quantum.c ****   case RGB_VAI:
 415:quantum/quantum.c ****     // Split keyboards need to trigger on key-up for edge-case issue
 416:quantum/quantum.c ****     #ifndef SPLIT_KEYBOARD
 417:quantum/quantum.c ****     if (record->event.pressed) {
 418:quantum/quantum.c ****     #else
 419:quantum/quantum.c ****     if (!record->event.pressed) {
 420:quantum/quantum.c ****     #endif
 421:quantum/quantum.c ****       rgblight_increase_val();
 422:quantum/quantum.c ****     }
 423:quantum/quantum.c ****     return false;
 424:quantum/quantum.c ****   case RGB_VAD:
 425:quantum/quantum.c ****     // Split keyboards need to trigger on key-up for edge-case issue
 426:quantum/quantum.c ****     #ifndef SPLIT_KEYBOARD
 427:quantum/quantum.c ****     if (record->event.pressed) {
 428:quantum/quantum.c ****     #else
 429:quantum/quantum.c ****     if (!record->event.pressed) {
 430:quantum/quantum.c ****     #endif
 431:quantum/quantum.c ****       rgblight_decrease_val();
 432:quantum/quantum.c ****     }
 433:quantum/quantum.c ****     return false;
 434:quantum/quantum.c ****   case RGB_SPI:
 435:quantum/quantum.c ****     if (record->event.pressed) {
 436:quantum/quantum.c ****       rgblight_increase_speed();
 437:quantum/quantum.c ****     }
 438:quantum/quantum.c ****     return false;
 439:quantum/quantum.c ****   case RGB_SPD:
 440:quantum/quantum.c ****     if (record->event.pressed) {
 441:quantum/quantum.c ****       rgblight_decrease_speed();
 442:quantum/quantum.c ****     }
 443:quantum/quantum.c ****     return false;
 444:quantum/quantum.c ****   case RGB_MODE_PLAIN:
 445:quantum/quantum.c ****     if (record->event.pressed) {
 446:quantum/quantum.c ****       rgblight_mode(RGBLIGHT_MODE_STATIC_LIGHT);
 447:quantum/quantum.c ****     }
 448:quantum/quantum.c ****     return false;
 449:quantum/quantum.c ****   case RGB_MODE_BREATHE:
 450:quantum/quantum.c ****   #ifdef RGBLIGHT_EFFECT_BREATHING
 451:quantum/quantum.c ****     if (record->event.pressed) {
 452:quantum/quantum.c ****       if ((RGBLIGHT_MODE_BREATHING <= rgblight_get_mode()) &&
 453:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_BREATHING_end)) {
 454:quantum/quantum.c ****         rgblight_step();
 455:quantum/quantum.c ****       } else {
 456:quantum/quantum.c ****         rgblight_mode(RGBLIGHT_MODE_BREATHING);
 457:quantum/quantum.c ****       }
 458:quantum/quantum.c ****     }
 459:quantum/quantum.c ****   #endif
 460:quantum/quantum.c ****     return false;
 461:quantum/quantum.c ****   case RGB_MODE_RAINBOW:
 462:quantum/quantum.c ****   #ifdef RGBLIGHT_EFFECT_RAINBOW_MOOD
 463:quantum/quantum.c ****     if (record->event.pressed) {
 464:quantum/quantum.c ****       if ((RGBLIGHT_MODE_RAINBOW_MOOD <= rgblight_get_mode()) &&
 465:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_RAINBOW_MOOD_end)) {
 466:quantum/quantum.c ****         rgblight_step();
 467:quantum/quantum.c ****       } else {
 468:quantum/quantum.c ****         rgblight_mode(RGBLIGHT_MODE_RAINBOW_MOOD);
 469:quantum/quantum.c ****       }
 470:quantum/quantum.c ****     }
 471:quantum/quantum.c ****   #endif
 472:quantum/quantum.c ****     return false;
 473:quantum/quantum.c ****   case RGB_MODE_SWIRL:
 474:quantum/quantum.c ****   #ifdef RGBLIGHT_EFFECT_RAINBOW_SWIRL
 475:quantum/quantum.c ****     if (record->event.pressed) {
 476:quantum/quantum.c ****       if ((RGBLIGHT_MODE_RAINBOW_SWIRL <= rgblight_get_mode()) &&
 477:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_RAINBOW_SWIRL_end)) {
 478:quantum/quantum.c ****         rgblight_step();
 479:quantum/quantum.c ****       } else {
 480:quantum/quantum.c ****         rgblight_mode(RGBLIGHT_MODE_RAINBOW_SWIRL);
 481:quantum/quantum.c ****       }
 482:quantum/quantum.c ****     }
 483:quantum/quantum.c ****   #endif
 484:quantum/quantum.c ****     return false;
 485:quantum/quantum.c ****   case RGB_MODE_SNAKE:
 486:quantum/quantum.c ****   #ifdef RGBLIGHT_EFFECT_SNAKE
 487:quantum/quantum.c ****     if (record->event.pressed) {
 488:quantum/quantum.c ****       if ((RGBLIGHT_MODE_SNAKE <= rgblight_get_mode()) &&
 489:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_SNAKE_end)) {
 490:quantum/quantum.c ****         rgblight_step();
 491:quantum/quantum.c ****       } else {
 492:quantum/quantum.c ****         rgblight_mode(RGBLIGHT_MODE_SNAKE);
 493:quantum/quantum.c ****       }
 494:quantum/quantum.c ****     }
 495:quantum/quantum.c ****   #endif
 496:quantum/quantum.c ****     return false;
 497:quantum/quantum.c ****   case RGB_MODE_KNIGHT:
 498:quantum/quantum.c ****   #ifdef RGBLIGHT_EFFECT_KNIGHT
 499:quantum/quantum.c ****     if (record->event.pressed) {
 500:quantum/quantum.c ****       if ((RGBLIGHT_MODE_KNIGHT <= rgblight_get_mode()) &&
 501:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_KNIGHT_end)) {
 502:quantum/quantum.c ****         rgblight_step();
 503:quantum/quantum.c ****       } else {
 504:quantum/quantum.c ****         rgblight_mode(RGBLIGHT_MODE_KNIGHT);
 505:quantum/quantum.c ****       }
 506:quantum/quantum.c ****     }
 507:quantum/quantum.c ****   #endif
 508:quantum/quantum.c ****     return false;
 509:quantum/quantum.c ****   case RGB_MODE_XMAS:
 510:quantum/quantum.c ****   #ifdef RGBLIGHT_EFFECT_CHRISTMAS
 511:quantum/quantum.c ****     if (record->event.pressed) {
 512:quantum/quantum.c ****       rgblight_mode(RGBLIGHT_MODE_CHRISTMAS);
 513:quantum/quantum.c ****     }
 514:quantum/quantum.c ****   #endif
 515:quantum/quantum.c ****     return false;
 516:quantum/quantum.c ****   case RGB_MODE_GRADIENT:
 517:quantum/quantum.c ****   #ifdef RGBLIGHT_EFFECT_STATIC_GRADIENT
 518:quantum/quantum.c ****     if (record->event.pressed) {
 519:quantum/quantum.c ****       if ((RGBLIGHT_MODE_STATIC_GRADIENT <= rgblight_get_mode()) &&
 520:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_STATIC_GRADIENT_end)) {
 521:quantum/quantum.c ****         rgblight_step();
 522:quantum/quantum.c ****       } else {
 523:quantum/quantum.c ****         rgblight_mode(RGBLIGHT_MODE_STATIC_GRADIENT);
 524:quantum/quantum.c ****       }
 525:quantum/quantum.c ****     }
 526:quantum/quantum.c ****   #endif
 527:quantum/quantum.c ****     return false;
 528:quantum/quantum.c ****   case RGB_MODE_RGBTEST:
 529:quantum/quantum.c ****   #ifdef RGBLIGHT_EFFECT_RGB_TEST
 530:quantum/quantum.c ****     if (record->event.pressed) {
 531:quantum/quantum.c ****       rgblight_mode(RGBLIGHT_MODE_RGB_TEST);
 532:quantum/quantum.c ****     }
 533:quantum/quantum.c ****   #endif
 534:quantum/quantum.c ****     return false;
 535:quantum/quantum.c ****   #endif // defined(RGBLIGHT_ENABLE) || defined(RGB_MATRIX_ENABLE)
 536:quantum/quantum.c ****   #ifdef VELOCIKEY_ENABLE
 537:quantum/quantum.c ****     case VLK_TOG:
 538:quantum/quantum.c ****       if (record->event.pressed) {
 539:quantum/quantum.c ****         velocikey_toggle();
 540:quantum/quantum.c ****       }
 541:quantum/quantum.c ****       return false;
 542:quantum/quantum.c ****   #endif
 543:quantum/quantum.c ****   #ifdef PROTOCOL_LUFA
 544:quantum/quantum.c ****     case OUT_AUTO:
 545:quantum/quantum.c ****       if (record->event.pressed) {
 546:quantum/quantum.c ****         set_output(OUTPUT_AUTO);
 547:quantum/quantum.c ****       }
 548:quantum/quantum.c ****       return false;
 549:quantum/quantum.c ****     case OUT_USB:
 550:quantum/quantum.c ****       if (record->event.pressed) {
 551:quantum/quantum.c ****         set_output(OUTPUT_USB);
 552:quantum/quantum.c ****       }
 553:quantum/quantum.c ****       return false;
 554:quantum/quantum.c ****     #ifdef BLUETOOTH_ENABLE
 555:quantum/quantum.c ****     case OUT_BT:
 556:quantum/quantum.c ****       if (record->event.pressed) {
 557:quantum/quantum.c ****         set_output(OUTPUT_BLUETOOTH);
 558:quantum/quantum.c ****       }
 559:quantum/quantum.c ****       return false;
 560:quantum/quantum.c ****     #endif
 561:quantum/quantum.c ****     #endif
 562:quantum/quantum.c ****     case MAGIC_SWAP_CONTROL_CAPSLOCK ... MAGIC_TOGGLE_NKRO:
 563:quantum/quantum.c ****       if (record->event.pressed) {
 564:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 565:quantum/quantum.c ****         if (!eeconfig_is_enabled()) {
 566:quantum/quantum.c ****             eeconfig_init();
 567:quantum/quantum.c ****         }
 568:quantum/quantum.c ****         /* keymap config */
 569:quantum/quantum.c ****         keymap_config.raw = eeconfig_read_keymap();
 570:quantum/quantum.c ****         switch (keycode)
 571:quantum/quantum.c ****         {
 572:quantum/quantum.c ****           case MAGIC_SWAP_CONTROL_CAPSLOCK:
 573:quantum/quantum.c ****             keymap_config.swap_control_capslock = true;
 574:quantum/quantum.c ****             break;
 575:quantum/quantum.c ****           case MAGIC_CAPSLOCK_TO_CONTROL:
 576:quantum/quantum.c ****             keymap_config.capslock_to_control = true;
 577:quantum/quantum.c ****             break;
 578:quantum/quantum.c ****           case MAGIC_SWAP_LALT_LGUI:
 579:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = true;
 580:quantum/quantum.c ****             break;
 581:quantum/quantum.c ****           case MAGIC_SWAP_RALT_RGUI:
 582:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 583:quantum/quantum.c ****             break;
 584:quantum/quantum.c ****           case MAGIC_NO_GUI:
 585:quantum/quantum.c ****             keymap_config.no_gui = true;
 586:quantum/quantum.c ****             break;
 587:quantum/quantum.c ****           case MAGIC_SWAP_GRAVE_ESC:
 588:quantum/quantum.c ****             keymap_config.swap_grave_esc = true;
 589:quantum/quantum.c ****             break;
 590:quantum/quantum.c ****           case MAGIC_SWAP_BACKSLASH_BACKSPACE:
 591:quantum/quantum.c ****             keymap_config.swap_backslash_backspace = true;
 592:quantum/quantum.c ****             break;
 593:quantum/quantum.c ****           case MAGIC_HOST_NKRO:
 594:quantum/quantum.c ****             keymap_config.nkro = true;
 595:quantum/quantum.c ****             break;
 596:quantum/quantum.c ****           case MAGIC_SWAP_ALT_GUI:
 597:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = true;
 598:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 599:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 600:quantum/quantum.c ****               PLAY_SONG(ag_swap_song);
 601:quantum/quantum.c ****             #endif
 602:quantum/quantum.c ****             break;
 603:quantum/quantum.c ****           case MAGIC_UNSWAP_CONTROL_CAPSLOCK:
 604:quantum/quantum.c ****             keymap_config.swap_control_capslock = false;
 605:quantum/quantum.c ****             break;
 606:quantum/quantum.c ****           case MAGIC_UNCAPSLOCK_TO_CONTROL:
 607:quantum/quantum.c ****             keymap_config.capslock_to_control = false;
 608:quantum/quantum.c ****             break;
 609:quantum/quantum.c ****           case MAGIC_UNSWAP_LALT_LGUI:
 610:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = false;
 611:quantum/quantum.c ****             break;
 612:quantum/quantum.c ****           case MAGIC_UNSWAP_RALT_RGUI:
 613:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 614:quantum/quantum.c ****             break;
 615:quantum/quantum.c ****           case MAGIC_UNNO_GUI:
 616:quantum/quantum.c ****             keymap_config.no_gui = false;
 617:quantum/quantum.c ****             break;
 618:quantum/quantum.c ****           case MAGIC_UNSWAP_GRAVE_ESC:
 619:quantum/quantum.c ****             keymap_config.swap_grave_esc = false;
 620:quantum/quantum.c ****             break;
 621:quantum/quantum.c ****           case MAGIC_UNSWAP_BACKSLASH_BACKSPACE:
 622:quantum/quantum.c ****             keymap_config.swap_backslash_backspace = false;
 623:quantum/quantum.c ****             break;
 624:quantum/quantum.c ****           case MAGIC_UNHOST_NKRO:
 625:quantum/quantum.c ****             keymap_config.nkro = false;
 626:quantum/quantum.c ****             break;
 627:quantum/quantum.c ****           case MAGIC_UNSWAP_ALT_GUI:
 628:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = false;
 629:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 630:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 631:quantum/quantum.c ****               PLAY_SONG(ag_norm_song);
 632:quantum/quantum.c ****             #endif
 633:quantum/quantum.c ****             break;
 634:quantum/quantum.c ****           case MAGIC_TOGGLE_ALT_GUI:
 635:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
 636:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
 637:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 638:quantum/quantum.c ****               if (keymap_config.swap_ralt_rgui) {
 639:quantum/quantum.c ****                 PLAY_SONG(ag_swap_song);
 640:quantum/quantum.c ****               } else {
 641:quantum/quantum.c ****                 PLAY_SONG(ag_norm_song);
 642:quantum/quantum.c ****               }
 643:quantum/quantum.c ****             #endif
 644:quantum/quantum.c ****             break;
 645:quantum/quantum.c ****           case MAGIC_TOGGLE_NKRO:
 646:quantum/quantum.c ****             keymap_config.nkro = !keymap_config.nkro;
 647:quantum/quantum.c ****             break;
 648:quantum/quantum.c ****           default:
 649:quantum/quantum.c ****             break;
 650:quantum/quantum.c ****         }
 651:quantum/quantum.c ****         eeconfig_update_keymap(keymap_config.raw);
 652:quantum/quantum.c ****         clear_keyboard(); // clear to prevent stuck keys
 653:quantum/quantum.c **** 
 654:quantum/quantum.c ****         return false;
 655:quantum/quantum.c ****       }
 656:quantum/quantum.c ****       break;
 657:quantum/quantum.c **** 
 658:quantum/quantum.c ****     case GRAVE_ESC: {
 659:quantum/quantum.c ****       uint8_t shifted = get_mods() & ((MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RSHIFT)
 660:quantum/quantum.c ****                                       |MOD_BIT(KC_LGUI)|MOD_BIT(KC_RGUI)));
 661:quantum/quantum.c **** 
 662:quantum/quantum.c **** #ifdef GRAVE_ESC_ALT_OVERRIDE
 663:quantum/quantum.c ****       // if ALT is pressed, ESC is always sent
 664:quantum/quantum.c ****       // this is handy for the cmd+opt+esc shortcut on macOS, among other things.
 665:quantum/quantum.c ****       if (get_mods() & (MOD_BIT(KC_LALT) | MOD_BIT(KC_RALT))) {
 666:quantum/quantum.c ****         shifted = 0;
 667:quantum/quantum.c ****       }
 668:quantum/quantum.c **** #endif
 669:quantum/quantum.c **** 
 670:quantum/quantum.c **** #ifdef GRAVE_ESC_CTRL_OVERRIDE
 671:quantum/quantum.c ****       // if CTRL is pressed, ESC is always sent
 672:quantum/quantum.c ****       // this is handy for the ctrl+shift+esc shortcut on windows, among other things.
 673:quantum/quantum.c ****       if (get_mods() & (MOD_BIT(KC_LCTL) | MOD_BIT(KC_RCTL))) {
 674:quantum/quantum.c ****         shifted = 0;
 675:quantum/quantum.c ****       }
 676:quantum/quantum.c **** #endif
 677:quantum/quantum.c **** 
 678:quantum/quantum.c **** #ifdef GRAVE_ESC_GUI_OVERRIDE
 679:quantum/quantum.c ****       // if GUI is pressed, ESC is always sent
 680:quantum/quantum.c ****       if (get_mods() & (MOD_BIT(KC_LGUI) | MOD_BIT(KC_RGUI))) {
 681:quantum/quantum.c ****         shifted = 0;
 682:quantum/quantum.c ****       }
 683:quantum/quantum.c **** #endif
 684:quantum/quantum.c **** 
 685:quantum/quantum.c **** #ifdef GRAVE_ESC_SHIFT_OVERRIDE
 686:quantum/quantum.c ****       // if SHIFT is pressed, ESC is always sent
 687:quantum/quantum.c ****       if (get_mods() & (MOD_BIT(KC_LSHIFT) | MOD_BIT(KC_RSHIFT))) {
 688:quantum/quantum.c ****         shifted = 0;
 689:quantum/quantum.c ****       }
 690:quantum/quantum.c **** #endif
 691:quantum/quantum.c **** 
 692:quantum/quantum.c ****       if (record->event.pressed) {
 693:quantum/quantum.c ****         grave_esc_was_shifted = shifted;
 694:quantum/quantum.c ****         add_key(shifted ? KC_GRAVE : KC_ESCAPE);
 695:quantum/quantum.c ****       }
 696:quantum/quantum.c ****       else {
 697:quantum/quantum.c ****         del_key(grave_esc_was_shifted ? KC_GRAVE : KC_ESCAPE);
 698:quantum/quantum.c ****       }
 699:quantum/quantum.c **** 
 700:quantum/quantum.c ****       send_keyboard_report();
 701:quantum/quantum.c ****       return false;
 702:quantum/quantum.c ****     }
 703:quantum/quantum.c **** 
 704:quantum/quantum.c **** #if defined(BACKLIGHT_ENABLE) && defined(BACKLIGHT_BREATHING)
 705:quantum/quantum.c ****     case BL_BRTG: {
 706:quantum/quantum.c ****       if (record->event.pressed)
 707:quantum/quantum.c ****         breathing_toggle();
 708:quantum/quantum.c ****       return false;
 709:quantum/quantum.c ****     }
 710:quantum/quantum.c **** #endif
 711:quantum/quantum.c ****   }
 712:quantum/quantum.c **** 
 713:quantum/quantum.c ****   return process_action_kb(record);
 714:quantum/quantum.c **** }
 715:quantum/quantum.c **** 
 716:quantum/quantum.c **** __attribute__ ((weak))
 717:quantum/quantum.c **** const bool ascii_to_shift_lut[0x80] PROGMEM = {
 718:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 719:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 720:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 721:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 722:quantum/quantum.c ****     0, 1, 1, 1, 1, 1, 1, 0,
 723:quantum/quantum.c ****     1, 1, 1, 1, 0, 0, 0, 0,
 724:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 725:quantum/quantum.c ****     0, 0, 1, 0, 1, 0, 1, 1,
 726:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 727:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 728:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 729:quantum/quantum.c ****     1, 1, 1, 0, 0, 0, 1, 1,
 730:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 731:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 732:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 733:quantum/quantum.c ****     0, 0, 0, 1, 1, 1, 1, 0
 734:quantum/quantum.c **** };
 735:quantum/quantum.c **** 
 736:quantum/quantum.c **** __attribute__ ((weak))
 737:quantum/quantum.c **** const bool ascii_to_altgr_lut[0x80] PROGMEM = {
 738:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 739:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 740:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 741:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 742:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 743:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 744:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 745:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 746:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 747:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 748:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 749:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 750:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 751:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 752:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 753:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0
 754:quantum/quantum.c **** };
 755:quantum/quantum.c **** 
 756:quantum/quantum.c **** __attribute__ ((weak))
 757:quantum/quantum.c **** const uint8_t ascii_to_keycode_lut[0x80] PROGMEM = {
 758:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 759:quantum/quantum.c ****     KC_BSPC, KC_TAB, KC_ENT, 0, 0, 0, 0, 0,
 760:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 761:quantum/quantum.c ****     0, 0, 0, KC_ESC, 0, 0, 0, 0,
 762:quantum/quantum.c ****     KC_SPC, KC_1, KC_QUOT, KC_3, KC_4, KC_5, KC_7, KC_QUOT,
 763:quantum/quantum.c ****     KC_9, KC_0, KC_8, KC_EQL, KC_COMM, KC_MINS, KC_DOT, KC_SLSH,
 764:quantum/quantum.c ****     KC_0, KC_1, KC_2, KC_3, KC_4, KC_5, KC_6, KC_7,
 765:quantum/quantum.c ****     KC_8, KC_9, KC_SCLN, KC_SCLN, KC_COMM, KC_EQL, KC_DOT, KC_SLSH,
 766:quantum/quantum.c ****     KC_2, KC_A, KC_B, KC_C, KC_D, KC_E, KC_F, KC_G,
 767:quantum/quantum.c ****     KC_H, KC_I, KC_J, KC_K, KC_L, KC_M, KC_N, KC_O,
 768:quantum/quantum.c ****     KC_P, KC_Q, KC_R, KC_S, KC_T, KC_U, KC_V, KC_W,
 769:quantum/quantum.c ****     KC_X, KC_Y, KC_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_6, KC_MINS,
 770:quantum/quantum.c ****     KC_GRV, KC_A, KC_B, KC_C, KC_D, KC_E, KC_F, KC_G,
 771:quantum/quantum.c ****     KC_H, KC_I, KC_J, KC_K, KC_L, KC_M, KC_N, KC_O,
 772:quantum/quantum.c ****     KC_P, KC_Q, KC_R, KC_S, KC_T, KC_U, KC_V, KC_W,
 773:quantum/quantum.c ****     KC_X, KC_Y, KC_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_GRV, KC_DEL
 774:quantum/quantum.c **** };
 775:quantum/quantum.c **** 
 776:quantum/quantum.c **** void send_string(const char *str) {
 777:quantum/quantum.c ****   send_string_with_delay(str, 0);
 778:quantum/quantum.c **** }
 779:quantum/quantum.c **** 
 780:quantum/quantum.c **** void send_string_P(const char *str) {
 781:quantum/quantum.c ****   send_string_with_delay_P(str, 0);
 782:quantum/quantum.c **** }
 783:quantum/quantum.c **** 
 784:quantum/quantum.c **** void send_string_with_delay(const char *str, uint8_t interval) {
 785:quantum/quantum.c ****     while (1) {
 786:quantum/quantum.c ****         char ascii_code = *str;
 787:quantum/quantum.c ****         if (!ascii_code) break;
 788:quantum/quantum.c ****         if (ascii_code == SS_TAP_CODE) {
 789:quantum/quantum.c ****           // tap
 790:quantum/quantum.c ****           uint8_t keycode = *(++str);
 791:quantum/quantum.c ****           register_code(keycode);
 792:quantum/quantum.c ****           unregister_code(keycode);
 793:quantum/quantum.c ****         } else if (ascii_code == SS_DOWN_CODE) {
 794:quantum/quantum.c ****           // down
 795:quantum/quantum.c ****           uint8_t keycode = *(++str);
 796:quantum/quantum.c ****           register_code(keycode);
 797:quantum/quantum.c ****         } else if (ascii_code == SS_UP_CODE) {
 798:quantum/quantum.c ****           // up
 799:quantum/quantum.c ****           uint8_t keycode = *(++str);
 800:quantum/quantum.c ****           unregister_code(keycode);
 801:quantum/quantum.c ****         } else {
 802:quantum/quantum.c ****           send_char(ascii_code);
 803:quantum/quantum.c ****         }
 804:quantum/quantum.c ****         ++str;
 805:quantum/quantum.c ****         // interval
 806:quantum/quantum.c ****         { uint8_t ms = interval; while (ms--) wait_ms(1); }
 807:quantum/quantum.c ****     }
 808:quantum/quantum.c **** }
 809:quantum/quantum.c **** 
 810:quantum/quantum.c **** void send_string_with_delay_P(const char *str, uint8_t interval) {
 811:quantum/quantum.c ****     while (1) {
 812:quantum/quantum.c ****         char ascii_code = pgm_read_byte(str);
 813:quantum/quantum.c ****         if (!ascii_code) break;
 814:quantum/quantum.c ****         if (ascii_code == SS_TAP_CODE) {
 815:quantum/quantum.c ****           // tap
 816:quantum/quantum.c ****           uint8_t keycode = pgm_read_byte(++str);
 817:quantum/quantum.c ****           register_code(keycode);
 818:quantum/quantum.c ****           unregister_code(keycode);
 819:quantum/quantum.c ****         } else if (ascii_code == SS_DOWN_CODE) {
 820:quantum/quantum.c ****           // down
 821:quantum/quantum.c ****           uint8_t keycode = pgm_read_byte(++str);
 822:quantum/quantum.c ****           register_code(keycode);
 823:quantum/quantum.c ****         } else if (ascii_code == SS_UP_CODE) {
 824:quantum/quantum.c ****           // up
 825:quantum/quantum.c ****           uint8_t keycode = pgm_read_byte(++str);
 826:quantum/quantum.c ****           unregister_code(keycode);
 827:quantum/quantum.c ****         } else {
 828:quantum/quantum.c ****           send_char(ascii_code);
 829:quantum/quantum.c ****         }
 830:quantum/quantum.c ****         ++str;
 831:quantum/quantum.c ****         // interval
 832:quantum/quantum.c ****         { uint8_t ms = interval; while (ms--) wait_ms(1); }
 833:quantum/quantum.c ****     }
 834:quantum/quantum.c **** }
 835:quantum/quantum.c **** 
 836:quantum/quantum.c **** void send_char(char ascii_code) {
 594               		.loc 1 836 33 is_stmt 1 view -0
 595               		.cfi_startproc
 596               		.loc 1 836 33 is_stmt 0 view .LVU114
 597 0000 1F93      		push r17
 598               	.LCFI15:
 599               		.cfi_def_cfa_offset 3
 600               		.cfi_offset 17, -2
 601 0002 CF93      		push r28
 602               	.LCFI16:
 603               		.cfi_def_cfa_offset 4
 604               		.cfi_offset 28, -3
 605 0004 DF93      		push r29
 606               	.LCFI17:
 607               		.cfi_def_cfa_offset 5
 608               		.cfi_offset 29, -4
 609               	/* prologue: function */
 610               	/* frame size = 0 */
 611               	/* stack size = 3 */
 612               	.L__stack_usage = 3
 837:quantum/quantum.c ****   uint8_t keycode = pgm_read_byte(&ascii_to_keycode_lut[(uint8_t)ascii_code]);
 613               		.loc 1 837 3 is_stmt 1 view .LVU115
 614               	.LBB26:
 615               		.loc 1 837 21 view .LVU116
 616 0006 90E0      		ldi r25,0
 617               	.LVL54:
 618               		.loc 1 837 21 view .LVU117
 619               		.loc 1 837 21 view .LVU118
 620 0008 FC01      		movw r30,r24
 621 000a E050      		subi r30,lo8(-(ascii_to_keycode_lut))
 622 000c F040      		sbci r31,hi8(-(ascii_to_keycode_lut))
 623               	.LVL55:
 624               		.loc 1 837 21 is_stmt 0 view .LVU119
 625               	/* #APP */
 626               	 ;  837 "quantum/quantum.c" 1
 627 000e 1491      		lpm r17, Z
 628               		
 629               	 ;  0 "" 2
 630               	.LVL56:
 631               		.loc 1 837 21 is_stmt 1 view .LVU120
 632               		.loc 1 837 21 is_stmt 0 view .LVU121
 633               	/* #NOAPP */
 634               	.LBE26:
 838:quantum/quantum.c ****   bool is_shifted = pgm_read_byte(&ascii_to_shift_lut[(uint8_t)ascii_code]);
 635               		.loc 1 838 3 is_stmt 1 view .LVU122
 636               	.LBB27:
 637               		.loc 1 838 21 view .LVU123
 638               		.loc 1 838 21 view .LVU124
 639               		.loc 1 838 21 view .LVU125
 640 0010 FC01      		movw r30,r24
 641               	.LVL57:
 642               		.loc 1 838 21 is_stmt 0 view .LVU126
 643 0012 E050      		subi r30,lo8(-(ascii_to_shift_lut))
 644 0014 F040      		sbci r31,hi8(-(ascii_to_shift_lut))
 645               	.LVL58:
 646               		.loc 1 838 21 view .LVU127
 647               	/* #APP */
 648               	 ;  838 "quantum/quantum.c" 1
 649 0016 D491      		lpm r29, Z
 650               		
 651               	 ;  0 "" 2
 652               	.LVL59:
 653               		.loc 1 838 21 is_stmt 1 view .LVU128
 654               		.loc 1 838 21 is_stmt 0 view .LVU129
 655               	/* #NOAPP */
 656               	.LBE27:
 839:quantum/quantum.c ****   bool is_altgred = pgm_read_byte(&ascii_to_altgr_lut[(uint8_t)ascii_code]);
 657               		.loc 1 839 3 is_stmt 1 view .LVU130
 658               	.LBB28:
 659               		.loc 1 839 21 view .LVU131
 660               		.loc 1 839 21 view .LVU132
 661               		.loc 1 839 21 view .LVU133
 662 0018 8050      		subi r24,lo8(-(ascii_to_altgr_lut))
 663 001a 9040      		sbci r25,hi8(-(ascii_to_altgr_lut))
 664               	.LVL60:
 665               		.loc 1 839 21 is_stmt 0 view .LVU134
 666 001c FC01      		movw r30,r24
 667               	.LVL61:
 668               		.loc 1 839 21 view .LVU135
 669               	/* #APP */
 670               	 ;  839 "quantum/quantum.c" 1
 671 001e C491      		lpm r28, Z
 672               		
 673               	 ;  0 "" 2
 674               	.LVL62:
 675               		.loc 1 839 21 is_stmt 1 view .LVU136
 676               		.loc 1 839 21 is_stmt 0 view .LVU137
 677               	/* #NOAPP */
 678               	.LBE28:
 840:quantum/quantum.c **** 
 841:quantum/quantum.c ****   if (is_shifted) {
 679               		.loc 1 841 3 is_stmt 1 view .LVU138
 680               		.loc 1 841 6 is_stmt 0 view .LVU139
 681 0020 DD23      		tst r29
 682 0022 01F0      		breq .L45
 842:quantum/quantum.c ****     register_code(KC_LSFT);
 683               		.loc 1 842 5 is_stmt 1 view .LVU140
 684 0024 81EE      		ldi r24,lo8(-31)
 685               	.LVL63:
 686               		.loc 1 842 5 is_stmt 0 view .LVU141
 687 0026 0E94 0000 		call register_code
 688               	.LVL64:
 689               	.L45:
 843:quantum/quantum.c ****   }
 844:quantum/quantum.c ****   if (is_altgred) {
 690               		.loc 1 844 3 is_stmt 1 view .LVU142
 691               		.loc 1 844 6 is_stmt 0 view .LVU143
 692 002a CC23      		tst r28
 693 002c 01F0      		breq .L46
 845:quantum/quantum.c ****     register_code(KC_RALT);
 694               		.loc 1 845 5 is_stmt 1 view .LVU144
 695 002e 86EE      		ldi r24,lo8(-26)
 696 0030 0E94 0000 		call register_code
 697               	.LVL65:
 698               	.L46:
 846:quantum/quantum.c ****   }
 847:quantum/quantum.c ****   tap_code(keycode);
 699               		.loc 1 847 3 view .LVU145
 700 0034 812F      		mov r24,r17
 701 0036 0E94 0000 		call tap_code
 702               	.LVL66:
 848:quantum/quantum.c ****   if (is_altgred) {
 703               		.loc 1 848 3 view .LVU146
 704               		.loc 1 848 6 is_stmt 0 view .LVU147
 705 003a CC23      		tst r28
 706 003c 01F0      		breq .L47
 849:quantum/quantum.c ****     unregister_code(KC_RALT);
 707               		.loc 1 849 5 is_stmt 1 view .LVU148
 708 003e 86EE      		ldi r24,lo8(-26)
 709 0040 0E94 0000 		call unregister_code
 710               	.LVL67:
 711               	.L47:
 850:quantum/quantum.c ****   }
 851:quantum/quantum.c ****   if (is_shifted) {
 712               		.loc 1 851 3 view .LVU149
 713               		.loc 1 851 6 is_stmt 0 view .LVU150
 714 0044 DD23      		tst r29
 715 0046 01F0      		breq .L44
 852:quantum/quantum.c ****     unregister_code(KC_LSFT);
 716               		.loc 1 852 5 is_stmt 1 view .LVU151
 717 0048 81EE      		ldi r24,lo8(-31)
 718               	/* epilogue start */
 853:quantum/quantum.c ****   }
 854:quantum/quantum.c **** }
 719               		.loc 1 854 1 is_stmt 0 view .LVU152
 720 004a DF91      		pop r29
 721               	.LVL68:
 722               		.loc 1 854 1 view .LVU153
 723 004c CF91      		pop r28
 724               	.LVL69:
 725               		.loc 1 854 1 view .LVU154
 726 004e 1F91      		pop r17
 727               	.LVL70:
 852:quantum/quantum.c ****     unregister_code(KC_LSFT);
 728               		.loc 1 852 5 view .LVU155
 729 0050 0C94 0000 		jmp unregister_code
 730               	.LVL71:
 731               	.L44:
 732               	/* epilogue start */
 733               		.loc 1 854 1 view .LVU156
 734 0054 DF91      		pop r29
 735               	.LVL72:
 736               		.loc 1 854 1 view .LVU157
 737 0056 CF91      		pop r28
 738               	.LVL73:
 739               		.loc 1 854 1 view .LVU158
 740 0058 1F91      		pop r17
 741               	.LVL74:
 742               		.loc 1 854 1 view .LVU159
 743 005a 0895      		ret
 744               		.cfi_endproc
 745               	.LFE130:
 747               		.section	.text.send_string_with_delay,"ax",@progbits
 748               	.global	send_string_with_delay
 750               	send_string_with_delay:
 751               	.LVL75:
 752               	.LFB128:
 784:quantum/quantum.c ****     while (1) {
 753               		.loc 1 784 64 is_stmt 1 view -0
 754               		.cfi_startproc
 784:quantum/quantum.c ****     while (1) {
 755               		.loc 1 784 64 is_stmt 0 view .LVU161
 756 0000 FF92      		push r15
 757               	.LCFI18:
 758               		.cfi_def_cfa_offset 3
 759               		.cfi_offset 15, -2
 760 0002 0F93      		push r16
 761               	.LCFI19:
 762               		.cfi_def_cfa_offset 4
 763               		.cfi_offset 16, -3
 764 0004 1F93      		push r17
 765               	.LCFI20:
 766               		.cfi_def_cfa_offset 5
 767               		.cfi_offset 17, -4
 768 0006 CF93      		push r28
 769               	.LCFI21:
 770               		.cfi_def_cfa_offset 6
 771               		.cfi_offset 28, -5
 772 0008 DF93      		push r29
 773               	.LCFI22:
 774               		.cfi_def_cfa_offset 7
 775               		.cfi_offset 29, -6
 776               	/* prologue: function */
 777               	/* frame size = 0 */
 778               	/* stack size = 5 */
 779               	.L__stack_usage = 5
 780 000a EC01      		movw r28,r24
 781 000c F62E      		mov r15,r22
 782               	.LVL76:
 783               	.L66:
 785:quantum/quantum.c ****         char ascii_code = *str;
 784               		.loc 1 785 5 is_stmt 1 view .LVU162
 785               	.LBB29:
 786:quantum/quantum.c ****         if (!ascii_code) break;
 786               		.loc 1 786 9 view .LVU163
 786:quantum/quantum.c ****         if (!ascii_code) break;
 787               		.loc 1 786 14 is_stmt 0 view .LVU164
 788 000e 8881      		ld r24,Y
 789               	.LVL77:
 787:quantum/quantum.c ****         if (ascii_code == SS_TAP_CODE) {
 790               		.loc 1 787 9 is_stmt 1 view .LVU165
 787:quantum/quantum.c ****         if (ascii_code == SS_TAP_CODE) {
 791               		.loc 1 787 12 is_stmt 0 view .LVU166
 792 0010 8823      		tst r24
 793 0012 01F0      		breq .L58
 788:quantum/quantum.c ****           // tap
 794               		.loc 1 788 9 is_stmt 1 view .LVU167
 795 0014 8E01      		movw r16,r28
 796 0016 0F5F      		subi r16,-1
 797 0018 1F4F      		sbci r17,-1
 788:quantum/quantum.c ****           // tap
 798               		.loc 1 788 12 is_stmt 0 view .LVU168
 799 001a 8130      		cpi r24,lo8(1)
 800 001c 01F4      		brne .L60
 801               	.LBB30:
 790:quantum/quantum.c ****           register_code(keycode);
 802               		.loc 1 790 11 is_stmt 1 view .LVU169
 803               	.LVL78:
 790:quantum/quantum.c ****           register_code(keycode);
 804               		.loc 1 790 19 is_stmt 0 view .LVU170
 805 001e C981      		ldd r28,Y+1
 806               	.LVL79:
 791:quantum/quantum.c ****           unregister_code(keycode);
 807               		.loc 1 791 11 is_stmt 1 view .LVU171
 808 0020 8C2F      		mov r24,r28
 809               	.LVL80:
 791:quantum/quantum.c ****           unregister_code(keycode);
 810               		.loc 1 791 11 is_stmt 0 view .LVU172
 811 0022 0E94 0000 		call register_code
 812               	.LVL81:
 792:quantum/quantum.c ****         } else if (ascii_code == SS_DOWN_CODE) {
 813               		.loc 1 792 11 is_stmt 1 view .LVU173
 814 0026 8C2F      		mov r24,r28
 815               	.LVL82:
 816               	.L67:
 792:quantum/quantum.c ****         } else if (ascii_code == SS_DOWN_CODE) {
 817               		.loc 1 792 11 is_stmt 0 view .LVU174
 818               	.LBE30:
 819               	.LBB31:
 800:quantum/quantum.c ****         } else {
 820               		.loc 1 800 11 view .LVU175
 821 0028 0E94 0000 		call unregister_code
 822               	.LVL83:
 823               	.LBE31:
 824 002c 00C0      		rjmp .L61
 825               	.LVL84:
 826               	.L60:
 793:quantum/quantum.c ****           // down
 827               		.loc 1 793 16 is_stmt 1 view .LVU176
 793:quantum/quantum.c ****           // down
 828               		.loc 1 793 19 is_stmt 0 view .LVU177
 829 002e 8230      		cpi r24,lo8(2)
 830 0030 01F4      		brne .L62
 831               	.LBB32:
 795:quantum/quantum.c ****           register_code(keycode);
 832               		.loc 1 795 11 is_stmt 1 view .LVU178
 833               	.LVL85:
 796:quantum/quantum.c ****         } else if (ascii_code == SS_UP_CODE) {
 834               		.loc 1 796 11 view .LVU179
 835 0032 8981      		ldd r24,Y+1
 836               	.LVL86:
 796:quantum/quantum.c ****         } else if (ascii_code == SS_UP_CODE) {
 837               		.loc 1 796 11 is_stmt 0 view .LVU180
 838 0034 0E94 0000 		call register_code
 839               	.LVL87:
 840               	.L61:
 796:quantum/quantum.c ****         } else if (ascii_code == SS_UP_CODE) {
 841               		.loc 1 796 11 view .LVU181
 842               	.LBE32:
 804:quantum/quantum.c ****         // interval
 843               		.loc 1 804 9 is_stmt 1 view .LVU182
 844 0038 E801      		movw r28,r16
 845 003a 2196      		adiw r28,1
 846               	.LVL88:
 847               	.LBB33:
 806:quantum/quantum.c ****     }
 848               		.loc 1 806 11 view .LVU183
 806:quantum/quantum.c ****     }
 849               		.loc 1 806 34 view .LVU184
 806:quantum/quantum.c ****     }
 850               		.loc 1 806 19 is_stmt 0 view .LVU185
 851 003c 8F2D      		mov r24,r15
 852               	.LVL89:
 853               	.L64:
 806:quantum/quantum.c ****     }
 854               		.loc 1 806 43 discriminator 1 view .LVU186
 855               	.LVL90:
 856 003e 8150      		subi r24,1
 857 0040 00F0      		brcs .L66
 806:quantum/quantum.c ****     }
 858               		.loc 1 806 47 is_stmt 1 view .LVU187
 859               	.LBB34:
 860               	.LBI34:
 861               		.file 2 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** _delay_ms(double __ms)
 862               		.loc 2 166 1 view .LVU188
 863               	.LBB35:
 167:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	double __tmp ;
 864               		.loc 2 168 2 view .LVU189
 169:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 865               		.loc 2 172 2 view .LVU190
 173:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 866               		.loc 2 173 2 view .LVU191
 174:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 867               		.loc 2 174 2 view .LVU192
 175:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 868               		.loc 2 184 3 view .LVU193
 185:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 869               		.loc 2 187 2 view .LVU194
 870 0042 EFE9      		ldi r30,lo8(3999)
 871 0044 FFE0      		ldi r31,hi8(3999)
 872 0046 3197      	1:	sbiw r30,1
 873 0048 01F4      		brne 1b
 874 004a 00C0      		rjmp .
 875 004c 0000      		nop
 876 004e 00C0      		rjmp .L64
 877               	.LVL91:
 878               	.L62:
 879               		.loc 2 187 2 is_stmt 0 view .LVU195
 880               	.LBE35:
 881               	.LBE34:
 882               	.LBE33:
 797:quantum/quantum.c ****           // up
 883               		.loc 1 797 16 is_stmt 1 view .LVU196
 797:quantum/quantum.c ****           // up
 884               		.loc 1 797 19 is_stmt 0 view .LVU197
 885 0050 8330      		cpi r24,lo8(3)
 886 0052 01F4      		brne .L63
 887               	.LBB36:
 799:quantum/quantum.c ****           unregister_code(keycode);
 888               		.loc 1 799 11 is_stmt 1 view .LVU198
 889               	.LVL92:
 800:quantum/quantum.c ****         } else {
 890               		.loc 1 800 11 view .LVU199
 891 0054 8981      		ldd r24,Y+1
 892               	.LVL93:
 800:quantum/quantum.c ****         } else {
 893               		.loc 1 800 11 is_stmt 0 view .LVU200
 894 0056 00C0      		rjmp .L67
 895               	.LVL94:
 896               	.L63:
 800:quantum/quantum.c ****         } else {
 897               		.loc 1 800 11 view .LVU201
 898               	.LBE36:
 802:quantum/quantum.c ****         }
 899               		.loc 1 802 11 is_stmt 1 view .LVU202
 900 0058 0E94 0000 		call send_char
 901               	.LVL95:
 802:quantum/quantum.c ****         }
 902               		.loc 1 802 11 is_stmt 0 view .LVU203
 903 005c 8E01      		movw r16,r28
 904 005e 00C0      		rjmp .L61
 905               	.LVL96:
 906               	.L58:
 907               	/* epilogue start */
 802:quantum/quantum.c ****         }
 908               		.loc 1 802 11 view .LVU204
 909               	.LBE29:
 808:quantum/quantum.c **** 
 910               		.loc 1 808 1 view .LVU205
 911 0060 DF91      		pop r29
 912 0062 CF91      		pop r28
 913               	.LVL97:
 808:quantum/quantum.c **** 
 914               		.loc 1 808 1 view .LVU206
 915 0064 1F91      		pop r17
 916 0066 0F91      		pop r16
 917 0068 FF90      		pop r15
 918               	.LVL98:
 808:quantum/quantum.c **** 
 919               		.loc 1 808 1 view .LVU207
 920 006a 0895      		ret
 921               		.cfi_endproc
 922               	.LFE128:
 924               		.section	.text.send_string,"ax",@progbits
 925               	.global	send_string
 927               	send_string:
 928               	.LVL99:
 929               	.LFB126:
 776:quantum/quantum.c ****   send_string_with_delay(str, 0);
 930               		.loc 1 776 35 is_stmt 1 view -0
 931               		.cfi_startproc
 932               	/* prologue: function */
 933               	/* frame size = 0 */
 934               	/* stack size = 0 */
 935               	.L__stack_usage = 0
 777:quantum/quantum.c **** }
 936               		.loc 1 777 3 view .LVU209
 937 0000 60E0      		ldi r22,0
 938 0002 0C94 0000 		jmp send_string_with_delay
 939               	.LVL100:
 777:quantum/quantum.c **** }
 940               		.loc 1 777 3 is_stmt 0 view .LVU210
 941               		.cfi_endproc
 942               	.LFE126:
 944               		.section	.text.send_string_with_delay_P,"ax",@progbits
 945               	.global	send_string_with_delay_P
 947               	send_string_with_delay_P:
 948               	.LVL101:
 949               	.LFB129:
 810:quantum/quantum.c ****     while (1) {
 950               		.loc 1 810 66 is_stmt 1 view -0
 951               		.cfi_startproc
 810:quantum/quantum.c ****     while (1) {
 952               		.loc 1 810 66 is_stmt 0 view .LVU212
 953 0000 FF92      		push r15
 954               	.LCFI23:
 955               		.cfi_def_cfa_offset 3
 956               		.cfi_offset 15, -2
 957 0002 0F93      		push r16
 958               	.LCFI24:
 959               		.cfi_def_cfa_offset 4
 960               		.cfi_offset 16, -3
 961 0004 1F93      		push r17
 962               	.LCFI25:
 963               		.cfi_def_cfa_offset 5
 964               		.cfi_offset 17, -4
 965 0006 CF93      		push r28
 966               	.LCFI26:
 967               		.cfi_def_cfa_offset 6
 968               		.cfi_offset 28, -5
 969 0008 DF93      		push r29
 970               	.LCFI27:
 971               		.cfi_def_cfa_offset 7
 972               		.cfi_offset 29, -6
 973               	/* prologue: function */
 974               	/* frame size = 0 */
 975               	/* stack size = 5 */
 976               	.L__stack_usage = 5
 977 000a 8C01      		movw r16,r24
 978 000c F62E      		mov r15,r22
 979               	.LVL102:
 980               	.L77:
 811:quantum/quantum.c ****         char ascii_code = pgm_read_byte(str);
 981               		.loc 1 811 5 is_stmt 1 view .LVU213
 982               	.LBB37:
 812:quantum/quantum.c ****         if (!ascii_code) break;
 983               		.loc 1 812 9 view .LVU214
 984               	.LBB38:
 812:quantum/quantum.c ****         if (!ascii_code) break;
 985               		.loc 1 812 27 view .LVU215
 812:quantum/quantum.c ****         if (!ascii_code) break;
 986               		.loc 1 812 27 view .LVU216
 812:quantum/quantum.c ****         if (!ascii_code) break;
 987               		.loc 1 812 27 view .LVU217
 988 000e F801      		movw r30,r16
 989               	/* #APP */
 990               	 ;  812 "quantum/quantum.c" 1
 991 0010 8491      		lpm r24, Z
 992               		
 993               	 ;  0 "" 2
 994               	.LVL103:
 812:quantum/quantum.c ****         if (!ascii_code) break;
 995               		.loc 1 812 27 view .LVU218
 812:quantum/quantum.c ****         if (!ascii_code) break;
 996               		.loc 1 812 27 is_stmt 0 view .LVU219
 997               	/* #NOAPP */
 998               	.LBE38:
 813:quantum/quantum.c ****         if (ascii_code == SS_TAP_CODE) {
 999               		.loc 1 813 9 is_stmt 1 view .LVU220
 813:quantum/quantum.c ****         if (ascii_code == SS_TAP_CODE) {
 1000               		.loc 1 813 12 is_stmt 0 view .LVU221
 1001 0012 8823      		tst r24
 1002 0014 01F0      		breq .L69
 814:quantum/quantum.c ****           // tap
 1003               		.loc 1 814 9 is_stmt 1 view .LVU222
 1004 0016 E801      		movw r28,r16
 1005 0018 2196      		adiw r28,1
 814:quantum/quantum.c ****           // tap
 1006               		.loc 1 814 12 is_stmt 0 view .LVU223
 1007 001a 8130      		cpi r24,lo8(1)
 1008 001c 01F4      		brne .L71
 1009               	.LBB39:
 816:quantum/quantum.c ****           register_code(keycode);
 1010               		.loc 1 816 11 is_stmt 1 view .LVU224
 1011               	.LBB40:
 816:quantum/quantum.c ****           register_code(keycode);
 1012               		.loc 1 816 29 view .LVU225
 1013               	.LVL104:
 816:quantum/quantum.c ****           register_code(keycode);
 1014               		.loc 1 816 29 view .LVU226
 816:quantum/quantum.c ****           register_code(keycode);
 1015               		.loc 1 816 29 view .LVU227
 1016 001e FE01      		movw r30,r28
 1017               	/* #APP */
 1018               	 ;  816 "quantum/quantum.c" 1
 1019 0020 1491      		lpm r17, Z
 1020               		
 1021               	 ;  0 "" 2
 1022               	.LVL105:
 816:quantum/quantum.c ****           register_code(keycode);
 1023               		.loc 1 816 29 view .LVU228
 816:quantum/quantum.c ****           register_code(keycode);
 1024               		.loc 1 816 29 is_stmt 0 view .LVU229
 1025               	/* #NOAPP */
 1026               	.LBE40:
 817:quantum/quantum.c ****           unregister_code(keycode);
 1027               		.loc 1 817 11 is_stmt 1 view .LVU230
 1028 0022 812F      		mov r24,r17
 1029               	.LVL106:
 817:quantum/quantum.c ****           unregister_code(keycode);
 1030               		.loc 1 817 11 is_stmt 0 view .LVU231
 1031 0024 0E94 0000 		call register_code
 1032               	.LVL107:
 818:quantum/quantum.c ****         } else if (ascii_code == SS_DOWN_CODE) {
 1033               		.loc 1 818 11 is_stmt 1 view .LVU232
 1034 0028 812F      		mov r24,r17
 1035               	.LVL108:
 1036               	.L78:
 818:quantum/quantum.c ****         } else if (ascii_code == SS_DOWN_CODE) {
 1037               		.loc 1 818 11 is_stmt 0 view .LVU233
 1038               	.LBE39:
 1039               	.LBB41:
 1040               	.LBB42:
 825:quantum/quantum.c ****           unregister_code(keycode);
 1041               		.loc 1 825 29 is_stmt 1 view .LVU234
 825:quantum/quantum.c ****           unregister_code(keycode);
 1042               		.loc 1 825 29 is_stmt 0 view .LVU235
 1043               	.LBE42:
 826:quantum/quantum.c ****         } else {
 1044               		.loc 1 826 11 is_stmt 1 view .LVU236
 1045 002a 0E94 0000 		call unregister_code
 1046               	.LVL109:
 826:quantum/quantum.c ****         } else {
 1047               		.loc 1 826 11 is_stmt 0 view .LVU237
 1048               	.LBE41:
 1049 002e 00C0      		rjmp .L72
 1050               	.LVL110:
 1051               	.L71:
 819:quantum/quantum.c ****           // down
 1052               		.loc 1 819 16 is_stmt 1 view .LVU238
 819:quantum/quantum.c ****           // down
 1053               		.loc 1 819 19 is_stmt 0 view .LVU239
 1054 0030 8230      		cpi r24,lo8(2)
 1055 0032 01F4      		brne .L73
 1056               	.LBB44:
 821:quantum/quantum.c ****           register_code(keycode);
 1057               		.loc 1 821 11 is_stmt 1 view .LVU240
 1058               	.LBB45:
 821:quantum/quantum.c ****           register_code(keycode);
 1059               		.loc 1 821 29 view .LVU241
 1060               	.LVL111:
 821:quantum/quantum.c ****           register_code(keycode);
 1061               		.loc 1 821 29 view .LVU242
 821:quantum/quantum.c ****           register_code(keycode);
 1062               		.loc 1 821 29 view .LVU243
 1063 0034 FE01      		movw r30,r28
 1064               	/* #APP */
 1065               	 ;  821 "quantum/quantum.c" 1
 1066 0036 8491      		lpm r24, Z
 1067               		
 1068               	 ;  0 "" 2
 1069               	.LVL112:
 821:quantum/quantum.c ****           register_code(keycode);
 1070               		.loc 1 821 29 view .LVU244
 821:quantum/quantum.c ****           register_code(keycode);
 1071               		.loc 1 821 29 is_stmt 0 view .LVU245
 1072               	/* #NOAPP */
 1073               	.LBE45:
 822:quantum/quantum.c ****         } else if (ascii_code == SS_UP_CODE) {
 1074               		.loc 1 822 11 is_stmt 1 view .LVU246
 1075 0038 0E94 0000 		call register_code
 1076               	.LVL113:
 1077               	.L72:
 822:quantum/quantum.c ****         } else if (ascii_code == SS_UP_CODE) {
 1078               		.loc 1 822 11 is_stmt 0 view .LVU247
 1079               	.LBE44:
 830:quantum/quantum.c ****         // interval
 1080               		.loc 1 830 9 is_stmt 1 view .LVU248
 830:quantum/quantum.c ****         // interval
 1081               		.loc 1 830 9 is_stmt 0 view .LVU249
 1082 003c 8E01      		movw r16,r28
 1083 003e 0F5F      		subi r16,-1
 1084 0040 1F4F      		sbci r17,-1
 1085               	.LVL114:
 1086               	.LBB46:
 832:quantum/quantum.c ****     }
 1087               		.loc 1 832 11 is_stmt 1 view .LVU250
 832:quantum/quantum.c ****     }
 1088               		.loc 1 832 34 view .LVU251
 832:quantum/quantum.c ****     }
 1089               		.loc 1 832 19 is_stmt 0 view .LVU252
 1090 0042 8F2D      		mov r24,r15
 1091               	.LVL115:
 1092               	.L75:
 832:quantum/quantum.c ****     }
 1093               		.loc 1 832 43 discriminator 1 view .LVU253
 1094               	.LVL116:
 1095 0044 8150      		subi r24,1
 1096 0046 00F0      		brcs .L77
 832:quantum/quantum.c ****     }
 1097               		.loc 1 832 47 is_stmt 1 view .LVU254
 1098               	.LBB47:
 1099               	.LBI47:
 166:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** {
 1100               		.loc 2 166 1 view .LVU255
 1101               	.LBB48:
 168:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 1102               		.loc 2 168 2 view .LVU256
 172:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 1103               		.loc 2 172 2 view .LVU257
 173:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 1104               		.loc 2 173 2 view .LVU258
 174:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 1105               		.loc 2 174 2 view .LVU259
 184:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#endif
 1106               		.loc 2 184 3 view .LVU260
 1107               		.loc 2 187 2 view .LVU261
 1108 0048 EFE9      		ldi r30,lo8(3999)
 1109 004a FFE0      		ldi r31,hi8(3999)
 1110 004c 3197      	1:	sbiw r30,1
 1111 004e 01F4      		brne 1b
 1112 0050 00C0      		rjmp .
 1113 0052 0000      		nop
 1114 0054 00C0      		rjmp .L75
 1115               	.LVL117:
 1116               	.L73:
 1117               		.loc 2 187 2 is_stmt 0 view .LVU262
 1118               	.LBE48:
 1119               	.LBE47:
 1120               	.LBE46:
 823:quantum/quantum.c ****           // up
 1121               		.loc 1 823 16 is_stmt 1 view .LVU263
 823:quantum/quantum.c ****           // up
 1122               		.loc 1 823 19 is_stmt 0 view .LVU264
 1123 0056 8330      		cpi r24,lo8(3)
 1124 0058 01F4      		brne .L74
 1125               	.LBB49:
 825:quantum/quantum.c ****           unregister_code(keycode);
 1126               		.loc 1 825 11 is_stmt 1 view .LVU265
 1127               	.LBB43:
 825:quantum/quantum.c ****           unregister_code(keycode);
 1128               		.loc 1 825 29 view .LVU266
 1129               	.LVL118:
 825:quantum/quantum.c ****           unregister_code(keycode);
 1130               		.loc 1 825 29 view .LVU267
 825:quantum/quantum.c ****           unregister_code(keycode);
 1131               		.loc 1 825 29 view .LVU268
 1132 005a FE01      		movw r30,r28
 1133               	/* #APP */
 1134               	 ;  825 "quantum/quantum.c" 1
 1135 005c 8491      		lpm r24, Z
 1136               		
 1137               	 ;  0 "" 2
 1138               	.LVL119:
 825:quantum/quantum.c ****           unregister_code(keycode);
 1139               		.loc 1 825 29 is_stmt 0 view .LVU269
 1140               	/* #NOAPP */
 1141 005e 00C0      		rjmp .L78
 1142               	.LVL120:
 1143               	.L74:
 825:quantum/quantum.c ****           unregister_code(keycode);
 1144               		.loc 1 825 29 view .LVU270
 1145               	.LBE43:
 1146               	.LBE49:
 828:quantum/quantum.c ****         }
 1147               		.loc 1 828 11 is_stmt 1 view .LVU271
 1148 0060 0E94 0000 		call send_char
 1149               	.LVL121:
 828:quantum/quantum.c ****         }
 1150               		.loc 1 828 11 is_stmt 0 view .LVU272
 1151 0064 E801      		movw r28,r16
 1152 0066 00C0      		rjmp .L72
 1153               	.LVL122:
 1154               	.L69:
 1155               	/* epilogue start */
 828:quantum/quantum.c ****         }
 1156               		.loc 1 828 11 view .LVU273
 1157               	.LBE37:
 834:quantum/quantum.c **** 
 1158               		.loc 1 834 1 view .LVU274
 1159 0068 DF91      		pop r29
 1160 006a CF91      		pop r28
 1161 006c 1F91      		pop r17
 1162 006e 0F91      		pop r16
 1163               	.LVL123:
 834:quantum/quantum.c **** 
 1164               		.loc 1 834 1 view .LVU275
 1165 0070 FF90      		pop r15
 1166               	.LVL124:
 834:quantum/quantum.c **** 
 1167               		.loc 1 834 1 view .LVU276
 1168 0072 0895      		ret
 1169               		.cfi_endproc
 1170               	.LFE129:
 1172               		.section	.text.send_string_P,"ax",@progbits
 1173               	.global	send_string_P
 1175               	send_string_P:
 1176               	.LVL125:
 1177               	.LFB127:
 780:quantum/quantum.c ****   send_string_with_delay_P(str, 0);
 1178               		.loc 1 780 37 is_stmt 1 view -0
 1179               		.cfi_startproc
 1180               	/* prologue: function */
 1181               	/* frame size = 0 */
 1182               	/* stack size = 0 */
 1183               	.L__stack_usage = 0
 781:quantum/quantum.c **** }
 1184               		.loc 1 781 3 view .LVU278
 1185 0000 60E0      		ldi r22,0
 1186 0002 0C94 0000 		jmp send_string_with_delay_P
 1187               	.LVL126:
 781:quantum/quantum.c **** }
 1188               		.loc 1 781 3 is_stmt 0 view .LVU279
 1189               		.cfi_endproc
 1190               	.LFE127:
 1192               		.section	.text.set_single_persistent_default_layer,"ax",@progbits
 1193               	.global	set_single_persistent_default_layer
 1195               	set_single_persistent_default_layer:
 1196               	.LVL127:
 1197               	.LFB131:
 855:quantum/quantum.c **** 
 856:quantum/quantum.c **** void set_single_persistent_default_layer(uint8_t default_layer) {
 1198               		.loc 1 856 65 is_stmt 1 view -0
 1199               		.cfi_startproc
 1200               		.loc 1 856 65 is_stmt 0 view .LVU281
 1201 0000 CF93      		push r28
 1202               	.LCFI28:
 1203               		.cfi_def_cfa_offset 3
 1204               		.cfi_offset 28, -2
 1205 0002 DF93      		push r29
 1206               	.LCFI29:
 1207               		.cfi_def_cfa_offset 4
 1208               		.cfi_offset 29, -3
 1209               	/* prologue: function */
 1210               	/* frame size = 0 */
 1211               	/* stack size = 2 */
 1212               	.L__stack_usage = 2
 857:quantum/quantum.c ****   #if defined(AUDIO_ENABLE) && defined(DEFAULT_LAYER_SONGS)
 858:quantum/quantum.c ****     PLAY_SONG(default_layer_songs[default_layer]);
 859:quantum/quantum.c ****   #endif
 860:quantum/quantum.c ****   eeconfig_update_default_layer(1U<<default_layer);
 1213               		.loc 1 860 3 is_stmt 1 view .LVU282
 1214               		.loc 1 860 35 is_stmt 0 view .LVU283
 1215 0004 C1E0      		ldi r28,lo8(1)
 1216 0006 D0E0      		ldi r29,0
 1217 0008 00C0      		rjmp 2f
 1218               		1:
 1219 000a CC0F      		lsl r28
 1220 000c DD1F      		rol r29
 1221               		2:
 1222 000e 8A95      		dec r24
 1223 0010 02F4      		brpl 1b
 1224               		.loc 1 860 3 view .LVU284
 1225 0012 8C2F      		mov r24,r28
 1226               	.LVL128:
 1227               		.loc 1 860 3 view .LVU285
 1228 0014 0E94 0000 		call eeconfig_update_default_layer
 1229               	.LVL129:
 861:quantum/quantum.c ****   default_layer_set(1U<<default_layer);
 1230               		.loc 1 861 3 is_stmt 1 view .LVU286
 1231 0018 BE01      		movw r22,r28
 1232 001a 90E0      		ldi r25,0
 1233 001c 80E0      		ldi r24,0
 1234               	/* epilogue start */
 862:quantum/quantum.c **** }
 1235               		.loc 1 862 1 is_stmt 0 view .LVU287
 1236 001e DF91      		pop r29
 1237 0020 CF91      		pop r28
 861:quantum/quantum.c ****   default_layer_set(1U<<default_layer);
 1238               		.loc 1 861 3 view .LVU288
 1239 0022 0C94 0000 		jmp default_layer_set
 1240               	.LVL130:
 1241               		.cfi_endproc
 1242               	.LFE131:
 1244               		.section	.text.update_tri_layer_state,"ax",@progbits
 1245               	.global	update_tri_layer_state
 1247               	update_tri_layer_state:
 1248               	.LVL131:
 1249               	.LFB132:
 863:quantum/quantum.c **** 
 864:quantum/quantum.c **** uint32_t update_tri_layer_state(uint32_t state, uint8_t layer1, uint8_t layer2, uint8_t layer3) {
 1250               		.loc 1 864 97 is_stmt 1 view -0
 1251               		.cfi_startproc
 1252               		.loc 1 864 97 is_stmt 0 view .LVU290
 1253 0000 8F92      		push r8
 1254               	.LCFI30:
 1255               		.cfi_def_cfa_offset 3
 1256               		.cfi_offset 8, -2
 1257 0002 9F92      		push r9
 1258               	.LCFI31:
 1259               		.cfi_def_cfa_offset 4
 1260               		.cfi_offset 9, -3
 1261 0004 AF92      		push r10
 1262               	.LCFI32:
 1263               		.cfi_def_cfa_offset 5
 1264               		.cfi_offset 10, -4
 1265 0006 BF92      		push r11
 1266               	.LCFI33:
 1267               		.cfi_def_cfa_offset 6
 1268               		.cfi_offset 11, -5
 1269 0008 CF92      		push r12
 1270               	.LCFI34:
 1271               		.cfi_def_cfa_offset 7
 1272               		.cfi_offset 12, -6
 1273 000a DF92      		push r13
 1274               	.LCFI35:
 1275               		.cfi_def_cfa_offset 8
 1276               		.cfi_offset 13, -7
 1277 000c EF92      		push r14
 1278               	.LCFI36:
 1279               		.cfi_def_cfa_offset 9
 1280               		.cfi_offset 14, -8
 1281 000e FF92      		push r15
 1282               	.LCFI37:
 1283               		.cfi_def_cfa_offset 10
 1284               		.cfi_offset 15, -9
 1285 0010 0F93      		push r16
 1286               	.LCFI38:
 1287               		.cfi_def_cfa_offset 11
 1288               		.cfi_offset 16, -10
 1289 0012 1F93      		push r17
 1290               	.LCFI39:
 1291               		.cfi_def_cfa_offset 12
 1292               		.cfi_offset 17, -11
 1293               	/* prologue: function */
 1294               	/* frame size = 0 */
 1295               	/* stack size = 10 */
 1296               	.L__stack_usage = 10
 1297 0014 6B01      		movw r12,r22
 1298 0016 7C01      		movw r14,r24
 865:quantum/quantum.c ****   uint32_t mask12 = (1UL << layer1) | (1UL << layer2);
 1299               		.loc 1 865 3 is_stmt 1 view .LVU291
 1300               		.loc 1 865 26 is_stmt 0 view .LVU292
 1301 0018 81E0      		ldi r24,lo8(1)
 1302 001a 90E0      		ldi r25,0
 1303 001c A0E0      		ldi r26,0
 1304 001e B0E0      		ldi r27,0
 1305 0020 4C01      		movw r8,r24
 1306 0022 5D01      		movw r10,r26
 1307 0024 00C0      		rjmp 2f
 1308               		1:
 1309 0026 880C      		lsl r8
 1310 0028 991C      		rol r9
 1311 002a AA1C      		rol r10
 1312 002c BB1C      		rol r11
 1313               		2:
 1314 002e 4A95      		dec r20
 1315 0030 02F4      		brpl 1b
 1316 0032 B501      		movw r22,r10
 1317               	.LVL132:
 1318               		.loc 1 865 26 view .LVU293
 1319 0034 A401      		movw r20,r8
 1320               	.LVL133:
 1321               		.loc 1 865 44 view .LVU294
 1322 0036 4C01      		movw r8,r24
 1323 0038 5D01      		movw r10,r26
 1324 003a 00C0      		rjmp 2f
 1325               		1:
 1326 003c 880C      		lsl r8
 1327 003e 991C      		rol r9
 1328 0040 AA1C      		rol r10
 1329 0042 BB1C      		rol r11
 1330               		2:
 1331 0044 2A95      		dec r18
 1332 0046 02F4      		brpl 1b
 1333               		.loc 1 865 12 view .LVU295
 1334 0048 4829      		or r20,r8
 1335 004a 5929      		or r21,r9
 1336 004c 6A29      		or r22,r10
 1337 004e 7B29      		or r23,r11
 1338               	.LVL134:
 866:quantum/quantum.c ****   uint32_t mask3 = 1UL << layer3;
 1339               		.loc 1 866 3 is_stmt 1 view .LVU296
 1340               		.loc 1 866 12 is_stmt 0 view .LVU297
 1341 0050 00C0      		rjmp 2f
 1342               		1:
 1343 0052 880F      		lsl r24
 1344 0054 991F      		rol r25
 1345 0056 AA1F      		rol r26
 1346 0058 BB1F      		rol r27
 1347               		2:
 1348 005a 0A95      		dec r16
 1349 005c 02F4      		brpl 1b
 1350               	.LVL135:
 867:quantum/quantum.c ****   return (state & mask12) == mask12 ? (state | mask3) : (state & ~mask3);
 1351               		.loc 1 867 3 is_stmt 1 view .LVU298
 1352               		.loc 1 867 17 is_stmt 0 view .LVU299
 1353 005e 8A01      		movw r16,r20
 1354               	.LVL136:
 1355               		.loc 1 867 17 view .LVU300
 1356 0060 9B01      		movw r18,r22
 1357               	.LVL137:
 1358               		.loc 1 867 17 view .LVU301
 1359 0062 0C21      		and r16,r12
 1360 0064 1D21      		and r17,r13
 1361 0066 2E21      		and r18,r14
 1362 0068 3F21      		and r19,r15
 1363               		.loc 1 867 55 view .LVU302
 1364 006a 0417      		cp r16,r20
 1365 006c 1507      		cpc r17,r21
 1366 006e 2607      		cpc r18,r22
 1367 0070 3707      		cpc r19,r23
 1368 0072 01F4      		brne .L82
 1369               		.loc 1 867 55 discriminator 1 view .LVU303
 1370 0074 8C29      		or r24,r12
 1371               	.LVL138:
 1372               		.loc 1 867 55 discriminator 1 view .LVU304
 1373 0076 9D29      		or r25,r13
 1374 0078 AE29      		or r26,r14
 1375 007a BF29      		or r27,r15
 1376               	.L81:
 868:quantum/quantum.c **** }
 1377               		.loc 1 868 1 view .LVU305
 1378 007c BC01      		movw r22,r24
 1379 007e CD01      		movw r24,r26
 1380               	/* epilogue start */
 1381 0080 1F91      		pop r17
 1382               	.LVL139:
 1383               		.loc 1 868 1 view .LVU306
 1384 0082 0F91      		pop r16
 1385               	.LVL140:
 1386               		.loc 1 868 1 view .LVU307
 1387 0084 FF90      		pop r15
 1388 0086 EF90      		pop r14
 1389 0088 DF90      		pop r13
 1390 008a CF90      		pop r12
 1391 008c BF90      		pop r11
 1392 008e AF90      		pop r10
 1393 0090 9F90      		pop r9
 1394 0092 8F90      		pop r8
 1395               	.LVL141:
 1396               		.loc 1 868 1 view .LVU308
 1397 0094 0895      		ret
 1398               	.LVL142:
 1399               	.L82:
 867:quantum/quantum.c ****   return (state & mask12) == mask12 ? (state | mask3) : (state & ~mask3);
 1400               		.loc 1 867 66 discriminator 2 view .LVU309
 1401 0096 8095      		com r24
 1402 0098 9095      		com r25
 1403 009a A095      		com r26
 1404 009c B095      		com r27
 1405               	.LVL143:
 867:quantum/quantum.c ****   return (state & mask12) == mask12 ? (state | mask3) : (state & ~mask3);
 1406               		.loc 1 867 55 discriminator 2 view .LVU310
 1407 009e 8C21      		and r24,r12
 1408               	.LVL144:
 867:quantum/quantum.c ****   return (state & mask12) == mask12 ? (state | mask3) : (state & ~mask3);
 1409               		.loc 1 867 55 discriminator 2 view .LVU311
 1410 00a0 9D21      		and r25,r13
 1411 00a2 AE21      		and r26,r14
 1412 00a4 BF21      		and r27,r15
 1413 00a6 00C0      		rjmp .L81
 1414               		.cfi_endproc
 1415               	.LFE132:
 1417               		.section	.text.update_tri_layer,"ax",@progbits
 1418               	.global	update_tri_layer
 1420               	update_tri_layer:
 1421               	.LVL145:
 1422               	.LFB133:
 869:quantum/quantum.c **** 
 870:quantum/quantum.c **** void update_tri_layer(uint8_t layer1, uint8_t layer2, uint8_t layer3) {
 1423               		.loc 1 870 71 is_stmt 1 view -0
 1424               		.cfi_startproc
 1425               		.loc 1 870 71 is_stmt 0 view .LVU313
 1426 0000 0F93      		push r16
 1427               	.LCFI40:
 1428               		.cfi_def_cfa_offset 3
 1429               		.cfi_offset 16, -2
 1430               	/* prologue: function */
 1431               	/* frame size = 0 */
 1432               	/* stack size = 1 */
 1433               	.L__stack_usage = 1
 1434 0002 382F      		mov r19,r24
 1435 0004 262F      		mov r18,r22
 871:quantum/quantum.c ****   layer_state_set(update_tri_layer_state(layer_state, layer1, layer2, layer3));
 1436               		.loc 1 871 3 is_stmt 1 view .LVU314
 1437 0006 6091 0000 		lds r22,layer_state
 1438 000a 7091 0000 		lds r23,layer_state+1
 1439 000e 8091 0000 		lds r24,layer_state+2
 1440 0012 9091 0000 		lds r25,layer_state+3
 1441               	.LVL146:
 1442               		.loc 1 871 3 is_stmt 0 view .LVU315
 1443 0016 042F      		mov r16,r20
 1444 0018 432F      		mov r20,r19
 1445               	.LVL147:
 1446               		.loc 1 871 3 view .LVU316
 1447 001a 0E94 0000 		call update_tri_layer_state
 1448               	.LVL148:
 1449               	/* epilogue start */
 872:quantum/quantum.c **** }
 1450               		.loc 1 872 1 view .LVU317
 1451 001e 0F91      		pop r16
 1452               	.LVL149:
 871:quantum/quantum.c ****   layer_state_set(update_tri_layer_state(layer_state, layer1, layer2, layer3));
 1453               		.loc 1 871 3 view .LVU318
 1454 0020 0C94 0000 		jmp layer_state_set
 1455               	.LVL150:
 1456               		.cfi_endproc
 1457               	.LFE133:
 1459               		.section	.text.tap_random_base64,"ax",@progbits
 1460               	.global	tap_random_base64
 1462               	tap_random_base64:
 1463               	.LFB134:
 873:quantum/quantum.c **** 
 874:quantum/quantum.c **** void tap_random_base64(void) {
 1464               		.loc 1 874 30 is_stmt 1 view -0
 1465               		.cfi_startproc
 1466 0000 CF93      		push r28
 1467               	.LCFI41:
 1468               		.cfi_def_cfa_offset 3
 1469               		.cfi_offset 28, -2
 1470 0002 DF93      		push r29
 1471               	.LCFI42:
 1472               		.cfi_def_cfa_offset 4
 1473               		.cfi_offset 29, -3
 1474               	/* prologue: function */
 1475               	/* frame size = 0 */
 1476               	/* stack size = 2 */
 1477               	.L__stack_usage = 2
 875:quantum/quantum.c ****   #if defined(__AVR_ATmega32U4__)
 876:quantum/quantum.c ****     uint8_t key = (TCNT0 + TCNT1 + TCNT3 + TCNT4) % 64;
 1478               		.loc 1 876 5 view .LVU320
 1479               		.loc 1 876 20 is_stmt 0 view .LVU321
 1480 0004 46B5      		in r20,0x26
 1481               		.loc 1 876 28 view .LVU322
 1482 0006 2091 8400 		lds r18,132
 1483 000a 3091 8500 		lds r19,132+1
 1484               		.loc 1 876 36 view .LVU323
 1485 000e C091 9400 		lds r28,148
 1486 0012 D091 9500 		lds r29,148+1
 1487               		.loc 1 876 44 view .LVU324
 1488 0016 8091 BE00 		lds r24,190
 1489 001a 9091 BF00 		lds r25,190+1
 1490               		.loc 1 876 34 view .LVU325
 1491 001e C20F      		add r28,r18
 1492 0020 C40F      		add r28,r20
 1493               		.loc 1 876 42 view .LVU326
 1494 0022 C80F      		add r28,r24
 1495               		.loc 1 876 13 view .LVU327
 1496 0024 CF73      		andi r28,lo8(63)
 1497               	.LVL151:
 877:quantum/quantum.c ****   #else
 878:quantum/quantum.c ****     uint8_t key = rand() % 64;
 879:quantum/quantum.c ****   #endif
 880:quantum/quantum.c ****   switch (key) {
 1498               		.loc 1 880 3 is_stmt 1 view .LVU328
 1499 0026 CE33      		cpi r28,lo8(62)
 1500 0028 00F4      		brsh .L86
 1501 002a C533      		cpi r28,lo8(53)
 1502 002c 00F4      		brsh .L87
 1503 002e CA31      		cpi r28,lo8(26)
 1504 0030 00F0      		brlo .L88
 1505 0032 C433      		cpi r28,lo8(52)
 1506 0034 00F4      		brsh .L93
 881:quantum/quantum.c ****     case 0 ... 25:
 882:quantum/quantum.c ****       register_code(KC_LSFT);
 883:quantum/quantum.c ****       register_code(key + KC_A);
 884:quantum/quantum.c ****       unregister_code(key + KC_A);
 885:quantum/quantum.c ****       unregister_code(KC_LSFT);
 886:quantum/quantum.c ****       break;
 887:quantum/quantum.c ****     case 26 ... 51:
 888:quantum/quantum.c ****       register_code(key - 26 + KC_A);
 1507               		.loc 1 888 7 view .LVU329
 1508 0036 C651      		subi r28,lo8(-(-22))
 1509               	.LVL152:
 1510               	.L96:
 889:quantum/quantum.c ****       unregister_code(key - 26 + KC_A);
 890:quantum/quantum.c ****       break;
 891:quantum/quantum.c ****     case 52:
 892:quantum/quantum.c ****       register_code(KC_0);
 893:quantum/quantum.c ****       unregister_code(KC_0);
 894:quantum/quantum.c ****       break;
 895:quantum/quantum.c ****     case 53 ... 61:
 896:quantum/quantum.c ****       register_code(key - 53 + KC_1);
 1511               		.loc 1 896 7 is_stmt 0 view .LVU330
 1512 0038 8C2F      		mov r24,r28
 1513 003a 0E94 0000 		call register_code
 1514               	.LVL153:
 897:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 1515               		.loc 1 897 7 is_stmt 1 view .LVU331
 1516 003e 8C2F      		mov r24,r28
 1517 0040 00C0      		rjmp .L94
 1518               	.LVL154:
 1519               	.L86:
 1520               		.loc 1 897 7 is_stmt 0 view .LVU332
 1521 0042 CE33      		cpi r28,lo8(62)
 1522 0044 01F0      		breq .L91
 1523 0046 CF33      		cpi r28,lo8(63)
 1524 0048 01F0      		breq .L92
 1525               	.L88:
 882:quantum/quantum.c ****       register_code(key + KC_A);
 1526               		.loc 1 882 7 is_stmt 1 view .LVU333
 1527 004a 81EE      		ldi r24,lo8(-31)
 1528 004c 0E94 0000 		call register_code
 1529               	.LVL155:
 883:quantum/quantum.c ****       unregister_code(key + KC_A);
 1530               		.loc 1 883 7 view .LVU334
 1531 0050 CC5F      		subi r28,lo8(-(4))
 1532               	.LVL156:
 883:quantum/quantum.c ****       unregister_code(key + KC_A);
 1533               		.loc 1 883 7 is_stmt 0 view .LVU335
 1534 0052 8C2F      		mov r24,r28
 1535 0054 0E94 0000 		call register_code
 1536               	.LVL157:
 884:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1537               		.loc 1 884 7 is_stmt 1 view .LVU336
 1538 0058 8C2F      		mov r24,r28
 1539               	.LVL158:
 1540               	.L95:
 898:quantum/quantum.c ****       break;
 899:quantum/quantum.c ****     case 62:
 900:quantum/quantum.c ****       register_code(KC_LSFT);
 901:quantum/quantum.c ****       register_code(KC_EQL);
 902:quantum/quantum.c ****       unregister_code(KC_EQL);
 1541               		.loc 1 902 7 is_stmt 0 view .LVU337
 1542 005a 0E94 0000 		call unregister_code
 1543               	.LVL159:
 903:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1544               		.loc 1 903 7 is_stmt 1 view .LVU338
 1545 005e 81EE      		ldi r24,lo8(-31)
 1546 0060 00C0      		rjmp .L94
 1547               	.LVL160:
 1548               	.L93:
 892:quantum/quantum.c ****       unregister_code(KC_0);
 1549               		.loc 1 892 7 view .LVU339
 1550 0062 87E2      		ldi r24,lo8(39)
 1551 0064 0E94 0000 		call register_code
 1552               	.LVL161:
 893:quantum/quantum.c ****       break;
 1553               		.loc 1 893 7 view .LVU340
 1554 0068 87E2      		ldi r24,lo8(39)
 1555               	.LVL162:
 1556               	.L94:
 1557               	/* epilogue start */
 904:quantum/quantum.c ****       break;
 905:quantum/quantum.c ****     case 63:
 906:quantum/quantum.c ****       register_code(KC_SLSH);
 907:quantum/quantum.c ****       unregister_code(KC_SLSH);
 908:quantum/quantum.c ****       break;
 909:quantum/quantum.c ****   }
 910:quantum/quantum.c **** }
 1558               		.loc 1 910 1 is_stmt 0 view .LVU341
 1559 006a DF91      		pop r29
 1560 006c CF91      		pop r28
 907:quantum/quantum.c ****       break;
 1561               		.loc 1 907 7 view .LVU342
 1562 006e 0C94 0000 		jmp unregister_code
 1563               	.LVL163:
 1564               	.L87:
 896:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 1565               		.loc 1 896 7 is_stmt 1 view .LVU343
 1566 0072 C751      		subi r28,lo8(-(-23))
 1567               	.LVL164:
 896:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 1568               		.loc 1 896 7 is_stmt 0 view .LVU344
 1569 0074 00C0      		rjmp .L96
 1570               	.LVL165:
 1571               	.L91:
 900:quantum/quantum.c ****       register_code(KC_EQL);
 1572               		.loc 1 900 7 is_stmt 1 view .LVU345
 1573 0076 81EE      		ldi r24,lo8(-31)
 1574 0078 0E94 0000 		call register_code
 1575               	.LVL166:
 901:quantum/quantum.c ****       unregister_code(KC_EQL);
 1576               		.loc 1 901 7 view .LVU346
 1577 007c 8EE2      		ldi r24,lo8(46)
 1578 007e 0E94 0000 		call register_code
 1579               	.LVL167:
 902:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1580               		.loc 1 902 7 view .LVU347
 1581 0082 8EE2      		ldi r24,lo8(46)
 1582 0084 00C0      		rjmp .L95
 1583               	.L92:
 906:quantum/quantum.c ****       unregister_code(KC_SLSH);
 1584               		.loc 1 906 7 view .LVU348
 1585 0086 88E3      		ldi r24,lo8(56)
 1586 0088 0E94 0000 		call register_code
 1587               	.LVL168:
 907:quantum/quantum.c ****       break;
 1588               		.loc 1 907 7 view .LVU349
 1589 008c 88E3      		ldi r24,lo8(56)
 1590 008e 00C0      		rjmp .L94
 1591               		.cfi_endproc
 1592               	.LFE134:
 1594               		.section	.text.bootmagic_lite,"ax",@progbits
 1595               		.weak	bootmagic_lite
 1597               	bootmagic_lite:
 1598               	.LFB135:
 911:quantum/quantum.c **** 
 912:quantum/quantum.c **** __attribute__((weak))
 913:quantum/quantum.c **** void bootmagic_lite(void) {
 1599               		.loc 1 913 27 view -0
 1600               		.cfi_startproc
 1601               	/* prologue: function */
 1602               	/* frame size = 0 */
 1603               	/* stack size = 0 */
 1604               	.L__stack_usage = 0
 914:quantum/quantum.c ****   // The lite version of TMK's bootmagic based on Wilba.
 915:quantum/quantum.c ****   // 100% less potential for accidentally making the
 916:quantum/quantum.c ****   // keyboard do stupid things.
 917:quantum/quantum.c **** 
 918:quantum/quantum.c ****   // We need multiple scans because debouncing can't be turned off.
 919:quantum/quantum.c ****   matrix_scan();
 1605               		.loc 1 919 3 view .LVU351
 1606 0000 0E94 0000 		call matrix_scan
 1607               	.LVL169:
 920:quantum/quantum.c ****   #if defined(DEBOUNCING_DELAY) && DEBOUNCING_DELAY > 0
 921:quantum/quantum.c ****     wait_ms(DEBOUNCING_DELAY * 2);
 922:quantum/quantum.c ****   #elif defined(DEBOUNCE) && DEBOUNCE > 0
 923:quantum/quantum.c ****     wait_ms(DEBOUNCE * 2);
 924:quantum/quantum.c ****   #else
 925:quantum/quantum.c ****     wait_ms(30);
 1608               		.loc 1 925 5 view .LVU352
 1609               	.LBB50:
 1610               	.LBI50:
 166:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** {
 1611               		.loc 2 166 1 view .LVU353
 1612               	.LBB51:
 168:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 1613               		.loc 2 168 2 view .LVU354
 172:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 1614               		.loc 2 172 2 view .LVU355
 173:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 1615               		.loc 2 173 2 view .LVU356
 174:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 1616               		.loc 2 174 2 view .LVU357
 184:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#endif
 1617               		.loc 2 184 3 view .LVU358
 1618               		.loc 2 187 2 view .LVU359
 1619 0004 2FEF      		ldi r18,lo8(95999)
 1620 0006 86E7      		ldi r24,hi8(95999)
 1621 0008 91E0      		ldi r25,hlo8(95999)
 1622 000a 2150      	1:	subi r18,1
 1623 000c 8040      		sbci r24,0
 1624 000e 9040      		sbci r25,0
 1625 0010 01F4      		brne 1b
 1626 0012 00C0      		rjmp .
 1627 0014 0000      		nop
 1628               	.LVL170:
 1629               		.loc 2 187 2 is_stmt 0 view .LVU360
 1630               	.LBE51:
 1631               	.LBE50:
 926:quantum/quantum.c ****   #endif
 927:quantum/quantum.c ****   matrix_scan();
 1632               		.loc 1 927 3 is_stmt 1 view .LVU361
 1633 0016 0E94 0000 		call matrix_scan
 1634               	.LVL171:
 928:quantum/quantum.c **** 
 929:quantum/quantum.c ****   // If the Esc and space bar are held down on power up,
 930:quantum/quantum.c ****   // reset the EEPROM valid state and jump to bootloader.
 931:quantum/quantum.c ****   // Assumes Esc is at [0,0].
 932:quantum/quantum.c ****   // This isn't very generalized, but we need something that doesn't
 933:quantum/quantum.c ****   // rely on user's keymaps in firmware or EEPROM.
 934:quantum/quantum.c ****   if (matrix_get_row(BOOTMAGIC_LITE_ROW) & (1 << BOOTMAGIC_LITE_COLUMN)) {
 1635               		.loc 1 934 3 view .LVU362
 1636               		.loc 1 934 7 is_stmt 0 view .LVU363
 1637 001a 80E0      		ldi r24,0
 1638 001c 0E94 0000 		call matrix_get_row
 1639               	.LVL172:
 1640               		.loc 1 934 6 view .LVU364
 1641 0020 80FF      		sbrs r24,0
 1642 0022 00C0      		rjmp .L97
 935:quantum/quantum.c ****     eeconfig_disable();
 1643               		.loc 1 935 5 is_stmt 1 view .LVU365
 1644 0024 0E94 0000 		call eeconfig_disable
 1645               	.LVL173:
 936:quantum/quantum.c ****     // Jump to bootloader.
 937:quantum/quantum.c ****     bootloader_jump();
 1646               		.loc 1 937 5 view .LVU366
 1647 0028 0C94 0000 		jmp bootloader_jump
 1648               	.LVL174:
 1649               	.L97:
 1650               	/* epilogue start */
 938:quantum/quantum.c ****   }
 939:quantum/quantum.c **** }
 1651               		.loc 1 939 1 is_stmt 0 view .LVU367
 1652 002c 0895      		ret
 1653               		.cfi_endproc
 1654               	.LFE135:
 1656               		.section	.text.matrix_init_quantum,"ax",@progbits
 1657               	.global	matrix_init_quantum
 1659               	matrix_init_quantum:
 1660               	.LFB136:
 940:quantum/quantum.c **** 
 941:quantum/quantum.c **** void matrix_init_quantum() {
 1661               		.loc 1 941 28 is_stmt 1 view -0
 1662               		.cfi_startproc
 1663               	/* prologue: function */
 1664               	/* frame size = 0 */
 1665               	/* stack size = 0 */
 1666               	.L__stack_usage = 0
 942:quantum/quantum.c ****   #ifdef BOOTMAGIC_LITE
 943:quantum/quantum.c ****     bootmagic_lite();
 944:quantum/quantum.c ****   #endif
 945:quantum/quantum.c ****   if (!eeconfig_is_enabled()) {
 1667               		.loc 1 945 3 view .LVU369
 1668               		.loc 1 945 8 is_stmt 0 view .LVU370
 1669 0000 0E94 0000 		call eeconfig_is_enabled
 1670               	.LVL175:
 1671               		.loc 1 945 6 view .LVU371
 1672 0004 8111      		cpse r24,__zero_reg__
 1673 0006 00C0      		rjmp .L100
 946:quantum/quantum.c ****     eeconfig_init();
 1674               		.loc 1 946 5 is_stmt 1 view .LVU372
 1675 0008 0E94 0000 		call eeconfig_init
 1676               	.LVL176:
 1677               	.L100:
 947:quantum/quantum.c ****   }
 948:quantum/quantum.c ****   #ifdef BACKLIGHT_ENABLE
 949:quantum/quantum.c ****     #ifdef LED_MATRIX_ENABLE
 950:quantum/quantum.c ****         led_matrix_init();
 951:quantum/quantum.c ****     #else
 952:quantum/quantum.c ****         backlight_init_ports();
 953:quantum/quantum.c ****     #endif
 954:quantum/quantum.c ****   #endif
 955:quantum/quantum.c ****   #ifdef AUDIO_ENABLE
 956:quantum/quantum.c ****     audio_init();
 957:quantum/quantum.c ****   #endif
 958:quantum/quantum.c ****   #ifdef RGB_MATRIX_ENABLE
 959:quantum/quantum.c ****     rgb_matrix_init();
 960:quantum/quantum.c ****   #endif
 961:quantum/quantum.c ****   #ifdef ENCODER_ENABLE
 962:quantum/quantum.c ****     encoder_init();
 963:quantum/quantum.c ****   #endif
 964:quantum/quantum.c ****   #if defined(UNICODE_ENABLE) || defined(UNICODEMAP_ENABLE) || defined(UCIS_ENABLE)
 965:quantum/quantum.c ****     unicode_input_mode_init();
 1678               		.loc 1 965 5 view .LVU373
 1679 000c 0E94 0000 		call unicode_input_mode_init
 1680               	.LVL177:
 966:quantum/quantum.c ****   #endif
 967:quantum/quantum.c ****   #ifdef HAPTIC_ENABLE
 968:quantum/quantum.c ****     haptic_init();
 969:quantum/quantum.c ****   #endif
 970:quantum/quantum.c ****   #ifdef OUTPUT_AUTO_ENABLE
 971:quantum/quantum.c ****     set_output(OUTPUT_AUTO);
 972:quantum/quantum.c ****   #endif
 973:quantum/quantum.c ****   matrix_init_kb();
 1681               		.loc 1 973 3 view .LVU374
 1682 0010 0C94 0000 		jmp matrix_init_kb
 1683               	.LVL178:
 1684               		.cfi_endproc
 1685               	.LFE136:
 1687               		.section	.text.matrix_scan_quantum,"ax",@progbits
 1688               	.global	matrix_scan_quantum
 1690               	matrix_scan_quantum:
 1691               	.LFB137:
 974:quantum/quantum.c **** }
 975:quantum/quantum.c **** 
 976:quantum/quantum.c **** void matrix_scan_quantum() {
 1692               		.loc 1 976 28 view -0
 1693               		.cfi_startproc
 1694               	/* prologue: function */
 1695               	/* frame size = 0 */
 1696               	/* stack size = 0 */
 1697               	.L__stack_usage = 0
 977:quantum/quantum.c ****   #if defined(AUDIO_ENABLE) && !defined(NO_MUSIC_MODE)
 978:quantum/quantum.c ****     matrix_scan_music();
 979:quantum/quantum.c ****   #endif
 980:quantum/quantum.c **** 
 981:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
 982:quantum/quantum.c ****     matrix_scan_tap_dance();
 983:quantum/quantum.c ****   #endif
 984:quantum/quantum.c **** 
 985:quantum/quantum.c ****   #ifdef COMBO_ENABLE
 986:quantum/quantum.c ****     matrix_scan_combo();
 987:quantum/quantum.c ****   #endif
 988:quantum/quantum.c **** 
 989:quantum/quantum.c ****   #if defined(BACKLIGHT_ENABLE)
 990:quantum/quantum.c ****     #if defined(LED_MATRIX_ENABLE)
 991:quantum/quantum.c ****         led_matrix_task();
 992:quantum/quantum.c ****     #elif defined(BACKLIGHT_PIN)
 993:quantum/quantum.c ****         backlight_task();
 994:quantum/quantum.c ****     #endif
 995:quantum/quantum.c ****   #endif
 996:quantum/quantum.c **** 
 997:quantum/quantum.c ****   #ifdef RGB_MATRIX_ENABLE
 998:quantum/quantum.c ****     rgb_matrix_task();
 999:quantum/quantum.c ****   #endif
1000:quantum/quantum.c **** 
1001:quantum/quantum.c ****   #ifdef ENCODER_ENABLE
1002:quantum/quantum.c ****     encoder_read();
1003:quantum/quantum.c ****   #endif
1004:quantum/quantum.c **** 
1005:quantum/quantum.c ****   #ifdef HAPTIC_ENABLE
1006:quantum/quantum.c ****     haptic_task();
1007:quantum/quantum.c ****   #endif
1008:quantum/quantum.c **** 
1009:quantum/quantum.c ****   matrix_scan_kb();
 1698               		.loc 1 1009 3 view .LVU376
 1699 0000 0C94 0000 		jmp matrix_scan_kb
 1700               	.LVL179:
 1701               		.cfi_endproc
 1702               	.LFE137:
 1704               		.section	.text.backlight_init_ports,"ax",@progbits
 1705               		.weak	backlight_init_ports
 1707               	backlight_init_ports:
 1708               	.LFB157:
 1709               		.cfi_startproc
 1710               	/* prologue: function */
 1711               	/* frame size = 0 */
 1712               	/* stack size = 0 */
 1713               	.L__stack_usage = 0
 1714               	/* epilogue start */
 1715 0000 0895      		ret
 1716               		.cfi_endproc
 1717               	.LFE157:
 1719               		.section	.text.send_nibble,"ax",@progbits
 1720               	.global	send_nibble
 1722               	send_nibble:
 1723               	.LVL180:
 1724               	.LFB143:
1010:quantum/quantum.c **** }
1011:quantum/quantum.c **** #if defined(BACKLIGHT_ENABLE) && (defined(BACKLIGHT_PIN) || defined(BACKLIGHT_PINS))
1012:quantum/quantum.c **** 
1013:quantum/quantum.c **** // The logic is a bit complex, we support 3 setups:
1014:quantum/quantum.c **** // 1. hardware PWM when backlight is wired to a PWM pin
1015:quantum/quantum.c **** // depending on this pin, we use a different output compare unit
1016:quantum/quantum.c **** // 2. software PWM with hardware timers, but the used timer depends
1017:quantum/quantum.c **** // on the audio setup (audio wins other backlight)
1018:quantum/quantum.c **** // 3. full software PWM
1019:quantum/quantum.c **** 
1020:quantum/quantum.c **** #if BACKLIGHT_PIN == B7
1021:quantum/quantum.c **** #  define HARDWARE_PWM
1022:quantum/quantum.c **** #  define TCCRxA TCCR1A
1023:quantum/quantum.c **** #  define TCCRxB TCCR1B
1024:quantum/quantum.c **** #  define COMxx1 COM1C1
1025:quantum/quantum.c **** #  define OCRxx  OCR1C
1026:quantum/quantum.c **** #  define ICRx   ICR1
1027:quantum/quantum.c **** #elif BACKLIGHT_PIN == B6
1028:quantum/quantum.c **** #  define HARDWARE_PWM
1029:quantum/quantum.c **** #  define TCCRxA TCCR1A
1030:quantum/quantum.c **** #  define TCCRxB TCCR1B
1031:quantum/quantum.c **** #  define COMxx1 COM1B1
1032:quantum/quantum.c **** #  define OCRxx  OCR1B
1033:quantum/quantum.c **** #  define ICRx   ICR1
1034:quantum/quantum.c **** #elif BACKLIGHT_PIN == B5
1035:quantum/quantum.c **** #  define HARDWARE_PWM
1036:quantum/quantum.c **** #  define TCCRxA TCCR1A
1037:quantum/quantum.c **** #  define TCCRxB TCCR1B
1038:quantum/quantum.c **** #  define COMxx1 COM1A1
1039:quantum/quantum.c **** #  define OCRxx  OCR1A
1040:quantum/quantum.c **** #  define ICRx   ICR1
1041:quantum/quantum.c **** #elif BACKLIGHT_PIN == C6
1042:quantum/quantum.c **** #  define HARDWARE_PWM
1043:quantum/quantum.c **** #  define TCCRxA TCCR3A
1044:quantum/quantum.c **** #  define TCCRxB TCCR3B
1045:quantum/quantum.c **** #  define COMxx1 COM1A1
1046:quantum/quantum.c **** #  define OCRxx  OCR3A
1047:quantum/quantum.c **** #  define ICRx   ICR3
1048:quantum/quantum.c **** #elif defined(__AVR_ATmega32A__) && BACKLIGHT_PIN == D4
1049:quantum/quantum.c **** #  define TCCRxA TCCR1A
1050:quantum/quantum.c **** #  define TCCRxB TCCR1B
1051:quantum/quantum.c **** #  define COMxx1 COM1B1
1052:quantum/quantum.c **** #  define OCRxx  OCR1B
1053:quantum/quantum.c **** #  define ICRx   ICR1
1054:quantum/quantum.c **** #  define TIMSK1 TIMSK
1055:quantum/quantum.c **** #else
1056:quantum/quantum.c **** #  if !defined(BACKLIGHT_CUSTOM_DRIVER)
1057:quantum/quantum.c **** #    if !defined(B5_AUDIO) && !defined(B6_AUDIO) && !defined(B7_AUDIO)
1058:quantum/quantum.c ****      // timer 1 is not used by audio , backlight can use it
1059:quantum/quantum.c **** #pragma message "Using hardware timer 1 with software PWM"
1060:quantum/quantum.c **** #      define HARDWARE_PWM
1061:quantum/quantum.c **** #      define BACKLIGHT_PWM_TIMER
1062:quantum/quantum.c **** #      define TCCRxA TCCR1A
1063:quantum/quantum.c **** #      define TCCRxB TCCR1B
1064:quantum/quantum.c **** #      define OCRxx  OCR1A
1065:quantum/quantum.c **** #      define OCRxAH OCR1AH
1066:quantum/quantum.c **** #      define OCRxAL OCR1AL
1067:quantum/quantum.c **** #      define TIMERx_COMPA_vect TIMER1_COMPA_vect
1068:quantum/quantum.c **** #      define TIMERx_OVF_vect TIMER1_OVF_vect
1069:quantum/quantum.c **** #      define OCIExA OCIE1A
1070:quantum/quantum.c **** #      define TOIEx  TOIE1
1071:quantum/quantum.c **** #      define ICRx   ICR1
1072:quantum/quantum.c **** #      ifndef TIMSK
1073:quantum/quantum.c **** #        define TIMSK TIMSK1
1074:quantum/quantum.c **** #      endif
1075:quantum/quantum.c **** #    elif !defined(C6_AUDIO) && !defined(C5_AUDIO) && !defined(C4_AUDIO)
1076:quantum/quantum.c **** #pragma message "Using hardware timer 3 with software PWM"
1077:quantum/quantum.c **** // timer 3 is not used by audio, backlight can use it
1078:quantum/quantum.c **** #      define HARDWARE_PWM
1079:quantum/quantum.c **** #      define BACKLIGHT_PWM_TIMER
1080:quantum/quantum.c **** #      define TCCRxA TCCR3A
1081:quantum/quantum.c **** #      define TCCRxB TCCR3B
1082:quantum/quantum.c **** #      define OCRxx OCR3A
1083:quantum/quantum.c **** #      define OCRxAH OCR3AH
1084:quantum/quantum.c **** #      define OCRxAL OCR3AL
1085:quantum/quantum.c **** #      define TIMERx_COMPA_vect TIMER3_COMPA_vect
1086:quantum/quantum.c **** #      define TIMERx_OVF_vect TIMER3_OVF_vect
1087:quantum/quantum.c **** #      define OCIExA OCIE3A
1088:quantum/quantum.c **** #      define TOIEx  TOIE3
1089:quantum/quantum.c **** #      define ICRx   ICR1
1090:quantum/quantum.c **** #      ifndef TIMSK
1091:quantum/quantum.c **** #        define TIMSK TIMSK3
1092:quantum/quantum.c **** #      endif
1093:quantum/quantum.c **** #    else
1094:quantum/quantum.c **** #pragma message "Audio in use - using pure software PWM"
1095:quantum/quantum.c **** #define NO_HARDWARE_PWM
1096:quantum/quantum.c **** #    endif
1097:quantum/quantum.c **** #  else
1098:quantum/quantum.c **** #pragma message "Custom driver defined - using pure software PWM"
1099:quantum/quantum.c **** #define NO_HARDWARE_PWM
1100:quantum/quantum.c **** #  endif
1101:quantum/quantum.c **** #endif
1102:quantum/quantum.c **** 
1103:quantum/quantum.c **** #ifndef BACKLIGHT_ON_STATE
1104:quantum/quantum.c **** #define BACKLIGHT_ON_STATE 0
1105:quantum/quantum.c **** #endif
1106:quantum/quantum.c **** 
1107:quantum/quantum.c **** void backlight_on(uint8_t backlight_pin) {
1108:quantum/quantum.c **** #if BACKLIGHT_ON_STATE == 0
1109:quantum/quantum.c ****   writePinLow(backlight_pin);
1110:quantum/quantum.c **** #else
1111:quantum/quantum.c ****   writePinHigh(backlight_pin);
1112:quantum/quantum.c **** #endif
1113:quantum/quantum.c **** }
1114:quantum/quantum.c **** 
1115:quantum/quantum.c **** void backlight_off(uint8_t backlight_pin) {
1116:quantum/quantum.c **** #if BACKLIGHT_ON_STATE == 0
1117:quantum/quantum.c ****   writePinHigh(backlight_pin);
1118:quantum/quantum.c **** #else
1119:quantum/quantum.c ****   writePinLow(backlight_pin);
1120:quantum/quantum.c **** #endif
1121:quantum/quantum.c **** }
1122:quantum/quantum.c **** 
1123:quantum/quantum.c **** 
1124:quantum/quantum.c **** #if defined(NO_HARDWARE_PWM) || defined(BACKLIGHT_PWM_TIMER)  // pwm through software
1125:quantum/quantum.c **** 
1126:quantum/quantum.c **** // we support multiple backlight pins
1127:quantum/quantum.c **** #ifndef BACKLIGHT_LED_COUNT
1128:quantum/quantum.c **** #define BACKLIGHT_LED_COUNT 1
1129:quantum/quantum.c **** #endif
1130:quantum/quantum.c **** 
1131:quantum/quantum.c **** #if BACKLIGHT_LED_COUNT == 1
1132:quantum/quantum.c **** #define BACKLIGHT_PIN_INIT { BACKLIGHT_PIN }
1133:quantum/quantum.c **** #else
1134:quantum/quantum.c **** #define BACKLIGHT_PIN_INIT BACKLIGHT_PINS
1135:quantum/quantum.c **** #endif
1136:quantum/quantum.c **** 
1137:quantum/quantum.c **** #define FOR_EACH_LED(x)                             \
1138:quantum/quantum.c ****   for (uint8_t i = 0; i < BACKLIGHT_LED_COUNT; i++) \
1139:quantum/quantum.c ****   {                                                 \
1140:quantum/quantum.c ****     uint8_t backlight_pin = backlight_pins[i];      \
1141:quantum/quantum.c ****     { \
1142:quantum/quantum.c ****       x                         \
1143:quantum/quantum.c ****     }                                             \
1144:quantum/quantum.c ****   }
1145:quantum/quantum.c **** 
1146:quantum/quantum.c **** static const uint8_t backlight_pins[BACKLIGHT_LED_COUNT] = BACKLIGHT_PIN_INIT;
1147:quantum/quantum.c **** 
1148:quantum/quantum.c **** #else // full hardware PWM
1149:quantum/quantum.c **** 
1150:quantum/quantum.c **** // we support only one backlight pin
1151:quantum/quantum.c **** static const uint8_t backlight_pin = BACKLIGHT_PIN;
1152:quantum/quantum.c **** #define FOR_EACH_LED(x) x
1153:quantum/quantum.c **** 
1154:quantum/quantum.c **** #endif
1155:quantum/quantum.c **** 
1156:quantum/quantum.c **** #ifdef NO_HARDWARE_PWM
1157:quantum/quantum.c **** __attribute__((weak))
1158:quantum/quantum.c **** void backlight_init_ports(void)
1159:quantum/quantum.c **** {
1160:quantum/quantum.c ****   // Setup backlight pin as output and output to on state.
1161:quantum/quantum.c ****   FOR_EACH_LED(
1162:quantum/quantum.c ****     setPinOutput(backlight_pin);
1163:quantum/quantum.c ****     backlight_on(backlight_pin);
1164:quantum/quantum.c ****   )
1165:quantum/quantum.c **** }
1166:quantum/quantum.c **** 
1167:quantum/quantum.c **** __attribute__ ((weak))
1168:quantum/quantum.c **** void backlight_set(uint8_t level) {}
1169:quantum/quantum.c **** 
1170:quantum/quantum.c **** uint8_t backlight_tick = 0;
1171:quantum/quantum.c **** 
1172:quantum/quantum.c **** #ifndef BACKLIGHT_CUSTOM_DRIVER
1173:quantum/quantum.c **** void backlight_task(void) {
1174:quantum/quantum.c ****   if ((0xFFFF >> ((BACKLIGHT_LEVELS - get_backlight_level()) * ((BACKLIGHT_LEVELS + 1) / 2))) & (1 
1175:quantum/quantum.c ****     FOR_EACH_LED(
1176:quantum/quantum.c ****       backlight_on(backlight_pin);
1177:quantum/quantum.c ****     )
1178:quantum/quantum.c ****   }
1179:quantum/quantum.c ****   else {
1180:quantum/quantum.c ****     FOR_EACH_LED(
1181:quantum/quantum.c ****       backlight_off(backlight_pin);
1182:quantum/quantum.c ****     )
1183:quantum/quantum.c ****   }
1184:quantum/quantum.c ****   backlight_tick = (backlight_tick + 1) % 16;
1185:quantum/quantum.c **** }
1186:quantum/quantum.c **** #endif
1187:quantum/quantum.c **** 
1188:quantum/quantum.c **** #ifdef BACKLIGHT_BREATHING
1189:quantum/quantum.c ****   #ifndef BACKLIGHT_CUSTOM_DRIVER
1190:quantum/quantum.c ****   #error "Backlight breathing only available with hardware PWM. Please disable."
1191:quantum/quantum.c ****   #endif
1192:quantum/quantum.c **** #endif
1193:quantum/quantum.c **** 
1194:quantum/quantum.c **** #else // hardware pwm through timer
1195:quantum/quantum.c **** 
1196:quantum/quantum.c **** #ifdef BACKLIGHT_PWM_TIMER
1197:quantum/quantum.c **** 
1198:quantum/quantum.c **** // The idea of software PWM assisted by hardware timers is the following
1199:quantum/quantum.c **** // we use the hardware timer in fast PWM mode like for hardware PWM, but
1200:quantum/quantum.c **** // instead of letting the Output Match Comparator control the led pin
1201:quantum/quantum.c **** // (which is not possible since the backlight is not wired to PWM pins on the
1202:quantum/quantum.c **** // CPU), we do the LED on/off by oursleves.
1203:quantum/quantum.c **** // The timer is setup to count up to 0xFFFF, and we set the Output Compare
1204:quantum/quantum.c **** // register to the current 16bits backlight level (after CIE correction).
1205:quantum/quantum.c **** // This means the CPU will trigger a compare match interrupt when the counter
1206:quantum/quantum.c **** // reaches the backlight level, where we turn off the LEDs,
1207:quantum/quantum.c **** // but also an overflow interrupt when the counter rolls back to 0,
1208:quantum/quantum.c **** // in which we're going to turn on the LEDs.
1209:quantum/quantum.c **** // The LED will then be on for OCRxx/0xFFFF time, adjusted every 244Hz.
1210:quantum/quantum.c **** 
1211:quantum/quantum.c **** // Triggered when the counter reaches the OCRx value
1212:quantum/quantum.c **** ISR(TIMERx_COMPA_vect) {
1213:quantum/quantum.c ****   FOR_EACH_LED(
1214:quantum/quantum.c ****     backlight_off(backlight_pin);
1215:quantum/quantum.c ****   )
1216:quantum/quantum.c **** }
1217:quantum/quantum.c **** 
1218:quantum/quantum.c **** // Triggered when the counter reaches the TOP value
1219:quantum/quantum.c **** // this one triggers at F_CPU/65536 =~ 244 Hz
1220:quantum/quantum.c **** ISR(TIMERx_OVF_vect) {
1221:quantum/quantum.c **** #ifdef BACKLIGHT_BREATHING
1222:quantum/quantum.c ****   breathing_task();
1223:quantum/quantum.c **** #endif
1224:quantum/quantum.c ****   // for very small values of OCRxx (or backlight level)
1225:quantum/quantum.c ****   // we can't guarantee this whole code won't execute
1226:quantum/quantum.c ****   // at the same time as the compare match interrupt
1227:quantum/quantum.c ****   // which means that we might turn on the leds while
1228:quantum/quantum.c ****   // trying to turn them off, leading to flickering
1229:quantum/quantum.c ****   // artifacts (especially while breathing, because breathing_task
1230:quantum/quantum.c ****   // takes many computation cycles).
1231:quantum/quantum.c ****   // so better not turn them on while the counter TOP is very low.
1232:quantum/quantum.c ****   if (OCRxx > 256) {
1233:quantum/quantum.c ****     FOR_EACH_LED(
1234:quantum/quantum.c ****       backlight_on(backlight_pin);
1235:quantum/quantum.c ****     )
1236:quantum/quantum.c ****   }
1237:quantum/quantum.c **** }
1238:quantum/quantum.c **** 
1239:quantum/quantum.c **** #endif
1240:quantum/quantum.c **** 
1241:quantum/quantum.c **** #define TIMER_TOP 0xFFFFU
1242:quantum/quantum.c **** 
1243:quantum/quantum.c **** // See http://jared.geek.nz/2013/feb/linear-led-pwm
1244:quantum/quantum.c **** static uint16_t cie_lightness(uint16_t v) {
1245:quantum/quantum.c ****   if (v <= 5243) // if below 8% of max
1246:quantum/quantum.c ****     return v / 9; // same as dividing by 900%
1247:quantum/quantum.c ****   else {
1248:quantum/quantum.c ****     uint32_t y = (((uint32_t) v + 10486) << 8) / (10486 + 0xFFFFUL); // add 16% of max and compare
1249:quantum/quantum.c ****     // to get a useful result with integer division, we shift left in the expression above
1250:quantum/quantum.c ****     // and revert what we've done again after squaring.
1251:quantum/quantum.c ****     y = y * y * y >> 8;
1252:quantum/quantum.c ****     if (y > 0xFFFFUL) // prevent overflow
1253:quantum/quantum.c ****       return 0xFFFFU;
1254:quantum/quantum.c ****     else
1255:quantum/quantum.c ****       return (uint16_t) y;
1256:quantum/quantum.c ****   }
1257:quantum/quantum.c **** }
1258:quantum/quantum.c **** 
1259:quantum/quantum.c **** // range for val is [0..TIMER_TOP]. PWM pin is high while the timer count is below val.
1260:quantum/quantum.c **** static inline void set_pwm(uint16_t val) {
1261:quantum/quantum.c **** 	OCRxx = val;
1262:quantum/quantum.c **** }
1263:quantum/quantum.c **** 
1264:quantum/quantum.c **** #ifndef BACKLIGHT_CUSTOM_DRIVER
1265:quantum/quantum.c **** __attribute__ ((weak))
1266:quantum/quantum.c **** void backlight_set(uint8_t level) {
1267:quantum/quantum.c ****   if (level > BACKLIGHT_LEVELS)
1268:quantum/quantum.c ****     level = BACKLIGHT_LEVELS;
1269:quantum/quantum.c **** 
1270:quantum/quantum.c ****   if (level == 0) {
1271:quantum/quantum.c ****     #ifdef BACKLIGHT_PWM_TIMER
1272:quantum/quantum.c ****       if (OCRxx) {
1273:quantum/quantum.c ****         TIMSK &= ~(_BV(OCIExA));
1274:quantum/quantum.c ****         TIMSK &= ~(_BV(TOIEx));
1275:quantum/quantum.c ****         FOR_EACH_LED(
1276:quantum/quantum.c ****           backlight_off(backlight_pin);
1277:quantum/quantum.c ****         )
1278:quantum/quantum.c ****       }
1279:quantum/quantum.c ****     #else
1280:quantum/quantum.c ****     // Turn off PWM control on backlight pin
1281:quantum/quantum.c ****     TCCRxA &= ~(_BV(COMxx1));
1282:quantum/quantum.c ****     #endif
1283:quantum/quantum.c ****   } else {
1284:quantum/quantum.c ****     #ifdef BACKLIGHT_PWM_TIMER
1285:quantum/quantum.c ****       if (!OCRxx) {
1286:quantum/quantum.c ****         TIMSK |= _BV(OCIExA);
1287:quantum/quantum.c ****         TIMSK |= _BV(TOIEx);
1288:quantum/quantum.c ****       }
1289:quantum/quantum.c ****     #else
1290:quantum/quantum.c ****     // Turn on PWM control of backlight pin
1291:quantum/quantum.c ****     TCCRxA |= _BV(COMxx1);
1292:quantum/quantum.c ****     #endif
1293:quantum/quantum.c ****   }
1294:quantum/quantum.c ****   // Set the brightness
1295:quantum/quantum.c ****   set_pwm(cie_lightness(TIMER_TOP * (uint32_t)level / BACKLIGHT_LEVELS));
1296:quantum/quantum.c **** }
1297:quantum/quantum.c **** 
1298:quantum/quantum.c **** void backlight_task(void) {}
1299:quantum/quantum.c **** #endif  // BACKLIGHT_CUSTOM_DRIVER
1300:quantum/quantum.c **** 
1301:quantum/quantum.c **** #ifdef BACKLIGHT_BREATHING
1302:quantum/quantum.c **** 
1303:quantum/quantum.c **** #define BREATHING_NO_HALT  0
1304:quantum/quantum.c **** #define BREATHING_HALT_OFF 1
1305:quantum/quantum.c **** #define BREATHING_HALT_ON  2
1306:quantum/quantum.c **** #define BREATHING_STEPS 128
1307:quantum/quantum.c **** 
1308:quantum/quantum.c **** static uint8_t breathing_period = BREATHING_PERIOD;
1309:quantum/quantum.c **** static uint8_t breathing_halt = BREATHING_NO_HALT;
1310:quantum/quantum.c **** static uint16_t breathing_counter = 0;
1311:quantum/quantum.c **** 
1312:quantum/quantum.c **** #ifdef BACKLIGHT_PWM_TIMER
1313:quantum/quantum.c **** static bool breathing = false;
1314:quantum/quantum.c **** 
1315:quantum/quantum.c **** bool is_breathing(void) {
1316:quantum/quantum.c ****   return breathing;
1317:quantum/quantum.c **** }
1318:quantum/quantum.c **** 
1319:quantum/quantum.c **** #define breathing_interrupt_enable() do { breathing = true; } while (0)
1320:quantum/quantum.c **** #define breathing_interrupt_disable() do { breathing = false; } while (0)
1321:quantum/quantum.c **** #else
1322:quantum/quantum.c **** 
1323:quantum/quantum.c **** bool is_breathing(void) {
1324:quantum/quantum.c ****     return !!(TIMSK1 & _BV(TOIE1));
1325:quantum/quantum.c **** }
1326:quantum/quantum.c **** 
1327:quantum/quantum.c **** #define breathing_interrupt_enable() do {TIMSK1 |= _BV(TOIE1);} while (0)
1328:quantum/quantum.c **** #define breathing_interrupt_disable() do {TIMSK1 &= ~_BV(TOIE1);} while (0)
1329:quantum/quantum.c **** #endif
1330:quantum/quantum.c **** 
1331:quantum/quantum.c **** #define breathing_min() do {breathing_counter = 0;} while (0)
1332:quantum/quantum.c **** #define breathing_max() do {breathing_counter = breathing_period * 244 / 2;} while (0)
1333:quantum/quantum.c **** 
1334:quantum/quantum.c **** void breathing_enable(void)
1335:quantum/quantum.c **** {
1336:quantum/quantum.c ****   breathing_counter = 0;
1337:quantum/quantum.c ****   breathing_halt = BREATHING_NO_HALT;
1338:quantum/quantum.c ****   breathing_interrupt_enable();
1339:quantum/quantum.c **** }
1340:quantum/quantum.c **** 
1341:quantum/quantum.c **** void breathing_pulse(void)
1342:quantum/quantum.c **** {
1343:quantum/quantum.c ****     if (get_backlight_level() == 0)
1344:quantum/quantum.c ****       breathing_min();
1345:quantum/quantum.c ****     else
1346:quantum/quantum.c ****       breathing_max();
1347:quantum/quantum.c ****     breathing_halt = BREATHING_HALT_ON;
1348:quantum/quantum.c ****     breathing_interrupt_enable();
1349:quantum/quantum.c **** }
1350:quantum/quantum.c **** 
1351:quantum/quantum.c **** void breathing_disable(void)
1352:quantum/quantum.c **** {
1353:quantum/quantum.c ****     breathing_interrupt_disable();
1354:quantum/quantum.c ****     // Restore backlight level
1355:quantum/quantum.c ****     backlight_set(get_backlight_level());
1356:quantum/quantum.c **** }
1357:quantum/quantum.c **** 
1358:quantum/quantum.c **** void breathing_self_disable(void)
1359:quantum/quantum.c **** {
1360:quantum/quantum.c ****   if (get_backlight_level() == 0)
1361:quantum/quantum.c ****     breathing_halt = BREATHING_HALT_OFF;
1362:quantum/quantum.c ****   else
1363:quantum/quantum.c ****     breathing_halt = BREATHING_HALT_ON;
1364:quantum/quantum.c **** }
1365:quantum/quantum.c **** 
1366:quantum/quantum.c **** void breathing_toggle(void) {
1367:quantum/quantum.c ****   if (is_breathing())
1368:quantum/quantum.c ****     breathing_disable();
1369:quantum/quantum.c ****   else
1370:quantum/quantum.c ****     breathing_enable();
1371:quantum/quantum.c **** }
1372:quantum/quantum.c **** 
1373:quantum/quantum.c **** void breathing_period_set(uint8_t value)
1374:quantum/quantum.c **** {
1375:quantum/quantum.c ****   if (!value)
1376:quantum/quantum.c ****     value = 1;
1377:quantum/quantum.c ****   breathing_period = value;
1378:quantum/quantum.c **** }
1379:quantum/quantum.c **** 
1380:quantum/quantum.c **** void breathing_period_default(void) {
1381:quantum/quantum.c ****   breathing_period_set(BREATHING_PERIOD);
1382:quantum/quantum.c **** }
1383:quantum/quantum.c **** 
1384:quantum/quantum.c **** void breathing_period_inc(void)
1385:quantum/quantum.c **** {
1386:quantum/quantum.c ****   breathing_period_set(breathing_period+1);
1387:quantum/quantum.c **** }
1388:quantum/quantum.c **** 
1389:quantum/quantum.c **** void breathing_period_dec(void)
1390:quantum/quantum.c **** {
1391:quantum/quantum.c ****   breathing_period_set(breathing_period-1);
1392:quantum/quantum.c **** }
1393:quantum/quantum.c **** 
1394:quantum/quantum.c **** /* To generate breathing curve in python:
1395:quantum/quantum.c ****  * from math import sin, pi; [int(sin(x/128.0*pi)**4*255) for x in range(128)]
1396:quantum/quantum.c ****  */
1397:quantum/quantum.c **** static const uint8_t breathing_table[BREATHING_STEPS] PROGMEM = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1
1398:quantum/quantum.c **** 
1399:quantum/quantum.c **** // Use this before the cie_lightness function.
1400:quantum/quantum.c **** static inline uint16_t scale_backlight(uint16_t v) {
1401:quantum/quantum.c ****   return v / BACKLIGHT_LEVELS * get_backlight_level();
1402:quantum/quantum.c **** }
1403:quantum/quantum.c **** 
1404:quantum/quantum.c **** #ifdef BACKLIGHT_PWM_TIMER
1405:quantum/quantum.c **** void breathing_task(void)
1406:quantum/quantum.c **** #else
1407:quantum/quantum.c **** /* Assuming a 16MHz CPU clock and a timer that resets at 64k (ICR1), the following interrupt handle
1408:quantum/quantum.c ****  * about 244 times per second.
1409:quantum/quantum.c ****  */
1410:quantum/quantum.c **** ISR(TIMER1_OVF_vect)
1411:quantum/quantum.c **** #endif
1412:quantum/quantum.c **** {
1413:quantum/quantum.c ****   uint16_t interval = (uint16_t) breathing_period * 244 / BREATHING_STEPS;
1414:quantum/quantum.c ****   // resetting after one period to prevent ugly reset at overflow.
1415:quantum/quantum.c ****   breathing_counter = (breathing_counter + 1) % (breathing_period * 244);
1416:quantum/quantum.c ****   uint8_t index = breathing_counter / interval % BREATHING_STEPS;
1417:quantum/quantum.c **** 
1418:quantum/quantum.c ****   if (((breathing_halt == BREATHING_HALT_ON) && (index == BREATHING_STEPS / 2)) ||
1419:quantum/quantum.c ****       ((breathing_halt == BREATHING_HALT_OFF) && (index == BREATHING_STEPS - 1)))
1420:quantum/quantum.c ****   {
1421:quantum/quantum.c ****       breathing_interrupt_disable();
1422:quantum/quantum.c ****   }
1423:quantum/quantum.c **** 
1424:quantum/quantum.c ****   set_pwm(cie_lightness(scale_backlight((uint16_t) pgm_read_byte(&breathing_table[index]) * 0x0101U
1425:quantum/quantum.c **** }
1426:quantum/quantum.c **** 
1427:quantum/quantum.c **** #endif // BACKLIGHT_BREATHING
1428:quantum/quantum.c **** 
1429:quantum/quantum.c **** __attribute__ ((weak))
1430:quantum/quantum.c **** void backlight_init_ports(void)
1431:quantum/quantum.c **** {
1432:quantum/quantum.c ****   // Setup backlight pin as output and output to on state.
1433:quantum/quantum.c ****   FOR_EACH_LED(
1434:quantum/quantum.c ****     setPinOutput(backlight_pin);
1435:quantum/quantum.c ****     backlight_on(backlight_pin);
1436:quantum/quantum.c ****   )
1437:quantum/quantum.c **** 
1438:quantum/quantum.c ****   // I could write a wall of text here to explain... but TL;DW
1439:quantum/quantum.c ****   // Go read the ATmega32u4 datasheet.
1440:quantum/quantum.c ****   // And this: http://blog.saikoled.com/post/43165849837/secret-konami-cheat-code-to-high-resolutio
1441:quantum/quantum.c **** 
1442:quantum/quantum.c **** #ifdef BACKLIGHT_PWM_TIMER
1443:quantum/quantum.c ****   // TimerX setup, Fast PWM mode count to TOP set in ICRx
1444:quantum/quantum.c ****   TCCRxA = _BV(WGM11); // = 0b00000010;
1445:quantum/quantum.c ****   // clock select clk/1
1446:quantum/quantum.c ****   TCCRxB = _BV(WGM13) | _BV(WGM12) | _BV(CS10); // = 0b00011001;
1447:quantum/quantum.c **** #else // hardware PWM
1448:quantum/quantum.c ****   // Pin PB7 = OCR1C (Timer 1, Channel C)
1449:quantum/quantum.c ****   // Compare Output Mode = Clear on compare match, Channel C = COM1C1=1 COM1C0=0
1450:quantum/quantum.c ****   // (i.e. start high, go low when counter matches.)
1451:quantum/quantum.c ****   // WGM Mode 14 (Fast PWM) = WGM13=1 WGM12=1 WGM11=1 WGM10=0
1452:quantum/quantum.c ****   // Clock Select = clk/1 (no prescaling) = CS12=0 CS11=0 CS10=1
1453:quantum/quantum.c **** 
1454:quantum/quantum.c ****   /*
1455:quantum/quantum.c ****   14.8.3:
1456:quantum/quantum.c ****   "In fast PWM mode, the compare units allow generation of PWM waveforms on the OCnx pins. Setting 
1457:quantum/quantum.c ****   "In fast PWM mode the counter is incremented until the counter value matches either one of the fi
1458:quantum/quantum.c ****   */
1459:quantum/quantum.c ****   TCCRxA = _BV(COMxx1) | _BV(WGM11);            // = 0b00001010;
1460:quantum/quantum.c ****   TCCRxB = _BV(WGM13) | _BV(WGM12) | _BV(CS10); // = 0b00011001;
1461:quantum/quantum.c **** #endif
1462:quantum/quantum.c ****   // Use full 16-bit resolution. Counter counts to ICR1 before reset to 0.
1463:quantum/quantum.c ****   ICRx = TIMER_TOP;
1464:quantum/quantum.c **** 
1465:quantum/quantum.c ****   backlight_init();
1466:quantum/quantum.c ****   #ifdef BACKLIGHT_BREATHING
1467:quantum/quantum.c ****     breathing_enable();
1468:quantum/quantum.c ****   #endif
1469:quantum/quantum.c **** }
1470:quantum/quantum.c **** 
1471:quantum/quantum.c **** #endif // hardware backlight
1472:quantum/quantum.c **** 
1473:quantum/quantum.c **** #else // no backlight
1474:quantum/quantum.c **** 
1475:quantum/quantum.c **** __attribute__ ((weak))
1476:quantum/quantum.c **** void backlight_init_ports(void) {}
1477:quantum/quantum.c **** 
1478:quantum/quantum.c **** __attribute__ ((weak))
1479:quantum/quantum.c **** void backlight_set(uint8_t level) {}
1480:quantum/quantum.c **** 
1481:quantum/quantum.c **** #endif // backlight
1482:quantum/quantum.c **** 
1483:quantum/quantum.c **** #ifdef HD44780_ENABLED
1484:quantum/quantum.c **** #include "hd44780.h"
1485:quantum/quantum.c **** #endif
1486:quantum/quantum.c **** 
1487:quantum/quantum.c **** 
1488:quantum/quantum.c **** // Functions for spitting out values
1489:quantum/quantum.c **** //
1490:quantum/quantum.c **** 
1491:quantum/quantum.c **** void send_dword(uint32_t number) { // this might not actually work
1492:quantum/quantum.c ****     uint16_t word = (number >> 16);
1493:quantum/quantum.c ****     send_word(word);
1494:quantum/quantum.c ****     send_word(number & 0xFFFFUL);
1495:quantum/quantum.c **** }
1496:quantum/quantum.c **** 
1497:quantum/quantum.c **** void send_word(uint16_t number) {
1498:quantum/quantum.c ****     uint8_t byte = number >> 8;
1499:quantum/quantum.c ****     send_byte(byte);
1500:quantum/quantum.c ****     send_byte(number & 0xFF);
1501:quantum/quantum.c **** }
1502:quantum/quantum.c **** 
1503:quantum/quantum.c **** void send_byte(uint8_t number) {
1504:quantum/quantum.c ****     uint8_t nibble = number >> 4;
1505:quantum/quantum.c ****     send_nibble(nibble);
1506:quantum/quantum.c ****     send_nibble(number & 0xF);
1507:quantum/quantum.c **** }
1508:quantum/quantum.c **** 
1509:quantum/quantum.c **** void send_nibble(uint8_t number) {
 1725               		.loc 1 1509 34 view -0
 1726               		.cfi_startproc
 1727               		.loc 1 1509 34 is_stmt 0 view .LVU378
 1728 0000 CF93      		push r28
 1729               	.LCFI43:
 1730               		.cfi_def_cfa_offset 3
 1731               		.cfi_offset 28, -2
 1732               	/* prologue: function */
 1733               	/* frame size = 0 */
 1734               	/* stack size = 1 */
 1735               	.L__stack_usage = 1
1510:quantum/quantum.c ****     switch (number) {
 1736               		.loc 1 1510 5 is_stmt 1 view .LVU379
 1737 0002 8A30      		cpi r24,lo8(10)
 1738 0004 00F4      		brsh .L104
 1739 0006 8823      		tst r24
 1740 0008 01F0      		breq .L109
1511:quantum/quantum.c ****         case 0:
1512:quantum/quantum.c ****             register_code(KC_0);
1513:quantum/quantum.c ****             unregister_code(KC_0);
1514:quantum/quantum.c ****             break;
1515:quantum/quantum.c ****         case 1 ... 9:
1516:quantum/quantum.c ****             register_code(KC_1 + (number - 1));
 1741               		.loc 1 1516 13 view .LVU380
 1742 000a CDE1      		ldi r28,lo8(29)
 1743               	.L112:
1517:quantum/quantum.c ****             unregister_code(KC_1 + (number - 1));
1518:quantum/quantum.c ****             break;
1519:quantum/quantum.c ****         case 0xA ... 0xF:
1520:quantum/quantum.c ****             register_code(KC_A + (number - 0xA));
 1744               		.loc 1 1520 13 is_stmt 0 view .LVU381
 1745 000c C80F      		add r28,r24
 1746 000e 8C2F      		mov r24,r28
 1747               	.LVL181:
 1748               		.loc 1 1520 13 view .LVU382
 1749 0010 0E94 0000 		call register_code
 1750               	.LVL182:
1521:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
 1751               		.loc 1 1521 13 is_stmt 1 view .LVU383
 1752 0014 8C2F      		mov r24,r28
 1753 0016 00C0      		rjmp .L111
 1754               	.LVL183:
 1755               	.L104:
1520:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
 1756               		.loc 1 1520 13 is_stmt 0 view .LVU384
 1757 0018 CAEF      		ldi r28,lo8(-6)
 1758 001a 8031      		cpi r24,lo8(16)
 1759 001c 00F0      		brlo .L112
 1760               	/* epilogue start */
1522:quantum/quantum.c ****             break;
1523:quantum/quantum.c ****     }
1524:quantum/quantum.c **** }
 1761               		.loc 1 1524 1 view .LVU385
 1762 001e CF91      		pop r28
 1763 0020 0895      		ret
 1764               	.L109:
1512:quantum/quantum.c ****             unregister_code(KC_0);
 1765               		.loc 1 1512 13 is_stmt 1 view .LVU386
 1766 0022 87E2      		ldi r24,lo8(39)
 1767               	.LVL184:
1512:quantum/quantum.c ****             unregister_code(KC_0);
 1768               		.loc 1 1512 13 is_stmt 0 view .LVU387
 1769 0024 0E94 0000 		call register_code
 1770               	.LVL185:
1513:quantum/quantum.c ****             break;
 1771               		.loc 1 1513 13 is_stmt 1 view .LVU388
 1772 0028 87E2      		ldi r24,lo8(39)
 1773               	.L111:
 1774               	/* epilogue start */
 1775               		.loc 1 1524 1 is_stmt 0 view .LVU389
 1776 002a CF91      		pop r28
1521:quantum/quantum.c ****             break;
 1777               		.loc 1 1521 13 view .LVU390
 1778 002c 0C94 0000 		jmp unregister_code
 1779               	.LVL186:
 1780               		.cfi_endproc
 1781               	.LFE143:
 1783               		.section	.text.send_byte,"ax",@progbits
 1784               	.global	send_byte
 1786               	send_byte:
 1787               	.LVL187:
 1788               	.LFB142:
1503:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 1789               		.loc 1 1503 32 is_stmt 1 view -0
 1790               		.cfi_startproc
1503:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 1791               		.loc 1 1503 32 is_stmt 0 view .LVU392
 1792 0000 CF93      		push r28
 1793               	.LCFI44:
 1794               		.cfi_def_cfa_offset 3
 1795               		.cfi_offset 28, -2
 1796               	/* prologue: function */
 1797               	/* frame size = 0 */
 1798               	/* stack size = 1 */
 1799               	.L__stack_usage = 1
 1800 0002 C82F      		mov r28,r24
1504:quantum/quantum.c ****     send_nibble(nibble);
 1801               		.loc 1 1504 5 is_stmt 1 view .LVU393
 1802               	.LVL188:
1505:quantum/quantum.c ****     send_nibble(number & 0xF);
 1803               		.loc 1 1505 5 view .LVU394
 1804 0004 8295      		swap r24
 1805               	.LVL189:
1505:quantum/quantum.c ****     send_nibble(number & 0xF);
 1806               		.loc 1 1505 5 is_stmt 0 view .LVU395
 1807 0006 8F70      		andi r24,lo8(15)
 1808 0008 0E94 0000 		call send_nibble
 1809               	.LVL190:
1506:quantum/quantum.c **** }
 1810               		.loc 1 1506 5 is_stmt 1 view .LVU396
 1811 000c 8C2F      		mov r24,r28
 1812 000e 8F70      		andi r24,lo8(15)
 1813               	/* epilogue start */
1507:quantum/quantum.c **** 
 1814               		.loc 1 1507 1 is_stmt 0 view .LVU397
 1815 0010 CF91      		pop r28
 1816               	.LVL191:
1506:quantum/quantum.c **** }
 1817               		.loc 1 1506 5 view .LVU398
 1818 0012 0C94 0000 		jmp send_nibble
 1819               	.LVL192:
 1820               		.cfi_endproc
 1821               	.LFE142:
 1823               		.section	.text.send_word,"ax",@progbits
 1824               	.global	send_word
 1826               	send_word:
 1827               	.LVL193:
 1828               	.LFB141:
1497:quantum/quantum.c ****     uint8_t byte = number >> 8;
 1829               		.loc 1 1497 33 is_stmt 1 view -0
 1830               		.cfi_startproc
1497:quantum/quantum.c ****     uint8_t byte = number >> 8;
 1831               		.loc 1 1497 33 is_stmt 0 view .LVU400
 1832 0000 CF93      		push r28
 1833               	.LCFI45:
 1834               		.cfi_def_cfa_offset 3
 1835               		.cfi_offset 28, -2
 1836               	/* prologue: function */
 1837               	/* frame size = 0 */
 1838               	/* stack size = 1 */
 1839               	.L__stack_usage = 1
 1840 0002 C82F      		mov r28,r24
1498:quantum/quantum.c ****     send_byte(byte);
 1841               		.loc 1 1498 5 is_stmt 1 view .LVU401
 1842               	.LVL194:
1499:quantum/quantum.c ****     send_byte(number & 0xFF);
 1843               		.loc 1 1499 5 view .LVU402
 1844 0004 892F      		mov r24,r25
 1845               	.LVL195:
1499:quantum/quantum.c ****     send_byte(number & 0xFF);
 1846               		.loc 1 1499 5 is_stmt 0 view .LVU403
 1847 0006 0E94 0000 		call send_byte
 1848               	.LVL196:
1500:quantum/quantum.c **** }
 1849               		.loc 1 1500 5 is_stmt 1 view .LVU404
 1850 000a 8C2F      		mov r24,r28
 1851               	/* epilogue start */
1501:quantum/quantum.c **** 
 1852               		.loc 1 1501 1 is_stmt 0 view .LVU405
 1853 000c CF91      		pop r28
1500:quantum/quantum.c **** }
 1854               		.loc 1 1500 5 view .LVU406
 1855 000e 0C94 0000 		jmp send_byte
 1856               	.LVL197:
 1857               		.cfi_endproc
 1858               	.LFE141:
 1860               		.section	.text.send_dword,"ax",@progbits
 1861               	.global	send_dword
 1863               	send_dword:
 1864               	.LVL198:
 1865               	.LFB140:
1491:quantum/quantum.c ****     uint16_t word = (number >> 16);
 1866               		.loc 1 1491 34 is_stmt 1 view -0
 1867               		.cfi_startproc
1491:quantum/quantum.c ****     uint16_t word = (number >> 16);
 1868               		.loc 1 1491 34 is_stmt 0 view .LVU408
 1869 0000 CF92      		push r12
 1870               	.LCFI46:
 1871               		.cfi_def_cfa_offset 3
 1872               		.cfi_offset 12, -2
 1873 0002 DF92      		push r13
 1874               	.LCFI47:
 1875               		.cfi_def_cfa_offset 4
 1876               		.cfi_offset 13, -3
 1877 0004 EF92      		push r14
 1878               	.LCFI48:
 1879               		.cfi_def_cfa_offset 5
 1880               		.cfi_offset 14, -4
 1881 0006 FF92      		push r15
 1882               	.LCFI49:
 1883               		.cfi_def_cfa_offset 6
 1884               		.cfi_offset 15, -5
 1885               	/* prologue: function */
 1886               	/* frame size = 0 */
 1887               	/* stack size = 4 */
 1888               	.L__stack_usage = 4
 1889 0008 6B01      		movw r12,r22
1492:quantum/quantum.c ****     send_word(word);
 1890               		.loc 1 1492 5 is_stmt 1 view .LVU409
1493:quantum/quantum.c ****     send_word(number & 0xFFFFUL);
 1891               		.loc 1 1493 5 view .LVU410
 1892 000a 0E94 0000 		call send_word
 1893               	.LVL199:
1494:quantum/quantum.c **** }
 1894               		.loc 1 1494 5 view .LVU411
 1895 000e C601      		movw r24,r12
 1896               	/* epilogue start */
1495:quantum/quantum.c **** 
 1897               		.loc 1 1495 1 is_stmt 0 view .LVU412
 1898 0010 FF90      		pop r15
 1899 0012 EF90      		pop r14
 1900 0014 DF90      		pop r13
 1901 0016 CF90      		pop r12
1494:quantum/quantum.c **** }
 1902               		.loc 1 1494 5 view .LVU413
 1903 0018 0C94 0000 		jmp send_word
 1904               	.LVL200:
 1905               		.cfi_endproc
 1906               	.LFE140:
 1908               		.section	.text.hex_to_keycode,"ax",@progbits
 1909               		.weak	hex_to_keycode
 1911               	hex_to_keycode:
 1912               	.LVL201:
 1913               	.LFB144:
1525:quantum/quantum.c **** 
1526:quantum/quantum.c **** 
1527:quantum/quantum.c **** __attribute__((weak))
1528:quantum/quantum.c **** uint16_t hex_to_keycode(uint8_t hex)
1529:quantum/quantum.c **** {
 1914               		.loc 1 1529 1 is_stmt 1 view -0
 1915               		.cfi_startproc
 1916               	/* prologue: function */
 1917               	/* frame size = 0 */
 1918               	/* stack size = 0 */
 1919               	.L__stack_usage = 0
1530:quantum/quantum.c ****   hex = hex & 0xF;
 1920               		.loc 1 1530 3 view .LVU415
 1921               		.loc 1 1530 7 is_stmt 0 view .LVU416
 1922 0000 282F      		mov r18,r24
 1923 0002 2F70      		andi r18,lo8(15)
 1924               	.LVL202:
1531:quantum/quantum.c ****   if (hex == 0x0) {
 1925               		.loc 1 1531 3 is_stmt 1 view .LVU417
 1926               		.loc 1 1531 6 is_stmt 0 view .LVU418
 1927 0004 01F0      		breq .L119
1532:quantum/quantum.c ****     return KC_0;
1533:quantum/quantum.c ****   } else if (hex < 0xA) {
 1928               		.loc 1 1533 10 is_stmt 1 view .LVU419
 1929 0006 822F      		mov r24,r18
 1930 0008 90E0      		ldi r25,0
 1931               		.loc 1 1533 13 is_stmt 0 view .LVU420
 1932 000a 2A30      		cpi r18,lo8(10)
 1933 000c 00F4      		brsh .L118
1534:quantum/quantum.c ****     return KC_1 + (hex - 0x1);
 1934               		.loc 1 1534 5 is_stmt 1 view .LVU421
 1935               		.loc 1 1534 17 is_stmt 0 view .LVU422
 1936 000e 4D96      		adiw r24,29
 1937 0010 0895      		ret
 1938               	.L118:
1535:quantum/quantum.c ****   } else {
1536:quantum/quantum.c ****     return KC_A + (hex - 0xA);
 1939               		.loc 1 1536 5 is_stmt 1 view .LVU423
 1940               		.loc 1 1536 17 is_stmt 0 view .LVU424
 1941 0012 0697      		sbiw r24,6
 1942 0014 0895      		ret
 1943               	.L119:
1532:quantum/quantum.c ****   } else if (hex < 0xA) {
 1944               		.loc 1 1532 12 view .LVU425
 1945 0016 87E2      		ldi r24,lo8(39)
 1946 0018 90E0      		ldi r25,0
 1947               	/* epilogue start */
1537:quantum/quantum.c ****   }
1538:quantum/quantum.c **** }
 1948               		.loc 1 1538 1 view .LVU426
 1949 001a 0895      		ret
 1950               		.cfi_endproc
 1951               	.LFE144:
 1953               		.section	.text.api_send_unicode,"ax",@progbits
 1954               	.global	api_send_unicode
 1956               	api_send_unicode:
 1957               	.LVL203:
 1958               	.LFB145:
1539:quantum/quantum.c **** 
1540:quantum/quantum.c **** void api_send_unicode(uint32_t unicode) {
 1959               		.loc 1 1540 41 is_stmt 1 view -0
 1960               		.cfi_startproc
 1961               	/* prologue: function */
 1962               	/* frame size = 0 */
 1963               	/* stack size = 0 */
 1964               	.L__stack_usage = 0
1541:quantum/quantum.c **** #ifdef API_ENABLE
1542:quantum/quantum.c ****     uint8_t chunk[4];
1543:quantum/quantum.c ****     dword_to_bytes(unicode, chunk);
1544:quantum/quantum.c ****     MT_SEND_DATA(DT_UNICODE, chunk, 5);
1545:quantum/quantum.c **** #endif
1546:quantum/quantum.c **** }
 1965               		.loc 1 1546 1 view .LVU428
 1966               	/* epilogue start */
 1967 0000 0895      		ret
 1968               		.cfi_endproc
 1969               	.LFE145:
 1971               		.section	.text.led_set_user,"ax",@progbits
 1972               		.weak	led_set_user
 1974               	led_set_user:
 1975               	.LVL204:
 1976               	.LFB146:
1547:quantum/quantum.c **** 
1548:quantum/quantum.c **** __attribute__ ((weak))
1549:quantum/quantum.c **** void led_set_user(uint8_t usb_led) {
 1977               		.loc 1 1549 36 view -0
 1978               		.cfi_startproc
 1979               	/* prologue: function */
 1980               	/* frame size = 0 */
 1981               	/* stack size = 0 */
 1982               	.L__stack_usage = 0
1550:quantum/quantum.c **** 
1551:quantum/quantum.c **** }
 1983               		.loc 1 1551 1 view .LVU430
 1984               	/* epilogue start */
 1985 0000 0895      		ret
 1986               		.cfi_endproc
 1987               	.LFE146:
 1989               		.set	led_set_user.localalias.1,led_set_user
 1990               		.section	.text.backlight_set,"ax",@progbits
 1991               		.weak	backlight_set
 1993               	backlight_set:
 1994               	.LFB159:
 1995               		.cfi_startproc
 1996               	/* prologue: function */
 1997               	/* frame size = 0 */
 1998               	/* stack size = 0 */
 1999               	.L__stack_usage = 0
 2000               	/* epilogue start */
 2001 0000 0895      		ret
 2002               		.cfi_endproc
 2003               	.LFE159:
 2005               		.section	.text.led_set_kb,"ax",@progbits
 2006               		.weak	led_set_kb
 2008               	led_set_kb:
 2009               	.LVL205:
 2010               	.LFB147:
1552:quantum/quantum.c **** 
1553:quantum/quantum.c **** __attribute__ ((weak))
1554:quantum/quantum.c **** void led_set_kb(uint8_t usb_led) {
 2011               		.loc 1 1554 34 view -0
 2012               		.cfi_startproc
 2013               	/* prologue: function */
 2014               	/* frame size = 0 */
 2015               	/* stack size = 0 */
 2016               	.L__stack_usage = 0
1555:quantum/quantum.c ****     led_set_user(usb_led);
 2017               		.loc 1 1555 5 view .LVU432
 2018 0000 0C94 0000 		jmp led_set_user
 2019               	.LVL206:
 2020               		.loc 1 1555 5 is_stmt 0 view .LVU433
 2021               		.cfi_endproc
 2022               	.LFE147:
 2024               		.section	.text.led_init_ports,"ax",@progbits
 2025               		.weak	led_init_ports
 2027               	led_init_ports:
 2028               	.LFB148:
1556:quantum/quantum.c **** }
1557:quantum/quantum.c **** 
1558:quantum/quantum.c **** __attribute__ ((weak))
1559:quantum/quantum.c **** void led_init_ports(void)
1560:quantum/quantum.c **** {
 2029               		.loc 1 1560 1 is_stmt 1 view -0
 2030               		.cfi_startproc
 2031               	/* prologue: function */
 2032               	/* frame size = 0 */
 2033               	/* stack size = 0 */
 2034               	.L__stack_usage = 0
1561:quantum/quantum.c **** 
1562:quantum/quantum.c **** }
 2035               		.loc 1 1562 1 view .LVU435
 2036               	/* epilogue start */
 2037 0000 0895      		ret
 2038               		.cfi_endproc
 2039               	.LFE148:
 2041               		.section	.text.led_set,"ax",@progbits
 2042               		.weak	led_set
 2044               	led_set:
 2045               	.LVL207:
 2046               	.LFB149:
1563:quantum/quantum.c **** 
1564:quantum/quantum.c **** __attribute__ ((weak))
1565:quantum/quantum.c **** void led_set(uint8_t usb_led)
1566:quantum/quantum.c **** {
 2047               		.loc 1 1566 1 view -0
 2048               		.cfi_startproc
 2049               	/* prologue: function */
 2050               	/* frame size = 0 */
 2051               	/* stack size = 0 */
 2052               	.L__stack_usage = 0
1567:quantum/quantum.c **** 
1568:quantum/quantum.c ****   // Example LED Code
1569:quantum/quantum.c ****   //
1570:quantum/quantum.c ****     // // Using PE6 Caps Lock LED
1571:quantum/quantum.c ****     // if (usb_led & (1<<USB_LED_CAPS_LOCK))
1572:quantum/quantum.c ****     // {
1573:quantum/quantum.c ****     //     // Output high.
1574:quantum/quantum.c ****     //     DDRE |= (1<<6);
1575:quantum/quantum.c ****     //     PORTE |= (1<<6);
1576:quantum/quantum.c ****     // }
1577:quantum/quantum.c ****     // else
1578:quantum/quantum.c ****     // {
1579:quantum/quantum.c ****     //     // Output low.
1580:quantum/quantum.c ****     //     DDRE &= ~(1<<6);
1581:quantum/quantum.c ****     //     PORTE &= ~(1<<6);
1582:quantum/quantum.c ****     // }
1583:quantum/quantum.c **** 
1584:quantum/quantum.c **** #if defined(BACKLIGHT_CAPS_LOCK) && defined(BACKLIGHT_ENABLE)
1585:quantum/quantum.c ****   // Use backlight as Caps Lock indicator
1586:quantum/quantum.c ****   uint8_t bl_toggle_lvl = 0;
1587:quantum/quantum.c **** 
1588:quantum/quantum.c ****   if (IS_LED_ON(usb_led, USB_LED_CAPS_LOCK) && !backlight_config.enable) {
1589:quantum/quantum.c ****     // Turning Caps Lock ON and backlight is disabled in config
1590:quantum/quantum.c ****     // Toggling backlight to the brightest level
1591:quantum/quantum.c ****     bl_toggle_lvl = BACKLIGHT_LEVELS;
1592:quantum/quantum.c ****   } else if (IS_LED_OFF(usb_led, USB_LED_CAPS_LOCK) && backlight_config.enable) {
1593:quantum/quantum.c ****     // Turning Caps Lock OFF and backlight is enabled in config
1594:quantum/quantum.c ****     // Toggling backlight and restoring config level
1595:quantum/quantum.c ****     bl_toggle_lvl = backlight_config.level;
1596:quantum/quantum.c ****   }
1597:quantum/quantum.c **** 
1598:quantum/quantum.c ****   // Set level without modify backlight_config to keep ability to restore state
1599:quantum/quantum.c ****   backlight_set(bl_toggle_lvl);
1600:quantum/quantum.c **** #endif
1601:quantum/quantum.c **** 
1602:quantum/quantum.c ****   led_set_kb(usb_led);
 2053               		.loc 1 1602 3 view .LVU437
 2054 0000 0C94 0000 		jmp led_set_kb
 2055               	.LVL208:
 2056               		.loc 1 1602 3 is_stmt 0 view .LVU438
 2057               		.cfi_endproc
 2058               	.LFE149:
 2060               		.section	.text.startup_user,"ax",@progbits
 2061               		.weak	startup_user
 2063               	startup_user:
 2064               	.LFB153:
 2065               		.cfi_startproc
 2066               	/* prologue: function */
 2067               	/* frame size = 0 */
 2068               	/* stack size = 0 */
 2069               	.L__stack_usage = 0
 2070               	/* epilogue start */
 2071 0000 0895      		ret
 2072               		.cfi_endproc
 2073               	.LFE153:
 2075               		.section	.text.shutdown_user,"ax",@progbits
 2076               		.weak	shutdown_user
 2078               	shutdown_user:
 2079               	.LFB155:
 2080               		.cfi_startproc
 2081               	/* prologue: function */
 2082               	/* frame size = 0 */
 2083               	/* stack size = 0 */
 2084               	.L__stack_usage = 0
 2085               	/* epilogue start */
 2086 0000 0895      		ret
 2087               		.cfi_endproc
 2088               	.LFE155:
 2090               		.section	.text.reset_keyboard,"ax",@progbits
 2091               	.global	reset_keyboard
 2093               	reset_keyboard:
 2094               	.LFB122:
 166:quantum/quantum.c ****   clear_keyboard();
 2095               		.loc 1 166 27 is_stmt 1 view -0
 2096               		.cfi_startproc
 2097               	/* prologue: function */
 2098               	/* frame size = 0 */
 2099               	/* stack size = 0 */
 2100               	.L__stack_usage = 0
 167:quantum/quantum.c **** #if defined(MIDI_ENABLE) && defined(MIDI_BASIC)
 2101               		.loc 1 167 3 view .LVU440
 2102 0000 0E94 0000 		call clear_keyboard
 2103               	.LVL209:
 182:quantum/quantum.c ****   wait_ms(250);
 2104               		.loc 1 182 3 view .LVU441
 2105 0004 0E94 0000 		call shutdown_user
 2106               	.LVL210:
 183:quantum/quantum.c **** #endif
 2107               		.loc 1 183 3 view .LVU442
 2108               	.LBB52:
 2109               	.LBI52:
 166:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** {
 2110               		.loc 2 166 1 view .LVU443
 2111               	.LBB53:
 168:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 2112               		.loc 2 168 2 view .LVU444
 172:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 2113               		.loc 2 172 2 view .LVU445
 173:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 2114               		.loc 2 173 2 view .LVU446
 174:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 2115               		.loc 2 174 2 view .LVU447
 184:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#endif
 2116               		.loc 2 184 3 view .LVU448
 2117               		.loc 2 187 2 view .LVU449
 2118 0008 2FEF      		ldi r18,lo8(799999)
 2119 000a 84E3      		ldi r24,hi8(799999)
 2120 000c 9CE0      		ldi r25,hlo8(799999)
 2121 000e 2150      	1:	subi r18,1
 2122 0010 8040      		sbci r24,0
 2123 0012 9040      		sbci r25,0
 2124 0014 01F4      		brne 1b
 2125 0016 00C0      		rjmp .
 2126 0018 0000      		nop
 2127               	.LVL211:
 2128               		.loc 2 187 2 is_stmt 0 view .LVU450
 2129               	.LBE53:
 2130               	.LBE52:
 192:quantum/quantum.c **** }
 2131               		.loc 1 192 3 is_stmt 1 view .LVU451
 2132 001a 0C94 0000 		jmp bootloader_jump
 2133               	.LVL212:
 2134               		.cfi_endproc
 2135               	.LFE122:
 2137               		.section	.text.process_record_quantum,"ax",@progbits
 2138               	.global	process_record_quantum
 2140               	process_record_quantum:
 2141               	.LVL213:
 2142               	.LFB125:
 231:quantum/quantum.c ****     uint16_t keycode = get_record_keycode(record);
 2143               		.loc 1 231 50 view -0
 2144               		.cfi_startproc
 231:quantum/quantum.c ****     uint16_t keycode = get_record_keycode(record);
 2145               		.loc 1 231 50 is_stmt 0 view .LVU453
 2146 0000 0F93      		push r16
 2147               	.LCFI50:
 2148               		.cfi_def_cfa_offset 3
 2149               		.cfi_offset 16, -2
 2150 0002 1F93      		push r17
 2151               	.LCFI51:
 2152               		.cfi_def_cfa_offset 4
 2153               		.cfi_offset 17, -3
 2154 0004 CF93      		push r28
 2155               	.LCFI52:
 2156               		.cfi_def_cfa_offset 5
 2157               		.cfi_offset 28, -4
 2158 0006 DF93      		push r29
 2159               	.LCFI53:
 2160               		.cfi_def_cfa_offset 6
 2161               		.cfi_offset 29, -5
 2162               	/* prologue: function */
 2163               	/* frame size = 0 */
 2164               	/* stack size = 4 */
 2165               	.L__stack_usage = 4
 2166 0008 8C01      		movw r16,r24
 232:quantum/quantum.c **** 
 2167               		.loc 1 232 5 is_stmt 1 view .LVU454
 232:quantum/quantum.c **** 
 2168               		.loc 1 232 24 is_stmt 0 view .LVU455
 2169 000a 0E94 0000 		call get_record_keycode
 2170               	.LVL214:
 232:quantum/quantum.c **** 
 2171               		.loc 1 232 24 view .LVU456
 2172 000e EC01      		movw r28,r24
 2173               	.LVL215:
 250:quantum/quantum.c ****   #if defined(KEY_LOCK_ENABLE)
 2174               		.loc 1 250 3 is_stmt 1 view .LVU457
 264:quantum/quantum.c ****   #if defined(MIDI_ENABLE) && defined(MIDI_ADVANCED)
 2175               		.loc 1 264 5 is_stmt 0 view .LVU458
 2176 0010 B801      		movw r22,r16
 2177 0012 0E94 0000 		call process_record_kb
 2178               	.LVL216:
 281:quantum/quantum.c ****   #endif
 2179               		.loc 1 281 45 view .LVU459
 2180 0016 8823      		tst r24
 2181 0018 01F4      		brne .+2
 2182 001a 00C0      		rjmp .L129
 281:quantum/quantum.c ****   #endif
 2183               		.loc 1 281 5 discriminator 2 view .LVU460
 2184 001c B801      		movw r22,r16
 2185 001e CE01      		movw r24,r28
 2186 0020 0E94 0000 		call process_unicode_common
 2187               	.LVL217:
 264:quantum/quantum.c ****   #if defined(MIDI_ENABLE) && defined(MIDI_ADVANCED)
 2188               		.loc 1 264 40 discriminator 2 view .LVU461
 2189 0024 8823      		tst r24
 2190 0026 01F4      		brne .+2
 2191 0028 00C0      		rjmp .L129
 299:quantum/quantum.c ****   #endif
 2192               		.loc 1 299 5 discriminator 3 view .LVU462
 2193 002a B801      		movw r22,r16
 2194 002c CE01      		movw r24,r28
 2195 002e 0E94 0000 		call process_space_cadet
 2196               	.LVL218:
 281:quantum/quantum.c ****   #endif
 2197               		.loc 1 281 45 discriminator 3 view .LVU463
 2198 0032 8823      		tst r24
 2199 0034 01F4      		brne .+2
 2200 0036 00C0      		rjmp .L129
 307:quantum/quantum.c ****     case RESET:
 2201               		.loc 1 307 3 is_stmt 1 view .LVU464
 2202 0038 CA3C      		cpi r28,-54
 2203 003a 8CE5      		ldi r24,92
 2204 003c D807      		cpc r29,r24
 2205 003e 01F4      		brne .+2
 2206 0040 00C0      		rjmp .L133
 2207 0042 00F0      		brlo .+2
 2208 0044 00C0      		rjmp .L134
 2209 0046 C33C      		cpi r28,-61
 2210 0048 ECE5      		ldi r30,92
 2211 004a DE07      		cpc r29,r30
 2212 004c 01F4      		brne .+2
 2213 004e 00C0      		rjmp .L135
 2214 0050 00F4      		brsh .L136
 2215 0052 C531      		cpi r28,21
 2216 0054 8CE5      		ldi r24,92
 2217 0056 D807      		cpc r29,r24
 2218 0058 00F4      		brsh .L137
 2219 005a C230      		cpi r28,2
 2220 005c 9CE5      		ldi r25,92
 2221 005e D907      		cpc r29,r25
 2222 0060 00F0      		brlo .+2
 2223 0062 00C0      		rjmp .L138
 2224 0064 C115      		cp r28,__zero_reg__
 2225 0066 ECE5      		ldi r30,92
 2226 0068 DE07      		cpc r29,r30
 2227 006a 01F4      		brne .+2
 2228 006c 00C0      		rjmp .L139
 2229 006e C130      		cpi r28,1
 2230 0070 DC45      		sbci r29,92
 2231 0072 01F4      		brne .+2
 2232 0074 00C0      		rjmp .L140
 2233               	.L141:
 713:quantum/quantum.c **** }
 2234               		.loc 1 713 3 view .LVU465
 713:quantum/quantum.c **** }
 2235               		.loc 1 713 10 is_stmt 0 view .LVU466
 2236 0076 C801      		movw r24,r16
 2237               	/* epilogue start */
 714:quantum/quantum.c **** 
 2238               		.loc 1 714 1 view .LVU467
 2239 0078 DF91      		pop r29
 2240 007a CF91      		pop r28
 2241               	.LVL219:
 714:quantum/quantum.c **** 
 2242               		.loc 1 714 1 view .LVU468
 2243 007c 1F91      		pop r17
 2244 007e 0F91      		pop r16
 2245               	.LVL220:
 713:quantum/quantum.c **** }
 2246               		.loc 1 713 10 view .LVU469
 2247 0080 0C94 0000 		jmp process_action_kb
 2248               	.LVL221:
 2249               	.L137:
 713:quantum/quantum.c **** }
 2250               		.loc 1 713 10 view .LVU470
 2251 0084 C631      		cpi r28,22
 2252 0086 8CE5      		ldi r24,92
 2253 0088 D807      		cpc r29,r24
 2254 008a 01F4      		brne .+2
 2255 008c 00C0      		rjmp .L142
 2256 008e C23C      		cpi r28,-62
 2257 0090 DC45      		sbci r29,92
 2258 0092 01F4      		brne .L141
 345:quantum/quantum.c ****     #else
 2259               		.loc 1 345 5 is_stmt 1 view .LVU471
 345:quantum/quantum.c ****     #else
 2260               		.loc 1 345 8 is_stmt 0 view .LVU472
 2261 0094 F801      		movw r30,r16
 2262 0096 8281      		ldd r24,Z+2
 2263 0098 8823      		tst r24
 2264 009a 01F4      		brne .+2
 2265 009c 00C0      		rjmp .L129
 349:quantum/quantum.c ****     }
 2266               		.loc 1 349 7 is_stmt 1 view .LVU473
 2267 009e 0E94 0000 		call rgblight_toggle
 2268               	.LVL222:
 2269 00a2 00C0      		rjmp .L129
 2270               	.L136:
 349:quantum/quantum.c ****     }
 2271               		.loc 1 349 7 is_stmt 0 view .LVU474
 2272 00a4 C63C      		cpi r28,-58
 2273 00a6 ECE5      		ldi r30,92
 2274 00a8 DE07      		cpc r29,r30
 2275 00aa 01F4      		brne .+2
 2276 00ac 00C0      		rjmp .L144
 2277 00ae 00F4      		brsh .L145
 2278 00b0 C43C      		cpi r28,-60
 2279 00b2 8CE5      		ldi r24,92
 2280 00b4 D807      		cpc r29,r24
 2281 00b6 01F4      		brne .+2
 2282 00b8 00C0      		rjmp .L146
 2283 00ba C53C      		cpi r28,-59
 2284 00bc DC45      		sbci r29,92
 2285 00be 01F4      		brne .L141
 377:quantum/quantum.c ****     #else
 2286               		.loc 1 377 5 is_stmt 1 view .LVU475
 377:quantum/quantum.c ****     #else
 2287               		.loc 1 377 8 is_stmt 0 view .LVU476
 2288 00c0 F801      		movw r30,r16
 2289 00c2 8281      		ldd r24,Z+2
 2290 00c4 8823      		tst r24
 2291 00c6 01F4      		brne .+2
 2292 00c8 00C0      		rjmp .L129
 381:quantum/quantum.c ****     }
 2293               		.loc 1 381 7 is_stmt 1 view .LVU477
 2294 00ca 0E94 0000 		call rgblight_increase_hue
 2295               	.LVL223:
 2296 00ce 00C0      		rjmp .L129
 2297               	.L145:
 381:quantum/quantum.c ****     }
 2298               		.loc 1 381 7 is_stmt 0 view .LVU478
 2299 00d0 F801      		movw r30,r16
 2300 00d2 8281      		ldd r24,Z+2
 2301 00d4 C83C      		cpi r28,-56
 2302 00d6 FCE5      		ldi r31,92
 2303 00d8 DF07      		cpc r29,r31
 2304 00da 01F4      		brne .+2
 2305 00dc 00C0      		rjmp .L148
 381:quantum/quantum.c ****     }
 2306               		.loc 1 381 7 view .LVU479
 2307 00de 00F4      		brsh .+2
 2308 00e0 00C0      		rjmp .L292
 417:quantum/quantum.c ****     #else
 2309               		.loc 1 417 5 is_stmt 1 view .LVU480
 417:quantum/quantum.c ****     #else
 2310               		.loc 1 417 8 is_stmt 0 view .LVU481
 2311 00e2 8823      		tst r24
 2312 00e4 01F4      		brne .+2
 2313 00e6 00C0      		rjmp .L129
 421:quantum/quantum.c ****     }
 2314               		.loc 1 421 7 is_stmt 1 view .LVU482
 2315 00e8 0E94 0000 		call rgblight_increase_val
 2316               	.LVL224:
 2317 00ec 00C0      		rjmp .L129
 2318               	.L134:
 421:quantum/quantum.c ****     }
 2319               		.loc 1 421 7 is_stmt 0 view .LVU483
 2320 00ee C13D      		cpi r28,-47
 2321 00f0 ECE5      		ldi r30,92
 2322 00f2 DE07      		cpc r29,r30
 2323 00f4 01F4      		brne .+2
 2324 00f6 00C0      		rjmp .L151
 2325 00f8 00F4      		brsh .L152
 2326 00fa CD3C      		cpi r28,-51
 2327 00fc 8CE5      		ldi r24,92
 2328 00fe D807      		cpc r29,r24
 2329 0100 01F4      		brne .+2
 2330 0102 00C0      		rjmp .L153
 2331 0104 00F4      		brsh .L154
 2332 0106 CB3C      		cpi r28,-53
 2333 0108 ECE5      		ldi r30,92
 2334 010a DE07      		cpc r29,r30
 2335 010c 01F4      		brne .+2
 2336 010e 00C0      		rjmp .L155
 2337 0110 CC3C      		cpi r28,-52
 2338 0112 DC45      		sbci r29,92
 2339 0114 01F0      		breq .+2
 2340 0116 00C0      		rjmp .L141
 440:quantum/quantum.c ****       rgblight_decrease_speed();
 2341               		.loc 1 440 5 is_stmt 1 view .LVU484
 440:quantum/quantum.c ****       rgblight_decrease_speed();
 2342               		.loc 1 440 8 is_stmt 0 view .LVU485
 2343 0118 F801      		movw r30,r16
 2344 011a 8281      		ldd r24,Z+2
 2345 011c 8823      		tst r24
 2346 011e 01F4      		brne .+2
 2347 0120 00C0      		rjmp .L129
 441:quantum/quantum.c ****     }
 2348               		.loc 1 441 7 is_stmt 1 view .LVU486
 2349 0122 0E94 0000 		call rgblight_decrease_speed
 2350               	.LVL225:
 2351 0126 00C0      		rjmp .L129
 2352               	.L154:
 441:quantum/quantum.c ****     }
 2353               		.loc 1 441 7 is_stmt 0 view .LVU487
 2354 0128 F801      		movw r30,r16
 2355 012a 8281      		ldd r24,Z+2
 2356 012c CF3C      		cpi r28,-49
 2357 012e FCE5      		ldi r31,92
 2358 0130 DF07      		cpc r29,r31
 2359 0132 01F4      		brne .+2
 2360 0134 00C0      		rjmp .L157
 441:quantum/quantum.c ****     }
 2361               		.loc 1 441 7 view .LVU488
 2362 0136 00F4      		brsh .+2
 2363 0138 00C0      		rjmp .L293
 475:quantum/quantum.c ****       if ((RGBLIGHT_MODE_RAINBOW_SWIRL <= rgblight_get_mode()) &&
 2364               		.loc 1 475 5 is_stmt 1 view .LVU489
 475:quantum/quantum.c ****       if ((RGBLIGHT_MODE_RAINBOW_SWIRL <= rgblight_get_mode()) &&
 2365               		.loc 1 475 8 is_stmt 0 view .LVU490
 2366 013a 8823      		tst r24
 2367 013c 01F4      		brne .+2
 2368 013e 00C0      		rjmp .L129
 476:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_RAINBOW_SWIRL_end)) {
 2369               		.loc 1 476 7 is_stmt 1 view .LVU491
 476:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_RAINBOW_SWIRL_end)) {
 2370               		.loc 1 476 43 is_stmt 0 view .LVU492
 2371 0140 0E94 0000 		call rgblight_get_mode
 2372               	.LVL226:
 476:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_RAINBOW_SWIRL_end)) {
 2373               		.loc 1 476 10 view .LVU493
 2374 0144 8930      		cpi r24,lo8(9)
 2375 0146 00F0      		brlo .L172
 477:quantum/quantum.c ****         rgblight_step();
 2376               		.loc 1 477 12 discriminator 1 view .LVU494
 2377 0148 0E94 0000 		call rgblight_get_mode
 2378               	.LVL227:
 476:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_RAINBOW_SWIRL_end)) {
 2379               		.loc 1 476 64 discriminator 1 view .LVU495
 2380 014c 8E30      		cpi r24,lo8(14)
 2381 014e 00F4      		brsh .+2
 2382 0150 00C0      		rjmp .L168
 2383               	.L172:
 480:quantum/quantum.c ****       }
 2384               		.loc 1 480 9 is_stmt 1 view .LVU496
 2385 0152 89E0      		ldi r24,lo8(9)
 2386 0154 00C0      		rjmp .L296
 2387               	.L152:
 480:quantum/quantum.c ****       }
 2388               		.loc 1 480 9 is_stmt 0 view .LVU497
 2389 0156 C53D      		cpi r28,-43
 2390 0158 ECE5      		ldi r30,92
 2391 015a DE07      		cpc r29,r30
 2392 015c 01F4      		brne .+2
 2393 015e 00C0      		rjmp .L160
 2394 0160 00F4      		brsh .L161
 2395 0162 F801      		movw r30,r16
 2396 0164 8281      		ldd r24,Z+2
 2397 0166 C33D      		cpi r28,-45
 2398 0168 FCE5      		ldi r31,92
 2399 016a DF07      		cpc r29,r31
 2400 016c 01F4      		brne .+2
 2401 016e 00C0      		rjmp .L162
 480:quantum/quantum.c ****       }
 2402               		.loc 1 480 9 view .LVU498
 2403 0170 00F4      		brsh .+2
 2404 0172 00C0      		rjmp .L294
 518:quantum/quantum.c ****       if ((RGBLIGHT_MODE_STATIC_GRADIENT <= rgblight_get_mode()) &&
 2405               		.loc 1 518 5 is_stmt 1 view .LVU499
 518:quantum/quantum.c ****       if ((RGBLIGHT_MODE_STATIC_GRADIENT <= rgblight_get_mode()) &&
 2406               		.loc 1 518 8 is_stmt 0 view .LVU500
 2407 0174 8823      		tst r24
 2408 0176 01F0      		breq .L129
 519:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_STATIC_GRADIENT_end)) {
 2409               		.loc 1 519 7 is_stmt 1 view .LVU501
 519:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_STATIC_GRADIENT_end)) {
 2410               		.loc 1 519 45 is_stmt 0 view .LVU502
 2411 0178 0E94 0000 		call rgblight_get_mode
 2412               	.LVL228:
 519:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_STATIC_GRADIENT_end)) {
 2413               		.loc 1 519 10 view .LVU503
 2414 017c 8931      		cpi r24,lo8(25)
 2415 017e 00F0      		brlo .L175
 520:quantum/quantum.c ****         rgblight_step();
 2416               		.loc 1 520 12 discriminator 1 view .LVU504
 2417 0180 0E94 0000 		call rgblight_get_mode
 2418               	.LVL229:
 519:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_STATIC_GRADIENT_end)) {
 2419               		.loc 1 519 66 discriminator 1 view .LVU505
 2420 0184 8232      		cpi r24,lo8(34)
 2421 0186 00F4      		brsh .+2
 2422 0188 00C0      		rjmp .L168
 2423               	.L175:
 523:quantum/quantum.c ****       }
 2424               		.loc 1 523 9 is_stmt 1 view .LVU506
 2425 018a 89E1      		ldi r24,lo8(25)
 2426 018c 00C0      		rjmp .L296
 2427               	.L161:
 523:quantum/quantum.c ****       }
 2428               		.loc 1 523 9 is_stmt 0 view .LVU507
 2429 018e CD3D      		cpi r28,-35
 2430 0190 ECE5      		ldi r30,92
 2431 0192 DE07      		cpc r29,r30
 2432 0194 01F4      		brne .+2
 2433 0196 00C0      		rjmp .L165
 2434 0198 CE3D      		cpi r28,-34
 2435 019a FCE5      		ldi r31,92
 2436 019c DF07      		cpc r29,r31
 2437 019e 01F0      		breq .L166
 2438 01a0 CC3D      		cpi r28,-36
 2439 01a2 DC45      		sbci r29,92
 2440 01a4 01F0      		breq .+2
 2441 01a6 00C0      		rjmp .L141
 545:quantum/quantum.c ****         set_output(OUTPUT_AUTO);
 2442               		.loc 1 545 7 is_stmt 1 view .LVU508
 545:quantum/quantum.c ****         set_output(OUTPUT_AUTO);
 2443               		.loc 1 545 10 is_stmt 0 view .LVU509
 2444 01a8 F801      		movw r30,r16
 2445 01aa 8281      		ldd r24,Z+2
 2446 01ac 8823      		tst r24
 2447 01ae 01F0      		breq .L129
 546:quantum/quantum.c ****       }
 2448               		.loc 1 546 9 is_stmt 1 view .LVU510
 2449 01b0 80E0      		ldi r24,0
 2450               	.L297:
 551:quantum/quantum.c ****       }
 2451               		.loc 1 551 9 is_stmt 0 view .LVU511
 2452 01b2 0E94 0000 		call set_output
 2453               	.LVL230:
 2454 01b6 00C0      		rjmp .L129
 2455               	.L139:
 309:quantum/quantum.c ****         reset_keyboard();
 2456               		.loc 1 309 7 is_stmt 1 view .LVU512
 309:quantum/quantum.c ****         reset_keyboard();
 2457               		.loc 1 309 10 is_stmt 0 view .LVU513
 2458 01b8 F801      		movw r30,r16
 2459 01ba 8281      		ldd r24,Z+2
 2460 01bc 8111      		cpse r24,__zero_reg__
 310:quantum/quantum.c ****       }
 2461               		.loc 1 310 9 is_stmt 1 view .LVU514
 2462 01be 0E94 0000 		call reset_keyboard
 2463               	.LVL231:
 2464               	.L129:
 714:quantum/quantum.c **** 
 2465               		.loc 1 714 1 is_stmt 0 view .LVU515
 2466 01c2 80E0      		ldi r24,0
 2467               	/* epilogue start */
 2468 01c4 DF91      		pop r29
 2469 01c6 CF91      		pop r28
 2470               	.LVL232:
 714:quantum/quantum.c **** 
 2471               		.loc 1 714 1 view .LVU516
 2472 01c8 1F91      		pop r17
 2473 01ca 0F91      		pop r16
 2474               	.LVL233:
 714:quantum/quantum.c **** 
 2475               		.loc 1 714 1 view .LVU517
 2476 01cc 0895      		ret
 2477               	.LVL234:
 2478               	.L140:
 314:quantum/quantum.c ****           debug_enable = true;
 2479               		.loc 1 314 7 is_stmt 1 view .LVU518
 314:quantum/quantum.c ****           debug_enable = true;
 2480               		.loc 1 314 10 is_stmt 0 view .LVU519
 2481 01ce F801      		movw r30,r16
 2482 01d0 8281      		ldd r24,Z+2
 2483 01d2 8823      		tst r24
 2484 01d4 01F0      		breq .L129
 315:quantum/quantum.c ****           print("DEBUG: enabled.\n");
 2485               		.loc 1 315 11 is_stmt 1 view .LVU520
 315:quantum/quantum.c ****           print("DEBUG: enabled.\n");
 2486               		.loc 1 315 24 is_stmt 0 view .LVU521
 2487 01d6 8091 0000 		lds r24,debug_config
 2488 01da 8160      		ori r24,lo8(1<<0)
 2489 01dc 8093 0000 		sts debug_config,r24
 2490 01e0 00C0      		rjmp .L129
 2491               	.L166:
 320:quantum/quantum.c ****           eeconfig_init();
 2492               		.loc 1 320 7 is_stmt 1 view .LVU522
 320:quantum/quantum.c ****           eeconfig_init();
 2493               		.loc 1 320 10 is_stmt 0 view .LVU523
 2494 01e2 F801      		movw r30,r16
 2495 01e4 8281      		ldd r24,Z+2
 2496 01e6 8823      		tst r24
 2497 01e8 01F0      		breq .L129
 321:quantum/quantum.c ****       }
 2498               		.loc 1 321 11 is_stmt 1 view .LVU524
 2499 01ea 0E94 0000 		call eeconfig_init
 2500               	.LVL235:
 2501 01ee 00C0      		rjmp .L129
 2502               	.L135:
 353:quantum/quantum.c ****       uint8_t shifted = get_mods() & (MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RSHIFT));
 2503               		.loc 1 353 5 view .LVU525
 353:quantum/quantum.c ****       uint8_t shifted = get_mods() & (MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RSHIFT));
 2504               		.loc 1 353 8 is_stmt 0 view .LVU526
 2505 01f0 F801      		movw r30,r16
 2506 01f2 8281      		ldd r24,Z+2
 2507 01f4 8823      		tst r24
 2508 01f6 01F0      		breq .L129
 2509               	.LBB54:
 354:quantum/quantum.c ****       if(shifted) {
 2510               		.loc 1 354 7 is_stmt 1 view .LVU527
 354:quantum/quantum.c ****       if(shifted) {
 2511               		.loc 1 354 25 is_stmt 0 view .LVU528
 2512 01f8 0E94 0000 		call get_mods
 2513               	.LVL236:
 355:quantum/quantum.c ****         rgblight_step_reverse();
 2514               		.loc 1 355 7 is_stmt 1 view .LVU529
 354:quantum/quantum.c ****       if(shifted) {
 2515               		.loc 1 354 15 is_stmt 0 view .LVU530
 2516 01fc 8272      		andi r24,lo8(34)
 2517               	.LVL237:
 355:quantum/quantum.c ****         rgblight_step_reverse();
 2518               		.loc 1 355 9 view .LVU531
 2519 01fe 01F0      		breq .L168
 2520               	.LVL238:
 2521               	.L169:
 356:quantum/quantum.c ****       }
 2522               		.loc 1 356 9 is_stmt 1 view .LVU532
 2523 0200 0E94 0000 		call rgblight_step_reverse
 2524               	.LVL239:
 2525 0204 00C0      		rjmp .L129
 2526               	.L146:
 2527               	.LBE54:
 364:quantum/quantum.c ****       uint8_t shifted = get_mods() & (MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RSHIFT));
 2528               		.loc 1 364 5 view .LVU533
 364:quantum/quantum.c ****       uint8_t shifted = get_mods() & (MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RSHIFT));
 2529               		.loc 1 364 8 is_stmt 0 view .LVU534
 2530 0206 F801      		movw r30,r16
 2531 0208 8281      		ldd r24,Z+2
 2532 020a 8823      		tst r24
 2533 020c 01F0      		breq .L129
 2534               	.LBB55:
 365:quantum/quantum.c ****       if(shifted) {
 2535               		.loc 1 365 7 is_stmt 1 view .LVU535
 365:quantum/quantum.c ****       if(shifted) {
 2536               		.loc 1 365 25 is_stmt 0 view .LVU536
 2537 020e 0E94 0000 		call get_mods
 2538               	.LVL240:
 366:quantum/quantum.c ****         rgblight_step();
 2539               		.loc 1 366 7 is_stmt 1 view .LVU537
 365:quantum/quantum.c ****       if(shifted) {
 2540               		.loc 1 365 15 is_stmt 0 view .LVU538
 2541 0212 8272      		andi r24,lo8(34)
 2542               	.LVL241:
 366:quantum/quantum.c ****         rgblight_step();
 2543               		.loc 1 366 9 view .LVU539
 2544 0214 01F0      		breq .L169
 2545               	.LVL242:
 2546               	.L168:
 366:quantum/quantum.c ****         rgblight_step();
 2547               		.loc 1 366 9 view .LVU540
 2548               	.LBE55:
 2549               	.LBB56:
 359:quantum/quantum.c ****       }
 2550               		.loc 1 359 9 is_stmt 1 view .LVU541
 2551 0216 0E94 0000 		call rgblight_step
 2552               	.LVL243:
 2553 021a 00C0      		rjmp .L129
 2554               	.L144:
 2555               	.LBE56:
 387:quantum/quantum.c ****     #else
 2556               		.loc 1 387 5 view .LVU542
 387:quantum/quantum.c ****     #else
 2557               		.loc 1 387 8 is_stmt 0 view .LVU543
 2558 021c F801      		movw r30,r16
 2559 021e 8281      		ldd r24,Z+2
 2560 0220 8823      		tst r24
 2561 0222 01F0      		breq .L129
 391:quantum/quantum.c ****     }
 2562               		.loc 1 391 7 is_stmt 1 view .LVU544
 2563 0224 0E94 0000 		call rgblight_decrease_hue
 2564               	.LVL244:
 2565 0228 00C0      		rjmp .L129
 2566               	.L292:
 397:quantum/quantum.c ****     #else
 2567               		.loc 1 397 5 view .LVU545
 397:quantum/quantum.c ****     #else
 2568               		.loc 1 397 8 is_stmt 0 view .LVU546
 2569 022a 8823      		tst r24
 2570 022c 01F0      		breq .L129
 401:quantum/quantum.c ****     }
 2571               		.loc 1 401 7 is_stmt 1 view .LVU547
 2572 022e 0E94 0000 		call rgblight_increase_sat
 2573               	.LVL245:
 2574 0232 00C0      		rjmp .L129
 2575               	.L148:
 407:quantum/quantum.c ****     #else
 2576               		.loc 1 407 5 view .LVU548
 407:quantum/quantum.c ****     #else
 2577               		.loc 1 407 8 is_stmt 0 view .LVU549
 2578 0234 8823      		tst r24
 2579 0236 01F0      		breq .L129
 411:quantum/quantum.c ****     }
 2580               		.loc 1 411 7 is_stmt 1 view .LVU550
 2581 0238 0E94 0000 		call rgblight_decrease_sat
 2582               	.LVL246:
 2583 023c 00C0      		rjmp .L129
 2584               	.L133:
 427:quantum/quantum.c ****     #else
 2585               		.loc 1 427 5 view .LVU551
 427:quantum/quantum.c ****     #else
 2586               		.loc 1 427 8 is_stmt 0 view .LVU552
 2587 023e F801      		movw r30,r16
 2588 0240 8281      		ldd r24,Z+2
 2589 0242 8823      		tst r24
 2590 0244 01F4      		brne .+2
 2591 0246 00C0      		rjmp .L129
 431:quantum/quantum.c ****     }
 2592               		.loc 1 431 7 is_stmt 1 view .LVU553
 2593 0248 0E94 0000 		call rgblight_decrease_val
 2594               	.LVL247:
 2595 024c 00C0      		rjmp .L129
 2596               	.L155:
 435:quantum/quantum.c ****       rgblight_increase_speed();
 2597               		.loc 1 435 5 view .LVU554
 435:quantum/quantum.c ****       rgblight_increase_speed();
 2598               		.loc 1 435 8 is_stmt 0 view .LVU555
 2599 024e F801      		movw r30,r16
 2600 0250 8281      		ldd r24,Z+2
 2601 0252 8823      		tst r24
 2602 0254 01F4      		brne .+2
 2603 0256 00C0      		rjmp .L129
 436:quantum/quantum.c ****     }
 2604               		.loc 1 436 7 is_stmt 1 view .LVU556
 2605 0258 0E94 0000 		call rgblight_increase_speed
 2606               	.LVL248:
 2607 025c 00C0      		rjmp .L129
 2608               	.L153:
 445:quantum/quantum.c ****       rgblight_mode(RGBLIGHT_MODE_STATIC_LIGHT);
 2609               		.loc 1 445 5 view .LVU557
 445:quantum/quantum.c ****       rgblight_mode(RGBLIGHT_MODE_STATIC_LIGHT);
 2610               		.loc 1 445 8 is_stmt 0 view .LVU558
 2611 025e F801      		movw r30,r16
 2612 0260 8281      		ldd r24,Z+2
 2613 0262 8823      		tst r24
 2614 0264 01F4      		brne .+2
 2615 0266 00C0      		rjmp .L129
 446:quantum/quantum.c ****     }
 2616               		.loc 1 446 7 is_stmt 1 view .LVU559
 2617 0268 81E0      		ldi r24,lo8(1)
 2618               	.L296:
 456:quantum/quantum.c ****       }
 2619               		.loc 1 456 9 is_stmt 0 view .LVU560
 2620 026a 0E94 0000 		call rgblight_mode
 2621               	.LVL249:
 2622 026e 00C0      		rjmp .L129
 2623               	.L293:
 451:quantum/quantum.c ****       if ((RGBLIGHT_MODE_BREATHING <= rgblight_get_mode()) &&
 2624               		.loc 1 451 5 is_stmt 1 view .LVU561
 451:quantum/quantum.c ****       if ((RGBLIGHT_MODE_BREATHING <= rgblight_get_mode()) &&
 2625               		.loc 1 451 8 is_stmt 0 view .LVU562
 2626 0270 8823      		tst r24
 2627 0272 01F4      		brne .+2
 2628 0274 00C0      		rjmp .L129
 452:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_BREATHING_end)) {
 2629               		.loc 1 452 7 is_stmt 1 view .LVU563
 452:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_BREATHING_end)) {
 2630               		.loc 1 452 39 is_stmt 0 view .LVU564
 2631 0276 0E94 0000 		call rgblight_get_mode
 2632               	.LVL250:
 452:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_BREATHING_end)) {
 2633               		.loc 1 452 10 view .LVU565
 2634 027a 8230      		cpi r24,lo8(2)
 2635 027c 00F0      		brlo .L170
 453:quantum/quantum.c ****         rgblight_step();
 2636               		.loc 1 453 12 discriminator 1 view .LVU566
 2637 027e 0E94 0000 		call rgblight_get_mode
 2638               	.LVL251:
 452:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_BREATHING_end)) {
 2639               		.loc 1 452 60 discriminator 1 view .LVU567
 2640 0282 8530      		cpi r24,lo8(5)
 2641 0284 00F0      		brlo .L168
 2642               	.L170:
 456:quantum/quantum.c ****       }
 2643               		.loc 1 456 9 is_stmt 1 view .LVU568
 2644 0286 82E0      		ldi r24,lo8(2)
 2645 0288 00C0      		rjmp .L296
 2646               	.L157:
 463:quantum/quantum.c ****       if ((RGBLIGHT_MODE_RAINBOW_MOOD <= rgblight_get_mode()) &&
 2647               		.loc 1 463 5 view .LVU569
 463:quantum/quantum.c ****       if ((RGBLIGHT_MODE_RAINBOW_MOOD <= rgblight_get_mode()) &&
 2648               		.loc 1 463 8 is_stmt 0 view .LVU570
 2649 028a 8823      		tst r24
 2650 028c 01F4      		brne .+2
 2651 028e 00C0      		rjmp .L129
 464:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_RAINBOW_MOOD_end)) {
 2652               		.loc 1 464 7 is_stmt 1 view .LVU571
 464:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_RAINBOW_MOOD_end)) {
 2653               		.loc 1 464 42 is_stmt 0 view .LVU572
 2654 0290 0E94 0000 		call rgblight_get_mode
 2655               	.LVL252:
 464:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_RAINBOW_MOOD_end)) {
 2656               		.loc 1 464 10 view .LVU573
 2657 0294 8630      		cpi r24,lo8(6)
 2658 0296 00F0      		brlo .L171
 465:quantum/quantum.c ****         rgblight_step();
 2659               		.loc 1 465 12 discriminator 1 view .LVU574
 2660 0298 0E94 0000 		call rgblight_get_mode
 2661               	.LVL253:
 464:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_RAINBOW_MOOD_end)) {
 2662               		.loc 1 464 63 discriminator 1 view .LVU575
 2663 029c 8830      		cpi r24,lo8(8)
 2664 029e 00F4      		brsh .+2
 2665 02a0 00C0      		rjmp .L168
 2666               	.L171:
 468:quantum/quantum.c ****       }
 2667               		.loc 1 468 9 is_stmt 1 view .LVU576
 2668 02a2 86E0      		ldi r24,lo8(6)
 2669 02a4 00C0      		rjmp .L296
 2670               	.L151:
 487:quantum/quantum.c ****       if ((RGBLIGHT_MODE_SNAKE <= rgblight_get_mode()) &&
 2671               		.loc 1 487 5 view .LVU577
 487:quantum/quantum.c ****       if ((RGBLIGHT_MODE_SNAKE <= rgblight_get_mode()) &&
 2672               		.loc 1 487 8 is_stmt 0 view .LVU578
 2673 02a6 F801      		movw r30,r16
 2674 02a8 8281      		ldd r24,Z+2
 2675 02aa 8823      		tst r24
 2676 02ac 01F4      		brne .+2
 2677 02ae 00C0      		rjmp .L129
 488:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_SNAKE_end)) {
 2678               		.loc 1 488 7 is_stmt 1 view .LVU579
 488:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_SNAKE_end)) {
 2679               		.loc 1 488 35 is_stmt 0 view .LVU580
 2680 02b0 0E94 0000 		call rgblight_get_mode
 2681               	.LVL254:
 488:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_SNAKE_end)) {
 2682               		.loc 1 488 10 view .LVU581
 2683 02b4 8F30      		cpi r24,lo8(15)
 2684 02b6 00F0      		brlo .L173
 489:quantum/quantum.c ****         rgblight_step();
 2685               		.loc 1 489 12 discriminator 1 view .LVU582
 2686 02b8 0E94 0000 		call rgblight_get_mode
 2687               	.LVL255:
 488:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_SNAKE_end)) {
 2688               		.loc 1 488 56 discriminator 1 view .LVU583
 2689 02bc 8431      		cpi r24,lo8(20)
 2690 02be 00F4      		brsh .+2
 2691 02c0 00C0      		rjmp .L168
 2692               	.L173:
 492:quantum/quantum.c ****       }
 2693               		.loc 1 492 9 is_stmt 1 view .LVU584
 2694 02c2 8FE0      		ldi r24,lo8(15)
 2695 02c4 00C0      		rjmp .L296
 2696               	.L294:
 499:quantum/quantum.c ****       if ((RGBLIGHT_MODE_KNIGHT <= rgblight_get_mode()) &&
 2697               		.loc 1 499 5 view .LVU585
 499:quantum/quantum.c ****       if ((RGBLIGHT_MODE_KNIGHT <= rgblight_get_mode()) &&
 2698               		.loc 1 499 8 is_stmt 0 view .LVU586
 2699 02c6 8823      		tst r24
 2700 02c8 01F4      		brne .+2
 2701 02ca 00C0      		rjmp .L129
 500:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_KNIGHT_end)) {
 2702               		.loc 1 500 7 is_stmt 1 view .LVU587
 500:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_KNIGHT_end)) {
 2703               		.loc 1 500 36 is_stmt 0 view .LVU588
 2704 02cc 0E94 0000 		call rgblight_get_mode
 2705               	.LVL256:
 500:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_KNIGHT_end)) {
 2706               		.loc 1 500 10 view .LVU589
 2707 02d0 8531      		cpi r24,lo8(21)
 2708 02d2 00F0      		brlo .L174
 501:quantum/quantum.c ****         rgblight_step();
 2709               		.loc 1 501 12 discriminator 1 view .LVU590
 2710 02d4 0E94 0000 		call rgblight_get_mode
 2711               	.LVL257:
 500:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_KNIGHT_end)) {
 2712               		.loc 1 500 57 discriminator 1 view .LVU591
 2713 02d8 8731      		cpi r24,lo8(23)
 2714 02da 00F4      		brsh .+2
 2715 02dc 00C0      		rjmp .L168
 2716               	.L174:
 504:quantum/quantum.c ****       }
 2717               		.loc 1 504 9 is_stmt 1 view .LVU592
 2718 02de 85E1      		ldi r24,lo8(21)
 2719 02e0 00C0      		rjmp .L296
 2720               	.L162:
 511:quantum/quantum.c ****       rgblight_mode(RGBLIGHT_MODE_CHRISTMAS);
 2721               		.loc 1 511 5 view .LVU593
 511:quantum/quantum.c ****       rgblight_mode(RGBLIGHT_MODE_CHRISTMAS);
 2722               		.loc 1 511 8 is_stmt 0 view .LVU594
 2723 02e2 8823      		tst r24
 2724 02e4 01F4      		brne .+2
 2725 02e6 00C0      		rjmp .L129
 512:quantum/quantum.c ****     }
 2726               		.loc 1 512 7 is_stmt 1 view .LVU595
 2727 02e8 88E1      		ldi r24,lo8(24)
 2728 02ea 00C0      		rjmp .L296
 2729               	.L160:
 530:quantum/quantum.c ****       rgblight_mode(RGBLIGHT_MODE_RGB_TEST);
 2730               		.loc 1 530 5 view .LVU596
 530:quantum/quantum.c ****       rgblight_mode(RGBLIGHT_MODE_RGB_TEST);
 2731               		.loc 1 530 8 is_stmt 0 view .LVU597
 2732 02ec F801      		movw r30,r16
 2733 02ee 8281      		ldd r24,Z+2
 2734 02f0 8823      		tst r24
 2735 02f2 01F4      		brne .+2
 2736 02f4 00C0      		rjmp .L129
 531:quantum/quantum.c ****     }
 2737               		.loc 1 531 7 is_stmt 1 view .LVU598
 2738 02f6 83E2      		ldi r24,lo8(35)
 2739 02f8 00C0      		rjmp .L296
 2740               	.L165:
 550:quantum/quantum.c ****         set_output(OUTPUT_USB);
 2741               		.loc 1 550 7 view .LVU599
 550:quantum/quantum.c ****         set_output(OUTPUT_USB);
 2742               		.loc 1 550 10 is_stmt 0 view .LVU600
 2743 02fa F801      		movw r30,r16
 2744 02fc 8281      		ldd r24,Z+2
 2745 02fe 8823      		tst r24
 2746 0300 01F4      		brne .+2
 2747 0302 00C0      		rjmp .L129
 551:quantum/quantum.c ****       }
 2748               		.loc 1 551 9 is_stmt 1 view .LVU601
 2749 0304 82E0      		ldi r24,lo8(2)
 2750 0306 00C0      		rjmp .L297
 2751               	.L138:
 563:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 2752               		.loc 1 563 7 view .LVU602
 563:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 2753               		.loc 1 563 10 is_stmt 0 view .LVU603
 2754 0308 F801      		movw r30,r16
 2755 030a 8281      		ldd r24,Z+2
 2756 030c 8823      		tst r24
 2757 030e 01F4      		brne .+2
 2758 0310 00C0      		rjmp .L141
 565:quantum/quantum.c ****             eeconfig_init();
 2759               		.loc 1 565 9 is_stmt 1 view .LVU604
 565:quantum/quantum.c ****             eeconfig_init();
 2760               		.loc 1 565 14 is_stmt 0 view .LVU605
 2761 0312 0E94 0000 		call eeconfig_is_enabled
 2762               	.LVL258:
 565:quantum/quantum.c ****             eeconfig_init();
 2763               		.loc 1 565 12 view .LVU606
 2764 0316 8111      		cpse r24,__zero_reg__
 2765 0318 00C0      		rjmp .L176
 566:quantum/quantum.c ****         }
 2766               		.loc 1 566 13 is_stmt 1 view .LVU607
 2767 031a 0E94 0000 		call eeconfig_init
 2768               	.LVL259:
 2769               	.L176:
 569:quantum/quantum.c ****         switch (keycode)
 2770               		.loc 1 569 9 view .LVU608
 569:quantum/quantum.c ****         switch (keycode)
 2771               		.loc 1 569 29 is_stmt 0 view .LVU609
 2772 031e 0E94 0000 		call eeconfig_read_keymap
 2773               	.LVL260:
 2774 0322 90E0      		ldi r25,0
 2775 0324 9093 0000 		sts keymap_config+1,r25
 2776 0328 8093 0000 		sts keymap_config,r24
 570:quantum/quantum.c ****         {
 2777               		.loc 1 570 9 is_stmt 1 view .LVU610
 2778 032c FE01      		movw r30,r28
 2779 032e E350      		subi r30,3
 2780 0330 FC45      		sbci r31,92
 573:quantum/quantum.c ****             break;
 2781               		.loc 1 573 49 is_stmt 0 view .LVU611
 2782 0332 8091 0000 		lds r24,keymap_config
 2783 0336 8160      		ori r24,lo8(1<<0)
 2784 0338 E231      		cpi r30,18
 2785 033a F105      		cpc r31,__zero_reg__
 2786 033c 00F4      		brsh .L295
 2787 033e E050      		subi r30,lo8(-(gs(.L179)))
 2788 0340 F040      		sbci r31,hi8(-(gs(.L179)))
 2789 0342 0C94 0000 		jmp __tablejump2__
 2790               		.section	.jumptables.gcc.process_record_quantum,"a",@progbits
 2791               		.p2align	1
 2792               	.L179:
 2793 0000 0000      		.word gs(.L196)
 2794 0002 0000      		.word gs(.L195)
 2795 0004 0000      		.word gs(.L194)
 2796 0006 0000      		.word gs(.L193)
 2797 0008 0000      		.word gs(.L192)
 2798 000a 0000      		.word gs(.L191)
 2799 000c 0000      		.word gs(.L190)
 2800 000e 0000      		.word gs(.L189)
 2801 0010 0000      		.word gs(.L188)
 2802 0012 0000      		.word gs(.L187)
 2803 0014 0000      		.word gs(.L186)
 2804 0016 0000      		.word gs(.L185)
 2805 0018 0000      		.word gs(.L184)
 2806 001a 0000      		.word gs(.L183)
 2807 001c 0000      		.word gs(.L182)
 2808 001e 0000      		.word gs(.L181)
 2809 0020 0000      		.word gs(.L180)
 2810 0022 0000      		.word gs(.L178)
 2811               		.section	.text.process_record_quantum
 2812               	.L196:
 576:quantum/quantum.c ****             break;
 2813               		.loc 1 576 13 is_stmt 1 view .LVU612
 576:quantum/quantum.c ****             break;
 2814               		.loc 1 576 47 is_stmt 0 view .LVU613
 2815 0346 8091 0000 		lds r24,keymap_config
 2816 034a 8260      		ori r24,lo8(1<<1)
 2817               	.L295:
 646:quantum/quantum.c ****             break;
 2818               		.loc 1 646 32 view .LVU614
 2819 034c 8093 0000 		sts keymap_config,r24
 647:quantum/quantum.c ****           default:
 2820               		.loc 1 647 13 is_stmt 1 view .LVU615
 651:quantum/quantum.c ****         clear_keyboard(); // clear to prevent stuck keys
 2821               		.loc 1 651 9 view .LVU616
 2822 0350 8091 0000 		lds r24,keymap_config
 2823 0354 0E94 0000 		call eeconfig_update_keymap
 2824               	.LVL261:
 652:quantum/quantum.c **** 
 2825               		.loc 1 652 9 view .LVU617
 2826 0358 0E94 0000 		call clear_keyboard
 2827               	.LVL262:
 654:quantum/quantum.c ****       }
 2828               		.loc 1 654 9 view .LVU618
 654:quantum/quantum.c ****       }
 2829               		.loc 1 654 16 is_stmt 0 view .LVU619
 2830 035c 00C0      		rjmp .L129
 2831               	.L195:
 579:quantum/quantum.c ****             break;
 2832               		.loc 1 579 13 is_stmt 1 view .LVU620
 579:quantum/quantum.c ****             break;
 2833               		.loc 1 579 42 is_stmt 0 view .LVU621
 2834 035e 8091 0000 		lds r24,keymap_config
 2835 0362 8460      		ori r24,lo8(1<<2)
 2836 0364 00C0      		rjmp .L295
 2837               	.L194:
 582:quantum/quantum.c ****             break;
 2838               		.loc 1 582 13 is_stmt 1 view .LVU622
 582:quantum/quantum.c ****             break;
 2839               		.loc 1 582 42 is_stmt 0 view .LVU623
 2840 0366 8091 0000 		lds r24,keymap_config
 2841 036a 8860      		ori r24,lo8(1<<3)
 2842 036c 00C0      		rjmp .L295
 2843               	.L193:
 585:quantum/quantum.c ****             break;
 2844               		.loc 1 585 13 is_stmt 1 view .LVU624
 585:quantum/quantum.c ****             break;
 2845               		.loc 1 585 34 is_stmt 0 view .LVU625
 2846 036e 8091 0000 		lds r24,keymap_config
 2847 0372 8061      		ori r24,lo8(1<<4)
 2848 0374 00C0      		rjmp .L295
 2849               	.L192:
 588:quantum/quantum.c ****             break;
 2850               		.loc 1 588 13 is_stmt 1 view .LVU626
 588:quantum/quantum.c ****             break;
 2851               		.loc 1 588 42 is_stmt 0 view .LVU627
 2852 0376 8091 0000 		lds r24,keymap_config
 2853 037a 8062      		ori r24,lo8(1<<5)
 2854 037c 00C0      		rjmp .L295
 2855               	.L191:
 591:quantum/quantum.c ****             break;
 2856               		.loc 1 591 13 is_stmt 1 view .LVU628
 591:quantum/quantum.c ****             break;
 2857               		.loc 1 591 52 is_stmt 0 view .LVU629
 2858 037e 8091 0000 		lds r24,keymap_config
 2859 0382 8064      		ori r24,lo8(1<<6)
 2860 0384 00C0      		rjmp .L295
 2861               	.L190:
 594:quantum/quantum.c ****             break;
 2862               		.loc 1 594 13 is_stmt 1 view .LVU630
 594:quantum/quantum.c ****             break;
 2863               		.loc 1 594 32 is_stmt 0 view .LVU631
 2864 0386 8091 0000 		lds r24,keymap_config
 2865 038a 8068      		ori r24,lo8(1<<7)
 2866 038c 00C0      		rjmp .L295
 2867               	.L189:
 597:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 2868               		.loc 1 597 13 is_stmt 1 view .LVU632
 598:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 2869               		.loc 1 598 13 view .LVU633
 597:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 2870               		.loc 1 597 42 is_stmt 0 view .LVU634
 2871 038e 8091 0000 		lds r24,keymap_config
 2872 0392 8C60      		ori r24,lo8(12)
 2873 0394 00C0      		rjmp .L295
 2874               	.L188:
 604:quantum/quantum.c ****             break;
 2875               		.loc 1 604 13 is_stmt 1 view .LVU635
 604:quantum/quantum.c ****             break;
 2876               		.loc 1 604 49 is_stmt 0 view .LVU636
 2877 0396 8091 0000 		lds r24,keymap_config
 2878 039a 8E7F      		andi r24,lo8(~(1<<0))
 2879 039c 00C0      		rjmp .L295
 2880               	.L187:
 607:quantum/quantum.c ****             break;
 2881               		.loc 1 607 13 is_stmt 1 view .LVU637
 607:quantum/quantum.c ****             break;
 2882               		.loc 1 607 47 is_stmt 0 view .LVU638
 2883 039e 8091 0000 		lds r24,keymap_config
 2884 03a2 8D7F      		andi r24,lo8(~(1<<1))
 2885 03a4 00C0      		rjmp .L295
 2886               	.L186:
 610:quantum/quantum.c ****             break;
 2887               		.loc 1 610 13 is_stmt 1 view .LVU639
 610:quantum/quantum.c ****             break;
 2888               		.loc 1 610 42 is_stmt 0 view .LVU640
 2889 03a6 8091 0000 		lds r24,keymap_config
 2890 03aa 8B7F      		andi r24,lo8(~(1<<2))
 2891 03ac 00C0      		rjmp .L295
 2892               	.L185:
 613:quantum/quantum.c ****             break;
 2893               		.loc 1 613 13 is_stmt 1 view .LVU641
 613:quantum/quantum.c ****             break;
 2894               		.loc 1 613 42 is_stmt 0 view .LVU642
 2895 03ae 8091 0000 		lds r24,keymap_config
 2896 03b2 877F      		andi r24,lo8(~(1<<3))
 2897 03b4 00C0      		rjmp .L295
 2898               	.L184:
 616:quantum/quantum.c ****             break;
 2899               		.loc 1 616 13 is_stmt 1 view .LVU643
 616:quantum/quantum.c ****             break;
 2900               		.loc 1 616 34 is_stmt 0 view .LVU644
 2901 03b6 8091 0000 		lds r24,keymap_config
 2902 03ba 8F7E      		andi r24,lo8(~(1<<4))
 2903 03bc 00C0      		rjmp .L295
 2904               	.L183:
 619:quantum/quantum.c ****             break;
 2905               		.loc 1 619 13 is_stmt 1 view .LVU645
 619:quantum/quantum.c ****             break;
 2906               		.loc 1 619 42 is_stmt 0 view .LVU646
 2907 03be 8091 0000 		lds r24,keymap_config
 2908 03c2 8F7D      		andi r24,lo8(~(1<<5))
 2909 03c4 00C0      		rjmp .L295
 2910               	.L182:
 622:quantum/quantum.c ****             break;
 2911               		.loc 1 622 13 is_stmt 1 view .LVU647
 622:quantum/quantum.c ****             break;
 2912               		.loc 1 622 52 is_stmt 0 view .LVU648
 2913 03c6 8091 0000 		lds r24,keymap_config
 2914 03ca 8F7B      		andi r24,lo8(~(1<<6))
 2915 03cc 00C0      		rjmp .L295
 2916               	.L181:
 625:quantum/quantum.c ****             break;
 2917               		.loc 1 625 13 is_stmt 1 view .LVU649
 625:quantum/quantum.c ****             break;
 2918               		.loc 1 625 32 is_stmt 0 view .LVU650
 2919 03ce 8091 0000 		lds r24,keymap_config
 2920 03d2 8F77      		andi r24,lo8(~(1<<7))
 2921 03d4 00C0      		rjmp .L295
 2922               	.L180:
 628:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 2923               		.loc 1 628 13 is_stmt 1 view .LVU651
 629:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 2924               		.loc 1 629 13 view .LVU652
 628:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 2925               		.loc 1 628 42 is_stmt 0 view .LVU653
 2926 03d6 8091 0000 		lds r24,keymap_config
 2927 03da 837F      		andi r24,lo8(-13)
 2928 03dc 00C0      		rjmp .L295
 2929               	.L178:
 646:quantum/quantum.c ****             break;
 2930               		.loc 1 646 13 is_stmt 1 view .LVU654
 646:quantum/quantum.c ****             break;
 2931               		.loc 1 646 48 is_stmt 0 view .LVU655
 2932 03de 9091 0000 		lds r25,keymap_config
 646:quantum/quantum.c ****             break;
 2933               		.loc 1 646 32 view .LVU656
 2934 03e2 892F      		mov r24,r25
 2935 03e4 97FB      		bst r25,7
 2936 03e6 87F9      		bld r24,7
 2937 03e8 8058      		subi r24,0x80
 2938 03ea 00C0      		rjmp .L295
 2939               	.L142:
 2940               	.LBB57:
 659:quantum/quantum.c ****                                       |MOD_BIT(KC_LGUI)|MOD_BIT(KC_RGUI)));
 2941               		.loc 1 659 7 is_stmt 1 view .LVU657
 659:quantum/quantum.c ****                                       |MOD_BIT(KC_LGUI)|MOD_BIT(KC_RGUI)));
 2942               		.loc 1 659 25 is_stmt 0 view .LVU658
 2943 03ec 0E94 0000 		call get_mods
 2944               	.LVL263:
 692:quantum/quantum.c ****         grave_esc_was_shifted = shifted;
 2945               		.loc 1 692 7 is_stmt 1 view .LVU659
 692:quantum/quantum.c ****         grave_esc_was_shifted = shifted;
 2946               		.loc 1 692 10 is_stmt 0 view .LVU660
 2947 03f0 F801      		movw r30,r16
 2948 03f2 9281      		ldd r25,Z+2
 2949 03f4 9923      		tst r25
 2950 03f6 01F0      		breq .L198
 659:quantum/quantum.c ****                                       |MOD_BIT(KC_LGUI)|MOD_BIT(KC_RGUI)));
 2951               		.loc 1 659 15 view .LVU661
 2952 03f8 8A7A      		andi r24,lo8(-86)
 2953               	.LVL264:
 693:quantum/quantum.c ****         add_key(shifted ? KC_GRAVE : KC_ESCAPE);
 2954               		.loc 1 693 9 is_stmt 1 view .LVU662
 693:quantum/quantum.c ****         add_key(shifted ? KC_GRAVE : KC_ESCAPE);
 2955               		.loc 1 693 31 is_stmt 0 view .LVU663
 2956 03fa 91E0      		ldi r25,lo8(1)
 2957 03fc 01F4      		brne .L199
 2958 03fe 90E0      		ldi r25,0
 2959               	.L199:
 2960 0400 9093 0000 		sts grave_esc_was_shifted,r25
 694:quantum/quantum.c ****       }
 2961               		.loc 1 694 9 is_stmt 1 view .LVU664
 2962 0404 8111      		cpse r24,__zero_reg__
 2963 0406 00C0      		rjmp .L203
 2964 0408 89E2      		ldi r24,lo8(41)
 2965               	.LVL265:
 2966               	.L200:
 694:quantum/quantum.c ****       }
 2967               		.loc 1 694 9 is_stmt 0 discriminator 4 view .LVU665
 2968 040a 0E94 0000 		call add_key
 2969               	.LVL266:
 2970               	.L201:
 700:quantum/quantum.c ****       return false;
 2971               		.loc 1 700 7 is_stmt 1 view .LVU666
 2972 040e 0E94 0000 		call send_keyboard_report
 2973               	.LVL267:
 701:quantum/quantum.c ****     }
 2974               		.loc 1 701 7 view .LVU667
 701:quantum/quantum.c ****     }
 2975               		.loc 1 701 14 is_stmt 0 view .LVU668
 2976 0412 00C0      		rjmp .L129
 2977               	.LVL268:
 2978               	.L203:
 694:quantum/quantum.c ****       }
 2979               		.loc 1 694 9 view .LVU669
 2980 0414 85E3      		ldi r24,lo8(53)
 2981               	.LVL269:
 694:quantum/quantum.c ****       }
 2982               		.loc 1 694 9 view .LVU670
 2983 0416 00C0      		rjmp .L200
 2984               	.LVL270:
 2985               	.L198:
 697:quantum/quantum.c ****       }
 2986               		.loc 1 697 9 is_stmt 1 view .LVU671
 2987 0418 8091 0000 		lds r24,grave_esc_was_shifted
 2988               	.LVL271:
 697:quantum/quantum.c ****       }
 2989               		.loc 1 697 9 is_stmt 0 view .LVU672
 2990 041c 8111      		cpse r24,__zero_reg__
 2991 041e 00C0      		rjmp .L204
 2992 0420 89E2      		ldi r24,lo8(41)
 2993               	.L202:
 697:quantum/quantum.c ****       }
 2994               		.loc 1 697 9 discriminator 4 view .LVU673
 2995 0422 0E94 0000 		call del_key
 2996               	.LVL272:
 2997 0426 00C0      		rjmp .L201
 2998               	.L204:
 697:quantum/quantum.c ****       }
 2999               		.loc 1 697 9 view .LVU674
 3000 0428 85E3      		ldi r24,lo8(53)
 3001 042a 00C0      		rjmp .L202
 3002               	.LBE57:
 3003               		.cfi_endproc
 3004               	.LFE125:
 3006               		.weak	ascii_to_keycode_lut
 3007               		.section	.progmem.data.ascii_to_keycode_lut,"a",@progbits
 3010               	ascii_to_keycode_lut:
 3011 0000 00        		.byte	0
 3012 0001 00        		.byte	0
 3013 0002 00        		.byte	0
 3014 0003 00        		.byte	0
 3015 0004 00        		.byte	0
 3016 0005 00        		.byte	0
 3017 0006 00        		.byte	0
 3018 0007 00        		.byte	0
 3019 0008 2A        		.byte	42
 3020 0009 2B        		.byte	43
 3021 000a 28        		.byte	40
 3022 000b 00        		.byte	0
 3023 000c 00        		.byte	0
 3024 000d 00        		.byte	0
 3025 000e 00        		.byte	0
 3026 000f 00        		.byte	0
 3027 0010 00        		.byte	0
 3028 0011 00        		.byte	0
 3029 0012 00        		.byte	0
 3030 0013 00        		.byte	0
 3031 0014 00        		.byte	0
 3032 0015 00        		.byte	0
 3033 0016 00        		.byte	0
 3034 0017 00        		.byte	0
 3035 0018 00        		.byte	0
 3036 0019 00        		.byte	0
 3037 001a 00        		.byte	0
 3038 001b 29        		.byte	41
 3039 001c 00        		.byte	0
 3040 001d 00        		.byte	0
 3041 001e 00        		.byte	0
 3042 001f 00        		.byte	0
 3043 0020 2C        		.byte	44
 3044 0021 1E        		.byte	30
 3045 0022 34        		.byte	52
 3046 0023 20        		.byte	32
 3047 0024 21        		.byte	33
 3048 0025 22        		.byte	34
 3049 0026 24        		.byte	36
 3050 0027 34        		.byte	52
 3051 0028 26        		.byte	38
 3052 0029 27        		.byte	39
 3053 002a 25        		.byte	37
 3054 002b 2E        		.byte	46
 3055 002c 36        		.byte	54
 3056 002d 2D        		.byte	45
 3057 002e 37        		.byte	55
 3058 002f 38        		.byte	56
 3059 0030 27        		.byte	39
 3060 0031 1E        		.byte	30
 3061 0032 1F        		.byte	31
 3062 0033 20        		.byte	32
 3063 0034 21        		.byte	33
 3064 0035 22        		.byte	34
 3065 0036 23        		.byte	35
 3066 0037 24        		.byte	36
 3067 0038 25        		.byte	37
 3068 0039 26        		.byte	38
 3069 003a 33        		.byte	51
 3070 003b 33        		.byte	51
 3071 003c 36        		.byte	54
 3072 003d 2E        		.byte	46
 3073 003e 37        		.byte	55
 3074 003f 38        		.byte	56
 3075 0040 1F        		.byte	31
 3076 0041 04        		.byte	4
 3077 0042 05        		.byte	5
 3078 0043 06        		.byte	6
 3079 0044 07        		.byte	7
 3080 0045 08        		.byte	8
 3081 0046 09        		.byte	9
 3082 0047 0A        		.byte	10
 3083 0048 0B        		.byte	11
 3084 0049 0C        		.byte	12
 3085 004a 0D        		.byte	13
 3086 004b 0E        		.byte	14
 3087 004c 0F        		.byte	15
 3088 004d 10        		.byte	16
 3089 004e 11        		.byte	17
 3090 004f 12        		.byte	18
 3091 0050 13        		.byte	19
 3092 0051 14        		.byte	20
 3093 0052 15        		.byte	21
 3094 0053 16        		.byte	22
 3095 0054 17        		.byte	23
 3096 0055 18        		.byte	24
 3097 0056 19        		.byte	25
 3098 0057 1A        		.byte	26
 3099 0058 1B        		.byte	27
 3100 0059 1C        		.byte	28
 3101 005a 1D        		.byte	29
 3102 005b 2F        		.byte	47
 3103 005c 31        		.byte	49
 3104 005d 30        		.byte	48
 3105 005e 23        		.byte	35
 3106 005f 2D        		.byte	45
 3107 0060 35        		.byte	53
 3108 0061 04        		.byte	4
 3109 0062 05        		.byte	5
 3110 0063 06        		.byte	6
 3111 0064 07        		.byte	7
 3112 0065 08        		.byte	8
 3113 0066 09        		.byte	9
 3114 0067 0A        		.byte	10
 3115 0068 0B        		.byte	11
 3116 0069 0C        		.byte	12
 3117 006a 0D        		.byte	13
 3118 006b 0E        		.byte	14
 3119 006c 0F        		.byte	15
 3120 006d 10        		.byte	16
 3121 006e 11        		.byte	17
 3122 006f 12        		.byte	18
 3123 0070 13        		.byte	19
 3124 0071 14        		.byte	20
 3125 0072 15        		.byte	21
 3126 0073 16        		.byte	22
 3127 0074 17        		.byte	23
 3128 0075 18        		.byte	24
 3129 0076 19        		.byte	25
 3130 0077 1A        		.byte	26
 3131 0078 1B        		.byte	27
 3132 0079 1C        		.byte	28
 3133 007a 1D        		.byte	29
 3134 007b 2F        		.byte	47
 3135 007c 31        		.byte	49
 3136 007d 30        		.byte	48
 3137 007e 35        		.byte	53
 3138 007f 4C        		.byte	76
 3139               		.weak	ascii_to_altgr_lut
 3140               		.section	.progmem.data.ascii_to_altgr_lut,"a",@progbits
 3143               	ascii_to_altgr_lut:
 3144 0000 0000 0000 		.zero	128
 3144      0000 0000 
 3144      0000 0000 
 3144      0000 0000 
 3144      0000 0000 
 3145               		.weak	ascii_to_shift_lut
 3146               		.section	.progmem.data.ascii_to_shift_lut,"a",@progbits
 3149               	ascii_to_shift_lut:
 3150 0000 00        		.byte	0
 3151 0001 00        		.byte	0
 3152 0002 00        		.byte	0
 3153 0003 00        		.byte	0
 3154 0004 00        		.byte	0
 3155 0005 00        		.byte	0
 3156 0006 00        		.byte	0
 3157 0007 00        		.byte	0
 3158 0008 00        		.byte	0
 3159 0009 00        		.byte	0
 3160 000a 00        		.byte	0
 3161 000b 00        		.byte	0
 3162 000c 00        		.byte	0
 3163 000d 00        		.byte	0
 3164 000e 00        		.byte	0
 3165 000f 00        		.byte	0
 3166 0010 00        		.byte	0
 3167 0011 00        		.byte	0
 3168 0012 00        		.byte	0
 3169 0013 00        		.byte	0
 3170 0014 00        		.byte	0
 3171 0015 00        		.byte	0
 3172 0016 00        		.byte	0
 3173 0017 00        		.byte	0
 3174 0018 00        		.byte	0
 3175 0019 00        		.byte	0
 3176 001a 00        		.byte	0
 3177 001b 00        		.byte	0
 3178 001c 00        		.byte	0
 3179 001d 00        		.byte	0
 3180 001e 00        		.byte	0
 3181 001f 00        		.byte	0
 3182 0020 00        		.byte	0
 3183 0021 01        		.byte	1
 3184 0022 01        		.byte	1
 3185 0023 01        		.byte	1
 3186 0024 01        		.byte	1
 3187 0025 01        		.byte	1
 3188 0026 01        		.byte	1
 3189 0027 00        		.byte	0
 3190 0028 01        		.byte	1
 3191 0029 01        		.byte	1
 3192 002a 01        		.byte	1
 3193 002b 01        		.byte	1
 3194 002c 00        		.byte	0
 3195 002d 00        		.byte	0
 3196 002e 00        		.byte	0
 3197 002f 00        		.byte	0
 3198 0030 00        		.byte	0
 3199 0031 00        		.byte	0
 3200 0032 00        		.byte	0
 3201 0033 00        		.byte	0
 3202 0034 00        		.byte	0
 3203 0035 00        		.byte	0
 3204 0036 00        		.byte	0
 3205 0037 00        		.byte	0
 3206 0038 00        		.byte	0
 3207 0039 00        		.byte	0
 3208 003a 01        		.byte	1
 3209 003b 00        		.byte	0
 3210 003c 01        		.byte	1
 3211 003d 00        		.byte	0
 3212 003e 01        		.byte	1
 3213 003f 01        		.byte	1
 3214 0040 01        		.byte	1
 3215 0041 01        		.byte	1
 3216 0042 01        		.byte	1
 3217 0043 01        		.byte	1
 3218 0044 01        		.byte	1
 3219 0045 01        		.byte	1
 3220 0046 01        		.byte	1
 3221 0047 01        		.byte	1
 3222 0048 01        		.byte	1
 3223 0049 01        		.byte	1
 3224 004a 01        		.byte	1
 3225 004b 01        		.byte	1
 3226 004c 01        		.byte	1
 3227 004d 01        		.byte	1
 3228 004e 01        		.byte	1
 3229 004f 01        		.byte	1
 3230 0050 01        		.byte	1
 3231 0051 01        		.byte	1
 3232 0052 01        		.byte	1
 3233 0053 01        		.byte	1
 3234 0054 01        		.byte	1
 3235 0055 01        		.byte	1
 3236 0056 01        		.byte	1
 3237 0057 01        		.byte	1
 3238 0058 01        		.byte	1
 3239 0059 01        		.byte	1
 3240 005a 01        		.byte	1
 3241 005b 00        		.byte	0
 3242 005c 00        		.byte	0
 3243 005d 00        		.byte	0
 3244 005e 01        		.byte	1
 3245 005f 01        		.byte	1
 3246 0060 00        		.byte	0
 3247 0061 00        		.byte	0
 3248 0062 00        		.byte	0
 3249 0063 00        		.byte	0
 3250 0064 00        		.byte	0
 3251 0065 00        		.byte	0
 3252 0066 00        		.byte	0
 3253 0067 00        		.byte	0
 3254 0068 00        		.byte	0
 3255 0069 00        		.byte	0
 3256 006a 00        		.byte	0
 3257 006b 00        		.byte	0
 3258 006c 00        		.byte	0
 3259 006d 00        		.byte	0
 3260 006e 00        		.byte	0
 3261 006f 00        		.byte	0
 3262 0070 00        		.byte	0
 3263 0071 00        		.byte	0
 3264 0072 00        		.byte	0
 3265 0073 00        		.byte	0
 3266 0074 00        		.byte	0
 3267 0075 00        		.byte	0
 3268 0076 00        		.byte	0
 3269 0077 00        		.byte	0
 3270 0078 00        		.byte	0
 3271 0079 00        		.byte	0
 3272 007a 00        		.byte	0
 3273 007b 01        		.byte	1
 3274 007c 01        		.byte	1
 3275 007d 01        		.byte	1
 3276 007e 01        		.byte	1
 3277 007f 00        		.byte	0
 3278               		.section	.bss.grave_esc_was_shifted,"aw",@nobits
 3281               	grave_esc_was_shifted:
 3282 0000 00        		.zero	1
 3283               		.text
 3284               	.Letext0:
 3285               		.file 3 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/stdint.h"
 3286               		.file 4 "/usr/local/Cellar/avr-gcc/8.1.0/lib/avr-gcc/8/gcc/avr/8.1.0/include/stddef.h"
 3287               		.file 5 "tmk_core/common/keyboard.h"
 3288               		.file 6 "tmk_core/common/action.h"
 3289               		.file 7 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 3290               		.file 8 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 3291               		.file 9 "lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 3292               		.file 10 "lib/lufa/LUFA/Drivers/USB/Core/HostStandardReq.h"
 3293               		.file 11 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/stdio.h"
 3294               		.file 12 "tmk_core/common/report.h"
 3295               		.file 13 "tmk_core/common/host.h"
 3296               		.file 14 "tmk_core/common/debug.h"
 3297               		.file 15 "quantum/keycode_config.h"
 3298               		.file 16 "tmk_core/common/keycode.h"
 3299               		.file 17 "quantum/quantum_keycodes.h"
 3300               		.file 18 "quantum/keymap.h"
 3301               		.file 19 "quantum/rgblight.h"
 3302               		.file 20 "quantum/rgblight_types.h"
 3303               		.file 21 "tmk_core/common/action_layer.h"
 3304               		.file 22 "tmk_core/common/timer.h"
 3305               		.file 23 "tmk_core/common/action_util.h"
 3306               		.file 24 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/stdlib.h"
 3307               		.file 25 "quantum/process_keycode/process_unicode_common.h"
 3308               		.file 26 "quantum/quantum.h"
 3309               		.file 27 "tmk_core/protocol/lufa/outputselect.h"
 3310               		.file 28 "tmk_core/common/backlight.h"
 3311               		.file 29 "tmk_core/common/eeconfig.h"
 3312               		.file 30 "tmk_core/common/matrix.h"
 3313               		.file 31 "tmk_core/common/bootloader.h"
 3314               		.file 32 "quantum/process_keycode/process_space_cadet.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 quantum.c
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:4      *ABS*:000000000000003f __SREG__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:12     .text.do_code16:0000000000000000 do_code16
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:145    .text.qk_register_weak_mods:0000000000000000 qk_register_weak_mods
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:177    .text.qk_register_mods:0000000000000000 qk_register_mods
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:190    .text.qk_unregister_weak_mods:0000000000000000 qk_unregister_weak_mods
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:222    .text.qk_unregister_mods:0000000000000000 qk_unregister_mods
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:236    .text.register_code16:0000000000000000 register_code16
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:294    .text.unregister_code16:0000000000000000 unregister_code16
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:352    .text.tap_code16:0000000000000000 tap_code16
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:391    .text.process_action_kb:0000000000000000 process_action_kb
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:413    .text.process_record_user:0000000000000000 process_record_user
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:435    .text.process_record_kb:0000000000000000 process_record_kb
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:455    .text.get_event_keycode:0000000000000000 get_event_keycode
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:562    .text.get_record_keycode:0000000000000000 get_record_keycode
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:591    .text.send_char:0000000000000000 send_char
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:3010   .progmem.data.ascii_to_keycode_lut:0000000000000000 ascii_to_keycode_lut
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:3149   .progmem.data.ascii_to_shift_lut:0000000000000000 ascii_to_shift_lut
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:3143   .progmem.data.ascii_to_altgr_lut:0000000000000000 ascii_to_altgr_lut
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:750    .text.send_string_with_delay:0000000000000000 send_string_with_delay
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:927    .text.send_string:0000000000000000 send_string
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:947    .text.send_string_with_delay_P:0000000000000000 send_string_with_delay_P
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:1175   .text.send_string_P:0000000000000000 send_string_P
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:1195   .text.set_single_persistent_default_layer:0000000000000000 set_single_persistent_default_layer
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:1247   .text.update_tri_layer_state:0000000000000000 update_tri_layer_state
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:1420   .text.update_tri_layer:0000000000000000 update_tri_layer
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:1462   .text.tap_random_base64:0000000000000000 tap_random_base64
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:1597   .text.bootmagic_lite:0000000000000000 bootmagic_lite
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:1659   .text.matrix_init_quantum:0000000000000000 matrix_init_quantum
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:1690   .text.matrix_scan_quantum:0000000000000000 matrix_scan_quantum
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:1707   .text.backlight_init_ports:0000000000000000 backlight_init_ports
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:1722   .text.send_nibble:0000000000000000 send_nibble
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:1786   .text.send_byte:0000000000000000 send_byte
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:1826   .text.send_word:0000000000000000 send_word
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:1863   .text.send_dword:0000000000000000 send_dword
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:1911   .text.hex_to_keycode:0000000000000000 hex_to_keycode
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:1956   .text.api_send_unicode:0000000000000000 api_send_unicode
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:1974   .text.led_set_user:0000000000000000 led_set_user
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:1974   .text.led_set_user:0000000000000000 led_set_user.localalias.1
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:1993   .text.backlight_set:0000000000000000 backlight_set
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:2008   .text.led_set_kb:0000000000000000 led_set_kb
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:2027   .text.led_init_ports:0000000000000000 led_init_ports
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:2044   .text.led_set:0000000000000000 led_set
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:2063   .text.startup_user:0000000000000000 startup_user
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:2078   .text.shutdown_user:0000000000000000 shutdown_user
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:2093   .text.reset_keyboard:0000000000000000 reset_keyboard
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:2140   .text.process_record_quantum:0000000000000000 process_record_quantum
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccllKXXO.s:3281   .bss.grave_esc_was_shifted:0000000000000000 grave_esc_was_shifted

UNDEFINED SYMBOLS
add_weak_mods
send_keyboard_report
del_weak_mods
register_code
unregister_code
disable_action_cache
layer_switch_get_layer
update_source_layers_cache
keymap_key_to_keycode
read_source_layers_cache
tap_code
eeconfig_update_default_layer
default_layer_set
layer_state
layer_state_set
matrix_scan
matrix_get_row
eeconfig_disable
bootloader_jump
eeconfig_is_enabled
eeconfig_init
unicode_input_mode_init
matrix_init_kb
matrix_scan_kb
clear_keyboard
process_unicode_common
process_space_cadet
rgblight_toggle
rgblight_increase_hue
rgblight_increase_val
rgblight_decrease_speed
rgblight_get_mode
set_output
debug_config
get_mods
rgblight_step_reverse
rgblight_step
rgblight_decrease_hue
rgblight_increase_sat
rgblight_decrease_sat
rgblight_decrease_val
rgblight_increase_speed
rgblight_mode
eeconfig_read_keymap
keymap_config
__tablejump2__
eeconfig_update_keymap
add_key
del_key
__do_clear_bss
