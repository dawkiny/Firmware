   1               		.file	"command.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.mousekey_param_inc,"ax",@progbits
  12               	mousekey_param_inc:
  13               	.LVL0:
  14               	.LFB122:
  15               		.file 1 "tmk_core/common/command.c"
   1:tmk_core/common/command.c **** /*
   2:tmk_core/common/command.c **** Copyright 2011 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/command.c **** 
   4:tmk_core/common/command.c **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/command.c **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/command.c **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/command.c **** (at your option) any later version.
   8:tmk_core/common/command.c **** 
   9:tmk_core/common/command.c **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/command.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/command.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/command.c **** GNU General Public License for more details.
  13:tmk_core/common/command.c **** 
  14:tmk_core/common/command.c **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/command.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/command.c **** */
  17:tmk_core/common/command.c **** #include <stdint.h>
  18:tmk_core/common/command.c **** #include <stdbool.h>
  19:tmk_core/common/command.c **** #include "wait.h"
  20:tmk_core/common/command.c **** #include "keycode.h"
  21:tmk_core/common/command.c **** #include "host.h"
  22:tmk_core/common/command.c **** #include "keymap.h"
  23:tmk_core/common/command.c **** #include "print.h"
  24:tmk_core/common/command.c **** #include "debug.h"
  25:tmk_core/common/command.c **** #include "util.h"
  26:tmk_core/common/command.c **** #include "timer.h"
  27:tmk_core/common/command.c **** #include "keyboard.h"
  28:tmk_core/common/command.c **** #include "bootloader.h"
  29:tmk_core/common/command.c **** #include "action_layer.h"
  30:tmk_core/common/command.c **** #include "action_util.h"
  31:tmk_core/common/command.c **** #include "eeconfig.h"
  32:tmk_core/common/command.c **** #include "sleep_led.h"
  33:tmk_core/common/command.c **** #include "led.h"
  34:tmk_core/common/command.c **** #include "command.h"
  35:tmk_core/common/command.c **** #include "backlight.h"
  36:tmk_core/common/command.c **** #include "quantum.h"
  37:tmk_core/common/command.c **** #include "version.h"
  38:tmk_core/common/command.c **** 
  39:tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  40:tmk_core/common/command.c **** #include "mousekey.h"
  41:tmk_core/common/command.c **** #endif
  42:tmk_core/common/command.c **** 
  43:tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
  44:tmk_core/common/command.c **** 	#include "usb_keyboard.h"
  45:tmk_core/common/command.c **** 		#ifdef EXTRAKEY_ENABLE
  46:tmk_core/common/command.c **** 		#include "usb_extra.h"
  47:tmk_core/common/command.c **** 	#endif
  48:tmk_core/common/command.c **** #endif
  49:tmk_core/common/command.c **** 
  50:tmk_core/common/command.c **** #ifdef PROTOCOL_VUSB
  51:tmk_core/common/command.c **** 	#include "usbdrv.h"
  52:tmk_core/common/command.c **** #endif
  53:tmk_core/common/command.c **** 
  54:tmk_core/common/command.c **** #ifdef AUDIO_ENABLE
  55:tmk_core/common/command.c ****     #include "audio.h"
  56:tmk_core/common/command.c **** #endif /* AUDIO_ENABLE */
  57:tmk_core/common/command.c **** 
  58:tmk_core/common/command.c **** 
  59:tmk_core/common/command.c **** static bool command_common(uint8_t code);
  60:tmk_core/common/command.c **** static void command_common_help(void);
  61:tmk_core/common/command.c **** static void print_version(void);
  62:tmk_core/common/command.c **** static void print_status(void);
  63:tmk_core/common/command.c **** static bool command_console(uint8_t code);
  64:tmk_core/common/command.c **** static void command_console_help(void);
  65:tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  66:tmk_core/common/command.c **** static bool mousekey_console(uint8_t code);
  67:tmk_core/common/command.c **** static void mousekey_console_help(void);
  68:tmk_core/common/command.c **** #endif
  69:tmk_core/common/command.c **** 
  70:tmk_core/common/command.c **** static void switch_default_layer(uint8_t layer);
  71:tmk_core/common/command.c **** 
  72:tmk_core/common/command.c **** 
  73:tmk_core/common/command.c **** command_state_t command_state = ONESHOT;
  74:tmk_core/common/command.c **** 
  75:tmk_core/common/command.c **** 
  76:tmk_core/common/command.c **** bool command_proc(uint8_t code)
  77:tmk_core/common/command.c **** {
  78:tmk_core/common/command.c ****     switch (command_state) {
  79:tmk_core/common/command.c ****         case ONESHOT:
  80:tmk_core/common/command.c ****             if (!IS_COMMAND())
  81:tmk_core/common/command.c ****                 return false;
  82:tmk_core/common/command.c ****             return (command_extra(code) || command_common(code));
  83:tmk_core/common/command.c ****             break;
  84:tmk_core/common/command.c ****         case CONSOLE:
  85:tmk_core/common/command.c ****             if (IS_COMMAND())
  86:tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
  87:tmk_core/common/command.c ****             else
  88:tmk_core/common/command.c ****                 return (command_console_extra(code) || command_console(code));
  89:tmk_core/common/command.c ****             break;
  90:tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  91:tmk_core/common/command.c ****         case MOUSEKEY:
  92:tmk_core/common/command.c ****             mousekey_console(code);
  93:tmk_core/common/command.c ****             break;
  94:tmk_core/common/command.c **** #endif
  95:tmk_core/common/command.c ****         default:
  96:tmk_core/common/command.c ****             command_state = ONESHOT;
  97:tmk_core/common/command.c ****             return false;
  98:tmk_core/common/command.c ****     }
  99:tmk_core/common/command.c ****     return true;
 100:tmk_core/common/command.c **** }
 101:tmk_core/common/command.c **** 
 102:tmk_core/common/command.c **** /* TODO: Refactoring is needed. */
 103:tmk_core/common/command.c **** /* This allows to define extra commands. return false when not processed. */
 104:tmk_core/common/command.c **** bool command_extra(uint8_t code) __attribute__ ((weak));
 105:tmk_core/common/command.c **** bool command_extra(uint8_t code)
 106:tmk_core/common/command.c **** {
 107:tmk_core/common/command.c ****     (void)code;
 108:tmk_core/common/command.c ****     return false;
 109:tmk_core/common/command.c **** }
 110:tmk_core/common/command.c **** 
 111:tmk_core/common/command.c **** bool command_console_extra(uint8_t code) __attribute__ ((weak));
 112:tmk_core/common/command.c **** bool command_console_extra(uint8_t code)
 113:tmk_core/common/command.c **** {
 114:tmk_core/common/command.c ****     (void)code;
 115:tmk_core/common/command.c ****     return false;
 116:tmk_core/common/command.c **** }
 117:tmk_core/common/command.c **** 
 118:tmk_core/common/command.c **** 
 119:tmk_core/common/command.c **** /***********************************************************
 120:tmk_core/common/command.c ****  * Command common
 121:tmk_core/common/command.c ****  ***********************************************************/
 122:tmk_core/common/command.c **** static void command_common_help(void)
 123:tmk_core/common/command.c **** {
 124:tmk_core/common/command.c **** 	print(                            "\n\t- Magic -\n"
 125:tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG       ) ":	Debug Message Toggle\n"
 126:tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG_MATRIX) ":	Matrix Debug Mode Toggle - Show keypresses in matrix grid\n"
 127:tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG_KBD   ) ":	Keyboard Debug Toggle - Show keypress report\n"
 128:tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG_MOUSE ) ":	Debug Mouse Toggle\n"
 129:tmk_core/common/command.c **** 		STR(MAGIC_KEY_VERSION     ) ":	Version\n"
 130:tmk_core/common/command.c **** 		STR(MAGIC_KEY_STATUS      ) ":	Status\n"
 131:tmk_core/common/command.c **** 		STR(MAGIC_KEY_CONSOLE     ) ":	Activate Console Mode\n"
 132:tmk_core/common/command.c **** 
 133:tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_CUSTOM
 134:tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER0      ) ":	Switch to Layer 0\n"
 135:tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER1      ) ":	Switch to Layer 1\n"
 136:tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER2      ) ":	Switch to Layer 2\n"
 137:tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER3      ) ":	Switch to Layer 3\n"
 138:tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER4      ) ":	Switch to Layer 4\n"
 139:tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER5      ) ":	Switch to Layer 5\n"
 140:tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER6      ) ":	Switch to Layer 6\n"
 141:tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER7      ) ":	Switch to Layer 7\n"
 142:tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER8      ) ":	Switch to Layer 8\n"
 143:tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER9      ) ":	Switch to Layer 9\n"
 144:tmk_core/common/command.c **** #endif
 145:tmk_core/common/command.c **** 
 146:tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_FKEYS
 147:tmk_core/common/command.c **** 		                            "F1-F10:	Switch to Layer 0-9 (F10 = L0)\n"
 148:tmk_core/common/command.c **** #endif
 149:tmk_core/common/command.c **** 
 150:tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_NKEYS
 151:tmk_core/common/command.c **** 		                            "0-9:	Switch to Layer 0-9\n"
 152:tmk_core/common/command.c **** #endif
 153:tmk_core/common/command.c **** 
 154:tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER0_ALT  ) ":	Switch to Layer 0 (alternate)\n"
 155:tmk_core/common/command.c **** 
 156:tmk_core/common/command.c **** 		STR(MAGIC_KEY_BOOTLOADER    ) ":	Jump to Bootloader\n"
 157:tmk_core/common/command.c **** 		STR(MAGIC_KEY_BOOTLOADER_ALT) ":	Jump to Bootloader (alternate)\n"
 158:tmk_core/common/command.c **** 
 159:tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 160:tmk_core/common/command.c **** 		STR(MAGIC_KEY_LOCK        ) ":	Lock Keyboard\n"
 161:tmk_core/common/command.c **** #endif
 162:tmk_core/common/command.c **** 
 163:tmk_core/common/command.c **** 		STR(MAGIC_KEY_EEPROM      ) ":	Print EEPROM Settings\n"
 164:tmk_core/common/command.c **** 		STR(MAGIC_KEY_EEPROM_CLEAR) ":	Clear EEPROM\n"
 165:tmk_core/common/command.c **** 
 166:tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 167:tmk_core/common/command.c **** 		STR(MAGIC_KEY_NKRO        ) ":	NKRO Toggle\n"
 168:tmk_core/common/command.c **** #endif
 169:tmk_core/common/command.c **** 
 170:tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 171:tmk_core/common/command.c **** 		STR(MAGIC_KEY_SLEEP_LED   ) ":	Sleep LED Test\n"
 172:tmk_core/common/command.c **** #endif
 173:tmk_core/common/command.c ****     );
 174:tmk_core/common/command.c **** }
 175:tmk_core/common/command.c **** 
 176:tmk_core/common/command.c **** static void print_version(void)
 177:tmk_core/common/command.c **** {
 178:tmk_core/common/command.c **** 	// print version & information
 179:tmk_core/common/command.c ****     print("\n\t- Version -\n");
 180:tmk_core/common/command.c ****     print("DESC: " STR(DESCRIPTION) "\n");
 181:tmk_core/common/command.c ****     print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
 182:tmk_core/common/command.c ****           "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
 183:tmk_core/common/command.c ****           "VER: " STR(DEVICE_VER) "\n");
 184:tmk_core/common/command.c **** #ifdef SKIP_VERSION
 185:tmk_core/common/command.c ****     print("BUILD:  (" __DATE__ ")\n");
 186:tmk_core/common/command.c **** #else
 187:tmk_core/common/command.c ****     print("BUILD: " STR(QMK_VERSION) " (" __TIME__ " " __DATE__ ")\n");
 188:tmk_core/common/command.c **** #endif
 189:tmk_core/common/command.c **** 
 190:tmk_core/common/command.c ****     /* build options */
 191:tmk_core/common/command.c ****     print("OPTIONS:"
 192:tmk_core/common/command.c **** 
 193:tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 194:tmk_core/common/command.c **** 	    " PJRC"
 195:tmk_core/common/command.c **** #endif
 196:tmk_core/common/command.c **** #ifdef PROTOCOL_LUFA
 197:tmk_core/common/command.c **** 	    " LUFA"
 198:tmk_core/common/command.c **** #endif
 199:tmk_core/common/command.c **** #ifdef PROTOCOL_VUSB
 200:tmk_core/common/command.c **** 	    " VUSB"
 201:tmk_core/common/command.c **** #endif
 202:tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 203:tmk_core/common/command.c **** 	    " BOOTMAGIC"
 204:tmk_core/common/command.c **** #endif
 205:tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 206:tmk_core/common/command.c **** 	    " MOUSEKEY"
 207:tmk_core/common/command.c **** #endif
 208:tmk_core/common/command.c **** #ifdef EXTRAKEY_ENABLE
 209:tmk_core/common/command.c **** 	    " EXTRAKEY"
 210:tmk_core/common/command.c **** #endif
 211:tmk_core/common/command.c **** #ifdef CONSOLE_ENABLE
 212:tmk_core/common/command.c **** 	    " CONSOLE"
 213:tmk_core/common/command.c **** #endif
 214:tmk_core/common/command.c **** #ifdef COMMAND_ENABLE
 215:tmk_core/common/command.c **** 	    " COMMAND"
 216:tmk_core/common/command.c **** #endif
 217:tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 218:tmk_core/common/command.c **** 	    " NKRO"
 219:tmk_core/common/command.c **** #endif
 220:tmk_core/common/command.c **** #ifdef KEYMAP_SECTION_ENABLE
 221:tmk_core/common/command.c **** 	    " KEYMAP_SECTION"
 222:tmk_core/common/command.c **** #endif
 223:tmk_core/common/command.c **** 
 224:tmk_core/common/command.c **** 	    " " STR(BOOTLOADER_SIZE) "\n");
 225:tmk_core/common/command.c **** 
 226:tmk_core/common/command.c ****     print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
 227:tmk_core/common/command.c **** #if defined(__AVR__)
 228:tmk_core/common/command.c ****           " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__
 229:tmk_core/common/command.c ****           " AVR_ARCH: avr" STR(__AVR_ARCH__)
 230:tmk_core/common/command.c **** #endif
 231:tmk_core/common/command.c **** 		  "\n");
 232:tmk_core/common/command.c **** 
 233:tmk_core/common/command.c **** 	return;
 234:tmk_core/common/command.c **** }
 235:tmk_core/common/command.c **** 
 236:tmk_core/common/command.c **** static void print_status(void)
 237:tmk_core/common/command.c **** {
 238:tmk_core/common/command.c **** 
 239:tmk_core/common/command.c ****     print("\n\t- Status -\n");
 240:tmk_core/common/command.c **** 
 241:tmk_core/common/command.c ****     print_val_hex8(host_keyboard_leds());
 242:tmk_core/common/command.c **** #ifndef PROTOCOL_VUSB
 243:tmk_core/common/command.c ****     // these aren't set on the V-USB protocol, so we just ignore them for now
 244:tmk_core/common/command.c ****     print_val_hex8(keyboard_protocol);
 245:tmk_core/common/command.c ****     print_val_hex8(keyboard_idle);
 246:tmk_core/common/command.c **** #endif
 247:tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 248:tmk_core/common/command.c ****     print_val_hex8(keymap_config.nkro);
 249:tmk_core/common/command.c **** #endif
 250:tmk_core/common/command.c ****     print_val_hex32(timer_read32());
 251:tmk_core/common/command.c **** 
 252:tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 253:tmk_core/common/command.c ****     print_val_hex8(UDCON);
 254:tmk_core/common/command.c ****     print_val_hex8(UDIEN);
 255:tmk_core/common/command.c ****     print_val_hex8(UDINT);
 256:tmk_core/common/command.c ****     print_val_hex8(usb_keyboard_leds);
 257:tmk_core/common/command.c ****     print_val_hex8(usb_keyboard_idle_count);
 258:tmk_core/common/command.c **** #endif
 259:tmk_core/common/command.c **** 
 260:tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 261:tmk_core/common/command.c **** #   if USB_COUNT_SOF
 262:tmk_core/common/command.c ****     print_val_hex8(usbSofCount);
 263:tmk_core/common/command.c **** #   endif
 264:tmk_core/common/command.c **** #endif
 265:tmk_core/common/command.c **** 	return;
 266:tmk_core/common/command.c **** }
 267:tmk_core/common/command.c **** 
 268:tmk_core/common/command.c **** static void print_eeconfig(void)
 269:tmk_core/common/command.c **** {
 270:tmk_core/common/command.c **** 
 271:tmk_core/common/command.c **** // Print these variables if NO_PRINT or USER_PRINT are not defined.
 272:tmk_core/common/command.c **** #if !defined(NO_PRINT) && !defined(USER_PRINT)
 273:tmk_core/common/command.c **** 
 274:tmk_core/common/command.c ****     print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
 275:tmk_core/common/command.c **** 
 276:tmk_core/common/command.c ****     debug_config_t dc;
 277:tmk_core/common/command.c ****     dc.raw = eeconfig_read_debug();
 278:tmk_core/common/command.c ****     print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
 279:tmk_core/common/command.c ****     print(".enable: "); print_dec(dc.enable); print("\n");
 280:tmk_core/common/command.c ****     print(".matrix: "); print_dec(dc.matrix); print("\n");
 281:tmk_core/common/command.c ****     print(".keyboard: "); print_dec(dc.keyboard); print("\n");
 282:tmk_core/common/command.c ****     print(".mouse: "); print_dec(dc.mouse); print("\n");
 283:tmk_core/common/command.c **** 
 284:tmk_core/common/command.c ****     keymap_config_t kc;
 285:tmk_core/common/command.c ****     kc.raw = eeconfig_read_keymap();
 286:tmk_core/common/command.c ****     print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
 287:tmk_core/common/command.c ****     print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
 288:tmk_core/common/command.c ****     print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
 289:tmk_core/common/command.c ****     print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
 290:tmk_core/common/command.c ****     print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
 291:tmk_core/common/command.c ****     print(".no_gui: "); print_dec(kc.no_gui); print("\n");
 292:tmk_core/common/command.c ****     print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
 293:tmk_core/common/command.c ****     print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
 294:tmk_core/common/command.c ****     print(".nkro: "); print_dec(kc.nkro); print("\n");
 295:tmk_core/common/command.c **** 
 296:tmk_core/common/command.c **** #ifdef BACKLIGHT_ENABLE
 297:tmk_core/common/command.c ****     backlight_config_t bc;
 298:tmk_core/common/command.c ****     bc.raw = eeconfig_read_backlight();
 299:tmk_core/common/command.c ****     print("backlight_config.raw: "); print_hex8(bc.raw); print("\n");
 300:tmk_core/common/command.c ****     print(".enable: "); print_dec(bc.enable); print("\n");
 301:tmk_core/common/command.c ****     print(".level: "); print_dec(bc.level); print("\n");
 302:tmk_core/common/command.c **** #endif /* BACKLIGHT_ENABLE */
 303:tmk_core/common/command.c **** 
 304:tmk_core/common/command.c **** #endif /* !NO_PRINT */
 305:tmk_core/common/command.c **** 
 306:tmk_core/common/command.c **** }
 307:tmk_core/common/command.c **** 
 308:tmk_core/common/command.c **** static bool command_common(uint8_t code)
 309:tmk_core/common/command.c **** {
 310:tmk_core/common/command.c **** 
 311:tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 312:tmk_core/common/command.c ****     static host_driver_t *host_driver = 0;
 313:tmk_core/common/command.c **** #endif
 314:tmk_core/common/command.c **** 
 315:tmk_core/common/command.c ****     switch (code) {
 316:tmk_core/common/command.c **** 
 317:tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 318:tmk_core/common/command.c **** 
 319:tmk_core/common/command.c **** 		// test breathing sleep LED
 320:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_SLEEP_LED):
 321:tmk_core/common/command.c ****             print("Sleep LED Test\n");
 322:tmk_core/common/command.c ****             sleep_led_toggle();
 323:tmk_core/common/command.c ****             led_set(host_keyboard_leds());
 324:tmk_core/common/command.c ****             break;
 325:tmk_core/common/command.c **** #endif
 326:tmk_core/common/command.c **** 
 327:tmk_core/common/command.c **** 		// print stored eeprom config
 328:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_EEPROM):
 329:tmk_core/common/command.c ****             print("eeconfig:\n");
 330:tmk_core/common/command.c ****             print_eeconfig();
 331:tmk_core/common/command.c ****             break;
 332:tmk_core/common/command.c **** 
 333:tmk_core/common/command.c **** 		// clear eeprom
 334:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_EEPROM_CLEAR):
 335:tmk_core/common/command.c ****             print("Clearing EEPROM\n");
 336:tmk_core/common/command.c **** 	    eeconfig_init();
 337:tmk_core/common/command.c ****             break;
 338:tmk_core/common/command.c **** 
 339:tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 340:tmk_core/common/command.c **** 
 341:tmk_core/common/command.c **** 		// lock/unlock keyboard
 342:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_LOCK):
 343:tmk_core/common/command.c ****             if (host_get_driver()) {
 344:tmk_core/common/command.c ****                 host_driver = host_get_driver();
 345:tmk_core/common/command.c ****                 clear_keyboard();
 346:tmk_core/common/command.c ****                 host_set_driver(0);
 347:tmk_core/common/command.c ****                 print("Locked.\n");
 348:tmk_core/common/command.c ****             } else {
 349:tmk_core/common/command.c ****                 host_set_driver(host_driver);
 350:tmk_core/common/command.c ****                 print("Unlocked.\n");
 351:tmk_core/common/command.c ****             }
 352:tmk_core/common/command.c ****             break;
 353:tmk_core/common/command.c **** #endif
 354:tmk_core/common/command.c **** 
 355:tmk_core/common/command.c **** 		// print help
 356:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_HELP):
 357:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_HELP_ALT):
 358:tmk_core/common/command.c ****             command_common_help();
 359:tmk_core/common/command.c ****             break;
 360:tmk_core/common/command.c **** 
 361:tmk_core/common/command.c **** 		// activate console
 362:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_CONSOLE):
 363:tmk_core/common/command.c ****             debug_matrix   = false;
 364:tmk_core/common/command.c ****             debug_keyboard = false;
 365:tmk_core/common/command.c ****             debug_mouse    = false;
 366:tmk_core/common/command.c ****             debug_enable   = false;
 367:tmk_core/common/command.c ****             command_console_help();
 368:tmk_core/common/command.c ****             print("C> ");
 369:tmk_core/common/command.c ****             command_state = CONSOLE;
 370:tmk_core/common/command.c ****             break;
 371:tmk_core/common/command.c **** 
 372:tmk_core/common/command.c ****         // jump to bootloader
 373:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_BOOTLOADER):
 374:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_BOOTLOADER_ALT):
 375:tmk_core/common/command.c ****             clear_keyboard(); // clear to prevent stuck keys
 376:tmk_core/common/command.c ****             print("\n\nJumping to bootloader... ");
 377:tmk_core/common/command.c ****             #ifdef AUDIO_ENABLE
 378:tmk_core/common/command.c **** 	            stop_all_notes();
 379:tmk_core/common/command.c ****                 shutdown_user();
 380:tmk_core/common/command.c ****             #else
 381:tmk_core/common/command.c **** 	            wait_ms(1000);
 382:tmk_core/common/command.c ****             #endif
 383:tmk_core/common/command.c ****             bootloader_jump(); // not return
 384:tmk_core/common/command.c ****             break;
 385:tmk_core/common/command.c **** 
 386:tmk_core/common/command.c ****         // debug toggle
 387:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG):
 388:tmk_core/common/command.c ****             debug_enable = !debug_enable;
 389:tmk_core/common/command.c ****             if (debug_enable) {
 390:tmk_core/common/command.c ****                 print("\ndebug: on\n");
 391:tmk_core/common/command.c ****             } else {
 392:tmk_core/common/command.c ****                 print("\ndebug: off\n");
 393:tmk_core/common/command.c ****                 debug_matrix   = false;
 394:tmk_core/common/command.c ****                 debug_keyboard = false;
 395:tmk_core/common/command.c ****                 debug_mouse    = false;
 396:tmk_core/common/command.c ****             }
 397:tmk_core/common/command.c ****             break;
 398:tmk_core/common/command.c **** 
 399:tmk_core/common/command.c ****         // debug matrix toggle
 400:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG_MATRIX):
 401:tmk_core/common/command.c ****             debug_matrix = !debug_matrix;
 402:tmk_core/common/command.c ****             if (debug_matrix) {
 403:tmk_core/common/command.c ****                 print("\nmatrix: on\n");
 404:tmk_core/common/command.c ****                 debug_enable = true;
 405:tmk_core/common/command.c ****             } else {
 406:tmk_core/common/command.c ****                 print("\nmatrix: off\n");
 407:tmk_core/common/command.c ****             }
 408:tmk_core/common/command.c ****             break;
 409:tmk_core/common/command.c **** 
 410:tmk_core/common/command.c ****         // debug keyboard toggle
 411:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG_KBD):
 412:tmk_core/common/command.c ****             debug_keyboard = !debug_keyboard;
 413:tmk_core/common/command.c ****             if (debug_keyboard) {
 414:tmk_core/common/command.c ****                 print("\nkeyboard: on\n");
 415:tmk_core/common/command.c ****                 debug_enable = true;
 416:tmk_core/common/command.c ****             } else {
 417:tmk_core/common/command.c ****                 print("\nkeyboard: off\n");
 418:tmk_core/common/command.c ****             }
 419:tmk_core/common/command.c ****             break;
 420:tmk_core/common/command.c **** 
 421:tmk_core/common/command.c ****         // debug mouse toggle
 422:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG_MOUSE):
 423:tmk_core/common/command.c ****             debug_mouse = !debug_mouse;
 424:tmk_core/common/command.c ****             if (debug_mouse) {
 425:tmk_core/common/command.c ****                 print("\nmouse: on\n");
 426:tmk_core/common/command.c ****                 debug_enable = true;
 427:tmk_core/common/command.c ****             } else {
 428:tmk_core/common/command.c **** 				print("\nmouse: off\n");
 429:tmk_core/common/command.c ****             }
 430:tmk_core/common/command.c ****             break;
 431:tmk_core/common/command.c **** 
 432:tmk_core/common/command.c **** 		// print version
 433:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_VERSION):
 434:tmk_core/common/command.c ****         	print_version();
 435:tmk_core/common/command.c **** 		    break;
 436:tmk_core/common/command.c **** 
 437:tmk_core/common/command.c **** 		// print status
 438:tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_STATUS):
 439:tmk_core/common/command.c **** 			print_status();
 440:tmk_core/common/command.c ****             break;
 441:tmk_core/common/command.c **** 
 442:tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 443:tmk_core/common/command.c **** 
 444:tmk_core/common/command.c **** 		// NKRO toggle
 445:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_NKRO):
 446:tmk_core/common/command.c ****             clear_keyboard(); // clear to prevent stuck keys
 447:tmk_core/common/command.c ****             keymap_config.nkro = !keymap_config.nkro;
 448:tmk_core/common/command.c ****             if (keymap_config.nkro) {
 449:tmk_core/common/command.c ****                 print("NKRO: on\n");
 450:tmk_core/common/command.c ****             } else {
 451:tmk_core/common/command.c ****                 print("NKRO: off\n");
 452:tmk_core/common/command.c ****             }
 453:tmk_core/common/command.c ****             break;
 454:tmk_core/common/command.c **** #endif
 455:tmk_core/common/command.c **** 
 456:tmk_core/common/command.c **** 		// switch layers
 457:tmk_core/common/command.c **** 
 458:tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER0_ALT):
 459:tmk_core/common/command.c ****             switch_default_layer(0);
 460:tmk_core/common/command.c ****             break;
 461:tmk_core/common/command.c **** 
 462:tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_CUSTOM
 463:tmk_core/common/command.c **** 
 464:tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER0):
 465:tmk_core/common/command.c ****             switch_default_layer(0);
 466:tmk_core/common/command.c ****             break;
 467:tmk_core/common/command.c **** 
 468:tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER1):
 469:tmk_core/common/command.c ****             switch_default_layer(1);
 470:tmk_core/common/command.c ****             break;
 471:tmk_core/common/command.c **** 
 472:tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER2):
 473:tmk_core/common/command.c ****             switch_default_layer(2);
 474:tmk_core/common/command.c ****             break;
 475:tmk_core/common/command.c **** 
 476:tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER3):
 477:tmk_core/common/command.c ****             switch_default_layer(3);
 478:tmk_core/common/command.c ****             break;
 479:tmk_core/common/command.c **** 
 480:tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER4):
 481:tmk_core/common/command.c ****             switch_default_layer(4);
 482:tmk_core/common/command.c ****             break;
 483:tmk_core/common/command.c **** 
 484:tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER5):
 485:tmk_core/common/command.c ****             switch_default_layer(5);
 486:tmk_core/common/command.c ****             break;
 487:tmk_core/common/command.c **** 
 488:tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER6):
 489:tmk_core/common/command.c ****             switch_default_layer(6);
 490:tmk_core/common/command.c ****             break;
 491:tmk_core/common/command.c **** 
 492:tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER7):
 493:tmk_core/common/command.c ****             switch_default_layer(7);
 494:tmk_core/common/command.c ****             break;
 495:tmk_core/common/command.c **** 
 496:tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER8):
 497:tmk_core/common/command.c ****             switch_default_layer(8);
 498:tmk_core/common/command.c ****             break;
 499:tmk_core/common/command.c **** 
 500:tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER9):
 501:tmk_core/common/command.c ****             switch_default_layer(9);
 502:tmk_core/common/command.c ****             break;
 503:tmk_core/common/command.c **** #endif
 504:tmk_core/common/command.c **** 
 505:tmk_core/common/command.c **** 
 506:tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_FKEYS
 507:tmk_core/common/command.c **** 
 508:tmk_core/common/command.c ****         case KC_F1 ... KC_F9:
 509:tmk_core/common/command.c ****             switch_default_layer((code - KC_F1) + 1);
 510:tmk_core/common/command.c ****             break;
 511:tmk_core/common/command.c ****         case KC_F10:
 512:tmk_core/common/command.c ****             switch_default_layer(0);
 513:tmk_core/common/command.c ****             break;
 514:tmk_core/common/command.c **** #endif
 515:tmk_core/common/command.c **** 
 516:tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_NKEYS
 517:tmk_core/common/command.c **** 
 518:tmk_core/common/command.c ****         case KC_1 ... KC_9:
 519:tmk_core/common/command.c ****             switch_default_layer((code - KC_1) + 1);
 520:tmk_core/common/command.c ****             break;
 521:tmk_core/common/command.c ****         case KC_0:
 522:tmk_core/common/command.c ****             switch_default_layer(0);
 523:tmk_core/common/command.c ****             break;
 524:tmk_core/common/command.c **** #endif
 525:tmk_core/common/command.c **** 
 526:tmk_core/common/command.c ****         default:
 527:tmk_core/common/command.c ****             print("?");
 528:tmk_core/common/command.c ****             return false;
 529:tmk_core/common/command.c ****     }
 530:tmk_core/common/command.c ****     return true;
 531:tmk_core/common/command.c **** }
 532:tmk_core/common/command.c **** 
 533:tmk_core/common/command.c **** 
 534:tmk_core/common/command.c **** /***********************************************************
 535:tmk_core/common/command.c ****  * Command console
 536:tmk_core/common/command.c ****  ***********************************************************/
 537:tmk_core/common/command.c **** static void command_console_help(void)
 538:tmk_core/common/command.c **** {
 539:tmk_core/common/command.c ****     print("\n\t- Console -\n"
 540:tmk_core/common/command.c ****           "ESC/q:	quit\n"
 541:tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 542:tmk_core/common/command.c ****           "m:	mousekey\n"
 543:tmk_core/common/command.c **** #endif
 544:tmk_core/common/command.c ****     );
 545:tmk_core/common/command.c **** }
 546:tmk_core/common/command.c **** 
 547:tmk_core/common/command.c **** static bool command_console(uint8_t code)
 548:tmk_core/common/command.c **** {
 549:tmk_core/common/command.c ****     switch (code) {
 550:tmk_core/common/command.c ****         case KC_H:
 551:tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 552:tmk_core/common/command.c ****             command_console_help();
 553:tmk_core/common/command.c ****             break;
 554:tmk_core/common/command.c ****         case KC_Q:
 555:tmk_core/common/command.c ****         case KC_ESC:
 556:tmk_core/common/command.c ****             command_state = ONESHOT;
 557:tmk_core/common/command.c ****             return false;
 558:tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 559:tmk_core/common/command.c ****         case KC_M:
 560:tmk_core/common/command.c ****             mousekey_console_help();
 561:tmk_core/common/command.c ****             print("M> ");
 562:tmk_core/common/command.c ****             command_state = MOUSEKEY;
 563:tmk_core/common/command.c ****             return true;
 564:tmk_core/common/command.c **** #endif
 565:tmk_core/common/command.c ****         default:
 566:tmk_core/common/command.c ****             print("?");
 567:tmk_core/common/command.c ****             return false;
 568:tmk_core/common/command.c ****     }
 569:tmk_core/common/command.c ****     print("C> ");
 570:tmk_core/common/command.c ****     return true;
 571:tmk_core/common/command.c **** }
 572:tmk_core/common/command.c **** 
 573:tmk_core/common/command.c **** 
 574:tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 575:tmk_core/common/command.c **** /***********************************************************
 576:tmk_core/common/command.c ****  * Mousekey console
 577:tmk_core/common/command.c ****  ***********************************************************/
 578:tmk_core/common/command.c **** static uint8_t mousekey_param = 0;
 579:tmk_core/common/command.c **** 
 580:tmk_core/common/command.c **** static void mousekey_param_print(void)
 581:tmk_core/common/command.c **** {
 582:tmk_core/common/command.c **** // Print these variables if NO_PRINT or USER_PRINT are not defined.
 583:tmk_core/common/command.c **** #if !defined(NO_PRINT) && !defined(USER_PRINT)
 584:tmk_core/common/command.c ****     print("\n\t- Values -\n");
 585:tmk_core/common/command.c ****     print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
 586:tmk_core/common/command.c ****     print("2: interval(ms): "); pdec(mk_interval); print("\n");
 587:tmk_core/common/command.c ****     print("3: max_speed: "); pdec(mk_max_speed); print("\n");
 588:tmk_core/common/command.c ****     print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
 589:tmk_core/common/command.c ****     print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
 590:tmk_core/common/command.c ****     print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
 591:tmk_core/common/command.c **** #endif /* !NO_PRINT */
 592:tmk_core/common/command.c **** 
 593:tmk_core/common/command.c **** }
 594:tmk_core/common/command.c **** 
 595:tmk_core/common/command.c **** //#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
 596:tmk_core/common/command.c **** #define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
 597:tmk_core/common/command.c **** static void mousekey_param_inc(uint8_t param, uint8_t inc)
 598:tmk_core/common/command.c **** {
  16               		.loc 1 598 1 view -0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
 599:tmk_core/common/command.c ****     switch (param) {
  22               		.loc 1 599 5 view .LVU1
  23 0000 8330      		cpi r24,lo8(3)
  24 0002 01F0      		breq .L2
  25 0004 00F4      		brsh .L3
  26 0006 8130      		cpi r24,lo8(1)
  27 0008 01F0      		breq .L4
  28 000a 8230      		cpi r24,lo8(2)
  29 000c 01F0      		breq .L5
  30 000e 0895      		ret
  31               	.L3:
  32 0010 8530      		cpi r24,lo8(5)
  33 0012 01F4      		brne .+2
  34 0014 00C0      		rjmp .L7
  35 0016 00F0      		brlo .L8
  36 0018 8630      		cpi r24,lo8(6)
  37 001a 01F4      		brne .+2
  38 001c 00C0      		rjmp .L9
  39 001e 0895      		ret
  40               	.L4:
 600:tmk_core/common/command.c ****         case 1:
 601:tmk_core/common/command.c ****             if (mk_delay + inc < UINT8_MAX)
  41               		.loc 1 601 13 view .LVU2
  42               		.loc 1 601 26 is_stmt 0 view .LVU3
  43 0020 8091 0000 		lds r24,mk_delay
  44               	.LVL1:
  45               		.loc 1 601 26 view .LVU4
  46 0024 482F      		mov r20,r24
  47 0026 460F      		add r20,r22
  48 0028 5527      		clr r21
  49 002a 551F      		rol r21
  50               		.loc 1 601 16 view .LVU5
  51 002c 4F3F      		cpi r20,-1
  52 002e 5105      		cpc r21,__zero_reg__
  53 0030 04F4      		brge .L10
 602:tmk_core/common/command.c ****                 mk_delay += inc;
  54               		.loc 1 602 17 is_stmt 1 view .LVU6
  55               		.loc 1 602 26 is_stmt 0 view .LVU7
  56 0032 680F      		add r22,r24
  57               	.LVL2:
  58               		.loc 1 602 26 view .LVU8
  59 0034 6093 0000 		sts mk_delay,r22
  60 0038 0895      		ret
  61               	.LVL3:
  62               	.L10:
 603:tmk_core/common/command.c ****             else
 604:tmk_core/common/command.c ****                 mk_delay = UINT8_MAX;
  63               		.loc 1 604 17 is_stmt 1 view .LVU9
  64               		.loc 1 604 26 is_stmt 0 view .LVU10
  65 003a 8FEF      		ldi r24,lo8(-1)
  66 003c 8093 0000 		sts mk_delay,r24
  67 0040 0895      		ret
  68               	.LVL4:
  69               	.L5:
 605:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 606:tmk_core/common/command.c ****             break;
 607:tmk_core/common/command.c ****         case 2:
 608:tmk_core/common/command.c ****             if (mk_interval + inc < UINT8_MAX)
  70               		.loc 1 608 13 is_stmt 1 view .LVU11
  71               		.loc 1 608 29 is_stmt 0 view .LVU12
  72 0042 8091 0000 		lds r24,mk_interval
  73               	.LVL5:
  74               		.loc 1 608 29 view .LVU13
  75 0046 482F      		mov r20,r24
  76 0048 460F      		add r20,r22
  77 004a 5527      		clr r21
  78 004c 551F      		rol r21
  79               		.loc 1 608 16 view .LVU14
  80 004e 4F3F      		cpi r20,-1
  81 0050 5105      		cpc r21,__zero_reg__
  82 0052 04F4      		brge .L11
 609:tmk_core/common/command.c ****                 mk_interval += inc;
  83               		.loc 1 609 17 is_stmt 1 view .LVU15
  84               		.loc 1 609 29 is_stmt 0 view .LVU16
  85 0054 680F      		add r22,r24
  86               	.LVL6:
  87               		.loc 1 609 29 view .LVU17
  88 0056 6093 0000 		sts mk_interval,r22
  89 005a 0895      		ret
  90               	.LVL7:
  91               	.L11:
 610:tmk_core/common/command.c ****             else
 611:tmk_core/common/command.c ****                 mk_interval = UINT8_MAX;
  92               		.loc 1 611 17 is_stmt 1 view .LVU18
  93               		.loc 1 611 29 is_stmt 0 view .LVU19
  94 005c 8FEF      		ldi r24,lo8(-1)
  95 005e 8093 0000 		sts mk_interval,r24
  96 0062 0895      		ret
  97               	.LVL8:
  98               	.L2:
 612:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 613:tmk_core/common/command.c ****             break;
 614:tmk_core/common/command.c ****         case 3:
 615:tmk_core/common/command.c ****             if (mk_max_speed + inc < UINT8_MAX)
  99               		.loc 1 615 13 is_stmt 1 view .LVU20
 100               		.loc 1 615 30 is_stmt 0 view .LVU21
 101 0064 8091 0000 		lds r24,mk_max_speed
 102               	.LVL9:
 103               		.loc 1 615 30 view .LVU22
 104 0068 482F      		mov r20,r24
 105 006a 460F      		add r20,r22
 106 006c 5527      		clr r21
 107 006e 551F      		rol r21
 108               		.loc 1 615 16 view .LVU23
 109 0070 4F3F      		cpi r20,-1
 110 0072 5105      		cpc r21,__zero_reg__
 111 0074 04F4      		brge .L12
 616:tmk_core/common/command.c ****                 mk_max_speed += inc;
 112               		.loc 1 616 17 is_stmt 1 view .LVU24
 113               		.loc 1 616 30 is_stmt 0 view .LVU25
 114 0076 680F      		add r22,r24
 115               	.LVL10:
 116               		.loc 1 616 30 view .LVU26
 117 0078 6093 0000 		sts mk_max_speed,r22
 118 007c 0895      		ret
 119               	.LVL11:
 120               	.L12:
 617:tmk_core/common/command.c ****             else
 618:tmk_core/common/command.c ****                 mk_max_speed = UINT8_MAX;
 121               		.loc 1 618 17 is_stmt 1 view .LVU27
 122               		.loc 1 618 30 is_stmt 0 view .LVU28
 123 007e 8FEF      		ldi r24,lo8(-1)
 124 0080 8093 0000 		sts mk_max_speed,r24
 125 0084 0895      		ret
 126               	.LVL12:
 127               	.L8:
 619:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 620:tmk_core/common/command.c ****             break;
 621:tmk_core/common/command.c ****         case 4:
 622:tmk_core/common/command.c ****             if (mk_time_to_max + inc < UINT8_MAX)
 128               		.loc 1 622 13 is_stmt 1 view .LVU29
 129               		.loc 1 622 32 is_stmt 0 view .LVU30
 130 0086 8091 0000 		lds r24,mk_time_to_max
 131               	.LVL13:
 132               		.loc 1 622 32 view .LVU31
 133 008a 482F      		mov r20,r24
 134 008c 460F      		add r20,r22
 135 008e 5527      		clr r21
 136 0090 551F      		rol r21
 137               		.loc 1 622 16 view .LVU32
 138 0092 4F3F      		cpi r20,-1
 139 0094 5105      		cpc r21,__zero_reg__
 140 0096 04F4      		brge .L13
 623:tmk_core/common/command.c ****                 mk_time_to_max += inc;
 141               		.loc 1 623 17 is_stmt 1 view .LVU33
 142               		.loc 1 623 32 is_stmt 0 view .LVU34
 143 0098 680F      		add r22,r24
 144               	.LVL14:
 145               		.loc 1 623 32 view .LVU35
 146 009a 6093 0000 		sts mk_time_to_max,r22
 147 009e 0895      		ret
 148               	.LVL15:
 149               	.L13:
 624:tmk_core/common/command.c ****             else
 625:tmk_core/common/command.c ****                 mk_time_to_max = UINT8_MAX;
 150               		.loc 1 625 17 is_stmt 1 view .LVU36
 151               		.loc 1 625 32 is_stmt 0 view .LVU37
 152 00a0 8FEF      		ldi r24,lo8(-1)
 153 00a2 8093 0000 		sts mk_time_to_max,r24
 154 00a6 0895      		ret
 155               	.LVL16:
 156               	.L7:
 626:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 627:tmk_core/common/command.c ****             break;
 628:tmk_core/common/command.c ****         case 5:
 629:tmk_core/common/command.c ****             if (mk_wheel_max_speed + inc < UINT8_MAX)
 157               		.loc 1 629 13 is_stmt 1 view .LVU38
 158               		.loc 1 629 36 is_stmt 0 view .LVU39
 159 00a8 8091 0000 		lds r24,mk_wheel_max_speed
 160               	.LVL17:
 161               		.loc 1 629 36 view .LVU40
 162 00ac 482F      		mov r20,r24
 163 00ae 460F      		add r20,r22
 164 00b0 5527      		clr r21
 165 00b2 551F      		rol r21
 166               		.loc 1 629 16 view .LVU41
 167 00b4 4F3F      		cpi r20,-1
 168 00b6 5105      		cpc r21,__zero_reg__
 169 00b8 04F4      		brge .L14
 630:tmk_core/common/command.c ****                 mk_wheel_max_speed += inc;
 170               		.loc 1 630 17 is_stmt 1 view .LVU42
 171               		.loc 1 630 36 is_stmt 0 view .LVU43
 172 00ba 680F      		add r22,r24
 173               	.LVL18:
 174               		.loc 1 630 36 view .LVU44
 175 00bc 6093 0000 		sts mk_wheel_max_speed,r22
 176 00c0 0895      		ret
 177               	.LVL19:
 178               	.L14:
 631:tmk_core/common/command.c ****             else
 632:tmk_core/common/command.c ****                 mk_wheel_max_speed = UINT8_MAX;
 179               		.loc 1 632 17 is_stmt 1 view .LVU45
 180               		.loc 1 632 36 is_stmt 0 view .LVU46
 181 00c2 8FEF      		ldi r24,lo8(-1)
 182 00c4 8093 0000 		sts mk_wheel_max_speed,r24
 183 00c8 0895      		ret
 184               	.LVL20:
 185               	.L9:
 633:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 634:tmk_core/common/command.c ****             break;
 635:tmk_core/common/command.c ****         case 6:
 636:tmk_core/common/command.c ****             if (mk_wheel_time_to_max + inc < UINT8_MAX)
 186               		.loc 1 636 13 is_stmt 1 view .LVU47
 187               		.loc 1 636 38 is_stmt 0 view .LVU48
 188 00ca 8091 0000 		lds r24,mk_wheel_time_to_max
 189               	.LVL21:
 190               		.loc 1 636 38 view .LVU49
 191 00ce 482F      		mov r20,r24
 192 00d0 460F      		add r20,r22
 193 00d2 5527      		clr r21
 194 00d4 551F      		rol r21
 195               		.loc 1 636 16 view .LVU50
 196 00d6 4F3F      		cpi r20,-1
 197 00d8 5105      		cpc r21,__zero_reg__
 198 00da 04F4      		brge .L15
 637:tmk_core/common/command.c ****                 mk_wheel_time_to_max += inc;
 199               		.loc 1 637 17 is_stmt 1 view .LVU51
 200               		.loc 1 637 38 is_stmt 0 view .LVU52
 201 00dc 680F      		add r22,r24
 202               	.LVL22:
 203               		.loc 1 637 38 view .LVU53
 204 00de 6093 0000 		sts mk_wheel_time_to_max,r22
 205 00e2 0895      		ret
 206               	.LVL23:
 207               	.L15:
 638:tmk_core/common/command.c ****             else
 639:tmk_core/common/command.c ****                 mk_wheel_time_to_max = UINT8_MAX;
 208               		.loc 1 639 17 is_stmt 1 view .LVU54
 209               		.loc 1 639 38 is_stmt 0 view .LVU55
 210 00e4 8FEF      		ldi r24,lo8(-1)
 211 00e6 8093 0000 		sts mk_wheel_time_to_max,r24
 212               	/* epilogue start */
 640:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 641:tmk_core/common/command.c ****             break;
 642:tmk_core/common/command.c ****     }
 643:tmk_core/common/command.c **** }
 213               		.loc 1 643 1 view .LVU56
 214 00ea 0895      		ret
 215               		.cfi_endproc
 216               	.LFE122:
 218               		.section	.text.mousekey_param_dec,"ax",@progbits
 220               	mousekey_param_dec:
 221               	.LVL24:
 222               	.LFB123:
 644:tmk_core/common/command.c **** 
 645:tmk_core/common/command.c **** static void mousekey_param_dec(uint8_t param, uint8_t dec)
 646:tmk_core/common/command.c **** {
 223               		.loc 1 646 1 is_stmt 1 view -0
 224               		.cfi_startproc
 225               	/* prologue: function */
 226               	/* frame size = 0 */
 227               	/* stack size = 0 */
 228               	.L__stack_usage = 0
 647:tmk_core/common/command.c ****     switch (param) {
 229               		.loc 1 647 5 view .LVU58
 230 0000 8330      		cpi r24,lo8(3)
 231 0002 01F0      		breq .L17
 232 0004 00F4      		brsh .L18
 233 0006 8130      		cpi r24,lo8(1)
 234 0008 01F0      		breq .L19
 235 000a 8230      		cpi r24,lo8(2)
 236 000c 01F0      		breq .L20
 237 000e 0895      		ret
 238               	.L18:
 239 0010 8530      		cpi r24,lo8(5)
 240 0012 01F0      		breq .L22
 241 0014 00F0      		brlo .L23
 242 0016 8630      		cpi r24,lo8(6)
 243 0018 01F0      		breq .L24
 244 001a 0895      		ret
 245               	.L19:
 648:tmk_core/common/command.c ****         case 1:
 649:tmk_core/common/command.c ****             if (mk_delay > dec)
 246               		.loc 1 649 13 view .LVU59
 247               		.loc 1 649 26 is_stmt 0 view .LVU60
 248 001c 8091 0000 		lds r24,mk_delay
 249               	.LVL25:
 250               		.loc 1 649 16 view .LVU61
 251 0020 6817      		cp r22,r24
 252 0022 00F4      		brsh .L25
 650:tmk_core/common/command.c ****                 mk_delay -= dec;
 253               		.loc 1 650 17 is_stmt 1 view .LVU62
 254               		.loc 1 650 26 is_stmt 0 view .LVU63
 255 0024 861B      		sub r24,r22
 256 0026 8093 0000 		sts mk_delay,r24
 257 002a 0895      		ret
 258               	.L25:
 651:tmk_core/common/command.c ****             else
 652:tmk_core/common/command.c ****                 mk_delay = 0;
 259               		.loc 1 652 17 is_stmt 1 view .LVU64
 260               		.loc 1 652 26 is_stmt 0 view .LVU65
 261 002c 1092 0000 		sts mk_delay,__zero_reg__
 262 0030 0895      		ret
 263               	.LVL26:
 264               	.L20:
 653:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 654:tmk_core/common/command.c ****             break;
 655:tmk_core/common/command.c ****         case 2:
 656:tmk_core/common/command.c ****             if (mk_interval > dec)
 265               		.loc 1 656 13 is_stmt 1 view .LVU66
 266               		.loc 1 656 29 is_stmt 0 view .LVU67
 267 0032 8091 0000 		lds r24,mk_interval
 268               	.LVL27:
 269               		.loc 1 656 16 view .LVU68
 270 0036 6817      		cp r22,r24
 271 0038 00F4      		brsh .L26
 657:tmk_core/common/command.c ****                 mk_interval -= dec;
 272               		.loc 1 657 17 is_stmt 1 view .LVU69
 273               		.loc 1 657 29 is_stmt 0 view .LVU70
 274 003a 861B      		sub r24,r22
 275 003c 8093 0000 		sts mk_interval,r24
 276 0040 0895      		ret
 277               	.L26:
 658:tmk_core/common/command.c ****             else
 659:tmk_core/common/command.c ****                 mk_interval = 0;
 278               		.loc 1 659 17 is_stmt 1 view .LVU71
 279               		.loc 1 659 29 is_stmt 0 view .LVU72
 280 0042 1092 0000 		sts mk_interval,__zero_reg__
 281 0046 0895      		ret
 282               	.LVL28:
 283               	.L17:
 660:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 661:tmk_core/common/command.c ****             break;
 662:tmk_core/common/command.c ****         case 3:
 663:tmk_core/common/command.c ****             if (mk_max_speed > dec)
 284               		.loc 1 663 13 is_stmt 1 view .LVU73
 285               		.loc 1 663 30 is_stmt 0 view .LVU74
 286 0048 8091 0000 		lds r24,mk_max_speed
 287               	.LVL29:
 288               		.loc 1 663 16 view .LVU75
 289 004c 6817      		cp r22,r24
 290 004e 00F4      		brsh .L27
 664:tmk_core/common/command.c ****                 mk_max_speed -= dec;
 291               		.loc 1 664 17 is_stmt 1 view .LVU76
 292               		.loc 1 664 30 is_stmt 0 view .LVU77
 293 0050 861B      		sub r24,r22
 294 0052 8093 0000 		sts mk_max_speed,r24
 295 0056 0895      		ret
 296               	.L27:
 665:tmk_core/common/command.c ****             else
 666:tmk_core/common/command.c ****                 mk_max_speed = 0;
 297               		.loc 1 666 17 is_stmt 1 view .LVU78
 298               		.loc 1 666 30 is_stmt 0 view .LVU79
 299 0058 1092 0000 		sts mk_max_speed,__zero_reg__
 300 005c 0895      		ret
 301               	.LVL30:
 302               	.L23:
 667:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 668:tmk_core/common/command.c ****             break;
 669:tmk_core/common/command.c ****         case 4:
 670:tmk_core/common/command.c ****             if (mk_time_to_max > dec)
 303               		.loc 1 670 13 is_stmt 1 view .LVU80
 304               		.loc 1 670 32 is_stmt 0 view .LVU81
 305 005e 8091 0000 		lds r24,mk_time_to_max
 306               	.LVL31:
 307               		.loc 1 670 16 view .LVU82
 308 0062 6817      		cp r22,r24
 309 0064 00F4      		brsh .L28
 671:tmk_core/common/command.c ****                 mk_time_to_max -= dec;
 310               		.loc 1 671 17 is_stmt 1 view .LVU83
 311               		.loc 1 671 32 is_stmt 0 view .LVU84
 312 0066 861B      		sub r24,r22
 313 0068 8093 0000 		sts mk_time_to_max,r24
 314 006c 0895      		ret
 315               	.L28:
 672:tmk_core/common/command.c ****             else
 673:tmk_core/common/command.c ****                 mk_time_to_max = 0;
 316               		.loc 1 673 17 is_stmt 1 view .LVU85
 317               		.loc 1 673 32 is_stmt 0 view .LVU86
 318 006e 1092 0000 		sts mk_time_to_max,__zero_reg__
 319 0072 0895      		ret
 320               	.LVL32:
 321               	.L22:
 674:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 675:tmk_core/common/command.c ****             break;
 676:tmk_core/common/command.c ****         case 5:
 677:tmk_core/common/command.c ****             if (mk_wheel_max_speed > dec)
 322               		.loc 1 677 13 is_stmt 1 view .LVU87
 323               		.loc 1 677 36 is_stmt 0 view .LVU88
 324 0074 8091 0000 		lds r24,mk_wheel_max_speed
 325               	.LVL33:
 326               		.loc 1 677 16 view .LVU89
 327 0078 6817      		cp r22,r24
 328 007a 00F4      		brsh .L29
 678:tmk_core/common/command.c ****                 mk_wheel_max_speed -= dec;
 329               		.loc 1 678 17 is_stmt 1 view .LVU90
 330               		.loc 1 678 36 is_stmt 0 view .LVU91
 331 007c 861B      		sub r24,r22
 332 007e 8093 0000 		sts mk_wheel_max_speed,r24
 333 0082 0895      		ret
 334               	.L29:
 679:tmk_core/common/command.c ****             else
 680:tmk_core/common/command.c ****                 mk_wheel_max_speed = 0;
 335               		.loc 1 680 17 is_stmt 1 view .LVU92
 336               		.loc 1 680 36 is_stmt 0 view .LVU93
 337 0084 1092 0000 		sts mk_wheel_max_speed,__zero_reg__
 338 0088 0895      		ret
 339               	.LVL34:
 340               	.L24:
 681:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 682:tmk_core/common/command.c ****             break;
 683:tmk_core/common/command.c ****         case 6:
 684:tmk_core/common/command.c ****             if (mk_wheel_time_to_max > dec)
 341               		.loc 1 684 13 is_stmt 1 view .LVU94
 342               		.loc 1 684 38 is_stmt 0 view .LVU95
 343 008a 8091 0000 		lds r24,mk_wheel_time_to_max
 344               	.LVL35:
 345               		.loc 1 684 16 view .LVU96
 346 008e 6817      		cp r22,r24
 347 0090 00F4      		brsh .L30
 685:tmk_core/common/command.c ****                 mk_wheel_time_to_max -= dec;
 348               		.loc 1 685 17 is_stmt 1 view .LVU97
 349               		.loc 1 685 38 is_stmt 0 view .LVU98
 350 0092 861B      		sub r24,r22
 351 0094 8093 0000 		sts mk_wheel_time_to_max,r24
 352 0098 0895      		ret
 353               	.L30:
 686:tmk_core/common/command.c ****             else
 687:tmk_core/common/command.c ****                 mk_wheel_time_to_max = 0;
 354               		.loc 1 687 17 is_stmt 1 view .LVU99
 355               		.loc 1 687 38 is_stmt 0 view .LVU100
 356 009a 1092 0000 		sts mk_wheel_time_to_max,__zero_reg__
 357               	/* epilogue start */
 688:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 689:tmk_core/common/command.c ****             break;
 690:tmk_core/common/command.c ****     }
 691:tmk_core/common/command.c **** }
 358               		.loc 1 691 1 view .LVU101
 359 009e 0895      		ret
 360               		.cfi_endproc
 361               	.LFE123:
 363               		.section	.text.switch_default_layer,"ax",@progbits
 365               	switch_default_layer:
 366               	.LVL36:
 367               	.LFB127:
 692:tmk_core/common/command.c **** 
 693:tmk_core/common/command.c **** static void mousekey_console_help(void)
 694:tmk_core/common/command.c **** {
 695:tmk_core/common/command.c ****     print("\n\t- Mousekey -\n"
 696:tmk_core/common/command.c ****           "ESC/q:	quit\n"
 697:tmk_core/common/command.c ****           "1:	delay(*10ms)\n"
 698:tmk_core/common/command.c ****           "2:	interval(ms)\n"
 699:tmk_core/common/command.c ****           "3:	max_speed\n"
 700:tmk_core/common/command.c ****           "4:	time_to_max\n"
 701:tmk_core/common/command.c ****           "5:	wheel_max_speed\n"
 702:tmk_core/common/command.c ****           "6:	wheel_time_to_max\n"
 703:tmk_core/common/command.c ****           "\n"
 704:tmk_core/common/command.c ****           "p:	print values\n"
 705:tmk_core/common/command.c ****           "d:	set defaults\n"
 706:tmk_core/common/command.c ****           "up:	+1\n"
 707:tmk_core/common/command.c ****           "down:	-1\n"
 708:tmk_core/common/command.c ****           "pgup:	+10\n"
 709:tmk_core/common/command.c ****           "pgdown:	-10\n"
 710:tmk_core/common/command.c ****           "\n"
 711:tmk_core/common/command.c ****           "speed = delta * max_speed * (repeat / time_to_max)\n");
 712:tmk_core/common/command.c ****     xprintf("where delta: cursor=%d, wheel=%d\n"
 713:tmk_core/common/command.c ****             "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_D
 714:tmk_core/common/command.c **** }
 715:tmk_core/common/command.c **** 
 716:tmk_core/common/command.c **** static bool mousekey_console(uint8_t code)
 717:tmk_core/common/command.c **** {
 718:tmk_core/common/command.c ****     switch (code) {
 719:tmk_core/common/command.c ****         case KC_H:
 720:tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 721:tmk_core/common/command.c ****             mousekey_console_help();
 722:tmk_core/common/command.c ****             break;
 723:tmk_core/common/command.c ****         case KC_Q:
 724:tmk_core/common/command.c ****         case KC_ESC:
 725:tmk_core/common/command.c ****             if (mousekey_param) {
 726:tmk_core/common/command.c ****                 mousekey_param = 0;
 727:tmk_core/common/command.c ****             } else {
 728:tmk_core/common/command.c ****                 print("C> ");
 729:tmk_core/common/command.c ****                 command_state = CONSOLE;
 730:tmk_core/common/command.c ****                 return false;
 731:tmk_core/common/command.c ****             }
 732:tmk_core/common/command.c ****             break;
 733:tmk_core/common/command.c ****         case KC_P:
 734:tmk_core/common/command.c ****             mousekey_param_print();
 735:tmk_core/common/command.c ****             break;
 736:tmk_core/common/command.c ****         case KC_1:
 737:tmk_core/common/command.c ****         case KC_2:
 738:tmk_core/common/command.c ****         case KC_3:
 739:tmk_core/common/command.c ****         case KC_4:
 740:tmk_core/common/command.c ****         case KC_5:
 741:tmk_core/common/command.c ****         case KC_6:
 742:tmk_core/common/command.c ****             mousekey_param = numkey2num(code);
 743:tmk_core/common/command.c ****             break;
 744:tmk_core/common/command.c ****         case KC_UP:
 745:tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 1);
 746:tmk_core/common/command.c ****             break;
 747:tmk_core/common/command.c ****         case KC_DOWN:
 748:tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 1);
 749:tmk_core/common/command.c ****             break;
 750:tmk_core/common/command.c ****         case KC_PGUP:
 751:tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 10);
 752:tmk_core/common/command.c ****             break;
 753:tmk_core/common/command.c ****         case KC_PGDN:
 754:tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 10);
 755:tmk_core/common/command.c ****             break;
 756:tmk_core/common/command.c ****         case KC_D:
 757:tmk_core/common/command.c ****             mk_delay = MOUSEKEY_DELAY/10;
 758:tmk_core/common/command.c ****             mk_interval = MOUSEKEY_INTERVAL;
 759:tmk_core/common/command.c ****             mk_max_speed = MOUSEKEY_MAX_SPEED;
 760:tmk_core/common/command.c ****             mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
 761:tmk_core/common/command.c ****             mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
 762:tmk_core/common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 763:tmk_core/common/command.c ****             print("set default\n");
 764:tmk_core/common/command.c ****             break;
 765:tmk_core/common/command.c ****         default:
 766:tmk_core/common/command.c ****             print("?");
 767:tmk_core/common/command.c ****             return false;
 768:tmk_core/common/command.c ****     }
 769:tmk_core/common/command.c ****     if (mousekey_param) {
 770:tmk_core/common/command.c ****         xprintf("M%d> ", mousekey_param);
 771:tmk_core/common/command.c ****     } else {
 772:tmk_core/common/command.c ****         print("M>" );
 773:tmk_core/common/command.c ****     }
 774:tmk_core/common/command.c ****     return true;
 775:tmk_core/common/command.c **** }
 776:tmk_core/common/command.c **** #endif
 777:tmk_core/common/command.c **** 
 778:tmk_core/common/command.c **** 
 779:tmk_core/common/command.c **** /***********************************************************
 780:tmk_core/common/command.c ****  * Utilities
 781:tmk_core/common/command.c ****  ***********************************************************/
 782:tmk_core/common/command.c **** uint8_t numkey2num(uint8_t code)
 783:tmk_core/common/command.c **** {
 784:tmk_core/common/command.c ****     switch (code) {
 785:tmk_core/common/command.c ****         case KC_1: return 1;
 786:tmk_core/common/command.c ****         case KC_2: return 2;
 787:tmk_core/common/command.c ****         case KC_3: return 3;
 788:tmk_core/common/command.c ****         case KC_4: return 4;
 789:tmk_core/common/command.c ****         case KC_5: return 5;
 790:tmk_core/common/command.c ****         case KC_6: return 6;
 791:tmk_core/common/command.c ****         case KC_7: return 7;
 792:tmk_core/common/command.c ****         case KC_8: return 8;
 793:tmk_core/common/command.c ****         case KC_9: return 9;
 794:tmk_core/common/command.c ****         case KC_0: return 0;
 795:tmk_core/common/command.c ****     }
 796:tmk_core/common/command.c ****     return 0;
 797:tmk_core/common/command.c **** }
 798:tmk_core/common/command.c **** 
 799:tmk_core/common/command.c **** static void switch_default_layer(uint8_t layer)
 800:tmk_core/common/command.c **** {
 368               		.loc 1 800 1 is_stmt 1 view -0
 369               		.cfi_startproc
 370               		.loc 1 800 1 is_stmt 0 view .LVU103
 371 0000 0F93      		push r16
 372               	.LCFI0:
 373               		.cfi_def_cfa_offset 3
 374               		.cfi_offset 16, -2
 375 0002 1F93      		push r17
 376               	.LCFI1:
 377               		.cfi_def_cfa_offset 4
 378               		.cfi_offset 17, -3
 379               	/* prologue: function */
 380               	/* frame size = 0 */
 381               	/* stack size = 2 */
 382               	.L__stack_usage = 2
 801:tmk_core/common/command.c ****     xprintf("L%d\n", layer);
 383               		.loc 1 801 28 is_stmt 1 view .LVU104
 802:tmk_core/common/command.c ****     default_layer_set(1UL<<layer);
 384               		.loc 1 802 5 view .LVU105
 385 0004 41E0      		ldi r20,lo8(1)
 386 0006 50E0      		ldi r21,0
 387 0008 60E0      		ldi r22,0
 388 000a 70E0      		ldi r23,0
 389 000c 8A01      		movw r16,r20
 390 000e 9B01      		movw r18,r22
 391 0010 00C0      		rjmp 2f
 392               		1:
 393 0012 000F      		lsl r16
 394 0014 111F      		rol r17
 395 0016 221F      		rol r18
 396 0018 331F      		rol r19
 397               		2:
 398 001a 8A95      		dec r24
 399 001c 02F4      		brpl 1b
 400 001e C901      		movw r24,r18
 401               	.LVL37:
 402               		.loc 1 802 5 is_stmt 0 view .LVU106
 403 0020 B801      		movw r22,r16
 404 0022 0E94 0000 		call default_layer_set
 405               	.LVL38:
 803:tmk_core/common/command.c ****     clear_keyboard();
 406               		.loc 1 803 5 is_stmt 1 view .LVU107
 407               	/* epilogue start */
 804:tmk_core/common/command.c **** }
 408               		.loc 1 804 1 is_stmt 0 view .LVU108
 409 0026 1F91      		pop r17
 410 0028 0F91      		pop r16
 803:tmk_core/common/command.c ****     clear_keyboard();
 411               		.loc 1 803 5 view .LVU109
 412 002a 0C94 0000 		jmp clear_keyboard
 413               	.LVL39:
 414               		.cfi_endproc
 415               	.LFE127:
 417               		.section	.text.command_common,"ax",@progbits
 419               	command_common:
 420               	.LVL40:
 421               	.LFB118:
 309:tmk_core/common/command.c **** 
 422               		.loc 1 309 1 is_stmt 1 view -0
 423               		.cfi_startproc
 424               	/* prologue: function */
 425               	/* frame size = 0 */
 426               	/* stack size = 0 */
 427               	.L__stack_usage = 0
 315:tmk_core/common/command.c **** 
 428               		.loc 1 315 5 view .LVU111
 429 0000 EBEF      		ldi r30,lo8(-5)
 430 0002 E80F      		add r30,r24
 431 0004 EF33      		cpi r30,lo8(63)
 432 0006 00F0      		brlo .+2
 433 0008 00C0      		rjmp .L50
 434 000a F0E0      		ldi r31,0
 435 000c E050      		subi r30,lo8(-(gs(.L35)))
 436 000e F040      		sbci r31,hi8(-(gs(.L35)))
 437 0010 0C94 0000 		jmp __tablejump2__
 438               		.section	.jumptables.gcc.command_common,"a",@progbits
 439               		.p2align	1
 440               	.L35:
 441 0000 0000      		.word gs(.L39)
 442 0002 0000      		.word gs(.L46)
 443 0004 0000      		.word gs(.L45)
 444 0006 0000      		.word gs(.L54)
 445 0008 0000      		.word gs(.L50)
 446 000a 0000      		.word gs(.L50)
 447 000c 0000      		.word gs(.L54)
 448 000e 0000      		.word gs(.L50)
 449 0010 0000      		.word gs(.L50)
 450 0012 0000      		.word gs(.L44)
 451 0014 0000      		.word gs(.L50)
 452 0016 0000      		.word gs(.L43)
 453 0018 0000      		.word gs(.L42)
 454 001a 0000      		.word gs(.L50)
 455 001c 0000      		.word gs(.L50)
 456 001e 0000      		.word gs(.L50)
 457 0020 0000      		.word gs(.L50)
 458 0022 0000      		.word gs(.L54)
 459 0024 0000      		.word gs(.L50)
 460 0026 0000      		.word gs(.L50)
 461 0028 0000      		.word gs(.L54)
 462 002a 0000      		.word gs(.L50)
 463 002c 0000      		.word gs(.L41)
 464 002e 0000      		.word gs(.L50)
 465 0030 0000      		.word gs(.L50)
 466 0032 0000      		.word gs(.L40)
 467 0034 0000      		.word gs(.L40)
 468 0036 0000      		.word gs(.L40)
 469 0038 0000      		.word gs(.L40)
 470 003a 0000      		.word gs(.L40)
 471 003c 0000      		.word gs(.L40)
 472 003e 0000      		.word gs(.L40)
 473 0040 0000      		.word gs(.L40)
 474 0042 0000      		.word gs(.L40)
 475 0044 0000      		.word gs(.L34)
 476 0046 0000      		.word gs(.L50)
 477 0048 0000      		.word gs(.L39)
 478 004a 0000      		.word gs(.L38)
 479 004c 0000      		.word gs(.L50)
 480 004e 0000      		.word gs(.L50)
 481 0050 0000      		.word gs(.L50)
 482 0052 0000      		.word gs(.L50)
 483 0054 0000      		.word gs(.L50)
 484 0056 0000      		.word gs(.L50)
 485 0058 0000      		.word gs(.L50)
 486 005a 0000      		.word gs(.L50)
 487 005c 0000      		.word gs(.L50)
 488 005e 0000      		.word gs(.L50)
 489 0060 0000      		.word gs(.L34)
 490 0062 0000      		.word gs(.L50)
 491 0064 0000      		.word gs(.L50)
 492 0066 0000      		.word gs(.L54)
 493 0068 0000      		.word gs(.L50)
 494 006a 0000      		.word gs(.L36)
 495 006c 0000      		.word gs(.L36)
 496 006e 0000      		.word gs(.L36)
 497 0070 0000      		.word gs(.L36)
 498 0072 0000      		.word gs(.L36)
 499 0074 0000      		.word gs(.L36)
 500 0076 0000      		.word gs(.L36)
 501 0078 0000      		.word gs(.L36)
 502 007a 0000      		.word gs(.L36)
 503 007c 0000      		.word gs(.L34)
 504               		.section	.text.command_common
 505               	.L38:
 335:tmk_core/common/command.c **** 	    eeconfig_init();
 506               		.loc 1 335 39 view .LVU112
 336:tmk_core/common/command.c ****             break;
 507               		.loc 1 336 6 view .LVU113
 508 0014 0E94 0000 		call eeconfig_init
 509               	.LVL41:
 510               	.L54:
 337:tmk_core/common/command.c **** 
 511               		.loc 1 337 13 view .LVU114
 530:tmk_core/common/command.c **** }
 512               		.loc 1 530 12 is_stmt 0 view .LVU115
 513 0018 81E0      		ldi r24,lo8(1)
 337:tmk_core/common/command.c **** 
 514               		.loc 1 337 13 view .LVU116
 515 001a 0895      		ret
 516               	.LVL42:
 517               	.L46:
 363:tmk_core/common/command.c ****             debug_keyboard = false;
 518               		.loc 1 363 13 is_stmt 1 view .LVU117
 364:tmk_core/common/command.c ****             debug_mouse    = false;
 519               		.loc 1 364 13 view .LVU118
 365:tmk_core/common/command.c ****             debug_enable   = false;
 520               		.loc 1 365 13 view .LVU119
 366:tmk_core/common/command.c ****             command_console_help();
 521               		.loc 1 366 13 view .LVU120
 366:tmk_core/common/command.c ****             command_console_help();
 522               		.loc 1 366 28 is_stmt 0 view .LVU121
 523 001c 8091 0000 		lds r24,debug_config
 524               	.LVL43:
 366:tmk_core/common/command.c ****             command_console_help();
 525               		.loc 1 366 28 view .LVU122
 526 0020 807F      		andi r24,lo8(-16)
 527 0022 8093 0000 		sts debug_config,r24
 367:tmk_core/common/command.c ****             print("C> ");
 528               		.loc 1 367 13 is_stmt 1 view .LVU123
 368:tmk_core/common/command.c ****             command_state = CONSOLE;
 529               		.loc 1 368 25 view .LVU124
 369:tmk_core/common/command.c ****             break;
 530               		.loc 1 369 13 view .LVU125
 369:tmk_core/common/command.c ****             break;
 531               		.loc 1 369 27 is_stmt 0 view .LVU126
 532 0026 81E0      		ldi r24,lo8(1)
 533 0028 8093 0000 		sts command_state,r24
 370:tmk_core/common/command.c **** 
 534               		.loc 1 370 13 is_stmt 1 view .LVU127
 535 002c 0895      		ret
 536               	.LVL44:
 537               	.L39:
 375:tmk_core/common/command.c ****             print("\n\nJumping to bootloader... ");
 538               		.loc 1 375 13 view .LVU128
 539 002e 0E94 0000 		call clear_keyboard
 540               	.LVL45:
 376:tmk_core/common/command.c ****             #ifdef AUDIO_ENABLE
 541               		.loc 1 376 51 view .LVU129
 381:tmk_core/common/command.c ****             #endif
 542               		.loc 1 381 14 view .LVU130
 543               	.LBB4:
 544               	.LBI4:
 545               		.file 2 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** _delay_ms(double __ms)
 546               		.loc 2 166 1 view .LVU131
 547               	.LBB5:
 167:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	double __tmp ;
 548               		.loc 2 168 2 view .LVU132
 169:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 549               		.loc 2 172 2 view .LVU133
 173:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 550               		.loc 2 173 2 view .LVU134
 174:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 551               		.loc 2 174 2 view .LVU135
 175:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 552               		.loc 2 184 3 view .LVU136
 185:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 553               		.loc 2 187 2 view .LVU137
 554 0032 2FEF      		ldi r18,lo8(3199999)
 555 0034 83ED      		ldi r24,hi8(3199999)
 556 0036 90E3      		ldi r25,hlo8(3199999)
 557 0038 2150      	1:	subi r18,1
 558 003a 8040      		sbci r24,0
 559 003c 9040      		sbci r25,0
 560 003e 01F4      		brne 1b
 561 0040 00C0      		rjmp .
 562 0042 0000      		nop
 563               	.LVL46:
 564               		.loc 2 187 2 is_stmt 0 view .LVU138
 565               	.LBE5:
 566               	.LBE4:
 383:tmk_core/common/command.c ****             break;
 567               		.loc 1 383 13 is_stmt 1 view .LVU139
 568 0044 0E94 0000 		call bootloader_jump
 569               	.LVL47:
 384:tmk_core/common/command.c **** 
 570               		.loc 1 384 13 view .LVU140
 571 0048 00C0      		rjmp .L54
 572               	.LVL48:
 573               	.L45:
 388:tmk_core/common/command.c ****             if (debug_enable) {
 574               		.loc 1 388 13 view .LVU141
 388:tmk_core/common/command.c ****             if (debug_enable) {
 575               		.loc 1 388 29 is_stmt 0 view .LVU142
 576 004a 9091 0000 		lds r25,debug_config
 388:tmk_core/common/command.c ****             if (debug_enable) {
 577               		.loc 1 388 26 view .LVU143
 578 004e 892F      		mov r24,r25
 579               	.LVL49:
 388:tmk_core/common/command.c ****             if (debug_enable) {
 580               		.loc 1 388 26 view .LVU144
 581 0050 8E7F      		andi r24,~(1<<0)
 582 0052 90FF      		sbrs r25,0
 583 0054 8160      		ori r24,1<<0
 584 0056 8093 0000 		sts debug_config,r24
 389:tmk_core/common/command.c ****                 print("\ndebug: on\n");
 585               		.loc 1 389 13 is_stmt 1 view .LVU145
 389:tmk_core/common/command.c ****                 print("\ndebug: on\n");
 586               		.loc 1 389 16 is_stmt 0 view .LVU146
 587 005a 80FD      		sbrc r24,0
 588 005c 00C0      		rjmp .L54
 392:tmk_core/common/command.c ****                 debug_matrix   = false;
 589               		.loc 1 392 40 is_stmt 1 view .LVU147
 393:tmk_core/common/command.c ****                 debug_keyboard = false;
 590               		.loc 1 393 17 view .LVU148
 394:tmk_core/common/command.c ****                 debug_mouse    = false;
 591               		.loc 1 394 17 view .LVU149
 395:tmk_core/common/command.c ****             }
 592               		.loc 1 395 17 view .LVU150
 393:tmk_core/common/command.c ****                 debug_keyboard = false;
 593               		.loc 1 393 32 is_stmt 0 view .LVU151
 594 005e 817F      		andi r24,lo8(-15)
 595               	.L56:
 404:tmk_core/common/command.c ****             } else {
 596               		.loc 1 404 30 view .LVU152
 597 0060 8093 0000 		sts debug_config,r24
 598 0064 00C0      		rjmp .L54
 599               	.LVL50:
 600               	.L41:
 401:tmk_core/common/command.c ****             if (debug_matrix) {
 601               		.loc 1 401 13 is_stmt 1 view .LVU153
 401:tmk_core/common/command.c ****             if (debug_matrix) {
 602               		.loc 1 401 29 is_stmt 0 view .LVU154
 603 0066 9091 0000 		lds r25,debug_config
 401:tmk_core/common/command.c ****             if (debug_matrix) {
 604               		.loc 1 401 26 view .LVU155
 605 006a 892F      		mov r24,r25
 606               	.LVL51:
 401:tmk_core/common/command.c ****             if (debug_matrix) {
 607               		.loc 1 401 26 view .LVU156
 608 006c 8D7F      		andi r24,~(1<<1)
 609 006e 91FF      		sbrs r25,1
 610 0070 8260      		ori r24,1<<1
 611 0072 8093 0000 		sts debug_config,r24
 402:tmk_core/common/command.c ****                 print("\nmatrix: on\n");
 612               		.loc 1 402 13 is_stmt 1 view .LVU157
 402:tmk_core/common/command.c ****                 print("\nmatrix: on\n");
 613               		.loc 1 402 16 is_stmt 0 view .LVU158
 614 0076 81FF      		sbrs r24,1
 615 0078 00C0      		rjmp .L54
 616               	.L49:
 403:tmk_core/common/command.c ****                 debug_enable = true;
 617               		.loc 1 403 40 is_stmt 1 view .LVU159
 404:tmk_core/common/command.c ****             } else {
 618               		.loc 1 404 17 view .LVU160
 404:tmk_core/common/command.c ****             } else {
 619               		.loc 1 404 30 is_stmt 0 view .LVU161
 620 007a 8091 0000 		lds r24,debug_config
 621 007e 8160      		ori r24,lo8(1<<0)
 622 0080 00C0      		rjmp .L56
 623               	.LVL52:
 624               	.L44:
 412:tmk_core/common/command.c ****             if (debug_keyboard) {
 625               		.loc 1 412 13 is_stmt 1 view .LVU162
 412:tmk_core/common/command.c ****             if (debug_keyboard) {
 626               		.loc 1 412 31 is_stmt 0 view .LVU163
 627 0082 9091 0000 		lds r25,debug_config
 412:tmk_core/common/command.c ****             if (debug_keyboard) {
 628               		.loc 1 412 28 view .LVU164
 629 0086 892F      		mov r24,r25
 630               	.LVL53:
 412:tmk_core/common/command.c ****             if (debug_keyboard) {
 631               		.loc 1 412 28 view .LVU165
 632 0088 8B7F      		andi r24,~(1<<2)
 633 008a 92FF      		sbrs r25,2
 634 008c 8460      		ori r24,1<<2
 635 008e 8093 0000 		sts debug_config,r24
 413:tmk_core/common/command.c ****                 print("\nkeyboard: on\n");
 636               		.loc 1 413 13 is_stmt 1 view .LVU166
 413:tmk_core/common/command.c ****                 print("\nkeyboard: on\n");
 637               		.loc 1 413 16 is_stmt 0 view .LVU167
 638 0092 82FD      		sbrc r24,2
 639 0094 00C0      		rjmp .L49
 640 0096 00C0      		rjmp .L54
 641               	.LVL54:
 642               	.L43:
 423:tmk_core/common/command.c ****             if (debug_mouse) {
 643               		.loc 1 423 13 is_stmt 1 view .LVU168
 423:tmk_core/common/command.c ****             if (debug_mouse) {
 644               		.loc 1 423 28 is_stmt 0 view .LVU169
 645 0098 9091 0000 		lds r25,debug_config
 423:tmk_core/common/command.c ****             if (debug_mouse) {
 646               		.loc 1 423 25 view .LVU170
 647 009c 892F      		mov r24,r25
 648               	.LVL55:
 423:tmk_core/common/command.c ****             if (debug_mouse) {
 649               		.loc 1 423 25 view .LVU171
 650 009e 877F      		andi r24,~(1<<3)
 651 00a0 93FF      		sbrs r25,3
 652 00a2 8860      		ori r24,1<<3
 653 00a4 8093 0000 		sts debug_config,r24
 424:tmk_core/common/command.c ****                 print("\nmouse: on\n");
 654               		.loc 1 424 13 is_stmt 1 view .LVU172
 424:tmk_core/common/command.c ****                 print("\nmouse: on\n");
 655               		.loc 1 424 16 is_stmt 0 view .LVU173
 656 00a8 83FD      		sbrc r24,3
 657 00aa 00C0      		rjmp .L49
 658 00ac 00C0      		rjmp .L54
 659               	.LVL56:
 660               	.L42:
 446:tmk_core/common/command.c ****             keymap_config.nkro = !keymap_config.nkro;
 661               		.loc 1 446 13 is_stmt 1 view .LVU174
 662 00ae 0E94 0000 		call clear_keyboard
 663               	.LVL57:
 447:tmk_core/common/command.c ****             if (keymap_config.nkro) {
 664               		.loc 1 447 13 view .LVU175
 447:tmk_core/common/command.c ****             if (keymap_config.nkro) {
 665               		.loc 1 447 48 is_stmt 0 view .LVU176
 666 00b2 9091 0000 		lds r25,keymap_config
 447:tmk_core/common/command.c ****             if (keymap_config.nkro) {
 667               		.loc 1 447 32 view .LVU177
 668 00b6 892F      		mov r24,r25
 669 00b8 97FB      		bst r25,7
 670 00ba 87F9      		bld r24,7
 671 00bc 8058      		subi r24,0x80
 672 00be 8093 0000 		sts keymap_config,r24
 448:tmk_core/common/command.c ****                 print("NKRO: on\n");
 673               		.loc 1 448 13 is_stmt 1 view .LVU178
 674 00c2 00C0      		rjmp .L54
 675               	.LVL58:
 676               	.L34:
 459:tmk_core/common/command.c ****             break;
 677               		.loc 1 459 13 view .LVU179
 678 00c4 80E0      		ldi r24,0
 679               	.LVL59:
 680               	.L55:
 519:tmk_core/common/command.c ****             break;
 681               		.loc 1 519 13 is_stmt 0 view .LVU180
 682 00c6 0E94 0000 		call switch_default_layer
 683               	.LVL60:
 520:tmk_core/common/command.c ****         case KC_0:
 684               		.loc 1 520 13 is_stmt 1 view .LVU181
 685 00ca 00C0      		rjmp .L54
 686               	.LVL61:
 687               	.L36:
 509:tmk_core/common/command.c ****             break;
 688               		.loc 1 509 13 view .LVU182
 689 00cc 8953      		subi r24,lo8(-(-57))
 690               	.LVL62:
 509:tmk_core/common/command.c ****             break;
 691               		.loc 1 509 13 is_stmt 0 view .LVU183
 692 00ce 00C0      		rjmp .L55
 693               	.LVL63:
 694               	.L40:
 519:tmk_core/common/command.c ****             break;
 695               		.loc 1 519 13 is_stmt 1 view .LVU184
 696 00d0 8D51      		subi r24,lo8(-(-29))
 697               	.LVL64:
 519:tmk_core/common/command.c ****             break;
 698               		.loc 1 519 13 is_stmt 0 view .LVU185
 699 00d2 00C0      		rjmp .L55
 700               	.LVL65:
 701               	.L50:
 528:tmk_core/common/command.c ****     }
 702               		.loc 1 528 20 view .LVU186
 703 00d4 80E0      		ldi r24,0
 704               	.LVL66:
 705               	/* epilogue start */
 531:tmk_core/common/command.c **** 
 706               		.loc 1 531 1 view .LVU187
 707 00d6 0895      		ret
 708               		.cfi_endproc
 709               	.LFE118:
 711               		.section	.text.command_extra,"ax",@progbits
 712               		.weak	command_extra
 714               	command_extra:
 715               	.LVL67:
 716               	.LFB112:
 106:tmk_core/common/command.c ****     (void)code;
 717               		.loc 1 106 1 is_stmt 1 view -0
 718               		.cfi_startproc
 719               	/* prologue: function */
 720               	/* frame size = 0 */
 721               	/* stack size = 0 */
 722               	.L__stack_usage = 0
 107:tmk_core/common/command.c ****     return false;
 723               		.loc 1 107 5 view .LVU189
 108:tmk_core/common/command.c **** }
 724               		.loc 1 108 5 view .LVU190
 109:tmk_core/common/command.c **** 
 725               		.loc 1 109 1 is_stmt 0 view .LVU191
 726 0000 80E0      		ldi r24,0
 727               	.LVL68:
 728               	/* epilogue start */
 109:tmk_core/common/command.c **** 
 729               		.loc 1 109 1 view .LVU192
 730 0002 0895      		ret
 731               		.cfi_endproc
 732               	.LFE112:
 734               		.set	command_extra.localalias.0,command_extra
 735               		.section	.text.command_console_extra,"ax",@progbits
 736               		.weak	command_console_extra
 738               	command_console_extra:
 739               	.LFB129:
 740               		.cfi_startproc
 741               	/* prologue: function */
 742               	/* frame size = 0 */
 743               	/* stack size = 0 */
 744               	.L__stack_usage = 0
 745 0000 0C94 0000 		jmp command_extra.localalias.0
 746               		.cfi_endproc
 747               	.LFE129:
 749               		.section	.text.numkey2num,"ax",@progbits
 750               	.global	numkey2num
 752               	numkey2num:
 753               	.LVL69:
 754               	.LFB126:
 783:tmk_core/common/command.c ****     switch (code) {
 755               		.loc 1 783 1 is_stmt 1 view -0
 756               		.cfi_startproc
 757               	/* prologue: function */
 758               	/* frame size = 0 */
 759               	/* stack size = 0 */
 760               	.L__stack_usage = 0
 784:tmk_core/common/command.c ****         case KC_1: return 1;
 761               		.loc 1 784 5 view .LVU194
 762 0000 8E51      		subi r24,lo8(-(-30))
 763               	.LVL70:
 784:tmk_core/common/command.c ****         case KC_1: return 1;
 764               		.loc 1 784 5 is_stmt 0 view .LVU195
 765 0002 8A30      		cpi r24,lo8(10)
 766 0004 00F4      		brsh .L61
 767 0006 E82F      		mov r30,r24
 768 0008 F0E0      		ldi r31,0
 769 000a E050      		subi r30,lo8(-(CSWTCH.34))
 770 000c F040      		sbci r31,hi8(-(CSWTCH.34))
 771 000e 8081      		ld r24,Z
 772               	.LVL71:
 784:tmk_core/common/command.c ****         case KC_1: return 1;
 773               		.loc 1 784 5 view .LVU196
 774 0010 0895      		ret
 775               	.L61:
 783:tmk_core/common/command.c ****     switch (code) {
 776               		.loc 1 783 1 view .LVU197
 777 0012 80E0      		ldi r24,0
 778               	/* epilogue start */
 797:tmk_core/common/command.c **** 
 779               		.loc 1 797 1 view .LVU198
 780 0014 0895      		ret
 781               		.cfi_endproc
 782               	.LFE126:
 784               		.section	.text.command_proc,"ax",@progbits
 785               	.global	command_proc
 787               	command_proc:
 788               	.LVL72:
 789               	.LFB111:
  77:tmk_core/common/command.c ****     switch (command_state) {
 790               		.loc 1 77 1 is_stmt 1 view -0
 791               		.cfi_startproc
  77:tmk_core/common/command.c ****     switch (command_state) {
 792               		.loc 1 77 1 is_stmt 0 view .LVU200
 793 0000 CF93      		push r28
 794               	.LCFI2:
 795               		.cfi_def_cfa_offset 3
 796               		.cfi_offset 28, -2
 797               	/* prologue: function */
 798               	/* frame size = 0 */
 799               	/* stack size = 1 */
 800               	.L__stack_usage = 1
 801 0002 C82F      		mov r28,r24
  78:tmk_core/common/command.c ****         case ONESHOT:
 802               		.loc 1 78 5 is_stmt 1 view .LVU201
 803 0004 8091 0000 		lds r24,command_state
 804               	.LVL73:
  78:tmk_core/common/command.c ****         case ONESHOT:
 805               		.loc 1 78 5 is_stmt 0 view .LVU202
 806 0008 8130      		cpi r24,lo8(1)
 807 000a 01F0      		breq .L63
 808 000c 8823      		tst r24
 809 000e 01F0      		breq .L64
 810 0010 8230      		cpi r24,lo8(2)
 811 0012 01F0      		breq .L65
  96:tmk_core/common/command.c ****             return false;
 812               		.loc 1 96 13 is_stmt 1 view .LVU203
  96:tmk_core/common/command.c ****             return false;
 813               		.loc 1 96 27 is_stmt 0 view .LVU204
 814 0014 1092 0000 		sts command_state,__zero_reg__
  97:tmk_core/common/command.c ****     }
 815               		.loc 1 97 13 is_stmt 1 view .LVU205
 816 0018 00C0      		rjmp .L93
 817               	.L64:
  80:tmk_core/common/command.c ****                 return false;
 818               		.loc 1 80 13 view .LVU206
  80:tmk_core/common/command.c ****                 return false;
 819               		.loc 1 80 18 is_stmt 0 view .LVU207
 820 001a 0E94 0000 		call get_mods
 821               	.LVL74:
  80:tmk_core/common/command.c ****                 return false;
 822               		.loc 1 80 16 view .LVU208
 823 001e 8131      		cpi r24,lo8(17)
 824 0020 01F4      		brne .L67
 825               	.L75:
  86:tmk_core/common/command.c ****             else
 826               		.loc 1 86 17 is_stmt 1 view .LVU209
  86:tmk_core/common/command.c ****             else
 827               		.loc 1 86 25 is_stmt 0 view .LVU210
 828 0022 8C2F      		mov r24,r28
 829 0024 0E94 0000 		call command_extra
 830               	.LVL75:
  86:tmk_core/common/command.c ****             else
 831               		.loc 1 86 45 view .LVU211
 832 0028 8111      		cpse r24,__zero_reg__
 833 002a 00C0      		rjmp .L94
  86:tmk_core/common/command.c ****             else
 834               		.loc 1 86 48 discriminator 2 view .LVU212
 835 002c 8C2F      		mov r24,r28
 836 002e 0E94 0000 		call command_common
 837               	.LVL76:
 838               	.L77:
  88:tmk_core/common/command.c ****             break;
 839               		.loc 1 88 53 discriminator 6 view .LVU213
 840 0032 8170      		andi r24,lo8(1)
 841               	.L62:
 842               	/* epilogue start */
 100:tmk_core/common/command.c **** 
 843               		.loc 1 100 1 view .LVU214
 844 0034 CF91      		pop r28
 845               	.LVL77:
 100:tmk_core/common/command.c **** 
 846               		.loc 1 100 1 view .LVU215
 847 0036 0895      		ret
 848               	.LVL78:
 849               	.L67:
  80:tmk_core/common/command.c ****                 return false;
 850               		.loc 1 80 18 discriminator 1 view .LVU216
 851 0038 0E94 0000 		call get_mods
 852               	.LVL79:
  80:tmk_core/common/command.c ****                 return false;
 853               		.loc 1 80 17 discriminator 1 view .LVU217
 854 003c 8232      		cpi r24,lo8(34)
 855 003e 01F0      		breq .L75
 856               	.L93:
  81:tmk_core/common/command.c ****             return (command_extra(code) || command_common(code));
 857               		.loc 1 81 24 view .LVU218
 858 0040 80E0      		ldi r24,0
 859 0042 00C0      		rjmp .L62
 860               	.L63:
  83:tmk_core/common/command.c ****         case CONSOLE:
 861               		.loc 1 83 13 is_stmt 1 view .LVU219
  85:tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
 862               		.loc 1 85 13 view .LVU220
  85:tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
 863               		.loc 1 85 17 is_stmt 0 view .LVU221
 864 0044 0E94 0000 		call get_mods
 865               	.LVL80:
  85:tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
 866               		.loc 1 85 16 view .LVU222
 867 0048 8131      		cpi r24,lo8(17)
 868 004a 01F0      		breq .L75
  85:tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
 869               		.loc 1 85 17 discriminator 1 view .LVU223
 870 004c 0E94 0000 		call get_mods
 871               	.LVL81:
 872 0050 8232      		cpi r24,lo8(34)
 873 0052 01F0      		breq .L75
  88:tmk_core/common/command.c ****             break;
 874               		.loc 1 88 17 is_stmt 1 view .LVU224
  88:tmk_core/common/command.c ****             break;
 875               		.loc 1 88 25 is_stmt 0 view .LVU225
 876 0054 8C2F      		mov r24,r28
 877 0056 0E94 0000 		call command_console_extra
 878               	.LVL82:
  88:tmk_core/common/command.c ****             break;
 879               		.loc 1 88 53 view .LVU226
 880 005a 8111      		cpse r24,__zero_reg__
 881 005c 00C0      		rjmp .L97
 882               	.LVL83:
 883               	.LBB10:
 884               	.LBI10:
 547:tmk_core/common/command.c **** {
 885               		.loc 1 547 13 is_stmt 1 view .LVU227
 886               	.LBB11:
 549:tmk_core/common/command.c ****         case KC_H:
 887               		.loc 1 549 5 view .LVU228
 888 005e C431      		cpi r28,lo8(20)
 889 0060 01F0      		breq .L78
 890 0062 00F4      		brsh .L79
 891 0064 CB30      		cpi r28,lo8(11)
 892 0066 01F0      		breq .L97
 893 0068 C031      		cpi r28,lo8(16)
 894 006a 01F4      		brne .L77
 560:tmk_core/common/command.c ****             print("M> ");
 895               		.loc 1 560 13 view .LVU229
 561:tmk_core/common/command.c ****             command_state = MOUSEKEY;
 896               		.loc 1 561 25 view .LVU230
 562:tmk_core/common/command.c ****             return true;
 897               		.loc 1 562 13 view .LVU231
 562:tmk_core/common/command.c ****             return true;
 898               		.loc 1 562 27 is_stmt 0 view .LVU232
 899 006c 82E0      		ldi r24,lo8(2)
 900 006e 8093 0000 		sts command_state,r24
 563:tmk_core/common/command.c **** #endif
 901               		.loc 1 563 13 is_stmt 1 view .LVU233
 902               	.LVL84:
 903               	.L97:
 563:tmk_core/common/command.c **** #endif
 904               		.loc 1 563 13 is_stmt 0 view .LVU234
 905               	.LBE11:
 906               	.LBE10:
  88:tmk_core/common/command.c ****             break;
 907               		.loc 1 88 53 view .LVU235
 908 0072 81E0      		ldi r24,lo8(1)
 909 0074 00C0      		rjmp .L77
 910               	.L94:
  86:tmk_core/common/command.c ****             else
 911               		.loc 1 86 45 view .LVU236
 912 0076 81E0      		ldi r24,lo8(1)
 913 0078 90E0      		ldi r25,0
 914 007a 00C0      		rjmp .L77
 915               	.LVL85:
 916               	.L79:
  86:tmk_core/common/command.c ****             else
 917               		.loc 1 86 45 view .LVU237
 918 007c C932      		cpi r28,lo8(41)
 919 007e 01F0      		breq .L78
 920 0080 C833      		cpi r28,lo8(56)
 921 0082 01F0      		breq .L97
 922               	.L119:
 923               	.LBB14:
 924               	.LBB12:
 557:tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 925               		.loc 1 557 13 is_stmt 1 view .LVU238
 926               	.LVL86:
 557:tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 927               		.loc 1 557 13 is_stmt 0 view .LVU239
 928               	.LBE12:
 929               	.LBE14:
  88:tmk_core/common/command.c ****             break;
 930               		.loc 1 88 53 view .LVU240
 931 0084 80E0      		ldi r24,0
 932 0086 00C0      		rjmp .L77
 933               	.LVL87:
 934               	.L78:
 935               	.LBB15:
 936               	.LBB13:
 556:tmk_core/common/command.c ****             return false;
 937               		.loc 1 556 13 is_stmt 1 view .LVU241
 556:tmk_core/common/command.c ****             return false;
 938               		.loc 1 556 27 is_stmt 0 view .LVU242
 939 0088 1092 0000 		sts command_state,__zero_reg__
 940 008c 00C0      		rjmp .L119
 941               	.LVL88:
 942               	.L65:
 556:tmk_core/common/command.c ****             return false;
 943               		.loc 1 556 27 view .LVU243
 944               	.LBE13:
 945               	.LBE15:
  89:tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 946               		.loc 1 89 13 is_stmt 1 view .LVU244
  92:tmk_core/common/command.c ****             break;
 947               		.loc 1 92 13 view .LVU245
 948               	.LBB16:
 949               	.LBI16:
 716:tmk_core/common/command.c **** {
 950               		.loc 1 716 13 view .LVU246
 951               	.LBB17:
 718:tmk_core/common/command.c ****         case KC_H:
 952               		.loc 1 718 5 view .LVU247
 953 008e C932      		cpi r28,lo8(41)
 954 0090 01F0      		breq .L81
 955 0092 00F4      		brsh .L82
 956 0094 C431      		cpi r28,lo8(20)
 957 0096 01F0      		breq .L81
 958 0098 00F4      		brsh .L83
 959 009a C730      		cpi r28,lo8(7)
 960 009c 01F0      		breq .L84
 961               	.L98:
 718:tmk_core/common/command.c ****         case KC_H:
 962               		.loc 1 718 5 is_stmt 0 view .LVU248
 963               	.LBE17:
 964               	.LBE16:
  99:tmk_core/common/command.c **** }
 965               		.loc 1 99 12 view .LVU249
 966 009e 81E0      		ldi r24,lo8(1)
 967 00a0 00C0      		rjmp .L62
 968               	.L83:
  99:tmk_core/common/command.c **** }
 969               		.loc 1 99 12 view .LVU250
 970 00a2 82EE      		ldi r24,lo8(-30)
 971 00a4 8C0F      		add r24,r28
 972 00a6 8630      		cpi r24,lo8(6)
 973 00a8 00F4      		brsh .L98
 974               	.LBB19:
 975               	.LBB18:
 742:tmk_core/common/command.c ****             break;
 976               		.loc 1 742 13 is_stmt 1 view .LVU251
 742:tmk_core/common/command.c ****             break;
 977               		.loc 1 742 30 is_stmt 0 view .LVU252
 978 00aa 8C2F      		mov r24,r28
 979 00ac 0E94 0000 		call numkey2num
 980               	.LVL89:
 742:tmk_core/common/command.c ****             break;
 981               		.loc 1 742 28 view .LVU253
 982 00b0 8093 0000 		sts mousekey_param,r24
 743:tmk_core/common/command.c ****         case KC_UP:
 983               		.loc 1 743 13 is_stmt 1 view .LVU254
 984 00b4 00C0      		rjmp .L98
 985               	.L82:
 743:tmk_core/common/command.c ****         case KC_UP:
 986               		.loc 1 743 13 is_stmt 0 view .LVU255
 987 00b6 CE34      		cpi r28,lo8(78)
 988 00b8 01F0      		breq .L86
 989 00ba 00F4      		brsh .L87
 751:tmk_core/common/command.c ****             break;
 990               		.loc 1 751 13 view .LVU256
 991 00bc 6AE0      		ldi r22,lo8(10)
 992 00be CB34      		cpi r28,lo8(75)
 993 00c0 01F4      		brne .L98
 994               	.L121:
 751:tmk_core/common/command.c ****             break;
 995               		.loc 1 751 13 view .LVU257
 996 00c2 8091 0000 		lds r24,mousekey_param
 997 00c6 0E94 0000 		call mousekey_param_inc
 998               	.LVL90:
 752:tmk_core/common/command.c ****         case KC_PGDN:
 999               		.loc 1 752 13 is_stmt 1 view .LVU258
 1000 00ca 00C0      		rjmp .L98
 1001               	.L87:
 752:tmk_core/common/command.c ****         case KC_PGDN:
 1002               		.loc 1 752 13 is_stmt 0 view .LVU259
 1003 00cc C135      		cpi r28,lo8(81)
 1004 00ce 01F0      		breq .L89
 745:tmk_core/common/command.c ****             break;
 1005               		.loc 1 745 13 view .LVU260
 1006 00d0 61E0      		ldi r22,lo8(1)
 1007 00d2 C235      		cpi r28,lo8(82)
 1008 00d4 01F0      		breq .L121
 1009 00d6 00C0      		rjmp .L98
 1010               	.L81:
 725:tmk_core/common/command.c ****                 mousekey_param = 0;
 1011               		.loc 1 725 13 is_stmt 1 view .LVU261
 725:tmk_core/common/command.c ****                 mousekey_param = 0;
 1012               		.loc 1 725 16 is_stmt 0 view .LVU262
 1013 00d8 8091 0000 		lds r24,mousekey_param
 1014 00dc 8823      		tst r24
 1015 00de 01F0      		breq .L91
 726:tmk_core/common/command.c ****             } else {
 1016               		.loc 1 726 17 is_stmt 1 view .LVU263
 726:tmk_core/common/command.c ****             } else {
 1017               		.loc 1 726 32 is_stmt 0 view .LVU264
 1018 00e0 1092 0000 		sts mousekey_param,__zero_reg__
 732:tmk_core/common/command.c ****         case KC_P:
 1019               		.loc 1 732 13 is_stmt 1 view .LVU265
 1020 00e4 00C0      		rjmp .L98
 1021               	.L91:
 728:tmk_core/common/command.c ****                 command_state = CONSOLE;
 1022               		.loc 1 728 29 view .LVU266
 729:tmk_core/common/command.c ****                 return false;
 1023               		.loc 1 729 17 view .LVU267
 729:tmk_core/common/command.c ****                 return false;
 1024               		.loc 1 729 31 is_stmt 0 view .LVU268
 1025 00e6 81E0      		ldi r24,lo8(1)
 1026 00e8 8093 0000 		sts command_state,r24
 730:tmk_core/common/command.c ****             }
 1027               		.loc 1 730 17 is_stmt 1 view .LVU269
 1028 00ec 00C0      		rjmp .L62
 1029               	.L89:
 748:tmk_core/common/command.c ****             break;
 1030               		.loc 1 748 13 view .LVU270
 1031 00ee 61E0      		ldi r22,lo8(1)
 1032               	.L120:
 754:tmk_core/common/command.c ****             break;
 1033               		.loc 1 754 13 is_stmt 0 view .LVU271
 1034 00f0 8091 0000 		lds r24,mousekey_param
 1035 00f4 0E94 0000 		call mousekey_param_dec
 1036               	.LVL91:
 755:tmk_core/common/command.c ****         case KC_D:
 1037               		.loc 1 755 13 is_stmt 1 view .LVU272
 1038 00f8 00C0      		rjmp .L98
 1039               	.L86:
 754:tmk_core/common/command.c ****             break;
 1040               		.loc 1 754 13 view .LVU273
 1041 00fa 6AE0      		ldi r22,lo8(10)
 1042 00fc 00C0      		rjmp .L120
 1043               	.L84:
 757:tmk_core/common/command.c ****             mk_interval = MOUSEKEY_INTERVAL;
 1044               		.loc 1 757 13 view .LVU274
 757:tmk_core/common/command.c ****             mk_interval = MOUSEKEY_INTERVAL;
 1045               		.loc 1 757 22 is_stmt 0 view .LVU275
 1046 00fe 1092 0000 		sts mk_delay,__zero_reg__
 758:tmk_core/common/command.c ****             mk_max_speed = MOUSEKEY_MAX_SPEED;
 1047               		.loc 1 758 13 is_stmt 1 view .LVU276
 758:tmk_core/common/command.c ****             mk_max_speed = MOUSEKEY_MAX_SPEED;
 1048               		.loc 1 758 25 is_stmt 0 view .LVU277
 1049 0102 84E1      		ldi r24,lo8(20)
 1050 0104 8093 0000 		sts mk_interval,r24
 759:tmk_core/common/command.c ****             mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
 1051               		.loc 1 759 13 is_stmt 1 view .LVU278
 759:tmk_core/common/command.c ****             mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
 1052               		.loc 1 759 26 is_stmt 0 view .LVU279
 1053 0108 C093 0000 		sts mk_max_speed,r28
 760:tmk_core/common/command.c ****             mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
 1054               		.loc 1 760 13 is_stmt 1 view .LVU280
 760:tmk_core/common/command.c ****             mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
 1055               		.loc 1 760 28 is_stmt 0 view .LVU281
 1056 010c 8CE3      		ldi r24,lo8(60)
 1057 010e 8093 0000 		sts mk_time_to_max,r24
 761:tmk_core/common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 1058               		.loc 1 761 13 is_stmt 1 view .LVU282
 761:tmk_core/common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 1059               		.loc 1 761 32 is_stmt 0 view .LVU283
 1060 0112 88E0      		ldi r24,lo8(8)
 1061 0114 8093 0000 		sts mk_wheel_max_speed,r24
 762:tmk_core/common/command.c ****             print("set default\n");
 1062               		.loc 1 762 13 is_stmt 1 view .LVU284
 762:tmk_core/common/command.c ****             print("set default\n");
 1063               		.loc 1 762 34 is_stmt 0 view .LVU285
 1064 0118 88E2      		ldi r24,lo8(40)
 1065 011a 8093 0000 		sts mk_wheel_time_to_max,r24
 763:tmk_core/common/command.c ****             break;
 1066               		.loc 1 763 35 is_stmt 1 view .LVU286
 764:tmk_core/common/command.c ****         default:
 1067               		.loc 1 764 13 view .LVU287
 1068 011e 00C0      		rjmp .L98
 1069               	.LBE18:
 1070               	.LBE19:
 1071               		.cfi_endproc
 1072               	.LFE111:
 1074               		.section	.rodata.CSWTCH.34,"a",@progbits
 1077               	CSWTCH.34:
 1078 0000 01        		.byte	1
 1079 0001 02        		.byte	2
 1080 0002 03        		.byte	3
 1081 0003 04        		.byte	4
 1082 0004 05        		.byte	5
 1083 0005 06        		.byte	6
 1084 0006 07        		.byte	7
 1085 0007 08        		.byte	8
 1086 0008 09        		.byte	9
 1087 0009 00        		.byte	0
 1088               		.section	.bss.mousekey_param,"aw",@nobits
 1091               	mousekey_param:
 1092 0000 00        		.zero	1
 1093               	.global	command_state
 1094               		.section	.bss.command_state,"aw",@nobits
 1097               	command_state:
 1098 0000 00        		.zero	1
 1099               		.text
 1100               	.Letext0:
 1101               		.file 3 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/stdint.h"
 1102               		.file 4 "/usr/local/Cellar/avr-gcc/8.1.0/lib/avr-gcc/8/gcc/avr/8.1.0/include/stddef.h"
 1103               		.file 5 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 1104               		.file 6 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 1105               		.file 7 "lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 1106               		.file 8 "lib/lufa/LUFA/Drivers/USB/Core/HostStandardReq.h"
 1107               		.file 9 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/stdio.h"
 1108               		.file 10 "tmk_core/common/report.h"
 1109               		.file 11 "tmk_core/common/host.h"
 1110               		.file 12 "tmk_core/common/keyboard.h"
 1111               		.file 13 "tmk_core/common/action.h"
 1112               		.file 14 "tmk_core/common/debug.h"
 1113               		.file 15 "quantum/keycode_config.h"
 1114               		.file 16 "quantum/keymap.h"
 1115               		.file 17 "tmk_core/common/timer.h"
 1116               		.file 18 "tmk_core/common/action_layer.h"
 1117               		.file 19 "tmk_core/common/action_util.h"
 1118               		.file 20 "tmk_core/common/command.h"
 1119               		.file 21 "quantum/rgblight_types.h"
 1120               		.file 22 "quantum/rgblight.h"
 1121               		.file 23 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/stdlib.h"
 1122               		.file 24 "quantum/process_keycode/process_unicode_common.h"
 1123               		.file 25 "quantum/quantum.h"
 1124               		.file 26 "tmk_core/common/mousekey.h"
 1125               		.file 27 "tmk_core/common/eeconfig.h"
 1126               		.file 28 "tmk_core/common/bootloader.h"
 1127               		.file 29 "tmk_core/common/keycode.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 command.c
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccTPOqPR.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccTPOqPR.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccTPOqPR.s:4      *ABS*:000000000000003f __SREG__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccTPOqPR.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccTPOqPR.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccTPOqPR.s:12     .text.mousekey_param_inc:0000000000000000 mousekey_param_inc
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccTPOqPR.s:220    .text.mousekey_param_dec:0000000000000000 mousekey_param_dec
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccTPOqPR.s:365    .text.switch_default_layer:0000000000000000 switch_default_layer
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccTPOqPR.s:419    .text.command_common:0000000000000000 command_common
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccTPOqPR.s:1097   .bss.command_state:0000000000000000 command_state
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccTPOqPR.s:714    .text.command_extra:0000000000000000 command_extra
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccTPOqPR.s:714    .text.command_extra:0000000000000000 command_extra.localalias.0
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccTPOqPR.s:738    .text.command_console_extra:0000000000000000 command_console_extra
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccTPOqPR.s:752    .text.numkey2num:0000000000000000 numkey2num
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccTPOqPR.s:1077   .rodata.CSWTCH.34:0000000000000000 CSWTCH.34
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccTPOqPR.s:787    .text.command_proc:0000000000000000 command_proc
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccTPOqPR.s:1091   .bss.mousekey_param:0000000000000000 mousekey_param

UNDEFINED SYMBOLS
mk_delay
mk_interval
mk_max_speed
mk_time_to_max
mk_wheel_max_speed
mk_wheel_time_to_max
default_layer_set
clear_keyboard
__tablejump2__
eeconfig_init
debug_config
bootloader_jump
keymap_config
get_mods
__do_copy_data
__do_clear_bss
