   1               		.file	"process_unicode_common.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.unicode_input_mode_init,"ax",@progbits
  11               	.global	unicode_input_mode_init
  13               	unicode_input_mode_init:
  14               	.LFB111:
  15               		.file 1 "quantum/process_keycode/process_unicode_common.c"
   1:quantum/process_keycode/process_unicode_common.c **** /* Copyright 2017 Jack Humbert
   2:quantum/process_keycode/process_unicode_common.c ****  *
   3:quantum/process_keycode/process_unicode_common.c ****  * This program is free software: you can redistribute it and/or modify
   4:quantum/process_keycode/process_unicode_common.c ****  * it under the terms of the GNU General Public License as published by
   5:quantum/process_keycode/process_unicode_common.c ****  * the Free Software Foundation, either version 2 of the License, or
   6:quantum/process_keycode/process_unicode_common.c ****  * (at your option) any later version.
   7:quantum/process_keycode/process_unicode_common.c ****  *
   8:quantum/process_keycode/process_unicode_common.c ****  * This program is distributed in the hope that it will be useful,
   9:quantum/process_keycode/process_unicode_common.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:quantum/process_keycode/process_unicode_common.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:quantum/process_keycode/process_unicode_common.c ****  * GNU General Public License for more details.
  12:quantum/process_keycode/process_unicode_common.c ****  *
  13:quantum/process_keycode/process_unicode_common.c ****  * You should have received a copy of the GNU General Public License
  14:quantum/process_keycode/process_unicode_common.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  15:quantum/process_keycode/process_unicode_common.c ****  */
  16:quantum/process_keycode/process_unicode_common.c **** 
  17:quantum/process_keycode/process_unicode_common.c **** #include "process_unicode_common.h"
  18:quantum/process_keycode/process_unicode_common.c **** #include "eeprom.h"
  19:quantum/process_keycode/process_unicode_common.c **** #include <ctype.h>
  20:quantum/process_keycode/process_unicode_common.c **** #include <string.h>
  21:quantum/process_keycode/process_unicode_common.c **** 
  22:quantum/process_keycode/process_unicode_common.c **** unicode_config_t unicode_config;
  23:quantum/process_keycode/process_unicode_common.c **** uint8_t          unicode_saved_mods;
  24:quantum/process_keycode/process_unicode_common.c **** 
  25:quantum/process_keycode/process_unicode_common.c **** #if UNICODE_SELECTED_MODES != -1
  26:quantum/process_keycode/process_unicode_common.c **** static uint8_t selected[] = { UNICODE_SELECTED_MODES };
  27:quantum/process_keycode/process_unicode_common.c **** static uint8_t selected_count = sizeof selected / sizeof *selected;
  28:quantum/process_keycode/process_unicode_common.c **** static uint8_t selected_index;
  29:quantum/process_keycode/process_unicode_common.c **** #endif
  30:quantum/process_keycode/process_unicode_common.c **** 
  31:quantum/process_keycode/process_unicode_common.c **** void unicode_input_mode_init(void) {
  16               		.loc 1 31 36 view -0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  32:quantum/process_keycode/process_unicode_common.c ****   unicode_config.raw = eeprom_read_byte(EECONFIG_UNICODEMODE);
  22               		.loc 1 32 3 view .LVU1
  23               		.loc 1 32 24 is_stmt 0 view .LVU2
  24 0000 8CE0      		ldi r24,lo8(12)
  25 0002 90E0      		ldi r25,0
  26 0004 0E94 0000 		call eeprom_read_byte
  27               	.LVL0:
  28 0008 90E0      		ldi r25,0
  29 000a B0E0      		ldi r27,0
  30 000c A0E0      		ldi r26,0
  31 000e 8093 0000 		sts unicode_config,r24
  32 0012 9093 0000 		sts unicode_config+1,r25
  33 0016 A093 0000 		sts unicode_config+2,r26
  34 001a B093 0000 		sts unicode_config+3,r27
  33:quantum/process_keycode/process_unicode_common.c **** #if UNICODE_SELECTED_MODES != -1
  34:quantum/process_keycode/process_unicode_common.c ****   #if UNICODE_CYCLE_PERSIST
  35:quantum/process_keycode/process_unicode_common.c ****   // Find input_mode in selected modes
  36:quantum/process_keycode/process_unicode_common.c ****   uint8_t i;
  37:quantum/process_keycode/process_unicode_common.c ****   for (i = 0; i < selected_count; i++) {
  38:quantum/process_keycode/process_unicode_common.c ****     if (selected[i] == unicode_config.input_mode) {
  39:quantum/process_keycode/process_unicode_common.c ****       selected_index = i;
  40:quantum/process_keycode/process_unicode_common.c ****       break;
  41:quantum/process_keycode/process_unicode_common.c ****     }
  42:quantum/process_keycode/process_unicode_common.c ****   }
  43:quantum/process_keycode/process_unicode_common.c ****   if (i == selected_count) {
  44:quantum/process_keycode/process_unicode_common.c ****     // Not found: input_mode isn't selected, change to one that is
  45:quantum/process_keycode/process_unicode_common.c ****     unicode_config.input_mode = selected[selected_index = 0];
  46:quantum/process_keycode/process_unicode_common.c ****   }
  47:quantum/process_keycode/process_unicode_common.c ****   #else
  48:quantum/process_keycode/process_unicode_common.c ****   // Always change to the first selected input mode
  49:quantum/process_keycode/process_unicode_common.c ****   unicode_config.input_mode = selected[selected_index = 0];
  50:quantum/process_keycode/process_unicode_common.c ****   #endif
  51:quantum/process_keycode/process_unicode_common.c **** #endif
  52:quantum/process_keycode/process_unicode_common.c ****   dprintf("Unicode input mode init to: %u\n", unicode_config.input_mode);
  35               		.loc 1 52 73 is_stmt 1 view .LVU3
  36               	/* epilogue start */
  53:quantum/process_keycode/process_unicode_common.c **** }
  37               		.loc 1 53 1 is_stmt 0 view .LVU4
  38 001e 0895      		ret
  39               		.cfi_endproc
  40               	.LFE111:
  42               		.section	.text.get_unicode_input_mode,"ax",@progbits
  43               	.global	get_unicode_input_mode
  45               	get_unicode_input_mode:
  46               	.LFB112:
  54:quantum/process_keycode/process_unicode_common.c **** 
  55:quantum/process_keycode/process_unicode_common.c **** uint8_t get_unicode_input_mode(void) {
  47               		.loc 1 55 38 is_stmt 1 view -0
  48               		.cfi_startproc
  49               	/* prologue: function */
  50               	/* frame size = 0 */
  51               	/* stack size = 0 */
  52               	.L__stack_usage = 0
  56:quantum/process_keycode/process_unicode_common.c ****   return unicode_config.input_mode;
  53               		.loc 1 56 3 view .LVU6
  57:quantum/process_keycode/process_unicode_common.c **** }
  54               		.loc 1 57 1 is_stmt 0 view .LVU7
  55 0000 8091 0000 		lds r24,unicode_config
  56               	/* epilogue start */
  57 0004 0895      		ret
  58               		.cfi_endproc
  59               	.LFE112:
  61               		.section	.text.cycle_unicode_input_mode,"ax",@progbits
  62               	.global	cycle_unicode_input_mode
  64               	cycle_unicode_input_mode:
  65               	.LVL1:
  66               	.LFB114:
  58:quantum/process_keycode/process_unicode_common.c **** 
  59:quantum/process_keycode/process_unicode_common.c **** void set_unicode_input_mode(uint8_t mode) {
  60:quantum/process_keycode/process_unicode_common.c ****   unicode_config.input_mode = mode;
  61:quantum/process_keycode/process_unicode_common.c ****   persist_unicode_input_mode();
  62:quantum/process_keycode/process_unicode_common.c ****   dprintf("Unicode input mode set to: %u\n", unicode_config.input_mode);
  63:quantum/process_keycode/process_unicode_common.c **** }
  64:quantum/process_keycode/process_unicode_common.c **** 
  65:quantum/process_keycode/process_unicode_common.c **** void cycle_unicode_input_mode(uint8_t offset) {
  67               		.loc 1 65 47 is_stmt 1 view -0
  68               		.cfi_startproc
  69               	/* prologue: function */
  70               	/* frame size = 0 */
  71               	/* stack size = 0 */
  72               	.L__stack_usage = 0
  66:quantum/process_keycode/process_unicode_common.c **** #if UNICODE_SELECTED_MODES != -1
  67:quantum/process_keycode/process_unicode_common.c ****   selected_index = (selected_index + offset) % selected_count;
  68:quantum/process_keycode/process_unicode_common.c ****   unicode_config.input_mode = selected[selected_index];
  69:quantum/process_keycode/process_unicode_common.c ****   #if UNICODE_CYCLE_PERSIST
  70:quantum/process_keycode/process_unicode_common.c ****   persist_unicode_input_mode();
  71:quantum/process_keycode/process_unicode_common.c ****   #endif
  72:quantum/process_keycode/process_unicode_common.c ****   dprintf("Unicode input mode cycle to: %u\n", unicode_config.input_mode);
  73:quantum/process_keycode/process_unicode_common.c **** #endif
  74:quantum/process_keycode/process_unicode_common.c **** }
  73               		.loc 1 74 1 view .LVU9
  74               	/* epilogue start */
  75 0000 0895      		ret
  76               		.cfi_endproc
  77               	.LFE114:
  79               		.section	.text.persist_unicode_input_mode,"ax",@progbits
  80               	.global	persist_unicode_input_mode
  82               	persist_unicode_input_mode:
  83               	.LFB115:
  75:quantum/process_keycode/process_unicode_common.c **** 
  76:quantum/process_keycode/process_unicode_common.c **** void persist_unicode_input_mode(void) {
  84               		.loc 1 76 39 view -0
  85               		.cfi_startproc
  86               	/* prologue: function */
  87               	/* frame size = 0 */
  88               	/* stack size = 0 */
  89               	.L__stack_usage = 0
  77:quantum/process_keycode/process_unicode_common.c ****   eeprom_update_byte(EECONFIG_UNICODEMODE, unicode_config.input_mode);
  90               		.loc 1 77 3 view .LVU11
  91 0000 6091 0000 		lds r22,unicode_config
  92 0004 8CE0      		ldi r24,lo8(12)
  93 0006 90E0      		ldi r25,0
  94 0008 0C94 0000 		jmp eeprom_update_byte
  95               	.LVL2:
  96               		.cfi_endproc
  97               	.LFE115:
  99               		.section	.text.set_unicode_input_mode,"ax",@progbits
 100               	.global	set_unicode_input_mode
 102               	set_unicode_input_mode:
 103               	.LVL3:
 104               	.LFB113:
  59:quantum/process_keycode/process_unicode_common.c ****   unicode_config.input_mode = mode;
 105               		.loc 1 59 43 view -0
 106               		.cfi_startproc
 107               	/* prologue: function */
 108               	/* frame size = 0 */
 109               	/* stack size = 0 */
 110               	.L__stack_usage = 0
  60:quantum/process_keycode/process_unicode_common.c ****   persist_unicode_input_mode();
 111               		.loc 1 60 3 view .LVU13
  60:quantum/process_keycode/process_unicode_common.c ****   persist_unicode_input_mode();
 112               		.loc 1 60 29 is_stmt 0 view .LVU14
 113 0000 8093 0000 		sts unicode_config,r24
  61:quantum/process_keycode/process_unicode_common.c ****   dprintf("Unicode input mode set to: %u\n", unicode_config.input_mode);
 114               		.loc 1 61 3 is_stmt 1 view .LVU15
 115 0004 0C94 0000 		jmp persist_unicode_input_mode
 116               	.LVL4:
  61:quantum/process_keycode/process_unicode_common.c ****   dprintf("Unicode input mode set to: %u\n", unicode_config.input_mode);
 117               		.loc 1 61 3 is_stmt 0 view .LVU16
 118               		.cfi_endproc
 119               	.LFE113:
 121               		.section	.text.unicode_input_start,"ax",@progbits
 122               		.weak	unicode_input_start
 124               	unicode_input_start:
 125               	.LFB116:
  78:quantum/process_keycode/process_unicode_common.c **** }
  79:quantum/process_keycode/process_unicode_common.c **** 
  80:quantum/process_keycode/process_unicode_common.c **** __attribute__((weak))
  81:quantum/process_keycode/process_unicode_common.c **** void unicode_input_start(void) {
 126               		.loc 1 81 32 is_stmt 1 view -0
 127               		.cfi_startproc
 128               	/* prologue: function */
 129               	/* frame size = 0 */
 130               	/* stack size = 0 */
 131               	.L__stack_usage = 0
  82:quantum/process_keycode/process_unicode_common.c ****   unicode_saved_mods = get_mods(); // Save current mods
 132               		.loc 1 82 3 view .LVU18
 133               		.loc 1 82 24 is_stmt 0 view .LVU19
 134 0000 0E94 0000 		call get_mods
 135               	.LVL5:
 136               		.loc 1 82 22 view .LVU20
 137 0004 8093 0000 		sts unicode_saved_mods,r24
  83:quantum/process_keycode/process_unicode_common.c ****   clear_mods(); // Unregister mods to start from a clean state
 138               		.loc 1 83 3 is_stmt 1 view .LVU21
 139 0008 0E94 0000 		call clear_mods
 140               	.LVL6:
  84:quantum/process_keycode/process_unicode_common.c **** 
  85:quantum/process_keycode/process_unicode_common.c ****   switch (unicode_config.input_mode) {
 141               		.loc 1 85 3 view .LVU22
 142               		.loc 1 85 25 is_stmt 0 view .LVU23
 143 000c 8091 0000 		lds r24,unicode_config
 144 0010 8130      		cpi r24,lo8(1)
 145 0012 01F0      		breq .L7
 146 0014 8823      		tst r24
 147 0016 01F0      		breq .L8
 148 0018 8230      		cpi r24,lo8(2)
 149 001a 01F0      		breq .L9
 150 001c 8430      		cpi r24,lo8(4)
 151 001e 01F0      		breq .L10
 152               	.L11:
  86:quantum/process_keycode/process_unicode_common.c ****   case UC_OSX:
  87:quantum/process_keycode/process_unicode_common.c ****     register_code(UNICODE_KEY_OSX);
  88:quantum/process_keycode/process_unicode_common.c ****     break;
  89:quantum/process_keycode/process_unicode_common.c ****   case UC_LNX:
  90:quantum/process_keycode/process_unicode_common.c ****     tap_code16(UNICODE_KEY_LNX);
  91:quantum/process_keycode/process_unicode_common.c ****     break;
  92:quantum/process_keycode/process_unicode_common.c ****   case UC_WIN:
  93:quantum/process_keycode/process_unicode_common.c ****     register_code(KC_LALT);
  94:quantum/process_keycode/process_unicode_common.c ****     tap_code(KC_PPLS);
  95:quantum/process_keycode/process_unicode_common.c ****     break;
  96:quantum/process_keycode/process_unicode_common.c ****   case UC_WINC:
  97:quantum/process_keycode/process_unicode_common.c ****     tap_code(UNICODE_KEY_WINC);
  98:quantum/process_keycode/process_unicode_common.c ****     tap_code(KC_U);
  99:quantum/process_keycode/process_unicode_common.c ****     break;
 100:quantum/process_keycode/process_unicode_common.c ****   }
 101:quantum/process_keycode/process_unicode_common.c **** 
 102:quantum/process_keycode/process_unicode_common.c ****   wait_ms(UNICODE_TYPE_DELAY);
 153               		.loc 1 102 3 is_stmt 1 view .LVU24
 154               	.LVL7:
 155               	.LBB4:
 156               	.LBI4:
 157               		.file 2 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** _delay_ms(double __ms)
 158               		.loc 2 166 1 view .LVU25
 159               	.LBB5:
 167:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	double __tmp ;
 160               		.loc 2 168 2 view .LVU26
 169:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 161               		.loc 2 172 2 view .LVU27
 173:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 162               		.loc 2 173 2 view .LVU28
 174:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 163               		.loc 2 174 2 view .LVU29
 175:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 164               		.loc 2 184 3 view .LVU30
 185:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc/8.1.0/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 165               		.loc 2 187 2 view .LVU31
 166 0020 8FE3      		ldi r24,lo8(-25537)
 167 0022 9CE9      		ldi r25,hi8(-25537)
 168 0024 0197      	1:	sbiw r24,1
 169 0026 01F4      		brne 1b
 170 0028 00C0      		rjmp .
 171 002a 0000      		nop
 172               	.LVL8:
 173               	/* epilogue start */
 174               		.loc 2 187 2 is_stmt 0 view .LVU32
 175               	.LBE5:
 176               	.LBE4:
 103:quantum/process_keycode/process_unicode_common.c **** }
 177               		.loc 1 103 1 view .LVU33
 178 002c 0895      		ret
 179               	.L8:
  87:quantum/process_keycode/process_unicode_common.c ****     break;
 180               		.loc 1 87 5 is_stmt 1 view .LVU34
 181 002e 82EE      		ldi r24,lo8(-30)
 182 0030 0E94 0000 		call register_code
 183               	.LVL9:
  88:quantum/process_keycode/process_unicode_common.c ****   case UC_LNX:
 184               		.loc 1 88 5 view .LVU35
 185 0034 00C0      		rjmp .L11
 186               	.L7:
  90:quantum/process_keycode/process_unicode_common.c ****     break;
 187               		.loc 1 90 5 view .LVU36
 188 0036 88E1      		ldi r24,lo8(24)
 189 0038 93E0      		ldi r25,lo8(3)
 190 003a 0E94 0000 		call tap_code16
 191               	.LVL10:
  91:quantum/process_keycode/process_unicode_common.c ****   case UC_WIN:
 192               		.loc 1 91 5 view .LVU37
 193 003e 00C0      		rjmp .L11
 194               	.L9:
  93:quantum/process_keycode/process_unicode_common.c ****     tap_code(KC_PPLS);
 195               		.loc 1 93 5 view .LVU38
 196 0040 82EE      		ldi r24,lo8(-30)
 197 0042 0E94 0000 		call register_code
 198               	.LVL11:
  94:quantum/process_keycode/process_unicode_common.c ****     break;
 199               		.loc 1 94 5 view .LVU39
 200 0046 87E5      		ldi r24,lo8(87)
 201               	.L12:
  98:quantum/process_keycode/process_unicode_common.c ****     break;
 202               		.loc 1 98 5 is_stmt 0 view .LVU40
 203 0048 0E94 0000 		call tap_code
 204               	.LVL12:
  99:quantum/process_keycode/process_unicode_common.c ****   }
 205               		.loc 1 99 5 is_stmt 1 view .LVU41
 206 004c 00C0      		rjmp .L11
 207               	.L10:
  97:quantum/process_keycode/process_unicode_common.c ****     tap_code(KC_U);
 208               		.loc 1 97 5 view .LVU42
 209 004e 86EE      		ldi r24,lo8(-26)
 210 0050 0E94 0000 		call tap_code
 211               	.LVL13:
  98:quantum/process_keycode/process_unicode_common.c ****     break;
 212               		.loc 1 98 5 view .LVU43
 213 0054 88E1      		ldi r24,lo8(24)
 214 0056 00C0      		rjmp .L12
 215               		.cfi_endproc
 216               	.LFE116:
 218               		.section	.text.unicode_input_finish,"ax",@progbits
 219               		.weak	unicode_input_finish
 221               	unicode_input_finish:
 222               	.LFB117:
 104:quantum/process_keycode/process_unicode_common.c **** 
 105:quantum/process_keycode/process_unicode_common.c **** __attribute__((weak))
 106:quantum/process_keycode/process_unicode_common.c **** void unicode_input_finish(void) {
 223               		.loc 1 106 33 view -0
 224               		.cfi_startproc
 225               	/* prologue: function */
 226               	/* frame size = 0 */
 227               	/* stack size = 0 */
 228               	.L__stack_usage = 0
 107:quantum/process_keycode/process_unicode_common.c ****   switch (unicode_config.input_mode) {
 229               		.loc 1 107 3 view .LVU45
 230               		.loc 1 107 25 is_stmt 0 view .LVU46
 231 0000 8091 0000 		lds r24,unicode_config
 232 0004 8130      		cpi r24,lo8(1)
 233 0006 01F0      		breq .L14
 234 0008 8823      		tst r24
 235 000a 01F0      		breq .L15
 236 000c 8230      		cpi r24,lo8(2)
 237 000e 01F0      		breq .L15
 238 0010 8430      		cpi r24,lo8(4)
 239 0012 01F0      		breq .L16
 240               	.L17:
 108:quantum/process_keycode/process_unicode_common.c ****   case UC_OSX:
 109:quantum/process_keycode/process_unicode_common.c ****     unregister_code(UNICODE_KEY_OSX);
 110:quantum/process_keycode/process_unicode_common.c ****     break;
 111:quantum/process_keycode/process_unicode_common.c ****   case UC_LNX:
 112:quantum/process_keycode/process_unicode_common.c ****     tap_code(KC_SPC);
 113:quantum/process_keycode/process_unicode_common.c ****     break;
 114:quantum/process_keycode/process_unicode_common.c ****   case UC_WIN:
 115:quantum/process_keycode/process_unicode_common.c ****     unregister_code(KC_LALT);
 116:quantum/process_keycode/process_unicode_common.c ****     break;
 117:quantum/process_keycode/process_unicode_common.c ****   case UC_WINC:
 118:quantum/process_keycode/process_unicode_common.c ****     tap_code(KC_ENTER);
 119:quantum/process_keycode/process_unicode_common.c ****     break;
 120:quantum/process_keycode/process_unicode_common.c ****   }
 121:quantum/process_keycode/process_unicode_common.c **** 
 122:quantum/process_keycode/process_unicode_common.c ****   set_mods(unicode_saved_mods); // Reregister previously set mods
 241               		.loc 1 122 3 is_stmt 1 view .LVU47
 242 0014 8091 0000 		lds r24,unicode_saved_mods
 243 0018 0C94 0000 		jmp set_mods
 244               	.LVL14:
 245               	.L15:
 109:quantum/process_keycode/process_unicode_common.c ****     break;
 246               		.loc 1 109 5 view .LVU48
 247 001c 82EE      		ldi r24,lo8(-30)
 248 001e 0E94 0000 		call unregister_code
 249               	.LVL15:
 110:quantum/process_keycode/process_unicode_common.c ****   case UC_LNX:
 250               		.loc 1 110 5 view .LVU49
 251 0022 00C0      		rjmp .L17
 252               	.L14:
 112:quantum/process_keycode/process_unicode_common.c ****     break;
 253               		.loc 1 112 5 view .LVU50
 254 0024 8CE2      		ldi r24,lo8(44)
 255               	.L24:
 118:quantum/process_keycode/process_unicode_common.c ****     break;
 256               		.loc 1 118 5 is_stmt 0 view .LVU51
 257 0026 0E94 0000 		call tap_code
 258               	.LVL16:
 119:quantum/process_keycode/process_unicode_common.c ****   }
 259               		.loc 1 119 5 is_stmt 1 view .LVU52
 260 002a 00C0      		rjmp .L17
 261               	.L16:
 118:quantum/process_keycode/process_unicode_common.c ****     break;
 262               		.loc 1 118 5 view .LVU53
 263 002c 88E2      		ldi r24,lo8(40)
 264 002e 00C0      		rjmp .L24
 265               		.cfi_endproc
 266               	.LFE117:
 268               		.section	.text.unicode_input_cancel,"ax",@progbits
 269               		.weak	unicode_input_cancel
 271               	unicode_input_cancel:
 272               	.LFB118:
 123:quantum/process_keycode/process_unicode_common.c **** }
 124:quantum/process_keycode/process_unicode_common.c **** 
 125:quantum/process_keycode/process_unicode_common.c **** __attribute__((weak))
 126:quantum/process_keycode/process_unicode_common.c **** void unicode_input_cancel(void) {
 273               		.loc 1 126 33 view -0
 274               		.cfi_startproc
 275               	/* prologue: function */
 276               	/* frame size = 0 */
 277               	/* stack size = 0 */
 278               	.L__stack_usage = 0
 127:quantum/process_keycode/process_unicode_common.c ****   switch (unicode_config.input_mode) {
 279               		.loc 1 127 3 view .LVU55
 280               		.loc 1 127 25 is_stmt 0 view .LVU56
 281 0000 8091 0000 		lds r24,unicode_config
 282 0004 8130      		cpi r24,lo8(1)
 283 0006 01F0      		breq .L26
 284 0008 8823      		tst r24
 285 000a 01F0      		breq .L27
 286 000c 8230      		cpi r24,lo8(2)
 287 000e 01F0      		breq .L27
 288 0010 8430      		cpi r24,lo8(4)
 289 0012 01F4      		brne .L28
 290               	.L26:
 128:quantum/process_keycode/process_unicode_common.c ****   case UC_OSX:
 129:quantum/process_keycode/process_unicode_common.c ****     unregister_code(UNICODE_KEY_OSX);
 130:quantum/process_keycode/process_unicode_common.c ****     break;
 131:quantum/process_keycode/process_unicode_common.c ****   case UC_LNX:
 132:quantum/process_keycode/process_unicode_common.c ****   case UC_WINC:
 133:quantum/process_keycode/process_unicode_common.c ****     tap_code(KC_ESC);
 291               		.loc 1 133 5 is_stmt 1 view .LVU57
 292 0014 89E2      		ldi r24,lo8(41)
 293 0016 0E94 0000 		call tap_code
 294               	.LVL17:
 134:quantum/process_keycode/process_unicode_common.c ****     break;
 295               		.loc 1 134 5 view .LVU58
 296 001a 00C0      		rjmp .L28
 297               	.L27:
 129:quantum/process_keycode/process_unicode_common.c ****     break;
 298               		.loc 1 129 5 view .LVU59
 299 001c 82EE      		ldi r24,lo8(-30)
 300 001e 0E94 0000 		call unregister_code
 301               	.LVL18:
 130:quantum/process_keycode/process_unicode_common.c ****   case UC_LNX:
 302               		.loc 1 130 5 view .LVU60
 303               	.L28:
 135:quantum/process_keycode/process_unicode_common.c ****   case UC_WIN:
 136:quantum/process_keycode/process_unicode_common.c ****     unregister_code(KC_LALT);
 137:quantum/process_keycode/process_unicode_common.c ****     break;
 138:quantum/process_keycode/process_unicode_common.c ****   }
 139:quantum/process_keycode/process_unicode_common.c **** 
 140:quantum/process_keycode/process_unicode_common.c ****   set_mods(unicode_saved_mods); // Reregister previously set mods
 304               		.loc 1 140 3 view .LVU61
 305 0022 8091 0000 		lds r24,unicode_saved_mods
 306 0026 0C94 0000 		jmp set_mods
 307               	.LVL19:
 308               		.cfi_endproc
 309               	.LFE118:
 311               		.section	.text.hex_to_keycode,"ax",@progbits
 312               		.weak	hex_to_keycode
 314               	hex_to_keycode:
 315               	.LVL20:
 316               	.LFB119:
 141:quantum/process_keycode/process_unicode_common.c **** }
 142:quantum/process_keycode/process_unicode_common.c **** 
 143:quantum/process_keycode/process_unicode_common.c **** __attribute__((weak))
 144:quantum/process_keycode/process_unicode_common.c **** uint16_t hex_to_keycode(uint8_t hex) {
 317               		.loc 1 144 38 view -0
 318               		.cfi_startproc
 319               	/* prologue: function */
 320               	/* frame size = 0 */
 321               	/* stack size = 0 */
 322               	.L__stack_usage = 0
 145:quantum/process_keycode/process_unicode_common.c ****   if (hex == 0x0) {
 323               		.loc 1 145 3 view .LVU63
 324               		.loc 1 145 6 is_stmt 0 view .LVU64
 325 0000 8823      		tst r24
 326 0002 01F0      		breq .L44
 146:quantum/process_keycode/process_unicode_common.c ****     return KC_0;
 147:quantum/process_keycode/process_unicode_common.c ****   } else if (hex < 0xA) {
 327               		.loc 1 147 10 is_stmt 1 view .LVU65
 328 0004 90E0      		ldi r25,0
 329               		.loc 1 147 13 is_stmt 0 view .LVU66
 330 0006 8A30      		cpi r24,lo8(10)
 331 0008 00F4      		brsh .L43
 148:quantum/process_keycode/process_unicode_common.c ****     return KC_1 + (hex - 0x1);
 332               		.loc 1 148 5 is_stmt 1 view .LVU67
 333               		.loc 1 148 17 is_stmt 0 view .LVU68
 334 000a 4D96      		adiw r24,29
 335               	.LVL21:
 336               		.loc 1 148 17 view .LVU69
 337 000c 0895      		ret
 338               	.LVL22:
 339               	.L43:
 149:quantum/process_keycode/process_unicode_common.c ****   } else {
 150:quantum/process_keycode/process_unicode_common.c ****     return KC_A + (hex - 0xA);
 340               		.loc 1 150 5 is_stmt 1 view .LVU70
 341               		.loc 1 150 17 is_stmt 0 view .LVU71
 342 000e 0697      		sbiw r24,6
 343               	.LVL23:
 344               		.loc 1 150 17 view .LVU72
 345 0010 0895      		ret
 346               	.LVL24:
 347               	.L44:
 146:quantum/process_keycode/process_unicode_common.c ****   } else if (hex < 0xA) {
 348               		.loc 1 146 12 view .LVU73
 349 0012 87E2      		ldi r24,lo8(39)
 350 0014 90E0      		ldi r25,0
 351               	.LVL25:
 352               	/* epilogue start */
 151:quantum/process_keycode/process_unicode_common.c ****   }
 152:quantum/process_keycode/process_unicode_common.c **** }
 353               		.loc 1 152 1 view .LVU74
 354 0016 0895      		ret
 355               		.cfi_endproc
 356               	.LFE119:
 358               		.section	.text.register_hex,"ax",@progbits
 359               	.global	register_hex
 361               	register_hex:
 362               	.LVL26:
 363               	.LFB120:
 153:quantum/process_keycode/process_unicode_common.c **** 
 154:quantum/process_keycode/process_unicode_common.c **** void register_hex(uint16_t hex) {
 364               		.loc 1 154 33 is_stmt 1 view -0
 365               		.cfi_startproc
 366               		.loc 1 154 33 is_stmt 0 view .LVU76
 367 0000 0F93      		push r16
 368               	.LCFI0:
 369               		.cfi_def_cfa_offset 3
 370               		.cfi_offset 16, -2
 371 0002 1F93      		push r17
 372               	.LCFI1:
 373               		.cfi_def_cfa_offset 4
 374               		.cfi_offset 17, -3
 375 0004 CF93      		push r28
 376               	.LCFI2:
 377               		.cfi_def_cfa_offset 5
 378               		.cfi_offset 28, -4
 379 0006 DF93      		push r29
 380               	.LCFI3:
 381               		.cfi_def_cfa_offset 6
 382               		.cfi_offset 29, -5
 383               	/* prologue: function */
 384               	/* frame size = 0 */
 385               	/* stack size = 4 */
 386               	.L__stack_usage = 4
 387 0008 8C01      		movw r16,r24
 155:quantum/process_keycode/process_unicode_common.c ****   for(int i = 3; i >= 0; i--) {
 388               		.loc 1 155 3 is_stmt 1 view .LVU77
 389               	.LBB6:
 390               		.loc 1 155 7 view .LVU78
 391               	.LVL27:
 392               		.loc 1 155 7 is_stmt 0 view .LVU79
 393               	.LBE6:
 154:quantum/process_keycode/process_unicode_common.c ****   for(int i = 3; i >= 0; i--) {
 394               		.loc 1 154 33 view .LVU80
 395 000a CCE0      		ldi r28,lo8(12)
 396 000c D0E0      		ldi r29,0
 397               	.LVL28:
 398               	.L46:
 399               	.LBB8:
 400               	.LBB7:
 156:quantum/process_keycode/process_unicode_common.c ****     uint8_t digit = ((hex >> (i*4)) & 0xF);
 401               		.loc 1 156 5 is_stmt 1 discriminator 3 view .LVU81
 157:quantum/process_keycode/process_unicode_common.c ****     tap_code(hex_to_keycode(digit));
 402               		.loc 1 157 5 discriminator 3 view .LVU82
 156:quantum/process_keycode/process_unicode_common.c ****     uint8_t digit = ((hex >> (i*4)) & 0xF);
 403               		.loc 1 156 27 is_stmt 0 discriminator 3 view .LVU83
 404 000e C801      		movw r24,r16
 405 0010 0C2E      		mov r0,r28
 406 0012 00C0      		rjmp 2f
 407               		1:
 408 0014 9695      		lsr r25
 409 0016 8795      		ror r24
 410               		2:
 411 0018 0A94      		dec r0
 412 001a 02F4      		brpl 1b
 413               		.loc 1 157 14 discriminator 3 view .LVU84
 414 001c 8F70      		andi r24,lo8(15)
 415 001e 0E94 0000 		call hex_to_keycode
 416               	.LVL29:
 417               		.loc 1 157 5 discriminator 3 view .LVU85
 418 0022 0E94 0000 		call tap_code
 419               	.LVL30:
 420               		.loc 1 157 5 discriminator 3 view .LVU86
 421 0026 2497      		sbiw r28,4
 422               	.LVL31:
 423               		.loc 1 157 5 discriminator 3 view .LVU87
 424               	.LBE7:
 155:quantum/process_keycode/process_unicode_common.c ****     uint8_t digit = ((hex >> (i*4)) & 0xF);
 425               		.loc 1 155 3 discriminator 3 view .LVU88
 426 0028 CC3F      		cpi r28,-4
 427 002a 8FEF      		ldi r24,-1
 428 002c D807      		cpc r29,r24
 429 002e 01F4      		brne .L46
 430               	/* epilogue start */
 431               	.LBE8:
 158:quantum/process_keycode/process_unicode_common.c ****   }
 159:quantum/process_keycode/process_unicode_common.c **** }
 432               		.loc 1 159 1 view .LVU89
 433 0030 DF91      		pop r29
 434 0032 CF91      		pop r28
 435               	.LVL32:
 436               		.loc 1 159 1 view .LVU90
 437 0034 1F91      		pop r17
 438 0036 0F91      		pop r16
 439               	.LVL33:
 440               		.loc 1 159 1 view .LVU91
 441 0038 0895      		ret
 442               		.cfi_endproc
 443               	.LFE120:
 445               		.section	.rodata.send_unicode_hex_string.str1.1,"aMS",@progbits,1
 446               	.LC0:
 447 0000 2000      		.string	" "
 448               		.section	.text.send_unicode_hex_string,"ax",@progbits
 449               	.global	send_unicode_hex_string
 451               	send_unicode_hex_string:
 452               	.LVL34:
 453               	.LFB121:
 160:quantum/process_keycode/process_unicode_common.c **** 
 161:quantum/process_keycode/process_unicode_common.c **** void send_unicode_hex_string(const char *str) {
 454               		.loc 1 161 47 is_stmt 1 view -0
 455               		.cfi_startproc
 456               		.loc 1 161 47 is_stmt 0 view .LVU93
 457 0000 6F92      		push r6
 458               	.LCFI4:
 459               		.cfi_def_cfa_offset 3
 460               		.cfi_offset 6, -2
 461 0002 7F92      		push r7
 462               	.LCFI5:
 463               		.cfi_def_cfa_offset 4
 464               		.cfi_offset 7, -3
 465 0004 8F92      		push r8
 466               	.LCFI6:
 467               		.cfi_def_cfa_offset 5
 468               		.cfi_offset 8, -4
 469 0006 9F92      		push r9
 470               	.LCFI7:
 471               		.cfi_def_cfa_offset 6
 472               		.cfi_offset 9, -5
 473 0008 AF92      		push r10
 474               	.LCFI8:
 475               		.cfi_def_cfa_offset 7
 476               		.cfi_offset 10, -6
 477 000a BF92      		push r11
 478               	.LCFI9:
 479               		.cfi_def_cfa_offset 8
 480               		.cfi_offset 11, -7
 481 000c CF92      		push r12
 482               	.LCFI10:
 483               		.cfi_def_cfa_offset 9
 484               		.cfi_offset 12, -8
 485 000e DF92      		push r13
 486               	.LCFI11:
 487               		.cfi_def_cfa_offset 10
 488               		.cfi_offset 13, -9
 489 0010 EF92      		push r14
 490               	.LCFI12:
 491               		.cfi_def_cfa_offset 11
 492               		.cfi_offset 14, -10
 493 0012 FF92      		push r15
 494               	.LCFI13:
 495               		.cfi_def_cfa_offset 12
 496               		.cfi_offset 15, -11
 497 0014 0F93      		push r16
 498               	.LCFI14:
 499               		.cfi_def_cfa_offset 13
 500               		.cfi_offset 16, -12
 501 0016 1F93      		push r17
 502               	.LCFI15:
 503               		.cfi_def_cfa_offset 14
 504               		.cfi_offset 17, -13
 505 0018 CF93      		push r28
 506               	.LCFI16:
 507               		.cfi_def_cfa_offset 15
 508               		.cfi_offset 28, -14
 509 001a DF93      		push r29
 510               	.LCFI17:
 511               		.cfi_def_cfa_offset 16
 512               		.cfi_offset 29, -15
 513 001c CDB7      		in r28,__SP_L__
 514 001e DEB7      		in r29,__SP_H__
 515               	.LCFI18:
 516               		.cfi_def_cfa_register 28
 517               	/* prologue: function */
 518               	/* frame size = 0 */
 519               	/* stack size = 14 */
 520               	.L__stack_usage = 14
 162:quantum/process_keycode/process_unicode_common.c ****   if (!str) { return; }
 163:quantum/process_keycode/process_unicode_common.c **** 
 164:quantum/process_keycode/process_unicode_common.c ****   while (*str) {
 165:quantum/process_keycode/process_unicode_common.c ****     // Find the next code point (token) in the string
 166:quantum/process_keycode/process_unicode_common.c ****     for (; *str == ' '; str++);
 167:quantum/process_keycode/process_unicode_common.c ****     size_t n = strcspn(str, " "); // Length of the current token
 168:quantum/process_keycode/process_unicode_common.c ****     char code_point[n+1];
 169:quantum/process_keycode/process_unicode_common.c ****     strncpy(code_point, str, n);
 170:quantum/process_keycode/process_unicode_common.c ****     code_point[n] = '\0'; // Make sure it's null-terminated
 171:quantum/process_keycode/process_unicode_common.c **** 
 172:quantum/process_keycode/process_unicode_common.c ****     // Normalize the code point: make all hex digits lowercase
 173:quantum/process_keycode/process_unicode_common.c ****     for (char *p = code_point; *p; p++) {
 174:quantum/process_keycode/process_unicode_common.c ****       *p = tolower((unsigned char)*p);
 175:quantum/process_keycode/process_unicode_common.c ****     }
 176:quantum/process_keycode/process_unicode_common.c **** 
 177:quantum/process_keycode/process_unicode_common.c ****     // Send the code point as a Unicode input string
 178:quantum/process_keycode/process_unicode_common.c ****     unicode_input_start();
 179:quantum/process_keycode/process_unicode_common.c ****     send_string(code_point);
 180:quantum/process_keycode/process_unicode_common.c ****     unicode_input_finish();
 181:quantum/process_keycode/process_unicode_common.c **** 
 182:quantum/process_keycode/process_unicode_common.c ****     str += n; // Move to the first ' ' (or '\0') after the current token
 183:quantum/process_keycode/process_unicode_common.c ****   }
 184:quantum/process_keycode/process_unicode_common.c **** }
 521               		.loc 1 184 1 view .LVU94
 522 0020 6DB6      		in r6,__SP_L__
 523 0022 7EB6      		in r7,__SP_H__
 162:quantum/process_keycode/process_unicode_common.c ****   if (!str) { return; }
 524               		.loc 1 162 3 is_stmt 1 view .LVU95
 162:quantum/process_keycode/process_unicode_common.c ****   if (!str) { return; }
 525               		.loc 1 162 6 is_stmt 0 view .LVU96
 526 0024 0097      		sbiw r24,0
 527 0026 01F0      		breq .+2
 528 0028 00C0      		rjmp .L50
 529               	.L48:
 530               		.loc 1 184 1 view .LVU97
 531 002a 0FB6      		in __tmp_reg__,__SREG__
 532 002c F894      		cli
 533 002e 7EBE      		out __SP_H__,r7
 534 0030 0FBE      		out __SREG__,__tmp_reg__
 535 0032 6DBE      		out __SP_L__,r6
 536               	/* epilogue start */
 537 0034 DF91      		pop r29
 538 0036 CF91      		pop r28
 539 0038 1F91      		pop r17
 540 003a 0F91      		pop r16
 541 003c FF90      		pop r15
 542 003e EF90      		pop r14
 543 0040 DF90      		pop r13
 544 0042 CF90      		pop r12
 545 0044 BF90      		pop r11
 546 0046 AF90      		pop r10
 547 0048 9F90      		pop r9
 548 004a 8F90      		pop r8
 549 004c 7F90      		pop r7
 550 004e 6F90      		pop r6
 551 0050 0895      		ret
 552               	.LVL35:
 553               	.L51:
 554               		.loc 1 184 1 view .LVU98
 555 0052 7F01      		movw r14,r30
 556               	.LVL36:
 557               	.LBB9:
 166:quantum/process_keycode/process_unicode_common.c ****     size_t n = strcspn(str, " "); // Length of the current token
 558               		.loc 1 166 5 discriminator 1 view .LVU99
 559 0054 8191      		ld r24,Z+
 560 0056 8032      		cpi r24,lo8(32)
 561 0058 01F0      		breq .L51
 167:quantum/process_keycode/process_unicode_common.c ****     char code_point[n+1];
 562               		.loc 1 167 5 is_stmt 1 view .LVU100
 167:quantum/process_keycode/process_unicode_common.c ****     char code_point[n+1];
 563               		.loc 1 167 16 is_stmt 0 view .LVU101
 564 005a 60E0      		ldi r22,lo8(.LC0)
 565 005c 70E0      		ldi r23,hi8(.LC0)
 566 005e C701      		movw r24,r14
 567 0060 0E94 0000 		call strcspn
 568               	.LVL37:
 569 0064 8C01      		movw r16,r24
 570               	.LVL38:
 168:quantum/process_keycode/process_unicode_common.c ****     strncpy(code_point, str, n);
 571               		.loc 1 168 5 is_stmt 1 view .LVU102
 572 0066 8DB6      		in r8,__SP_L__
 573 0068 9EB6      		in r9,__SP_H__
 574               	.LVL39:
 168:quantum/process_keycode/process_unicode_common.c ****     strncpy(code_point, str, n);
 575               		.loc 1 168 22 is_stmt 0 view .LVU103
 576 006a 0196      		adiw r24,1
 168:quantum/process_keycode/process_unicode_common.c ****     strncpy(code_point, str, n);
 577               		.loc 1 168 10 view .LVU104
 578 006c 2DB7      		in r18,__SP_L__
 579 006e 3EB7      		in r19,__SP_H__
 580 0070 281B      		sub r18,r24
 581 0072 390B      		sbc r19,r25
 582 0074 0FB6      		in __tmp_reg__,__SREG__
 583 0076 F894      		cli
 584 0078 3EBF      		out __SP_H__,r19
 585 007a 0FBE      		out __SREG__,__tmp_reg__
 586 007c 2DBF      		out __SP_L__,r18
 587 007e 8DB7      		in r24,__SP_L__
 588 0080 9EB7      		in r25,__SP_H__
 589 0082 0196      		adiw r24,1
 590 0084 6C01      		movw r12,r24
 591               	.LVL40:
 169:quantum/process_keycode/process_unicode_common.c ****     code_point[n] = '\0'; // Make sure it's null-terminated
 592               		.loc 1 169 5 is_stmt 1 view .LVU105
 593 0086 A801      		movw r20,r16
 594 0088 B701      		movw r22,r14
 595 008a 0E94 0000 		call strncpy
 596               	.LVL41:
 170:quantum/process_keycode/process_unicode_common.c **** 
 597               		.loc 1 170 5 view .LVU106
 170:quantum/process_keycode/process_unicode_common.c **** 
 598               		.loc 1 170 19 is_stmt 0 view .LVU107
 599 008e F601      		movw r30,r12
 600 0090 E00F      		add r30,r16
 601 0092 F11F      		adc r31,r17
 602 0094 1082      		st Z,__zero_reg__
 173:quantum/process_keycode/process_unicode_common.c ****       *p = tolower((unsigned char)*p);
 603               		.loc 1 173 5 is_stmt 1 view .LVU108
 604               	.LBB10:
 173:quantum/process_keycode/process_unicode_common.c ****       *p = tolower((unsigned char)*p);
 605               		.loc 1 173 10 view .LVU109
 606               	.LVL42:
 173:quantum/process_keycode/process_unicode_common.c ****       *p = tolower((unsigned char)*p);
 607               		.loc 1 173 10 is_stmt 0 view .LVU110
 608 0096 5601      		movw r10,r12
 609               	.LVL43:
 610               	.L52:
 173:quantum/process_keycode/process_unicode_common.c ****       *p = tolower((unsigned char)*p);
 611               		.loc 1 173 32 discriminator 1 view .LVU111
 612 0098 F501      		movw r30,r10
 613 009a 8191      		ld r24,Z+
 614 009c 5F01      		movw r10,r30
 615               	.LVL44:
 173:quantum/process_keycode/process_unicode_common.c ****       *p = tolower((unsigned char)*p);
 616               		.loc 1 173 5 discriminator 1 view .LVU112
 617 009e 8111      		cpse r24,__zero_reg__
 618 00a0 00C0      		rjmp .L53
 619               	.LBE10:
 178:quantum/process_keycode/process_unicode_common.c ****     send_string(code_point);
 620               		.loc 1 178 5 is_stmt 1 view .LVU113
 621 00a2 0E94 0000 		call unicode_input_start
 622               	.LVL45:
 179:quantum/process_keycode/process_unicode_common.c ****     unicode_input_finish();
 623               		.loc 1 179 5 view .LVU114
 624 00a6 C601      		movw r24,r12
 625 00a8 0E94 0000 		call send_string
 626               	.LVL46:
 180:quantum/process_keycode/process_unicode_common.c **** 
 627               		.loc 1 180 5 view .LVU115
 628 00ac 0E94 0000 		call unicode_input_finish
 629               	.LVL47:
 182:quantum/process_keycode/process_unicode_common.c ****   }
 630               		.loc 1 182 5 view .LVU116
 182:quantum/process_keycode/process_unicode_common.c ****   }
 631               		.loc 1 182 9 is_stmt 0 view .LVU117
 632 00b0 C701      		movw r24,r14
 633 00b2 800F      		add r24,r16
 634 00b4 911F      		adc r25,r17
 635               	.LVL48:
 182:quantum/process_keycode/process_unicode_common.c ****   }
 636               		.loc 1 182 9 view .LVU118
 637 00b6 0FB6      		in __tmp_reg__,__SREG__
 638 00b8 F894      		cli
 639 00ba 9EBE      		out __SP_H__,r9
 640 00bc 0FBE      		out __SREG__,__tmp_reg__
 641 00be 8DBE      		out __SP_L__,r8
 642               	.LVL49:
 643               	.L50:
 182:quantum/process_keycode/process_unicode_common.c ****   }
 644               		.loc 1 182 9 view .LVU119
 645               	.LBE9:
 164:quantum/process_keycode/process_unicode_common.c ****     // Find the next code point (token) in the string
 646               		.loc 1 164 9 view .LVU120
 647 00c0 FC01      		movw r30,r24
 648 00c2 2081      		ld r18,Z
 649 00c4 2111      		cpse r18,__zero_reg__
 650 00c6 00C0      		rjmp .L51
 164:quantum/process_keycode/process_unicode_common.c ****     // Find the next code point (token) in the string
 651               		.loc 1 164 9 view .LVU121
 652 00c8 00C0      		rjmp .L48
 653               	.LVL50:
 654               	.L53:
 655               	.LBB12:
 656               	.LBB11:
 174:quantum/process_keycode/process_unicode_common.c ****     }
 657               		.loc 1 174 7 is_stmt 1 discriminator 3 view .LVU122
 174:quantum/process_keycode/process_unicode_common.c ****     }
 658               		.loc 1 174 12 is_stmt 0 discriminator 3 view .LVU123
 659 00ca 90E0      		ldi r25,0
 660 00cc 0E94 0000 		call tolower
 661               	.LVL51:
 174:quantum/process_keycode/process_unicode_common.c ****     }
 662               		.loc 1 174 10 discriminator 3 view .LVU124
 663 00d0 F501      		movw r30,r10
 664 00d2 3197      		sbiw r30,1
 665 00d4 8083      		st Z,r24
 666               	.LVL52:
 174:quantum/process_keycode/process_unicode_common.c ****     }
 667               		.loc 1 174 10 discriminator 3 view .LVU125
 668 00d6 00C0      		rjmp .L52
 669               	.LBE11:
 670               	.LBE12:
 671               		.cfi_endproc
 672               	.LFE121:
 674               		.section	.text.process_unicode_common,"ax",@progbits
 675               	.global	process_unicode_common
 677               	process_unicode_common:
 678               	.LVL53:
 679               	.LFB122:
 185:quantum/process_keycode/process_unicode_common.c **** 
 186:quantum/process_keycode/process_unicode_common.c **** bool process_unicode_common(uint16_t keycode, keyrecord_t *record) {
 680               		.loc 1 186 68 is_stmt 1 view -0
 681               		.cfi_startproc
 682               		.loc 1 186 68 is_stmt 0 view .LVU127
 683 0000 0F93      		push r16
 684               	.LCFI19:
 685               		.cfi_def_cfa_offset 3
 686               		.cfi_offset 16, -2
 687 0002 1F93      		push r17
 688               	.LCFI20:
 689               		.cfi_def_cfa_offset 4
 690               		.cfi_offset 17, -3
 691 0004 CF93      		push r28
 692               	.LCFI21:
 693               		.cfi_def_cfa_offset 5
 694               		.cfi_offset 28, -4
 695 0006 DF93      		push r29
 696               	.LCFI22:
 697               		.cfi_def_cfa_offset 6
 698               		.cfi_offset 29, -5
 699               	/* prologue: function */
 700               	/* frame size = 0 */
 701               	/* stack size = 4 */
 702               	.L__stack_usage = 4
 703 0008 EC01      		movw r28,r24
 704 000a 8B01      		movw r16,r22
 187:quantum/process_keycode/process_unicode_common.c ****   if (record->event.pressed) {
 705               		.loc 1 187 3 is_stmt 1 view .LVU128
 706               		.loc 1 187 6 is_stmt 0 view .LVU129
 707 000c FB01      		movw r30,r22
 708 000e 8281      		ldd r24,Z+2
 709               	.LVL54:
 710               		.loc 1 187 6 view .LVU130
 711 0010 8823      		tst r24
 712 0012 01F0      		breq .L63
 188:quantum/process_keycode/process_unicode_common.c ****     switch (keycode) {
 713               		.loc 1 188 5 is_stmt 1 view .LVU131
 714 0014 C33E      		cpi r28,-29
 715 0016 FCE5      		ldi r31,92
 716 0018 DF07      		cpc r29,r31
 717 001a 01F0      		breq .L64
 718 001c 00F4      		brsh .L65
 719 001e C13E      		cpi r28,-31
 720 0020 ECE5      		ldi r30,92
 721 0022 DE07      		cpc r29,r30
 722 0024 01F0      		breq .L66
 723               	.LBB23:
 724               	.LBB24:
  60:quantum/process_keycode/process_unicode_common.c ****   persist_unicode_input_mode();
 725               		.loc 1 60 29 is_stmt 0 view .LVU132
 726 0026 81E0      		ldi r24,lo8(1)
 727 0028 C23E      		cpi r28,-30
 728 002a FCE5      		ldi r31,92
 729 002c DF07      		cpc r29,r31
 730 002e 01F0      		breq .L73
 731               	.LVL55:
 732               	.L63:
  60:quantum/process_keycode/process_unicode_common.c ****   persist_unicode_input_mode();
 733               		.loc 1 60 29 view .LVU133
 734               	.LBE24:
 735               	.LBE23:
 189:quantum/process_keycode/process_unicode_common.c ****     case UNICODE_MODE_FORWARD:
 190:quantum/process_keycode/process_unicode_common.c ****       cycle_unicode_input_mode(+1);
 191:quantum/process_keycode/process_unicode_common.c ****       break;
 192:quantum/process_keycode/process_unicode_common.c ****     case UNICODE_MODE_REVERSE:
 193:quantum/process_keycode/process_unicode_common.c ****       cycle_unicode_input_mode(-1);
 194:quantum/process_keycode/process_unicode_common.c ****       break;
 195:quantum/process_keycode/process_unicode_common.c **** 
 196:quantum/process_keycode/process_unicode_common.c ****     case UNICODE_MODE_OSX:
 197:quantum/process_keycode/process_unicode_common.c ****       set_unicode_input_mode(UC_OSX);
 198:quantum/process_keycode/process_unicode_common.c **** #if defined(AUDIO_ENABLE) && defined(UNICODE_SONG_OSX)
 199:quantum/process_keycode/process_unicode_common.c ****       static float song_osx[][2] = UNICODE_SONG_OSX;
 200:quantum/process_keycode/process_unicode_common.c ****       PLAY_SONG(song_osx);
 201:quantum/process_keycode/process_unicode_common.c **** #endif
 202:quantum/process_keycode/process_unicode_common.c ****       break;
 203:quantum/process_keycode/process_unicode_common.c ****     case UNICODE_MODE_LNX:
 204:quantum/process_keycode/process_unicode_common.c ****       set_unicode_input_mode(UC_LNX);
 205:quantum/process_keycode/process_unicode_common.c **** #if defined(AUDIO_ENABLE) && defined(UNICODE_SONG_LNX)
 206:quantum/process_keycode/process_unicode_common.c ****       static float song_lnx[][2] = UNICODE_SONG_LNX;
 207:quantum/process_keycode/process_unicode_common.c ****       PLAY_SONG(song_lnx);
 208:quantum/process_keycode/process_unicode_common.c **** #endif
 209:quantum/process_keycode/process_unicode_common.c ****       break;
 210:quantum/process_keycode/process_unicode_common.c ****     case UNICODE_MODE_WIN:
 211:quantum/process_keycode/process_unicode_common.c ****       set_unicode_input_mode(UC_WIN);
 212:quantum/process_keycode/process_unicode_common.c **** #if defined(AUDIO_ENABLE) && defined(UNICODE_SONG_WIN)
 213:quantum/process_keycode/process_unicode_common.c ****       static float song_win[][2] = UNICODE_SONG_WIN;
 214:quantum/process_keycode/process_unicode_common.c ****       PLAY_SONG(song_win);
 215:quantum/process_keycode/process_unicode_common.c **** #endif
 216:quantum/process_keycode/process_unicode_common.c ****       break;
 217:quantum/process_keycode/process_unicode_common.c ****     case UNICODE_MODE_BSD:
 218:quantum/process_keycode/process_unicode_common.c ****       set_unicode_input_mode(UC_BSD);
 219:quantum/process_keycode/process_unicode_common.c **** #if defined(AUDIO_ENABLE) && defined(UNICODE_SONG_BSD)
 220:quantum/process_keycode/process_unicode_common.c ****       static float song_bsd[][2] = UNICODE_SONG_BSD;
 221:quantum/process_keycode/process_unicode_common.c ****       PLAY_SONG(song_bsd);
 222:quantum/process_keycode/process_unicode_common.c **** #endif
 223:quantum/process_keycode/process_unicode_common.c ****       break;
 224:quantum/process_keycode/process_unicode_common.c ****     case UNICODE_MODE_WINC:
 225:quantum/process_keycode/process_unicode_common.c ****       set_unicode_input_mode(UC_WINC);
 226:quantum/process_keycode/process_unicode_common.c **** #if defined(AUDIO_ENABLE) && defined(UNICODE_SONG_WINC)
 227:quantum/process_keycode/process_unicode_common.c ****       static float song_winc[][2] = UNICODE_SONG_WINC;
 228:quantum/process_keycode/process_unicode_common.c ****       PLAY_SONG(song_winc);
 229:quantum/process_keycode/process_unicode_common.c **** #endif
 230:quantum/process_keycode/process_unicode_common.c ****       break;
 231:quantum/process_keycode/process_unicode_common.c ****     }
 232:quantum/process_keycode/process_unicode_common.c ****   }
 233:quantum/process_keycode/process_unicode_common.c **** #if   defined(UNICODE_ENABLE)
 234:quantum/process_keycode/process_unicode_common.c ****   return process_unicode(keycode, record);
 736               		.loc 1 234 3 is_stmt 1 view .LVU134
 737               		.loc 1 234 10 is_stmt 0 view .LVU135
 738 0030 B801      		movw r22,r16
 739 0032 CE01      		movw r24,r28
 740               	/* epilogue start */
 235:quantum/process_keycode/process_unicode_common.c **** #elif defined(UNICODEMAP_ENABLE)
 236:quantum/process_keycode/process_unicode_common.c ****   return process_unicodemap(keycode, record);
 237:quantum/process_keycode/process_unicode_common.c **** #elif defined(UCIS_ENABLE)
 238:quantum/process_keycode/process_unicode_common.c ****   return process_ucis(keycode, record);
 239:quantum/process_keycode/process_unicode_common.c **** #else
 240:quantum/process_keycode/process_unicode_common.c ****   return true;
 241:quantum/process_keycode/process_unicode_common.c **** #endif
 242:quantum/process_keycode/process_unicode_common.c **** }
 741               		.loc 1 242 1 view .LVU136
 742 0034 DF91      		pop r29
 743 0036 CF91      		pop r28
 744               	.LVL56:
 745               		.loc 1 242 1 view .LVU137
 746 0038 1F91      		pop r17
 747 003a 0F91      		pop r16
 748               	.LVL57:
 234:quantum/process_keycode/process_unicode_common.c **** #elif defined(UNICODEMAP_ENABLE)
 749               		.loc 1 234 10 view .LVU138
 750 003c 0C94 0000 		jmp process_unicode
 751               	.LVL58:
 752               	.L65:
 234:quantum/process_keycode/process_unicode_common.c **** #elif defined(UNICODEMAP_ENABLE)
 753               		.loc 1 234 10 view .LVU139
 754 0040 C43E      		cpi r28,-28
 755 0042 8CE5      		ldi r24,92
 756 0044 D807      		cpc r29,r24
 757 0046 01F0      		breq .L68
 758               	.LBB25:
 759               	.LBB26:
  60:quantum/process_keycode/process_unicode_common.c ****   persist_unicode_input_mode();
 760               		.loc 1 60 29 view .LVU140
 761 0048 84E0      		ldi r24,lo8(4)
 762 004a C53E      		cpi r28,-27
 763 004c ECE5      		ldi r30,92
 764 004e DE07      		cpc r29,r30
 765 0050 01F4      		brne .L63
 766               	.L73:
 767 0052 8093 0000 		sts unicode_config,r24
 768 0056 00C0      		rjmp .L74
 769               	.L66:
 770               	.LBE26:
 771               	.LBE25:
 197:quantum/process_keycode/process_unicode_common.c **** #if defined(AUDIO_ENABLE) && defined(UNICODE_SONG_OSX)
 772               		.loc 1 197 7 is_stmt 1 view .LVU141
 773               	.LVL59:
 774               	.LBB28:
 775               	.LBI28:
  59:quantum/process_keycode/process_unicode_common.c ****   unicode_config.input_mode = mode;
 776               		.loc 1 59 6 view .LVU142
 777               	.LBB29:
  60:quantum/process_keycode/process_unicode_common.c ****   persist_unicode_input_mode();
 778               		.loc 1 60 3 view .LVU143
  60:quantum/process_keycode/process_unicode_common.c ****   persist_unicode_input_mode();
 779               		.loc 1 60 29 is_stmt 0 view .LVU144
 780 0058 1092 0000 		sts unicode_config,__zero_reg__
  61:quantum/process_keycode/process_unicode_common.c ****   dprintf("Unicode input mode set to: %u\n", unicode_config.input_mode);
 781               		.loc 1 61 3 is_stmt 1 view .LVU145
 782               	.LVL60:
 783               	.L74:
  61:quantum/process_keycode/process_unicode_common.c ****   dprintf("Unicode input mode set to: %u\n", unicode_config.input_mode);
 784               		.loc 1 61 3 is_stmt 0 view .LVU146
 785               	.LBE29:
 786               	.LBE28:
 787               	.LBB30:
 788               	.LBB27:
  61:quantum/process_keycode/process_unicode_common.c ****   dprintf("Unicode input mode set to: %u\n", unicode_config.input_mode);
 789               		.loc 1 61 3 is_stmt 1 view .LVU147
 790 005c 0E94 0000 		call persist_unicode_input_mode
 791               	.LVL61:
  62:quantum/process_keycode/process_unicode_common.c **** }
 792               		.loc 1 62 72 view .LVU148
 793 0060 00C0      		rjmp .L63
 794               	.L64:
  62:quantum/process_keycode/process_unicode_common.c **** }
 795               		.loc 1 62 72 is_stmt 0 view .LVU149
 796               	.LBE27:
 797               	.LBE30:
 211:quantum/process_keycode/process_unicode_common.c **** #if defined(AUDIO_ENABLE) && defined(UNICODE_SONG_WIN)
 798               		.loc 1 211 7 is_stmt 1 view .LVU150
 799               	.LVL62:
 800               	.LBB31:
 801               	.LBI31:
  59:quantum/process_keycode/process_unicode_common.c ****   unicode_config.input_mode = mode;
 802               		.loc 1 59 6 view .LVU151
 803               	.LBB32:
  60:quantum/process_keycode/process_unicode_common.c ****   persist_unicode_input_mode();
 804               		.loc 1 60 3 view .LVU152
  60:quantum/process_keycode/process_unicode_common.c ****   persist_unicode_input_mode();
 805               		.loc 1 60 29 is_stmt 0 view .LVU153
 806 0062 82E0      		ldi r24,lo8(2)
 807 0064 00C0      		rjmp .L73
 808               	.LVL63:
 809               	.L68:
  60:quantum/process_keycode/process_unicode_common.c ****   persist_unicode_input_mode();
 810               		.loc 1 60 29 view .LVU154
 811               	.LBE32:
 812               	.LBE31:
 218:quantum/process_keycode/process_unicode_common.c **** #if defined(AUDIO_ENABLE) && defined(UNICODE_SONG_BSD)
 813               		.loc 1 218 7 is_stmt 1 view .LVU155
 814               	.LBB33:
 815               	.LBI33:
  59:quantum/process_keycode/process_unicode_common.c ****   unicode_config.input_mode = mode;
 816               		.loc 1 59 6 view .LVU156
 817               	.LBB34:
  60:quantum/process_keycode/process_unicode_common.c ****   persist_unicode_input_mode();
 818               		.loc 1 60 3 view .LVU157
  60:quantum/process_keycode/process_unicode_common.c ****   persist_unicode_input_mode();
 819               		.loc 1 60 29 is_stmt 0 view .LVU158
 820 0066 83E0      		ldi r24,lo8(3)
 821 0068 00C0      		rjmp .L73
 822               	.LBE34:
 823               	.LBE33:
 824               		.cfi_endproc
 825               	.LFE122:
 827               		.comm	unicode_saved_mods,1,1
 828               		.comm	unicode_config,4,1
 829               		.text
 830               	.Letext0:
 831               		.file 3 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/stdint.h"
 832               		.file 4 "/usr/local/Cellar/avr-gcc/8.1.0/lib/avr-gcc/8/gcc/avr/8.1.0/include/stddef.h"
 833               		.file 5 "tmk_core/common/keyboard.h"
 834               		.file 6 "tmk_core/common/action.h"
 835               		.file 7 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 836               		.file 8 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 837               		.file 9 "lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 838               		.file 10 "lib/lufa/LUFA/Drivers/USB/Core/HostStandardReq.h"
 839               		.file 11 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/stdio.h"
 840               		.file 12 "tmk_core/common/report.h"
 841               		.file 13 "tmk_core/common/host.h"
 842               		.file 14 "tmk_core/common/debug.h"
 843               		.file 15 "quantum/keycode_config.h"
 844               		.file 16 "tmk_core/common/keycode.h"
 845               		.file 17 "quantum/quantum_keycodes.h"
 846               		.file 18 "quantum/keymap.h"
 847               		.file 19 "quantum/rgblight_types.h"
 848               		.file 20 "quantum/rgblight.h"
 849               		.file 21 "tmk_core/common/action_layer.h"
 850               		.file 22 "tmk_core/common/timer.h"
 851               		.file 23 "tmk_core/common/action_util.h"
 852               		.file 24 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/stdlib.h"
 853               		.file 25 "quantum/quantum.h"
 854               		.file 26 "quantum/process_keycode/process_unicode_common.h"
 855               		.file 27 "quantum/process_keycode/process_unicode.h"
 856               		.file 28 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/ctype.h"
 857               		.file 29 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/string.h"
 858               		.file 30 "/usr/local/Cellar/avr-gcc/8.1.0/avr/include/avr/eeprom.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 process_unicode_common.c
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccr0v8iI.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccr0v8iI.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccr0v8iI.s:4      *ABS*:000000000000003f __SREG__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccr0v8iI.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccr0v8iI.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccr0v8iI.s:13     .text.unicode_input_mode_init:0000000000000000 unicode_input_mode_init
                            *COM*:0000000000000004 unicode_config
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccr0v8iI.s:45     .text.get_unicode_input_mode:0000000000000000 get_unicode_input_mode
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccr0v8iI.s:64     .text.cycle_unicode_input_mode:0000000000000000 cycle_unicode_input_mode
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccr0v8iI.s:82     .text.persist_unicode_input_mode:0000000000000000 persist_unicode_input_mode
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccr0v8iI.s:102    .text.set_unicode_input_mode:0000000000000000 set_unicode_input_mode
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccr0v8iI.s:124    .text.unicode_input_start:0000000000000000 unicode_input_start
                            *COM*:0000000000000001 unicode_saved_mods
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccr0v8iI.s:221    .text.unicode_input_finish:0000000000000000 unicode_input_finish
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccr0v8iI.s:271    .text.unicode_input_cancel:0000000000000000 unicode_input_cancel
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccr0v8iI.s:314    .text.hex_to_keycode:0000000000000000 hex_to_keycode
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccr0v8iI.s:361    .text.register_hex:0000000000000000 register_hex
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccr0v8iI.s:451    .text.send_unicode_hex_string:0000000000000000 send_unicode_hex_string
/var/folders/_c/44sm70yj4mq2k0mvzts6tsbc0000gn/T//ccr0v8iI.s:677    .text.process_unicode_common:0000000000000000 process_unicode_common

UNDEFINED SYMBOLS
eeprom_read_byte
eeprom_update_byte
get_mods
clear_mods
register_code
tap_code16
tap_code
set_mods
unregister_code
strcspn
strncpy
send_string
tolower
process_unicode
__do_copy_data
__do_clear_bss
